
solar_sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d10  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08009fc0  08009fc0  00019fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a3dc  0800a3dc  0001a3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a3e4  0800a3e4  0001a3e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a3e8  0800a3e8  0001a3e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800a3ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000128  240001e0  0800a5cc  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000308  0800a5cc  00020308  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014468  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002462  00000000  00000000  00034676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f08  00000000  00000000  00036ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e30  00000000  00000000  000379e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031c20  00000000  00000000  00038810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012644  00000000  00000000  0006a430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001489f8  00000000  00000000  0007ca74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c546c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004f1c  00000000  00000000  001c54bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001e0 	.word	0x240001e0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009fa8 	.word	0x08009fa8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e4 	.word	0x240001e4
 80002ec:	08009fa8 	.word	0x08009fa8

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	0000      	movs	r0, r0
	...

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f000 fe38 	bl	8001324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f8b8 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 fa30 	bl	8000b1c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006bc:	f000 f9da 	bl	8000a74 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006c0:	f000 fa24 	bl	8000b0c <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80006c4:	f000 f92a 	bl	800091c <MX_ADC1_Init>
  uint16_t solars[4];
  float voltages[4];
  char msg[1000];
      while (1)
      {
    	  memset(solars, 0, sizeof(solars));
 80006c8:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80006cc:	2208      	movs	r2, #8
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f006 fe23 	bl	800731c <memset>
    	  for(uint8_t i=0;i<4;i++) //read all solar cells
 80006d6:	2300      	movs	r3, #0
 80006d8:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
 80006dc:	e01c      	b.n	8000718 <main+0x70>
    	  {
    	  	  HAL_ADC_Start(&hadc1);
 80006de:	484e      	ldr	r0, [pc, #312]	; (8000818 <main+0x170>)
 80006e0:	f001 fa12 	bl	8001b08 <HAL_ADC_Start>
    	  	  HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 80006e4:	f04f 31ff 	mov.w	r1, #4294967295
 80006e8:	484b      	ldr	r0, [pc, #300]	; (8000818 <main+0x170>)
 80006ea:	f001 fac7 	bl	8001c7c <HAL_ADC_PollForConversion>
    		  solars[i] = HAL_ADC_GetValue(&hadc1);
 80006ee:	484a      	ldr	r0, [pc, #296]	; (8000818 <main+0x170>)
 80006f0:	f001 fb9c 	bl	8001e2c <HAL_ADC_GetValue>
 80006f4:	4602      	mov	r2, r0
 80006f6:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 80006fa:	b292      	uxth	r2, r2
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8000702:	443b      	add	r3, r7
 8000704:	f823 2c14 	strh.w	r2, [r3, #-20]
    		  HAL_Delay(1);
 8000708:	2001      	movs	r0, #1
 800070a:	f000 fe9d 	bl	8001448 <HAL_Delay>
    	  for(uint8_t i=0;i<4;i++) //read all solar cells
 800070e:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8000712:	3301      	adds	r3, #1
 8000714:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
 8000718:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 800071c:	2b03      	cmp	r3, #3
 800071e:	d9de      	bls.n	80006de <main+0x36>
    	  }
    	  for(int i=0;i<4;++i)
 8000720:	2300      	movs	r3, #0
 8000722:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8000726:	e023      	b.n	8000770 <main+0xc8>
    	  {
//    		  voltages[i]/=5;
    		  voltages[i] = solars[i]*3.3/(65535);
 8000728:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8000732:	443b      	add	r3, r7
 8000734:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000738:	ee07 3a90 	vmov	s15, r3
 800073c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000740:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8000808 <main+0x160>
 8000744:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000748:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8000810 <main+0x168>
 800074c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000750:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000754:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800075e:	443b      	add	r3, r7
 8000760:	3b24      	subs	r3, #36	; 0x24
 8000762:	edc3 7a00 	vstr	s15, [r3]
    	  for(int i=0;i<4;++i)
 8000766:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800076a:	3301      	adds	r3, #1
 800076c:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8000770:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8000774:	2b03      	cmp	r3, #3
 8000776:	ddd7      	ble.n	8000728 <main+0x80>
    	  }

    	  for(int i=0;i<4;i++)
 8000778:	2300      	movs	r3, #0
 800077a:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800077e:	e039      	b.n	80007f4 <main+0x14c>
    	  	{
    	  		if(i==3)
 8000780:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8000784:	2b03      	cmp	r3, #3
 8000786:	d118      	bne.n	80007ba <main+0x112>
    	  			HAL_UART_Transmit(&huart3, (void*) msg, sprintf(&msg, "%f\n ", voltages[i]), 100);
 8000788:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8000792:	443b      	add	r3, r7
 8000794:	3b24      	subs	r3, #36	; 0x24
 8000796:	edd3 7a00 	vldr	s15, [r3]
 800079a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800079e:	1d38      	adds	r0, r7, #4
 80007a0:	ec53 2b17 	vmov	r2, r3, d7
 80007a4:	491d      	ldr	r1, [pc, #116]	; (800081c <main+0x174>)
 80007a6:	f007 fa05 	bl	8007bb4 <siprintf>
 80007aa:	4603      	mov	r3, r0
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	1d39      	adds	r1, r7, #4
 80007b0:	2364      	movs	r3, #100	; 0x64
 80007b2:	481b      	ldr	r0, [pc, #108]	; (8000820 <main+0x178>)
 80007b4:	f005 fbce 	bl	8005f54 <HAL_UART_Transmit>
 80007b8:	e017      	b.n	80007ea <main+0x142>
    	  		else
    	  			HAL_UART_Transmit(&huart3, (void*) msg, sprintf(&msg, "%f,", voltages[i]), 100);
 80007ba:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80007c4:	443b      	add	r3, r7
 80007c6:	3b24      	subs	r3, #36	; 0x24
 80007c8:	edd3 7a00 	vldr	s15, [r3]
 80007cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007d0:	1d38      	adds	r0, r7, #4
 80007d2:	ec53 2b17 	vmov	r2, r3, d7
 80007d6:	4913      	ldr	r1, [pc, #76]	; (8000824 <main+0x17c>)
 80007d8:	f007 f9ec 	bl	8007bb4 <siprintf>
 80007dc:	4603      	mov	r3, r0
 80007de:	b29a      	uxth	r2, r3
 80007e0:	1d39      	adds	r1, r7, #4
 80007e2:	2364      	movs	r3, #100	; 0x64
 80007e4:	480e      	ldr	r0, [pc, #56]	; (8000820 <main+0x178>)
 80007e6:	f005 fbb5 	bl	8005f54 <HAL_UART_Transmit>
    	  for(int i=0;i<4;i++)
 80007ea:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80007ee:	3301      	adds	r3, #1
 80007f0:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80007f4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80007f8:	2b03      	cmp	r3, #3
 80007fa:	ddc1      	ble.n	8000780 <main+0xd8>
    	  	}
    	  	HAL_Delay(10);
 80007fc:	200a      	movs	r0, #10
 80007fe:	f000 fe23 	bl	8001448 <HAL_Delay>
      {
 8000802:	e761      	b.n	80006c8 <main+0x20>
 8000804:	f3af 8000 	nop.w
 8000808:	66666666 	.word	0x66666666
 800080c:	400a6666 	.word	0x400a6666
 8000810:	00000000 	.word	0x00000000
 8000814:	40efffe0 	.word	0x40efffe0
 8000818:	240001fc 	.word	0x240001fc
 800081c:	08009fc0 	.word	0x08009fc0
 8000820:	24000260 	.word	0x24000260
 8000824:	08009fc8 	.word	0x08009fc8

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b09c      	sub	sp, #112	; 0x70
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000832:	224c      	movs	r2, #76	; 0x4c
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f006 fd70 	bl	800731c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2220      	movs	r2, #32
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f006 fd6a 	bl	800731c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000848:	2004      	movs	r0, #4
 800084a:	f002 fa9b 	bl	8002d84 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b30      	ldr	r3, [pc, #192]	; (8000914 <SystemClock_Config+0xec>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	4a2f      	ldr	r2, [pc, #188]	; (8000914 <SystemClock_Config+0xec>)
 8000858:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800085c:	6193      	str	r3, [r2, #24]
 800085e:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <SystemClock_Config+0xec>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800086a:	bf00      	nop
 800086c:	4b29      	ldr	r3, [pc, #164]	; (8000914 <SystemClock_Config+0xec>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000878:	d1f8      	bne.n	800086c <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800087a:	4b27      	ldr	r3, [pc, #156]	; (8000918 <SystemClock_Config+0xf0>)
 800087c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800087e:	f023 0303 	bic.w	r3, r3, #3
 8000882:	4a25      	ldr	r2, [pc, #148]	; (8000918 <SystemClock_Config+0xf0>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800088a:	2321      	movs	r3, #33	; 0x21
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800088e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000894:	2301      	movs	r3, #1
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000898:	2302      	movs	r3, #2
 800089a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089c:	2302      	movs	r3, #2
 800089e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008a0:	2301      	movs	r3, #1
 80008a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 80008a4:	2310      	movs	r3, #16
 80008a6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008ac:	2304      	movs	r3, #4
 80008ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008b4:	230c      	movs	r3, #12
 80008b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c4:	4618      	mov	r0, r3
 80008c6:	f002 fab7 	bl	8002e38 <HAL_RCC_OscConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80008d0:	f000 fa3e 	bl	8000d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d4:	233f      	movs	r3, #63	; 0x3f
 80008d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d8:	2303      	movs	r3, #3
 80008da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 80008e0:	2309      	movs	r3, #9
 80008e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008e4:	2340      	movs	r3, #64	; 0x40
 80008e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008e8:	2340      	movs	r3, #64	; 0x40
 80008ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f002 fea0 	bl	8003640 <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000906:	f000 fa23 	bl	8000d50 <Error_Handler>
  }
}
 800090a:	bf00      	nop
 800090c:	3770      	adds	r7, #112	; 0x70
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	58024800 	.word	0x58024800
 8000918:	58024400 	.word	0x58024400

0800091c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800092e:	463b      	mov	r3, r7
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
 800093c:	615a      	str	r2, [r3, #20]
 800093e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000940:	4b46      	ldr	r3, [pc, #280]	; (8000a5c <MX_ADC1_Init+0x140>)
 8000942:	4a47      	ldr	r2, [pc, #284]	; (8000a60 <MX_ADC1_Init+0x144>)
 8000944:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000946:	4b45      	ldr	r3, [pc, #276]	; (8000a5c <MX_ADC1_Init+0x140>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800094c:	4b43      	ldr	r3, [pc, #268]	; (8000a5c <MX_ADC1_Init+0x140>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000952:	4b42      	ldr	r3, [pc, #264]	; (8000a5c <MX_ADC1_Init+0x140>)
 8000954:	2201      	movs	r2, #1
 8000956:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000958:	4b40      	ldr	r3, [pc, #256]	; (8000a5c <MX_ADC1_Init+0x140>)
 800095a:	2204      	movs	r2, #4
 800095c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800095e:	4b3f      	ldr	r3, [pc, #252]	; (8000a5c <MX_ADC1_Init+0x140>)
 8000960:	2200      	movs	r2, #0
 8000962:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000964:	4b3d      	ldr	r3, [pc, #244]	; (8000a5c <MX_ADC1_Init+0x140>)
 8000966:	2200      	movs	r2, #0
 8000968:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 4;
 800096a:	4b3c      	ldr	r3, [pc, #240]	; (8000a5c <MX_ADC1_Init+0x140>)
 800096c:	2204      	movs	r2, #4
 800096e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000970:	4b3a      	ldr	r3, [pc, #232]	; (8000a5c <MX_ADC1_Init+0x140>)
 8000972:	2201      	movs	r2, #1
 8000974:	771a      	strb	r2, [r3, #28]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000976:	4b39      	ldr	r3, [pc, #228]	; (8000a5c <MX_ADC1_Init+0x140>)
 8000978:	2201      	movs	r2, #1
 800097a:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800097c:	4b37      	ldr	r3, [pc, #220]	; (8000a5c <MX_ADC1_Init+0x140>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000982:	4b36      	ldr	r3, [pc, #216]	; (8000a5c <MX_ADC1_Init+0x140>)
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000988:	4b34      	ldr	r3, [pc, #208]	; (8000a5c <MX_ADC1_Init+0x140>)
 800098a:	2200      	movs	r2, #0
 800098c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800098e:	4b33      	ldr	r3, [pc, #204]	; (8000a5c <MX_ADC1_Init+0x140>)
 8000990:	2200      	movs	r2, #0
 8000992:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000994:	4b31      	ldr	r3, [pc, #196]	; (8000a5c <MX_ADC1_Init+0x140>)
 8000996:	2200      	movs	r2, #0
 8000998:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800099a:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <MX_ADC1_Init+0x140>)
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009a2:	482e      	ldr	r0, [pc, #184]	; (8000a5c <MX_ADC1_Init+0x140>)
 80009a4:	f000 ff56 	bl	8001854 <HAL_ADC_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80009ae:	f000 f9cf 	bl	8000d50 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4827      	ldr	r0, [pc, #156]	; (8000a5c <MX_ADC1_Init+0x140>)
 80009be:	f001 fe97 	bl	80026f0 <HAL_ADCEx_MultiModeConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80009c8:	f000 f9c2 	bl	8000d50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009cc:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <MX_ADC1_Init+0x148>)
 80009ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009d0:	2306      	movs	r3, #6
 80009d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009d8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009de:	2304      	movs	r3, #4
 80009e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ea:	463b      	mov	r3, r7
 80009ec:	4619      	mov	r1, r3
 80009ee:	481b      	ldr	r0, [pc, #108]	; (8000a5c <MX_ADC1_Init+0x140>)
 80009f0:	f001 fa2a 	bl	8001e48 <HAL_ADC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80009fa:	f000 f9a9 	bl	8000d50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_ADC1_Init+0x14c>)
 8000a00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a02:	230c      	movs	r3, #12
 8000a04:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a06:	463b      	mov	r3, r7
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4814      	ldr	r0, [pc, #80]	; (8000a5c <MX_ADC1_Init+0x140>)
 8000a0c:	f001 fa1c 	bl	8001e48 <HAL_ADC_ConfigChannel>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000a16:	f000 f99b 	bl	8000d50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_ADC1_Init+0x150>)
 8000a1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a1e:	2312      	movs	r3, #18
 8000a20:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a22:	463b      	mov	r3, r7
 8000a24:	4619      	mov	r1, r3
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <MX_ADC1_Init+0x140>)
 8000a28:	f001 fa0e 	bl	8001e48 <HAL_ADC_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000a32:	f000 f98d 	bl	8000d50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_ADC1_Init+0x154>)
 8000a38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a3a:	2318      	movs	r3, #24
 8000a3c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3e:	463b      	mov	r3, r7
 8000a40:	4619      	mov	r1, r3
 8000a42:	4806      	ldr	r0, [pc, #24]	; (8000a5c <MX_ADC1_Init+0x140>)
 8000a44:	f001 fa00 	bl	8001e48 <HAL_ADC_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000a4e:	f000 f97f 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	; 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	240001fc 	.word	0x240001fc
 8000a60:	40022000 	.word	0x40022000
 8000a64:	08600004 	.word	0x08600004
 8000a68:	2a000400 	.word	0x2a000400
 8000a6c:	3ef08000 	.word	0x3ef08000
 8000a70:	1d500080 	.word	0x1d500080

08000a74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a7a:	4a23      	ldr	r2, [pc, #140]	; (8000b08 <MX_USART3_UART_Init+0x94>)
 8000a7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000abc:	4811      	ldr	r0, [pc, #68]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000abe:	f005 f9f9 	bl	8005eb4 <HAL_UART_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ac8:	f000 f942 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	480d      	ldr	r0, [pc, #52]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000ad0:	f006 fb30 	bl	8007134 <HAL_UARTEx_SetTxFifoThreshold>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ada:	f000 f939 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4808      	ldr	r0, [pc, #32]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000ae2:	f006 fb65 	bl	80071b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000aec:	f000 f930 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000af2:	f006 fae6 	bl	80070c2 <HAL_UARTEx_DisableFifoMode>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000afc:	f000 f928 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	24000260 	.word	0x24000260
 8000b08:	40004800 	.word	0x40004800

08000b0c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08e      	sub	sp, #56	; 0x38
 8000b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4b80      	ldr	r3, [pc, #512]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000b34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b38:	4a7e      	ldr	r2, [pc, #504]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b42:	4b7c      	ldr	r3, [pc, #496]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000b44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	623b      	str	r3, [r7, #32]
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b50:	4b78      	ldr	r3, [pc, #480]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000b52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b56:	4a77      	ldr	r2, [pc, #476]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000b58:	f043 0320 	orr.w	r3, r3, #32
 8000b5c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b60:	4b74      	ldr	r3, [pc, #464]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000b62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b66:	f003 0320 	and.w	r3, r3, #32
 8000b6a:	61fb      	str	r3, [r7, #28]
 8000b6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6e:	4b71      	ldr	r3, [pc, #452]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000b70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b74:	4a6f      	ldr	r2, [pc, #444]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b7a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b7e:	4b6d      	ldr	r3, [pc, #436]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000b80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b88:	61bb      	str	r3, [r7, #24]
 8000b8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b69      	ldr	r3, [pc, #420]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000b8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b92:	4a68      	ldr	r2, [pc, #416]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b9c:	4b65      	ldr	r3, [pc, #404]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000b9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	4b62      	ldr	r3, [pc, #392]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000bac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb0:	4a60      	ldr	r2, [pc, #384]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bba:	4b5e      	ldr	r3, [pc, #376]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000bbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc0:	f003 0302 	and.w	r3, r3, #2
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc8:	4b5a      	ldr	r3, [pc, #360]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000bca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bce:	4a59      	ldr	r2, [pc, #356]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bd8:	4b56      	ldr	r3, [pc, #344]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000bda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bde:	f003 0308 	and.w	r3, r3, #8
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be6:	4b53      	ldr	r3, [pc, #332]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000be8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bec:	4a51      	ldr	r2, [pc, #324]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bf6:	4b4f      	ldr	r3, [pc, #316]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000bf8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c04:	4b4b      	ldr	r3, [pc, #300]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000c06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c0a:	4a4a      	ldr	r2, [pc, #296]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000c0c:	f043 0310 	orr.w	r3, r3, #16
 8000c10:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c14:	4b47      	ldr	r3, [pc, #284]	; (8000d34 <MX_GPIO_Init+0x218>)
 8000c16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c1a:	f003 0310 	and.w	r3, r3, #16
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c28:	4843      	ldr	r0, [pc, #268]	; (8000d38 <MX_GPIO_Init+0x21c>)
 8000c2a:	f002 f891 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c34:	4841      	ldr	r0, [pc, #260]	; (8000d3c <MX_GPIO_Init+0x220>)
 8000c36:	f002 f88b 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	4840      	ldr	r0, [pc, #256]	; (8000d40 <MX_GPIO_Init+0x224>)
 8000c40:	f002 f886 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	483a      	ldr	r0, [pc, #232]	; (8000d44 <MX_GPIO_Init+0x228>)
 8000c5a:	f001 fec9 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	4830      	ldr	r0, [pc, #192]	; (8000d38 <MX_GPIO_Init+0x21c>)
 8000c78:	f001 feba 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c7c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	4619      	mov	r1, r3
 8000c94:	4829      	ldr	r0, [pc, #164]	; (8000d3c <MX_GPIO_Init+0x220>)
 8000c96:	f001 feab 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	4619      	mov	r1, r3
 8000cae:	4826      	ldr	r0, [pc, #152]	; (8000d48 <MX_GPIO_Init+0x22c>)
 8000cb0:	f001 fe9e 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4820      	ldr	r0, [pc, #128]	; (8000d4c <MX_GPIO_Init+0x230>)
 8000cca:	f001 fe91 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000ce0:	230a      	movs	r3, #10
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4818      	ldr	r0, [pc, #96]	; (8000d4c <MX_GPIO_Init+0x230>)
 8000cec:	f001 fe80 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000cf0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d06:	4619      	mov	r1, r3
 8000d08:	4810      	ldr	r0, [pc, #64]	; (8000d4c <MX_GPIO_Init+0x230>)
 8000d0a:	f001 fe71 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d22:	4619      	mov	r1, r3
 8000d24:	4806      	ldr	r0, [pc, #24]	; (8000d40 <MX_GPIO_Init+0x224>)
 8000d26:	f001 fe63 	bl	80029f0 <HAL_GPIO_Init>

}
 8000d2a:	bf00      	nop
 8000d2c:	3738      	adds	r7, #56	; 0x38
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	58024400 	.word	0x58024400
 8000d38:	58021400 	.word	0x58021400
 8000d3c:	58020400 	.word	0x58020400
 8000d40:	58021000 	.word	0x58021000
 8000d44:	58020800 	.word	0x58020800
 8000d48:	58021800 	.word	0x58021800
 8000d4c:	58020000 	.word	0x58020000

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <Error_Handler+0x8>
	...

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <HAL_MspInit+0x30>)
 8000d64:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d68:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_MspInit+0x30>)
 8000d6a:	f043 0302 	orr.w	r3, r3, #2
 8000d6e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_MspInit+0x30>)
 8000d74:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	58024400 	.word	0x58024400

08000d90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b0ba      	sub	sp, #232	; 0xe8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	22b8      	movs	r2, #184	; 0xb8
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f006 fab3 	bl	800731c <memset>
  if(hadc->Instance==ADC1)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a58      	ldr	r2, [pc, #352]	; (8000f1c <HAL_ADC_MspInit+0x18c>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	f040 80a8 	bne.w	8000f12 <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dc2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000dc6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000dcc:	2310      	movs	r3, #16
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ddc:	23c0      	movs	r3, #192	; 0xc0
 8000dde:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4618      	mov	r0, r3
 8000df4:	f002 ffb0 	bl	8003d58 <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000dfe:	f7ff ffa7 	bl	8000d50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e02:	4b47      	ldr	r3, [pc, #284]	; (8000f20 <HAL_ADC_MspInit+0x190>)
 8000e04:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e08:	4a45      	ldr	r2, [pc, #276]	; (8000f20 <HAL_ADC_MspInit+0x190>)
 8000e0a:	f043 0320 	orr.w	r3, r3, #32
 8000e0e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000e12:	4b43      	ldr	r3, [pc, #268]	; (8000f20 <HAL_ADC_MspInit+0x190>)
 8000e14:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e18:	f003 0320 	and.w	r3, r3, #32
 8000e1c:	61bb      	str	r3, [r7, #24]
 8000e1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e20:	4b3f      	ldr	r3, [pc, #252]	; (8000f20 <HAL_ADC_MspInit+0x190>)
 8000e22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e26:	4a3e      	ldr	r2, [pc, #248]	; (8000f20 <HAL_ADC_MspInit+0x190>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e30:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <HAL_ADC_MspInit+0x190>)
 8000e32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <HAL_ADC_MspInit+0x190>)
 8000e40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e44:	4a36      	ldr	r2, [pc, #216]	; (8000f20 <HAL_ADC_MspInit+0x190>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e4e:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <HAL_ADC_MspInit+0x190>)
 8000e50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5c:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <HAL_ADC_MspInit+0x190>)
 8000e5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e62:	4a2f      	ldr	r2, [pc, #188]	; (8000f20 <HAL_ADC_MspInit+0x190>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e6c:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <HAL_ADC_MspInit+0x190>)
 8000e6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e7a:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <HAL_ADC_MspInit+0x190>)
 8000e7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e80:	4a27      	ldr	r2, [pc, #156]	; (8000f20 <HAL_ADC_MspInit+0x190>)
 8000e82:	f043 0320 	orr.w	r3, r3, #32
 8000e86:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e8a:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <HAL_ADC_MspInit+0x190>)
 8000e8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e90:	f003 0320 	and.w	r3, r3, #32
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_INP15
    PA7     ------> ADC1_INP7
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eaa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	481c      	ldr	r0, [pc, #112]	; (8000f24 <HAL_ADC_MspInit+0x194>)
 8000eb2:	f001 fd9d 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000eb6:	2388      	movs	r3, #136	; 0x88
 8000eb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4816      	ldr	r0, [pc, #88]	; (8000f28 <HAL_ADC_MspInit+0x198>)
 8000ed0:	f001 fd8e 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eda:	2303      	movs	r3, #3
 8000edc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000eea:	4619      	mov	r1, r3
 8000eec:	480f      	ldr	r0, [pc, #60]	; (8000f2c <HAL_ADC_MspInit+0x19c>)
 8000eee:	f001 fd7f 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ef2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000efa:	2303      	movs	r3, #3
 8000efc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f06:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4808      	ldr	r0, [pc, #32]	; (8000f30 <HAL_ADC_MspInit+0x1a0>)
 8000f0e:	f001 fd6f 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f12:	bf00      	nop
 8000f14:	37e8      	adds	r7, #232	; 0xe8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40022000 	.word	0x40022000
 8000f20:	58024400 	.word	0x58024400
 8000f24:	58020800 	.word	0x58020800
 8000f28:	58020000 	.word	0x58020000
 8000f2c:	58020400 	.word	0x58020400
 8000f30:	58021400 	.word	0x58021400

08000f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0b8      	sub	sp, #224	; 0xe0
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	22b8      	movs	r2, #184	; 0xb8
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f006 f9e1 	bl	800731c <memset>
  if(huart->Instance==USART3)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a25      	ldr	r2, [pc, #148]	; (8000ff4 <HAL_UART_MspInit+0xc0>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d142      	bne.n	8000fea <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f64:	2302      	movs	r3, #2
 8000f66:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 fef0 	bl	8003d58 <HAL_RCCEx_PeriphCLKConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f7e:	f7ff fee7 	bl	8000d50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <HAL_UART_MspInit+0xc4>)
 8000f84:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f88:	4a1b      	ldr	r2, [pc, #108]	; (8000ff8 <HAL_UART_MspInit+0xc4>)
 8000f8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f8e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000f92:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <HAL_UART_MspInit+0xc4>)
 8000f94:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_UART_MspInit+0xc4>)
 8000fa2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fa6:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <HAL_UART_MspInit+0xc4>)
 8000fa8:	f043 0308 	orr.w	r3, r3, #8
 8000fac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <HAL_UART_MspInit+0xc4>)
 8000fb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000fbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fd8:	2307      	movs	r3, #7
 8000fda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fde:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <HAL_UART_MspInit+0xc8>)
 8000fe6:	f001 fd03 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fea:	bf00      	nop
 8000fec:	37e0      	adds	r7, #224	; 0xe0
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40004800 	.word	0x40004800
 8000ff8:	58024400 	.word	0x58024400
 8000ffc:	58020c00 	.word	0x58020c00

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <NMI_Handler+0x4>

08001006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <HardFault_Handler+0x4>

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <MemManage_Handler+0x4>

08001012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <BusFault_Handler+0x4>

08001018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <UsageFault_Handler+0x4>

0800101e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104c:	f000 f9dc 	bl	8001408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
	return 1;
 8001058:	2301      	movs	r3, #1
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <_kill>:

int _kill(int pid, int sig)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800106e:	f006 f92b 	bl	80072c8 <__errno>
 8001072:	4603      	mov	r3, r0
 8001074:	2216      	movs	r2, #22
 8001076:	601a      	str	r2, [r3, #0]
	return -1;
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <_exit>:

void _exit (int status)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ffe7 	bl	8001064 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001096:	e7fe      	b.n	8001096 <_exit+0x12>

08001098 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	e00a      	b.n	80010c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010aa:	f3af 8000 	nop.w
 80010ae:	4601      	mov	r1, r0
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	60ba      	str	r2, [r7, #8]
 80010b6:	b2ca      	uxtb	r2, r1
 80010b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	3301      	adds	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	dbf0      	blt.n	80010aa <_read+0x12>
	}

return len;
 80010c8:	687b      	ldr	r3, [r7, #4]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	e009      	b.n	80010f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	60ba      	str	r2, [r7, #8]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	3301      	adds	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	dbf1      	blt.n	80010e4 <_write+0x12>
	}
	return len;
 8001100:	687b      	ldr	r3, [r7, #4]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <_close>:

int _close(int file)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
	return -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001132:	605a      	str	r2, [r3, #4]
	return 0;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <_isatty>:

int _isatty(int file)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
	return 1;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
	return 0;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800117c:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <_sbrk+0x5c>)
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <_sbrk+0x60>)
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d102      	bne.n	8001196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <_sbrk+0x64>)
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <_sbrk+0x68>)
 8001194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d207      	bcs.n	80011b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a4:	f006 f890 	bl	80072c8 <__errno>
 80011a8:	4603      	mov	r3, r0
 80011aa:	220c      	movs	r2, #12
 80011ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	e009      	b.n	80011c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <_sbrk+0x64>)
 80011c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c6:	68fb      	ldr	r3, [r7, #12]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	24100000 	.word	0x24100000
 80011d4:	00000400 	.word	0x00000400
 80011d8:	240002f0 	.word	0x240002f0
 80011dc:	24000308 	.word	0x24000308

080011e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011e4:	4b32      	ldr	r3, [pc, #200]	; (80012b0 <SystemInit+0xd0>)
 80011e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ea:	4a31      	ldr	r2, [pc, #196]	; (80012b0 <SystemInit+0xd0>)
 80011ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011f4:	4b2f      	ldr	r3, [pc, #188]	; (80012b4 <SystemInit+0xd4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 030f 	and.w	r3, r3, #15
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d807      	bhi.n	8001210 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001200:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <SystemInit+0xd4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f023 030f 	bic.w	r3, r3, #15
 8001208:	4a2a      	ldr	r2, [pc, #168]	; (80012b4 <SystemInit+0xd4>)
 800120a:	f043 0303 	orr.w	r3, r3, #3
 800120e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001210:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <SystemInit+0xd8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a28      	ldr	r2, [pc, #160]	; (80012b8 <SystemInit+0xd8>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800121c:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <SystemInit+0xd8>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <SystemInit+0xd8>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4924      	ldr	r1, [pc, #144]	; (80012b8 <SystemInit+0xd8>)
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <SystemInit+0xdc>)
 800122a:	4013      	ands	r3, r2
 800122c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800122e:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <SystemInit+0xd4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	2b00      	cmp	r3, #0
 8001238:	d007      	beq.n	800124a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800123a:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <SystemInit+0xd4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 030f 	bic.w	r3, r3, #15
 8001242:	4a1c      	ldr	r2, [pc, #112]	; (80012b4 <SystemInit+0xd4>)
 8001244:	f043 0303 	orr.w	r3, r3, #3
 8001248:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <SystemInit+0xd8>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <SystemInit+0xd8>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <SystemInit+0xd8>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <SystemInit+0xd8>)
 800125e:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <SystemInit+0xe0>)
 8001260:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <SystemInit+0xd8>)
 8001264:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <SystemInit+0xe4>)
 8001266:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <SystemInit+0xd8>)
 800126a:	4a17      	ldr	r2, [pc, #92]	; (80012c8 <SystemInit+0xe8>)
 800126c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <SystemInit+0xd8>)
 8001270:	2200      	movs	r2, #0
 8001272:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <SystemInit+0xd8>)
 8001276:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <SystemInit+0xe8>)
 8001278:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <SystemInit+0xd8>)
 800127c:	2200      	movs	r2, #0
 800127e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <SystemInit+0xd8>)
 8001282:	4a11      	ldr	r2, [pc, #68]	; (80012c8 <SystemInit+0xe8>)
 8001284:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <SystemInit+0xd8>)
 8001288:	2200      	movs	r2, #0
 800128a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <SystemInit+0xd8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <SystemInit+0xd8>)
 8001292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001296:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <SystemInit+0xd8>)
 800129a:	2200      	movs	r2, #0
 800129c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <SystemInit+0xec>)
 80012a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80012a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00
 80012b4:	52002000 	.word	0x52002000
 80012b8:	58024400 	.word	0x58024400
 80012bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80012c0:	02020200 	.word	0x02020200
 80012c4:	01ff0000 	.word	0x01ff0000
 80012c8:	01010280 	.word	0x01010280
 80012cc:	52004000 	.word	0x52004000

080012d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001308 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012d4:	f7ff ff84 	bl	80011e0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012da:	490d      	ldr	r1, [pc, #52]	; (8001310 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012dc:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e0:	e002      	b.n	80012e8 <LoopCopyDataInit>

080012e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e6:	3304      	adds	r3, #4

080012e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80012e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ec:	d3f9      	bcc.n	80012e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012f0:	4c0a      	ldr	r4, [pc, #40]	; (800131c <LoopFillZerobss+0x22>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f4:	e001      	b.n	80012fa <LoopFillZerobss>

080012f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f8:	3204      	adds	r2, #4

080012fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012fc:	d3fb      	bcc.n	80012f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012fe:	f005 ffe9 	bl	80072d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001302:	f7ff f9d1 	bl	80006a8 <main>
  bx  lr
 8001306:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001308:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800130c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001310:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001314:	0800a3ec 	.word	0x0800a3ec
  ldr r2, =_sbss
 8001318:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 800131c:	24000308 	.word	0x24000308

08001320 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001320:	e7fe      	b.n	8001320 <ADC_IRQHandler>
	...

08001324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132a:	2003      	movs	r0, #3
 800132c:	f001 fb2e 	bl	800298c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001330:	f002 fb3c 	bl	80039ac <HAL_RCC_GetSysClockFreq>
 8001334:	4602      	mov	r2, r0
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_Init+0x68>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	f003 030f 	and.w	r3, r3, #15
 8001340:	4913      	ldr	r1, [pc, #76]	; (8001390 <HAL_Init+0x6c>)
 8001342:	5ccb      	ldrb	r3, [r1, r3]
 8001344:	f003 031f 	and.w	r3, r3, #31
 8001348:	fa22 f303 	lsr.w	r3, r2, r3
 800134c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_Init+0x68>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <HAL_Init+0x6c>)
 8001358:	5cd3      	ldrb	r3, [r2, r3]
 800135a:	f003 031f 	and.w	r3, r3, #31
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <HAL_Init+0x70>)
 8001366:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001368:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <HAL_Init+0x74>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800136e:	2000      	movs	r0, #0
 8001370:	f000 f814 	bl	800139c <HAL_InitTick>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e002      	b.n	8001384 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800137e:	f7ff fced 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	58024400 	.word	0x58024400
 8001390:	08009fcc 	.word	0x08009fcc
 8001394:	24000004 	.word	0x24000004
 8001398:	24000000 	.word	0x24000000

0800139c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_InitTick+0x60>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e021      	b.n	80013f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <HAL_InitTick+0x64>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_InitTick+0x60>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f001 fb05 	bl	80029d6 <HAL_SYSTICK_Config>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00e      	b.n	80013f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d80a      	bhi.n	80013f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f001 fadd 	bl	80029a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <HAL_InitTick+0x68>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e000      	b.n	80013f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	2400000c 	.word	0x2400000c
 8001400:	24000000 	.word	0x24000000
 8001404:	24000008 	.word	0x24000008

08001408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_IncTick+0x20>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_IncTick+0x24>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_IncTick+0x24>)
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	2400000c 	.word	0x2400000c
 800142c:	240002f4 	.word	0x240002f4

08001430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return uwTick;
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <HAL_GetTick+0x14>)
 8001436:	681b      	ldr	r3, [r3, #0]
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	240002f4 	.word	0x240002f4

08001448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001450:	f7ff ffee 	bl	8001430 <HAL_GetTick>
 8001454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001460:	d005      	beq.n	800146e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <HAL_Delay+0x44>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4413      	add	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800146e:	bf00      	nop
 8001470:	f7ff ffde 	bl	8001430 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	429a      	cmp	r2, r3
 800147e:	d8f7      	bhi.n	8001470 <HAL_Delay+0x28>
  {
  }
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2400000c 	.word	0x2400000c

08001490 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	609a      	str	r2, [r3, #8]
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	609a      	str	r2, [r3, #8]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3360      	adds	r3, #96	; 0x60
 800150a:	461a      	mov	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	430b      	orrs	r3, r1
 8001526:	431a      	orrs	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800152c:	bf00      	nop
 800152e:	371c      	adds	r7, #28
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	f003 031f 	and.w	r3, r3, #31
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	431a      	orrs	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	611a      	str	r2, [r3, #16]
}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800156a:	b480      	push	{r7}
 800156c:	b087      	sub	sp, #28
 800156e:	af00      	add	r7, sp, #0
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3360      	adds	r3, #96	; 0x60
 800157a:	461a      	mov	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	431a      	orrs	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	601a      	str	r2, [r3, #0]
  }
}
 8001594:	bf00      	nop
 8001596:	371c      	adds	r7, #28
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b087      	sub	sp, #28
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3330      	adds	r3, #48	; 0x30
 80015d6:	461a      	mov	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	4413      	add	r3, r2
 80015e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	f003 031f 	and.w	r3, r3, #31
 80015f0:	211f      	movs	r1, #31
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	401a      	ands	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	0e9b      	lsrs	r3, r3, #26
 80015fe:	f003 011f 	and.w	r1, r3, #31
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	f003 031f 	and.w	r3, r3, #31
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	431a      	orrs	r2, r3
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001612:	bf00      	nop
 8001614:	371c      	adds	r7, #28
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800161e:	b480      	push	{r7}
 8001620:	b087      	sub	sp, #28
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	3314      	adds	r3, #20
 800162e:	461a      	mov	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	0e5b      	lsrs	r3, r3, #25
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	4413      	add	r3, r2
 800163c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	0d1b      	lsrs	r3, r3, #20
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	2107      	movs	r1, #7
 800164c:	fa01 f303 	lsl.w	r3, r1, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	401a      	ands	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	0d1b      	lsrs	r3, r3, #20
 8001658:	f003 031f 	and.w	r3, r3, #31
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	431a      	orrs	r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001668:	bf00      	nop
 800166a:	371c      	adds	r7, #28
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800168c:	43db      	mvns	r3, r3
 800168e:	401a      	ands	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0318 	and.w	r3, r3, #24
 8001696:	4908      	ldr	r1, [pc, #32]	; (80016b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001698:	40d9      	lsrs	r1, r3
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	400b      	ands	r3, r1
 800169e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016a2:	431a      	orrs	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	000fffff 	.word	0x000fffff

080016bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 031f 	and.w	r3, r3, #31
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001702:	4013      	ands	r3, r2
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6093      	str	r3, [r2, #8]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	5fffffc0 	.word	0x5fffffc0

08001718 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800172c:	d101      	bne.n	8001732 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <LL_ADC_EnableInternalRegulator+0x24>)
 800174e:	4013      	ands	r3, r2
 8001750:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	6fffffc0 	.word	0x6fffffc0

08001768 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800177c:	d101      	bne.n	8001782 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <LL_ADC_Enable+0x24>)
 800179e:	4013      	ands	r3, r2
 80017a0:	f043 0201 	orr.w	r2, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	7fffffc0 	.word	0x7fffffc0

080017b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <LL_ADC_IsEnabled+0x18>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <LL_ADC_IsEnabled+0x1a>
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <LL_ADC_REG_StartConversion+0x24>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	f043 0204 	orr.w	r2, r3, #4
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	7fffffc0 	.word	0x7fffffc0

08001808 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b04      	cmp	r3, #4
 800181a:	d101      	bne.n	8001820 <LL_ADC_REG_IsConversionOngoing+0x18>
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b08      	cmp	r3, #8
 8001840:	d101      	bne.n	8001846 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e138      	b.n	8001ae0 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001878:	2b00      	cmp	r3, #0
 800187a:	d109      	bne.n	8001890 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff fa87 	bl	8000d90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff3f 	bl	8001718 <LL_ADC_IsDeepPowerDownEnabled>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d004      	beq.n	80018aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff25 	bl	80016f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff5a 	bl	8001768 <LL_ADC_IsInternalRegulatorEnabled>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d114      	bne.n	80018e4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff ff3e 	bl	8001740 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018c4:	4b88      	ldr	r3, [pc, #544]	; (8001ae8 <HAL_ADC_Init+0x294>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	099b      	lsrs	r3, r3, #6
 80018ca:	4a88      	ldr	r2, [pc, #544]	; (8001aec <HAL_ADC_Init+0x298>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	099b      	lsrs	r3, r3, #6
 80018d2:	3301      	adds	r3, #1
 80018d4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018d6:	e002      	b.n	80018de <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	3b01      	subs	r3, #1
 80018dc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f9      	bne.n	80018d8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff3d 	bl	8001768 <LL_ADC_IsInternalRegulatorEnabled>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10d      	bne.n	8001910 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f8:	f043 0210 	orr.w	r2, r3, #16
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001904:	f043 0201 	orr.w	r2, r3, #1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff77 	bl	8001808 <LL_ADC_REG_IsConversionOngoing>
 800191a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001920:	f003 0310 	and.w	r3, r3, #16
 8001924:	2b00      	cmp	r3, #0
 8001926:	f040 80d2 	bne.w	8001ace <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	2b00      	cmp	r3, #0
 800192e:	f040 80ce 	bne.w	8001ace <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001936:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800193a:	f043 0202 	orr.w	r2, r3, #2
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ff36 	bl	80017b8 <LL_ADC_IsEnabled>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d110      	bne.n	8001974 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001952:	4867      	ldr	r0, [pc, #412]	; (8001af0 <HAL_ADC_Init+0x29c>)
 8001954:	f7ff ff30 	bl	80017b8 <LL_ADC_IsEnabled>
 8001958:	4604      	mov	r4, r0
 800195a:	4866      	ldr	r0, [pc, #408]	; (8001af4 <HAL_ADC_Init+0x2a0>)
 800195c:	f7ff ff2c 	bl	80017b8 <LL_ADC_IsEnabled>
 8001960:	4603      	mov	r3, r0
 8001962:	4323      	orrs	r3, r4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d105      	bne.n	8001974 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	4619      	mov	r1, r3
 800196e:	4862      	ldr	r0, [pc, #392]	; (8001af8 <HAL_ADC_Init+0x2a4>)
 8001970:	f7ff fd8e 	bl	8001490 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7d5b      	ldrb	r3, [r3, #21]
 8001978:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800197e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001984:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7f1b      	ldrb	r3, [r3, #28]
 800198a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7f1b      	ldrb	r3, [r3, #28]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d106      	bne.n	80019a6 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	3b01      	subs	r3, #1
 800199e:	045b      	lsls	r3, r3, #17
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d009      	beq.n	80019c2 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ba:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	4b4c      	ldr	r3, [pc, #304]	; (8001afc <HAL_ADC_Init+0x2a8>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	69b9      	ldr	r1, [r7, #24]
 80019d2:	430b      	orrs	r3, r1
 80019d4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ff14 	bl	8001808 <LL_ADC_REG_IsConversionOngoing>
 80019e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ff21 	bl	800182e <LL_ADC_INJ_IsConversionOngoing>
 80019ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d14a      	bne.n	8001a8a <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d147      	bne.n	8001a8a <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	7d1b      	ldrb	r3, [r3, #20]
 80019fe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	4b3c      	ldr	r3, [pc, #240]	; (8001b00 <HAL_ADC_Init+0x2ac>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	69b9      	ldr	r1, [r7, #24]
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d11b      	bne.n	8001a5e <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <HAL_ADC_Init+0x2b0>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a3a:	3a01      	subs	r2, #1
 8001a3c:	0411      	lsls	r1, r2, #16
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a42:	4311      	orrs	r1, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a48:	4311      	orrs	r1, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0201 	orr.w	r2, r2, #1
 8001a5a:	611a      	str	r2, [r3, #16]
 8001a5c:	e007      	b.n	8001a6e <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0201 	bic.w	r2, r2, #1
 8001a6c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 fd41 	bl	800250c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d10c      	bne.n	8001aac <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	f023 010f 	bic.w	r1, r3, #15
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	1e5a      	subs	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30
 8001aaa:	e007      	b.n	8001abc <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 020f 	bic.w	r2, r2, #15
 8001aba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac0:	f023 0303 	bic.w	r3, r3, #3
 8001ac4:	f043 0201 	orr.w	r2, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	655a      	str	r2, [r3, #84]	; 0x54
 8001acc:	e007      	b.n	8001ade <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad2:	f043 0210 	orr.w	r2, r3, #16
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ade:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3724      	adds	r7, #36	; 0x24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd90      	pop	{r4, r7, pc}
 8001ae8:	24000000 	.word	0x24000000
 8001aec:	053e2d63 	.word	0x053e2d63
 8001af0:	40022000 	.word	0x40022000
 8001af4:	40022100 	.word	0x40022100
 8001af8:	40022300 	.word	0x40022300
 8001afc:	fff0c003 	.word	0xfff0c003
 8001b00:	ffffbffc 	.word	0xffffbffc
 8001b04:	fc00f81e 	.word	0xfc00f81e

08001b08 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b10:	4856      	ldr	r0, [pc, #344]	; (8001c6c <HAL_ADC_Start+0x164>)
 8001b12:	f7ff fdd3 	bl	80016bc <LL_ADC_GetMultimode>
 8001b16:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fe73 	bl	8001808 <LL_ADC_REG_IsConversionOngoing>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f040 809a 	bne.w	8001c5e <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_ADC_Start+0x30>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e095      	b.n	8001c64 <HAL_ADC_Start+0x15c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fc67 	bl	8002414 <ADC_Enable>
 8001b46:	4603      	mov	r3, r0
 8001b48:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f040 8081 	bne.w	8001c54 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b56:	4b46      	ldr	r3, [pc, #280]	; (8001c70 <HAL_ADC_Start+0x168>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a43      	ldr	r2, [pc, #268]	; (8001c74 <HAL_ADC_Start+0x16c>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d002      	beq.n	8001b72 <HAL_ADC_Start+0x6a>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	e000      	b.n	8001b74 <HAL_ADC_Start+0x6c>
 8001b72:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <HAL_ADC_Start+0x170>)
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d002      	beq.n	8001b82 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d105      	bne.n	8001b8e <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b9a:	d106      	bne.n	8001baa <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba0:	f023 0206 	bic.w	r2, r3, #6
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ba8:	e002      	b.n	8001bb0 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	221c      	movs	r2, #28
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a2b      	ldr	r2, [pc, #172]	; (8001c74 <HAL_ADC_Start+0x16c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d002      	beq.n	8001bd0 <HAL_ADC_Start+0xc8>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	e000      	b.n	8001bd2 <HAL_ADC_Start+0xca>
 8001bd0:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <HAL_ADC_Start+0x170>)
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d008      	beq.n	8001bec <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d002      	beq.n	8001bec <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2b09      	cmp	r3, #9
 8001bea:	d114      	bne.n	8001c16 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fde6 	bl	80017e0 <LL_ADC_REG_StartConversion>
 8001c14:	e025      	b.n	8001c62 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a13      	ldr	r2, [pc, #76]	; (8001c74 <HAL_ADC_Start+0x16c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d002      	beq.n	8001c32 <HAL_ADC_Start+0x12a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	e000      	b.n	8001c34 <HAL_ADC_Start+0x12c>
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_ADC_Start+0x170>)
 8001c34:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00f      	beq.n	8001c62 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	655a      	str	r2, [r3, #84]	; 0x54
 8001c52:	e006      	b.n	8001c62 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001c5c:	e001      	b.n	8001c62 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40022300 	.word	0x40022300
 8001c70:	fffff0fe 	.word	0xfffff0fe
 8001c74:	40022100 	.word	0x40022100
 8001c78:	40022000 	.word	0x40022000

08001c7c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c86:	4866      	ldr	r0, [pc, #408]	; (8001e20 <HAL_ADC_PollForConversion+0x1a4>)
 8001c88:	f7ff fd18 	bl	80016bc <LL_ADC_GetMultimode>
 8001c8c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d102      	bne.n	8001c9c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001c96:	2308      	movs	r3, #8
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	e02a      	b.n	8001cf2 <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2b05      	cmp	r3, #5
 8001ca6:	d002      	beq.n	8001cae <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	2b09      	cmp	r3, #9
 8001cac:	d111      	bne.n	8001cd2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d007      	beq.n	8001ccc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc0:	f043 0220 	orr.w	r2, r3, #32
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0a4      	b.n	8001e16 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001ccc:	2304      	movs	r3, #4
 8001cce:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001cd0:	e00f      	b.n	8001cf2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001cd2:	4853      	ldr	r0, [pc, #332]	; (8001e20 <HAL_ADC_PollForConversion+0x1a4>)
 8001cd4:	f7ff fd00 	bl	80016d8 <LL_ADC_GetMultiDMATransfer>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d007      	beq.n	8001cee <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce2:	f043 0220 	orr.w	r2, r3, #32
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e093      	b.n	8001e16 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001cee:	2304      	movs	r3, #4
 8001cf0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001cf2:	f7ff fb9d 	bl	8001430 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001cf8:	e021      	b.n	8001d3e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d00:	d01d      	beq.n	8001d3e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001d02:	f7ff fb95 	bl	8001430 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d302      	bcc.n	8001d18 <HAL_ADC_PollForConversion+0x9c>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d112      	bne.n	8001d3e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10b      	bne.n	8001d3e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2a:	f043 0204 	orr.w	r2, r3, #4
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e06b      	b.n	8001e16 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0d6      	beq.n	8001cfa <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fc1f 	bl	80015a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d01c      	beq.n	8001da2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	7d5b      	ldrb	r3, [r3, #21]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d118      	bne.n	8001da2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d111      	bne.n	8001da2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d105      	bne.n	8001da2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9a:	f043 0201 	orr.w	r2, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1f      	ldr	r2, [pc, #124]	; (8001e24 <HAL_ADC_PollForConversion+0x1a8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d002      	beq.n	8001db2 <HAL_ADC_PollForConversion+0x136>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	e000      	b.n	8001db4 <HAL_ADC_PollForConversion+0x138>
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_ADC_PollForConversion+0x1ac>)
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d008      	beq.n	8001dce <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2b05      	cmp	r3, #5
 8001dc6:	d002      	beq.n	8001dce <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2b09      	cmp	r3, #9
 8001dcc:	d104      	bne.n	8001dd8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	e00c      	b.n	8001df2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a11      	ldr	r2, [pc, #68]	; (8001e24 <HAL_ADC_PollForConversion+0x1a8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d002      	beq.n	8001de8 <HAL_ADC_PollForConversion+0x16c>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	e000      	b.n	8001dea <HAL_ADC_PollForConversion+0x16e>
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_ADC_PollForConversion+0x1ac>)
 8001dea:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d104      	bne.n	8001e02 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e008      	b.n	8001e14 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d103      	bne.n	8001e14 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	220c      	movs	r2, #12
 8001e12:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3720      	adds	r7, #32
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40022300 	.word	0x40022300
 8001e24:	40022100 	.word	0x40022100
 8001e28:	40022000 	.word	0x40022000

08001e2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b0a1      	sub	sp, #132	; 0x84
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4a9a      	ldr	r2, [pc, #616]	; (80020cc <HAL_ADC_ConfigChannel+0x284>)
 8001e62:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x2a>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e2bc      	b.n	80023ec <HAL_ADC_ConfigChannel+0x5a4>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fcc2 	bl	8001808 <LL_ADC_REG_IsConversionOngoing>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f040 82a1 	bne.w	80023ce <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d108      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x62>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	0e9b      	lsrs	r3, r3, #26
 8001e9e:	f003 031f 	and.w	r3, r3, #31
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	e016      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x90>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001eb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eba:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	e003      	b.n	8001ece <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	69d1      	ldr	r1, [r2, #28]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	430b      	orrs	r3, r1
 8001ee4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	6859      	ldr	r1, [r3, #4]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f7ff fb67 	bl	80015c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fc83 	bl	8001808 <LL_ADC_REG_IsConversionOngoing>
 8001f02:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fc90 	bl	800182e <LL_ADC_INJ_IsConversionOngoing>
 8001f0e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f040 80a0 	bne.w	8002058 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f040 809c 	bne.w	8002058 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6819      	ldr	r1, [r3, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f7ff fb76 	bl	800161e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0310 	and.w	r3, r3, #16
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10b      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x110>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	695a      	ldr	r2, [r3, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	089b      	lsrs	r3, r3, #2
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	e00a      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x126>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	695a      	ldr	r2, [r3, #20]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d027      	beq.n	8001fc8 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	6919      	ldr	r1, [r3, #16]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f86:	f7ff fab7 	bl	80014f8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	6919      	ldr	r1, [r3, #16]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	7e5b      	ldrb	r3, [r3, #25]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d102      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x158>
 8001f9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f9e:	e000      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x15a>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	f7ff fae1 	bl	800156a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	6919      	ldr	r1, [r3, #16]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	7e1b      	ldrb	r3, [r3, #24]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d102      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x176>
 8001fb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fbc:	e000      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x178>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f7ff fab9 	bl	8001538 <LL_ADC_SetDataRightShift>
 8001fc6:	e047      	b.n	8002058 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	069b      	lsls	r3, r3, #26
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d107      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fea:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ff2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	069b      	lsls	r3, r3, #26
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d107      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800200e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002016:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	069b      	lsls	r3, r3, #26
 8002020:	429a      	cmp	r2, r3
 8002022:	d107      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002032:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800203a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	069b      	lsls	r3, r3, #26
 8002044:	429a      	cmp	r2, r3
 8002046:	d107      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002056:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fbab 	bl	80017b8 <LL_ADC_IsEnabled>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	f040 81bb 	bne.w	80023e0 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	6819      	ldr	r1, [r3, #0]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	461a      	mov	r2, r3
 8002078:	f7ff fafc 	bl	8001674 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4a12      	ldr	r2, [pc, #72]	; (80020cc <HAL_ADC_ConfigChannel+0x284>)
 8002082:	4293      	cmp	r3, r2
 8002084:	f040 8130 	bne.w	80022e8 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10b      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x268>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0e9b      	lsrs	r3, r3, #26
 800209e:	3301      	adds	r3, #1
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	2b09      	cmp	r3, #9
 80020a6:	bf94      	ite	ls
 80020a8:	2301      	movls	r3, #1
 80020aa:	2300      	movhi	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	e01b      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x2a0>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80020be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80020c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d103      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 80020c8:	2320      	movs	r3, #32
 80020ca:	e005      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x290>
 80020cc:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 80020d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	3301      	adds	r3, #1
 80020da:	f003 031f 	and.w	r3, r3, #31
 80020de:	2b09      	cmp	r3, #9
 80020e0:	bf94      	ite	ls
 80020e2:	2301      	movls	r3, #1
 80020e4:	2300      	movhi	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d079      	beq.n	80021e0 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d107      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x2c0>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	0e9b      	lsrs	r3, r3, #26
 80020fe:	3301      	adds	r3, #1
 8002100:	069b      	lsls	r3, r3, #26
 8002102:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002106:	e015      	b.n	8002134 <HAL_ADC_ConfigChannel+0x2ec>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002118:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800211a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002120:	2320      	movs	r3, #32
 8002122:	e003      	b.n	800212c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002126:	fab3 f383 	clz	r3, r3
 800212a:	b2db      	uxtb	r3, r3
 800212c:	3301      	adds	r3, #1
 800212e:	069b      	lsls	r3, r3, #26
 8002130:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800213c:	2b00      	cmp	r3, #0
 800213e:	d109      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x30c>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	0e9b      	lsrs	r3, r3, #26
 8002146:	3301      	adds	r3, #1
 8002148:	f003 031f 	and.w	r3, r3, #31
 800214c:	2101      	movs	r1, #1
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	e017      	b.n	8002184 <HAL_ADC_ConfigChannel+0x33c>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800215c:	fa93 f3a3 	rbit	r3, r3
 8002160:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002164:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 800216c:	2320      	movs	r3, #32
 800216e:	e003      	b.n	8002178 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	3301      	adds	r3, #1
 800217a:	f003 031f 	and.w	r3, r3, #31
 800217e:	2101      	movs	r1, #1
 8002180:	fa01 f303 	lsl.w	r3, r1, r3
 8002184:	ea42 0103 	orr.w	r1, r2, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10a      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x362>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	0e9b      	lsrs	r3, r3, #26
 800219a:	3301      	adds	r3, #1
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	051b      	lsls	r3, r3, #20
 80021a8:	e018      	b.n	80021dc <HAL_ADC_ConfigChannel+0x394>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80021b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80021bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80021c2:	2320      	movs	r3, #32
 80021c4:	e003      	b.n	80021ce <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 80021c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	3301      	adds	r3, #1
 80021d0:	f003 021f 	and.w	r2, r3, #31
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021dc:	430b      	orrs	r3, r1
 80021de:	e07e      	b.n	80022de <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d107      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x3b4>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0e9b      	lsrs	r3, r3, #26
 80021f2:	3301      	adds	r3, #1
 80021f4:	069b      	lsls	r3, r3, #26
 80021f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021fa:	e015      	b.n	8002228 <HAL_ADC_ConfigChannel+0x3e0>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800220e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002214:	2320      	movs	r3, #32
 8002216:	e003      	b.n	8002220 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	3301      	adds	r3, #1
 8002222:	069b      	lsls	r3, r3, #26
 8002224:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002230:	2b00      	cmp	r3, #0
 8002232:	d109      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x400>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0e9b      	lsrs	r3, r3, #26
 800223a:	3301      	adds	r3, #1
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	2101      	movs	r1, #1
 8002242:	fa01 f303 	lsl.w	r3, r1, r3
 8002246:	e017      	b.n	8002278 <HAL_ADC_ConfigChannel+0x430>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	61bb      	str	r3, [r7, #24]
  return result;
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002260:	2320      	movs	r3, #32
 8002262:	e003      	b.n	800226c <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	3301      	adds	r3, #1
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	2101      	movs	r1, #1
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	ea42 0103 	orr.w	r1, r2, r3
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10d      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x45c>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0e9b      	lsrs	r3, r3, #26
 800228e:	3301      	adds	r3, #1
 8002290:	f003 021f 	and.w	r2, r3, #31
 8002294:	4613      	mov	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4413      	add	r3, r2
 800229a:	3b1e      	subs	r3, #30
 800229c:	051b      	lsls	r3, r3, #20
 800229e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022a2:	e01b      	b.n	80022dc <HAL_ADC_ConfigChannel+0x494>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	60fb      	str	r3, [r7, #12]
  return result;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 80022bc:	2320      	movs	r3, #32
 80022be:	e003      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	3301      	adds	r3, #1
 80022ca:	f003 021f 	and.w	r2, r3, #31
 80022ce:	4613      	mov	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4413      	add	r3, r2
 80022d4:	3b1e      	subs	r3, #30
 80022d6:	051b      	lsls	r3, r3, #20
 80022d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022dc:	430b      	orrs	r3, r1
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	6892      	ldr	r2, [r2, #8]
 80022e2:	4619      	mov	r1, r3
 80022e4:	f7ff f99b 	bl	800161e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	da77      	bge.n	80023e0 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022f0:	4840      	ldr	r0, [pc, #256]	; (80023f4 <HAL_ADC_ConfigChannel+0x5ac>)
 80022f2:	f7ff f8f3 	bl	80014dc <LL_ADC_GetCommonPathInternalCh>
 80022f6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022f8:	483f      	ldr	r0, [pc, #252]	; (80023f8 <HAL_ADC_ConfigChannel+0x5b0>)
 80022fa:	f7ff fa5d 	bl	80017b8 <LL_ADC_IsEnabled>
 80022fe:	4604      	mov	r4, r0
 8002300:	483e      	ldr	r0, [pc, #248]	; (80023fc <HAL_ADC_ConfigChannel+0x5b4>)
 8002302:	f7ff fa59 	bl	80017b8 <LL_ADC_IsEnabled>
 8002306:	4603      	mov	r3, r0
 8002308:	4323      	orrs	r3, r4
 800230a:	2b00      	cmp	r3, #0
 800230c:	d155      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a3b      	ldr	r2, [pc, #236]	; (8002400 <HAL_ADC_ConfigChannel+0x5b8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d122      	bne.n	800235e <HAL_ADC_ConfigChannel+0x516>
 8002318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d11d      	bne.n	800235e <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a35      	ldr	r2, [pc, #212]	; (80023fc <HAL_ADC_ConfigChannel+0x5b4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d159      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800232c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800232e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002332:	4619      	mov	r1, r3
 8002334:	482f      	ldr	r0, [pc, #188]	; (80023f4 <HAL_ADC_ConfigChannel+0x5ac>)
 8002336:	f7ff f8be 	bl	80014b6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800233a:	4b32      	ldr	r3, [pc, #200]	; (8002404 <HAL_ADC_ConfigChannel+0x5bc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	099b      	lsrs	r3, r3, #6
 8002340:	4a31      	ldr	r2, [pc, #196]	; (8002408 <HAL_ADC_ConfigChannel+0x5c0>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	099b      	lsrs	r3, r3, #6
 8002348:	3301      	adds	r3, #1
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800234e:	e002      	b.n	8002356 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	3b01      	subs	r3, #1
 8002354:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f9      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800235c:	e040      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a2a      	ldr	r2, [pc, #168]	; (800240c <HAL_ADC_ConfigChannel+0x5c4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d111      	bne.n	800238c <HAL_ADC_ConfigChannel+0x544>
 8002368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800236a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10c      	bne.n	800238c <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a21      	ldr	r2, [pc, #132]	; (80023fc <HAL_ADC_ConfigChannel+0x5b4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d131      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800237c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800237e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002382:	4619      	mov	r1, r3
 8002384:	481b      	ldr	r0, [pc, #108]	; (80023f4 <HAL_ADC_ConfigChannel+0x5ac>)
 8002386:	f7ff f896 	bl	80014b6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800238a:	e029      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1f      	ldr	r2, [pc, #124]	; (8002410 <HAL_ADC_ConfigChannel+0x5c8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d124      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x598>
 8002396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d11f      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a15      	ldr	r2, [pc, #84]	; (80023fc <HAL_ADC_ConfigChannel+0x5b4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d11a      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80023aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023b0:	4619      	mov	r1, r3
 80023b2:	4810      	ldr	r0, [pc, #64]	; (80023f4 <HAL_ADC_ConfigChannel+0x5ac>)
 80023b4:	f7ff f87f 	bl	80014b6 <LL_ADC_SetCommonPathInternalCh>
 80023b8:	e012      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023be:	f043 0220 	orr.w	r2, r3, #32
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80023cc:	e008      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d2:	f043 0220 	orr.w	r2, r3, #32
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023e8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3784      	adds	r7, #132	; 0x84
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd90      	pop	{r4, r7, pc}
 80023f4:	40022300 	.word	0x40022300
 80023f8:	40022000 	.word	0x40022000
 80023fc:	40022100 	.word	0x40022100
 8002400:	cb840000 	.word	0xcb840000
 8002404:	24000000 	.word	0x24000000
 8002408:	053e2d63 	.word	0x053e2d63
 800240c:	bac04000 	.word	0xbac04000
 8002410:	cfb80000 	.word	0xcfb80000

08002414 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff f9c9 	bl	80017b8 <LL_ADC_IsEnabled>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d161      	bne.n	80024f0 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	4b32      	ldr	r3, [pc, #200]	; (80024fc <ADC_Enable+0xe8>)
 8002434:	4013      	ands	r3, r2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00d      	beq.n	8002456 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243e:	f043 0210 	orr.w	r2, r3, #16
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244a:	f043 0201 	orr.w	r2, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e04d      	b.n	80024f2 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff f998 	bl	8001790 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002460:	f7fe ffe6 	bl	8001430 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002466:	4826      	ldr	r0, [pc, #152]	; (8002500 <ADC_Enable+0xec>)
 8002468:	f7ff f928 	bl	80016bc <LL_ADC_GetMultimode>
 800246c:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a24      	ldr	r2, [pc, #144]	; (8002504 <ADC_Enable+0xf0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d002      	beq.n	800247e <ADC_Enable+0x6a>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	e000      	b.n	8002480 <ADC_Enable+0x6c>
 800247e:	4b22      	ldr	r3, [pc, #136]	; (8002508 <ADC_Enable+0xf4>)
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	4293      	cmp	r3, r2
 8002486:	d02c      	beq.n	80024e2 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d130      	bne.n	80024f0 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800248e:	e028      	b.n	80024e2 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff f98f 	bl	80017b8 <LL_ADC_IsEnabled>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d104      	bne.n	80024aa <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff f973 	bl	8001790 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024aa:	f7fe ffc1 	bl	8001430 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d914      	bls.n	80024e2 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d00d      	beq.n	80024e2 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f043 0210 	orr.w	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	f043 0201 	orr.w	r2, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e007      	b.n	80024f2 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d1cf      	bne.n	8002490 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	8000003f 	.word	0x8000003f
 8002500:	40022300 	.word	0x40022300
 8002504:	40022100 	.word	0x40022100
 8002508:	40022000 	.word	0x40022000

0800250c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002514:	4b5f      	ldr	r3, [pc, #380]	; (8002694 <ADC_ConfigureBoostMode+0x188>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01c      	beq.n	800255a <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002520:	f001 fbbe 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8002524:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800252e:	d010      	beq.n	8002552 <ADC_ConfigureBoostMode+0x46>
 8002530:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002534:	d871      	bhi.n	800261a <ADC_ConfigureBoostMode+0x10e>
 8002536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253a:	d002      	beq.n	8002542 <ADC_ConfigureBoostMode+0x36>
 800253c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002540:	d16b      	bne.n	800261a <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	0c1b      	lsrs	r3, r3, #16
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	fbb2 f3f3 	udiv	r3, r2, r3
 800254e:	60fb      	str	r3, [r7, #12]
        break;
 8002550:	e066      	b.n	8002620 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	089b      	lsrs	r3, r3, #2
 8002556:	60fb      	str	r3, [r7, #12]
        break;
 8002558:	e062      	b.n	8002620 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800255a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800255e:	f002 fb07 	bl	8004b70 <HAL_RCCEx_GetPeriphCLKFreq>
 8002562:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800256c:	d051      	beq.n	8002612 <ADC_ConfigureBoostMode+0x106>
 800256e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002572:	d854      	bhi.n	800261e <ADC_ConfigureBoostMode+0x112>
 8002574:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002578:	d047      	beq.n	800260a <ADC_ConfigureBoostMode+0xfe>
 800257a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800257e:	d84e      	bhi.n	800261e <ADC_ConfigureBoostMode+0x112>
 8002580:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002584:	d03d      	beq.n	8002602 <ADC_ConfigureBoostMode+0xf6>
 8002586:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800258a:	d848      	bhi.n	800261e <ADC_ConfigureBoostMode+0x112>
 800258c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002590:	d033      	beq.n	80025fa <ADC_ConfigureBoostMode+0xee>
 8002592:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002596:	d842      	bhi.n	800261e <ADC_ConfigureBoostMode+0x112>
 8002598:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800259c:	d029      	beq.n	80025f2 <ADC_ConfigureBoostMode+0xe6>
 800259e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80025a2:	d83c      	bhi.n	800261e <ADC_ConfigureBoostMode+0x112>
 80025a4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80025a8:	d01a      	beq.n	80025e0 <ADC_ConfigureBoostMode+0xd4>
 80025aa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80025ae:	d836      	bhi.n	800261e <ADC_ConfigureBoostMode+0x112>
 80025b0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80025b4:	d014      	beq.n	80025e0 <ADC_ConfigureBoostMode+0xd4>
 80025b6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80025ba:	d830      	bhi.n	800261e <ADC_ConfigureBoostMode+0x112>
 80025bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025c0:	d00e      	beq.n	80025e0 <ADC_ConfigureBoostMode+0xd4>
 80025c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025c6:	d82a      	bhi.n	800261e <ADC_ConfigureBoostMode+0x112>
 80025c8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80025cc:	d008      	beq.n	80025e0 <ADC_ConfigureBoostMode+0xd4>
 80025ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80025d2:	d824      	bhi.n	800261e <ADC_ConfigureBoostMode+0x112>
 80025d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025d8:	d002      	beq.n	80025e0 <ADC_ConfigureBoostMode+0xd4>
 80025da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025de:	d11e      	bne.n	800261e <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	0c9b      	lsrs	r3, r3, #18
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ee:	60fb      	str	r3, [r7, #12]
        break;
 80025f0:	e016      	b.n	8002620 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	60fb      	str	r3, [r7, #12]
        break;
 80025f8:	e012      	b.n	8002620 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	60fb      	str	r3, [r7, #12]
        break;
 8002600:	e00e      	b.n	8002620 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	60fb      	str	r3, [r7, #12]
        break;
 8002608:	e00a      	b.n	8002620 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	09db      	lsrs	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]
        break;
 8002610:	e006      	b.n	8002620 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	60fb      	str	r3, [r7, #12]
        break;
 8002618:	e002      	b.n	8002620 <ADC_ConfigureBoostMode+0x114>
        break;
 800261a:	bf00      	nop
 800261c:	e000      	b.n	8002620 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 800261e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	085b      	lsrs	r3, r3, #1
 8002624:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4a1b      	ldr	r2, [pc, #108]	; (8002698 <ADC_ConfigureBoostMode+0x18c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d808      	bhi.n	8002640 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800263c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800263e:	e025      	b.n	800268c <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4a16      	ldr	r2, [pc, #88]	; (800269c <ADC_ConfigureBoostMode+0x190>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d80a      	bhi.n	800265e <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800265a:	609a      	str	r2, [r3, #8]
}
 800265c:	e016      	b.n	800268c <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4a0f      	ldr	r2, [pc, #60]	; (80026a0 <ADC_ConfigureBoostMode+0x194>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d80a      	bhi.n	800267c <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002678:	609a      	str	r2, [r3, #8]
}
 800267a:	e007      	b.n	800268c <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800268a:	609a      	str	r2, [r3, #8]
}
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40022300 	.word	0x40022300
 8002698:	005f5e10 	.word	0x005f5e10
 800269c:	00bebc20 	.word	0x00bebc20
 80026a0:	017d7840 	.word	0x017d7840

080026a4 <LL_ADC_IsEnabled>:
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <LL_ADC_IsEnabled+0x18>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <LL_ADC_IsEnabled+0x1a>
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <LL_ADC_REG_IsConversionOngoing>:
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d101      	bne.n	80026e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b09f      	sub	sp, #124	; 0x7c
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800270a:	2302      	movs	r3, #2
 800270c:	e080      	b.n	8002810 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800271a:	2300      	movs	r3, #0
 800271c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a3d      	ldr	r2, [pc, #244]	; (8002818 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d102      	bne.n	800272e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002728:	4b3c      	ldr	r3, [pc, #240]	; (800281c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	e001      	b.n	8002732 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10b      	bne.n	8002750 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273c:	f043 0220 	orr.w	r2, r3, #32
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e05f      	b.n	8002810 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff ffb9 	bl	80026ca <LL_ADC_REG_IsConversionOngoing>
 8002758:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff ffb3 	bl	80026ca <LL_ADC_REG_IsConversionOngoing>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d141      	bne.n	80027ee <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800276a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800276c:	2b00      	cmp	r3, #0
 800276e:	d13e      	bne.n	80027ee <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002770:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002772:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800277c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	431a      	orrs	r2, r3
 800278a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800278c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800278e:	4822      	ldr	r0, [pc, #136]	; (8002818 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002790:	f7ff ff88 	bl	80026a4 <LL_ADC_IsEnabled>
 8002794:	4604      	mov	r4, r0
 8002796:	4821      	ldr	r0, [pc, #132]	; (800281c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002798:	f7ff ff84 	bl	80026a4 <LL_ADC_IsEnabled>
 800279c:	4603      	mov	r3, r0
 800279e:	4323      	orrs	r3, r4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d12e      	bne.n	8002802 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80027a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	6811      	ldr	r1, [r2, #0]
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	6892      	ldr	r2, [r2, #8]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	431a      	orrs	r2, r3
 80027b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027bc:	e021      	b.n	8002802 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80027be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027ca:	4813      	ldr	r0, [pc, #76]	; (8002818 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80027cc:	f7ff ff6a 	bl	80026a4 <LL_ADC_IsEnabled>
 80027d0:	4604      	mov	r4, r0
 80027d2:	4812      	ldr	r0, [pc, #72]	; (800281c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80027d4:	f7ff ff66 	bl	80026a4 <LL_ADC_IsEnabled>
 80027d8:	4603      	mov	r3, r0
 80027da:	4323      	orrs	r3, r4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d110      	bne.n	8002802 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80027e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80027ea:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027ec:	e009      	b.n	8002802 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f2:	f043 0220 	orr.w	r2, r3, #32
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002800:	e000      	b.n	8002804 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002802:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800280c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002810:	4618      	mov	r0, r3
 8002812:	377c      	adds	r7, #124	; 0x7c
 8002814:	46bd      	mov	sp, r7
 8002816:	bd90      	pop	{r4, r7, pc}
 8002818:	40022000 	.word	0x40022000
 800281c:	40022100 	.word	0x40022100
 8002820:	40022300 	.word	0x40022300
 8002824:	fffff0e0 	.word	0xfffff0e0

08002828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <__NVIC_SetPriorityGrouping+0x40>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002844:	4013      	ands	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <__NVIC_SetPriorityGrouping+0x44>)
 8002852:	4313      	orrs	r3, r2
 8002854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002856:	4a04      	ldr	r2, [pc, #16]	; (8002868 <__NVIC_SetPriorityGrouping+0x40>)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	60d3      	str	r3, [r2, #12]
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000ed00 	.word	0xe000ed00
 800286c:	05fa0000 	.word	0x05fa0000

08002870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <__NVIC_GetPriorityGrouping+0x18>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	f003 0307 	and.w	r3, r3, #7
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	6039      	str	r1, [r7, #0]
 8002896:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002898:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800289c:	2b00      	cmp	r3, #0
 800289e:	db0a      	blt.n	80028b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	490c      	ldr	r1, [pc, #48]	; (80028d8 <__NVIC_SetPriority+0x4c>)
 80028a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028aa:	0112      	lsls	r2, r2, #4
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	440b      	add	r3, r1
 80028b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b4:	e00a      	b.n	80028cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4908      	ldr	r1, [pc, #32]	; (80028dc <__NVIC_SetPriority+0x50>)
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	3b04      	subs	r3, #4
 80028c4:	0112      	lsls	r2, r2, #4
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	440b      	add	r3, r1
 80028ca:	761a      	strb	r2, [r3, #24]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000e100 	.word	0xe000e100
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	; 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f1c3 0307 	rsb	r3, r3, #7
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	bf28      	it	cs
 80028fe:	2304      	movcs	r3, #4
 8002900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3304      	adds	r3, #4
 8002906:	2b06      	cmp	r3, #6
 8002908:	d902      	bls.n	8002910 <NVIC_EncodePriority+0x30>
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3b03      	subs	r3, #3
 800290e:	e000      	b.n	8002912 <NVIC_EncodePriority+0x32>
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	f04f 32ff 	mov.w	r2, #4294967295
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43da      	mvns	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	401a      	ands	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002928:	f04f 31ff 	mov.w	r1, #4294967295
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	43d9      	mvns	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	4313      	orrs	r3, r2
         );
}
 800293a:	4618      	mov	r0, r3
 800293c:	3724      	adds	r7, #36	; 0x24
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002958:	d301      	bcc.n	800295e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800295a:	2301      	movs	r3, #1
 800295c:	e00f      	b.n	800297e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800295e:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <SysTick_Config+0x40>)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3b01      	subs	r3, #1
 8002964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002966:	210f      	movs	r1, #15
 8002968:	f04f 30ff 	mov.w	r0, #4294967295
 800296c:	f7ff ff8e 	bl	800288c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <SysTick_Config+0x40>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002976:	4b04      	ldr	r3, [pc, #16]	; (8002988 <SysTick_Config+0x40>)
 8002978:	2207      	movs	r2, #7
 800297a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	e000e010 	.word	0xe000e010

0800298c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff ff47 	bl	8002828 <__NVIC_SetPriorityGrouping>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b086      	sub	sp, #24
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4603      	mov	r3, r0
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029b0:	f7ff ff5e 	bl	8002870 <__NVIC_GetPriorityGrouping>
 80029b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	6978      	ldr	r0, [r7, #20]
 80029bc:	f7ff ff90 	bl	80028e0 <NVIC_EncodePriority>
 80029c0:	4602      	mov	r2, r0
 80029c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff5f 	bl	800288c <__NVIC_SetPriority>
}
 80029ce:	bf00      	nop
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff ffb2 	bl	8002948 <SysTick_Config>
 80029e4:	4603      	mov	r3, r0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	; 0x24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80029fe:	4b89      	ldr	r3, [pc, #548]	; (8002c24 <HAL_GPIO_Init+0x234>)
 8002a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a02:	e194      	b.n	8002d2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	2101      	movs	r1, #1
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8186 	beq.w	8002d28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d005      	beq.n	8002a34 <HAL_GPIO_Init+0x44>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d130      	bne.n	8002a96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	2203      	movs	r2, #3
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	f003 0201 	and.w	r2, r3, #1
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d017      	beq.n	8002ad2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	2203      	movs	r2, #3
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d123      	bne.n	8002b26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	08da      	lsrs	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3208      	adds	r2, #8
 8002ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	220f      	movs	r2, #15
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	08da      	lsrs	r2, r3, #3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3208      	adds	r2, #8
 8002b20:	69b9      	ldr	r1, [r7, #24]
 8002b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	2203      	movs	r2, #3
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0203 	and.w	r2, r3, #3
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 80e0 	beq.w	8002d28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b68:	4b2f      	ldr	r3, [pc, #188]	; (8002c28 <HAL_GPIO_Init+0x238>)
 8002b6a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002b6e:	4a2e      	ldr	r2, [pc, #184]	; (8002c28 <HAL_GPIO_Init+0x238>)
 8002b70:	f043 0302 	orr.w	r3, r3, #2
 8002b74:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002b78:	4b2b      	ldr	r3, [pc, #172]	; (8002c28 <HAL_GPIO_Init+0x238>)
 8002b7a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b86:	4a29      	ldr	r2, [pc, #164]	; (8002c2c <HAL_GPIO_Init+0x23c>)
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a20      	ldr	r2, [pc, #128]	; (8002c30 <HAL_GPIO_Init+0x240>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d052      	beq.n	8002c58 <HAL_GPIO_Init+0x268>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a1f      	ldr	r2, [pc, #124]	; (8002c34 <HAL_GPIO_Init+0x244>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d031      	beq.n	8002c1e <HAL_GPIO_Init+0x22e>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a1e      	ldr	r2, [pc, #120]	; (8002c38 <HAL_GPIO_Init+0x248>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d02b      	beq.n	8002c1a <HAL_GPIO_Init+0x22a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a1d      	ldr	r2, [pc, #116]	; (8002c3c <HAL_GPIO_Init+0x24c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d025      	beq.n	8002c16 <HAL_GPIO_Init+0x226>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a1c      	ldr	r2, [pc, #112]	; (8002c40 <HAL_GPIO_Init+0x250>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01f      	beq.n	8002c12 <HAL_GPIO_Init+0x222>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a1b      	ldr	r2, [pc, #108]	; (8002c44 <HAL_GPIO_Init+0x254>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d019      	beq.n	8002c0e <HAL_GPIO_Init+0x21e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a1a      	ldr	r2, [pc, #104]	; (8002c48 <HAL_GPIO_Init+0x258>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d013      	beq.n	8002c0a <HAL_GPIO_Init+0x21a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a19      	ldr	r2, [pc, #100]	; (8002c4c <HAL_GPIO_Init+0x25c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00d      	beq.n	8002c06 <HAL_GPIO_Init+0x216>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a18      	ldr	r2, [pc, #96]	; (8002c50 <HAL_GPIO_Init+0x260>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d007      	beq.n	8002c02 <HAL_GPIO_Init+0x212>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a17      	ldr	r2, [pc, #92]	; (8002c54 <HAL_GPIO_Init+0x264>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d101      	bne.n	8002bfe <HAL_GPIO_Init+0x20e>
 8002bfa:	2309      	movs	r3, #9
 8002bfc:	e02d      	b.n	8002c5a <HAL_GPIO_Init+0x26a>
 8002bfe:	230a      	movs	r3, #10
 8002c00:	e02b      	b.n	8002c5a <HAL_GPIO_Init+0x26a>
 8002c02:	2308      	movs	r3, #8
 8002c04:	e029      	b.n	8002c5a <HAL_GPIO_Init+0x26a>
 8002c06:	2307      	movs	r3, #7
 8002c08:	e027      	b.n	8002c5a <HAL_GPIO_Init+0x26a>
 8002c0a:	2306      	movs	r3, #6
 8002c0c:	e025      	b.n	8002c5a <HAL_GPIO_Init+0x26a>
 8002c0e:	2305      	movs	r3, #5
 8002c10:	e023      	b.n	8002c5a <HAL_GPIO_Init+0x26a>
 8002c12:	2304      	movs	r3, #4
 8002c14:	e021      	b.n	8002c5a <HAL_GPIO_Init+0x26a>
 8002c16:	2303      	movs	r3, #3
 8002c18:	e01f      	b.n	8002c5a <HAL_GPIO_Init+0x26a>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e01d      	b.n	8002c5a <HAL_GPIO_Init+0x26a>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e01b      	b.n	8002c5a <HAL_GPIO_Init+0x26a>
 8002c22:	bf00      	nop
 8002c24:	58000080 	.word	0x58000080
 8002c28:	58024400 	.word	0x58024400
 8002c2c:	58000400 	.word	0x58000400
 8002c30:	58020000 	.word	0x58020000
 8002c34:	58020400 	.word	0x58020400
 8002c38:	58020800 	.word	0x58020800
 8002c3c:	58020c00 	.word	0x58020c00
 8002c40:	58021000 	.word	0x58021000
 8002c44:	58021400 	.word	0x58021400
 8002c48:	58021800 	.word	0x58021800
 8002c4c:	58021c00 	.word	0x58021c00
 8002c50:	58022000 	.word	0x58022000
 8002c54:	58022400 	.word	0x58022400
 8002c58:	2300      	movs	r3, #0
 8002c5a:	69fa      	ldr	r2, [r7, #28]
 8002c5c:	f002 0203 	and.w	r2, r2, #3
 8002c60:	0092      	lsls	r2, r2, #2
 8002c62:	4093      	lsls	r3, r2
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c6a:	4938      	ldr	r1, [pc, #224]	; (8002d4c <HAL_GPIO_Init+0x35c>)
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	089b      	lsrs	r3, r3, #2
 8002c70:	3302      	adds	r3, #2
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f47f ae63 	bne.w	8002a04 <HAL_GPIO_Init+0x14>
  }
}
 8002d3e:	bf00      	nop
 8002d40:	bf00      	nop
 8002d42:	3724      	adds	r7, #36	; 0x24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	58000400 	.word	0x58000400

08002d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d60:	787b      	ldrb	r3, [r7, #1]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d66:	887a      	ldrh	r2, [r7, #2]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002d6c:	e003      	b.n	8002d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d6e:	887b      	ldrh	r3, [r7, #2]
 8002d70:	041a      	lsls	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	619a      	str	r2, [r3, #24]
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002d8c:	4b29      	ldr	r3, [pc, #164]	; (8002e34 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	2b06      	cmp	r3, #6
 8002d96:	d00a      	beq.n	8002dae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d98:	4b26      	ldr	r3, [pc, #152]	; (8002e34 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d001      	beq.n	8002daa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e040      	b.n	8002e2c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e03e      	b.n	8002e2c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002dae:	4b21      	ldr	r3, [pc, #132]	; (8002e34 <HAL_PWREx_ConfigSupply+0xb0>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002db6:	491f      	ldr	r1, [pc, #124]	; (8002e34 <HAL_PWREx_ConfigSupply+0xb0>)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002dbe:	f7fe fb37 	bl	8001430 <HAL_GetTick>
 8002dc2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002dc4:	e009      	b.n	8002dda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002dc6:	f7fe fb33 	bl	8001430 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dd4:	d901      	bls.n	8002dda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e028      	b.n	8002e2c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002dda:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de6:	d1ee      	bne.n	8002dc6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b1e      	cmp	r3, #30
 8002dec:	d008      	beq.n	8002e00 <HAL_PWREx_ConfigSupply+0x7c>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b2e      	cmp	r3, #46	; 0x2e
 8002df2:	d005      	beq.n	8002e00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b1d      	cmp	r3, #29
 8002df8:	d002      	beq.n	8002e00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b2d      	cmp	r3, #45	; 0x2d
 8002dfe:	d114      	bne.n	8002e2a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002e00:	f7fe fb16 	bl	8001430 <HAL_GetTick>
 8002e04:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e06:	e009      	b.n	8002e1c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e08:	f7fe fb12 	bl	8001430 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e16:	d901      	bls.n	8002e1c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e007      	b.n	8002e2c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e1c:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e28:	d1ee      	bne.n	8002e08 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	58024800 	.word	0x58024800

08002e38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08c      	sub	sp, #48	; 0x30
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e3f4      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80b3 	beq.w	8002fbe <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e58:	4b95      	ldr	r3, [pc, #596]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e62:	4b93      	ldr	r3, [pc, #588]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6a:	2b10      	cmp	r3, #16
 8002e6c:	d007      	beq.n	8002e7e <HAL_RCC_OscConfig+0x46>
 8002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e70:	2b18      	cmp	r3, #24
 8002e72:	d112      	bne.n	8002e9a <HAL_RCC_OscConfig+0x62>
 8002e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d10d      	bne.n	8002e9a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7e:	4b8c      	ldr	r3, [pc, #560]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 8098 	beq.w	8002fbc <HAL_RCC_OscConfig+0x184>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f040 8093 	bne.w	8002fbc <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e3cc      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x7a>
 8002ea4:	4b82      	ldr	r3, [pc, #520]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a81      	ldr	r2, [pc, #516]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	e058      	b.n	8002f64 <HAL_RCC_OscConfig+0x12c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d112      	bne.n	8002ee0 <HAL_RCC_OscConfig+0xa8>
 8002eba:	4b7d      	ldr	r3, [pc, #500]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a7c      	ldr	r2, [pc, #496]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	4b7a      	ldr	r3, [pc, #488]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a79      	ldr	r2, [pc, #484]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002ecc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	4b77      	ldr	r3, [pc, #476]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a76      	ldr	r2, [pc, #472]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002ed8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e041      	b.n	8002f64 <HAL_RCC_OscConfig+0x12c>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee8:	d112      	bne.n	8002f10 <HAL_RCC_OscConfig+0xd8>
 8002eea:	4b71      	ldr	r3, [pc, #452]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a70      	ldr	r2, [pc, #448]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b6e      	ldr	r3, [pc, #440]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a6d      	ldr	r2, [pc, #436]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002efc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	4b6b      	ldr	r3, [pc, #428]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a6a      	ldr	r2, [pc, #424]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	e029      	b.n	8002f64 <HAL_RCC_OscConfig+0x12c>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002f18:	d112      	bne.n	8002f40 <HAL_RCC_OscConfig+0x108>
 8002f1a:	4b65      	ldr	r3, [pc, #404]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a64      	ldr	r2, [pc, #400]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	4b62      	ldr	r3, [pc, #392]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a61      	ldr	r2, [pc, #388]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002f2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b5f      	ldr	r3, [pc, #380]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a5e      	ldr	r2, [pc, #376]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e011      	b.n	8002f64 <HAL_RCC_OscConfig+0x12c>
 8002f40:	4b5b      	ldr	r3, [pc, #364]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a5a      	ldr	r2, [pc, #360]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	4b58      	ldr	r3, [pc, #352]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a57      	ldr	r2, [pc, #348]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	4b55      	ldr	r3, [pc, #340]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a54      	ldr	r2, [pc, #336]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002f5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d013      	beq.n	8002f94 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fa60 	bl	8001430 <HAL_GetTick>
 8002f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f74:	f7fe fa5c 	bl	8001430 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e356      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f86:	4b4a      	ldr	r3, [pc, #296]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0x13c>
 8002f92:	e014      	b.n	8002fbe <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fe fa4c 	bl	8001430 <HAL_GetTick>
 8002f98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7fe fa48 	bl	8001430 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e342      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fae:	4b40      	ldr	r3, [pc, #256]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x164>
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 808d 	beq.w	80030e6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fcc:	4b38      	ldr	r3, [pc, #224]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fd4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fd6:	4b36      	ldr	r3, [pc, #216]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fda:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d007      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x1ba>
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	2b18      	cmp	r3, #24
 8002fe6:	d137      	bne.n	8003058 <HAL_RCC_OscConfig+0x220>
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d132      	bne.n	8003058 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ff2:	4b2f      	ldr	r3, [pc, #188]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d005      	beq.n	800300a <HAL_RCC_OscConfig+0x1d2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e314      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800300a:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 0219 	bic.w	r2, r3, #25
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	4926      	ldr	r1, [pc, #152]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8003018:	4313      	orrs	r3, r2
 800301a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800301c:	f7fe fa08 	bl	8001430 <HAL_GetTick>
 8003020:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003024:	f7fe fa04 	bl	8001430 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e2fe      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003036:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003042:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	061b      	lsls	r3, r3, #24
 8003050:	4917      	ldr	r1, [pc, #92]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003056:	e046      	b.n	80030e6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d029      	beq.n	80030b4 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003060:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f023 0219 	bic.w	r2, r3, #25
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4910      	ldr	r1, [pc, #64]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7fe f9dd 	bl	8001430 <HAL_GetTick>
 8003076:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800307a:	f7fe f9d9 	bl	8001430 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e2d3      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800308c:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f0      	beq.n	800307a <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	061b      	lsls	r3, r3, #24
 80030a6:	4902      	ldr	r1, [pc, #8]	; (80030b0 <HAL_RCC_OscConfig+0x278>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]
 80030ac:	e01b      	b.n	80030e6 <HAL_RCC_OscConfig+0x2ae>
 80030ae:	bf00      	nop
 80030b0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030b4:	4b97      	ldr	r3, [pc, #604]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a96      	ldr	r2, [pc, #600]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fe f9b6 	bl	8001430 <HAL_GetTick>
 80030c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030c8:	f7fe f9b2 	bl	8001430 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e2ac      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030da:	4b8e      	ldr	r3, [pc, #568]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d06a      	beq.n	80031c8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030f2:	4b88      	ldr	r3, [pc, #544]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030fc:	4b85      	ldr	r3, [pc, #532]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b08      	cmp	r3, #8
 8003106:	d007      	beq.n	8003118 <HAL_RCC_OscConfig+0x2e0>
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b18      	cmp	r3, #24
 800310c:	d11b      	bne.n	8003146 <HAL_RCC_OscConfig+0x30e>
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	2b01      	cmp	r3, #1
 8003116:	d116      	bne.n	8003146 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003118:	4b7e      	ldr	r3, [pc, #504]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_OscConfig+0x2f8>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	2b80      	cmp	r3, #128	; 0x80
 800312a:	d001      	beq.n	8003130 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e281      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003130:	4b78      	ldr	r3, [pc, #480]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	061b      	lsls	r3, r3, #24
 800313e:	4975      	ldr	r1, [pc, #468]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 8003140:	4313      	orrs	r3, r2
 8003142:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003144:	e040      	b.n	80031c8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d023      	beq.n	8003196 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800314e:	4b71      	ldr	r3, [pc, #452]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a70      	ldr	r2, [pc, #448]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 8003154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315a:	f7fe f969 	bl	8001430 <HAL_GetTick>
 800315e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003162:	f7fe f965 	bl	8001430 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e25f      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003174:	4b67      	ldr	r3, [pc, #412]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003180:	4b64      	ldr	r3, [pc, #400]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	061b      	lsls	r3, r3, #24
 800318e:	4961      	ldr	r1, [pc, #388]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 8003190:	4313      	orrs	r3, r2
 8003192:	60cb      	str	r3, [r1, #12]
 8003194:	e018      	b.n	80031c8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003196:	4b5f      	ldr	r3, [pc, #380]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a5e      	ldr	r2, [pc, #376]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 800319c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a2:	f7fe f945 	bl	8001430 <HAL_GetTick>
 80031a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80031aa:	f7fe f941 	bl	8001430 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e23b      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031bc:	4b55      	ldr	r3, [pc, #340]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f0      	bne.n	80031aa <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d036      	beq.n	8003242 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d019      	beq.n	8003210 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031dc:	4b4d      	ldr	r3, [pc, #308]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 80031de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e0:	4a4c      	ldr	r2, [pc, #304]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fe f922 	bl	8001430 <HAL_GetTick>
 80031ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f0:	f7fe f91e 	bl	8001430 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e218      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003202:	4b44      	ldr	r3, [pc, #272]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 8003204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x3b8>
 800320e:	e018      	b.n	8003242 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003210:	4b40      	ldr	r3, [pc, #256]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 8003212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003214:	4a3f      	ldr	r2, [pc, #252]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321c:	f7fe f908 	bl	8001430 <HAL_GetTick>
 8003220:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003224:	f7fe f904 	bl	8001430 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e1fe      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003236:	4b37      	ldr	r3, [pc, #220]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 8003238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b00      	cmp	r3, #0
 800324c:	d036      	beq.n	80032bc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d019      	beq.n	800328a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003256:	4b2f      	ldr	r3, [pc, #188]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a2e      	ldr	r2, [pc, #184]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 800325c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003260:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003262:	f7fe f8e5 	bl	8001430 <HAL_GetTick>
 8003266:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800326a:	f7fe f8e1 	bl	8001430 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e1db      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800327c:	4b25      	ldr	r3, [pc, #148]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x432>
 8003288:	e018      	b.n	80032bc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800328a:	4b22      	ldr	r3, [pc, #136]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a21      	ldr	r2, [pc, #132]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 8003290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003294:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003296:	f7fe f8cb 	bl	8001430 <HAL_GetTick>
 800329a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800329e:	f7fe f8c7 	bl	8001430 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e1c1      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032b0:	4b18      	ldr	r3, [pc, #96]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1f0      	bne.n	800329e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80af 	beq.w	8003428 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032ca:	4b13      	ldr	r3, [pc, #76]	; (8003318 <HAL_RCC_OscConfig+0x4e0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a12      	ldr	r2, [pc, #72]	; (8003318 <HAL_RCC_OscConfig+0x4e0>)
 80032d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032d6:	f7fe f8ab 	bl	8001430 <HAL_GetTick>
 80032da:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80032de:	f7fe f8a7 	bl	8001430 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b64      	cmp	r3, #100	; 0x64
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e1a1      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032f0:	4b09      	ldr	r3, [pc, #36]	; (8003318 <HAL_RCC_OscConfig+0x4e0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10b      	bne.n	800331c <HAL_RCC_OscConfig+0x4e4>
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	4a02      	ldr	r2, [pc, #8]	; (8003314 <HAL_RCC_OscConfig+0x4dc>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6713      	str	r3, [r2, #112]	; 0x70
 8003310:	e05b      	b.n	80033ca <HAL_RCC_OscConfig+0x592>
 8003312:	bf00      	nop
 8003314:	58024400 	.word	0x58024400
 8003318:	58024800 	.word	0x58024800
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d112      	bne.n	800334a <HAL_RCC_OscConfig+0x512>
 8003324:	4b9d      	ldr	r3, [pc, #628]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	4a9c      	ldr	r2, [pc, #624]	; (800359c <HAL_RCC_OscConfig+0x764>)
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	6713      	str	r3, [r2, #112]	; 0x70
 8003330:	4b9a      	ldr	r3, [pc, #616]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003334:	4a99      	ldr	r2, [pc, #612]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800333a:	6713      	str	r3, [r2, #112]	; 0x70
 800333c:	4b97      	ldr	r3, [pc, #604]	; (800359c <HAL_RCC_OscConfig+0x764>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003340:	4a96      	ldr	r2, [pc, #600]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003342:	f023 0304 	bic.w	r3, r3, #4
 8003346:	6713      	str	r3, [r2, #112]	; 0x70
 8003348:	e03f      	b.n	80033ca <HAL_RCC_OscConfig+0x592>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b05      	cmp	r3, #5
 8003350:	d112      	bne.n	8003378 <HAL_RCC_OscConfig+0x540>
 8003352:	4b92      	ldr	r3, [pc, #584]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003356:	4a91      	ldr	r2, [pc, #580]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003358:	f043 0304 	orr.w	r3, r3, #4
 800335c:	6713      	str	r3, [r2, #112]	; 0x70
 800335e:	4b8f      	ldr	r3, [pc, #572]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003362:	4a8e      	ldr	r2, [pc, #568]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003368:	6713      	str	r3, [r2, #112]	; 0x70
 800336a:	4b8c      	ldr	r3, [pc, #560]	; (800359c <HAL_RCC_OscConfig+0x764>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336e:	4a8b      	ldr	r2, [pc, #556]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	6713      	str	r3, [r2, #112]	; 0x70
 8003376:	e028      	b.n	80033ca <HAL_RCC_OscConfig+0x592>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b85      	cmp	r3, #133	; 0x85
 800337e:	d112      	bne.n	80033a6 <HAL_RCC_OscConfig+0x56e>
 8003380:	4b86      	ldr	r3, [pc, #536]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	4a85      	ldr	r2, [pc, #532]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003386:	f043 0304 	orr.w	r3, r3, #4
 800338a:	6713      	str	r3, [r2, #112]	; 0x70
 800338c:	4b83      	ldr	r3, [pc, #524]	; (800359c <HAL_RCC_OscConfig+0x764>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	4a82      	ldr	r2, [pc, #520]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003396:	6713      	str	r3, [r2, #112]	; 0x70
 8003398:	4b80      	ldr	r3, [pc, #512]	; (800359c <HAL_RCC_OscConfig+0x764>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	4a7f      	ldr	r2, [pc, #508]	; (800359c <HAL_RCC_OscConfig+0x764>)
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	6713      	str	r3, [r2, #112]	; 0x70
 80033a4:	e011      	b.n	80033ca <HAL_RCC_OscConfig+0x592>
 80033a6:	4b7d      	ldr	r3, [pc, #500]	; (800359c <HAL_RCC_OscConfig+0x764>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	4a7c      	ldr	r2, [pc, #496]	; (800359c <HAL_RCC_OscConfig+0x764>)
 80033ac:	f023 0301 	bic.w	r3, r3, #1
 80033b0:	6713      	str	r3, [r2, #112]	; 0x70
 80033b2:	4b7a      	ldr	r3, [pc, #488]	; (800359c <HAL_RCC_OscConfig+0x764>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b6:	4a79      	ldr	r2, [pc, #484]	; (800359c <HAL_RCC_OscConfig+0x764>)
 80033b8:	f023 0304 	bic.w	r3, r3, #4
 80033bc:	6713      	str	r3, [r2, #112]	; 0x70
 80033be:	4b77      	ldr	r3, [pc, #476]	; (800359c <HAL_RCC_OscConfig+0x764>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c2:	4a76      	ldr	r2, [pc, #472]	; (800359c <HAL_RCC_OscConfig+0x764>)
 80033c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d015      	beq.n	80033fe <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d2:	f7fe f82d 	bl	8001430 <HAL_GetTick>
 80033d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033d8:	e00a      	b.n	80033f0 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033da:	f7fe f829 	bl	8001430 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e121      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033f0:	4b6a      	ldr	r3, [pc, #424]	; (800359c <HAL_RCC_OscConfig+0x764>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ee      	beq.n	80033da <HAL_RCC_OscConfig+0x5a2>
 80033fc:	e014      	b.n	8003428 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fe:	f7fe f817 	bl	8001430 <HAL_GetTick>
 8003402:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003404:	e00a      	b.n	800341c <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003406:	f7fe f813 	bl	8001430 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f241 3288 	movw	r2, #5000	; 0x1388
 8003414:	4293      	cmp	r3, r2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e10b      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800341c:	4b5f      	ldr	r3, [pc, #380]	; (800359c <HAL_RCC_OscConfig+0x764>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1ee      	bne.n	8003406 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 8100 	beq.w	8003632 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003432:	4b5a      	ldr	r3, [pc, #360]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800343a:	2b18      	cmp	r3, #24
 800343c:	f000 80bb 	beq.w	80035b6 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	2b02      	cmp	r3, #2
 8003446:	f040 8095 	bne.w	8003574 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344a:	4b54      	ldr	r3, [pc, #336]	; (800359c <HAL_RCC_OscConfig+0x764>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a53      	ldr	r2, [pc, #332]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003450:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003456:	f7fd ffeb 	bl	8001430 <HAL_GetTick>
 800345a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345e:	f7fd ffe7 	bl	8001430 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e0e1      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003470:	4b4a      	ldr	r3, [pc, #296]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f0      	bne.n	800345e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800347c:	4b47      	ldr	r3, [pc, #284]	; (800359c <HAL_RCC_OscConfig+0x764>)
 800347e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003480:	4b47      	ldr	r3, [pc, #284]	; (80035a0 <HAL_RCC_OscConfig+0x768>)
 8003482:	4013      	ands	r3, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800348c:	0112      	lsls	r2, r2, #4
 800348e:	430a      	orrs	r2, r1
 8003490:	4942      	ldr	r1, [pc, #264]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003492:	4313      	orrs	r3, r2
 8003494:	628b      	str	r3, [r1, #40]	; 0x28
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	3b01      	subs	r3, #1
 800349c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a4:	3b01      	subs	r3, #1
 80034a6:	025b      	lsls	r3, r3, #9
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	3b01      	subs	r3, #1
 80034b2:	041b      	lsls	r3, r3, #16
 80034b4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034be:	3b01      	subs	r3, #1
 80034c0:	061b      	lsls	r3, r3, #24
 80034c2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80034c6:	4935      	ldr	r1, [pc, #212]	; (800359c <HAL_RCC_OscConfig+0x764>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80034cc:	4b33      	ldr	r3, [pc, #204]	; (800359c <HAL_RCC_OscConfig+0x764>)
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	4a32      	ldr	r2, [pc, #200]	; (800359c <HAL_RCC_OscConfig+0x764>)
 80034d2:	f023 0301 	bic.w	r3, r3, #1
 80034d6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034d8:	4b30      	ldr	r3, [pc, #192]	; (800359c <HAL_RCC_OscConfig+0x764>)
 80034da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034dc:	4b31      	ldr	r3, [pc, #196]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80034de:	4013      	ands	r3, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034e4:	00d2      	lsls	r2, r2, #3
 80034e6:	492d      	ldr	r1, [pc, #180]	; (800359c <HAL_RCC_OscConfig+0x764>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80034ec:	4b2b      	ldr	r3, [pc, #172]	; (800359c <HAL_RCC_OscConfig+0x764>)
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	f023 020c 	bic.w	r2, r3, #12
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	4928      	ldr	r1, [pc, #160]	; (800359c <HAL_RCC_OscConfig+0x764>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80034fe:	4b27      	ldr	r3, [pc, #156]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	f023 0202 	bic.w	r2, r3, #2
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	4924      	ldr	r1, [pc, #144]	; (800359c <HAL_RCC_OscConfig+0x764>)
 800350c:	4313      	orrs	r3, r2
 800350e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003510:	4b22      	ldr	r3, [pc, #136]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	4a21      	ldr	r2, [pc, #132]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800351c:	4b1f      	ldr	r3, [pc, #124]	; (800359c <HAL_RCC_OscConfig+0x764>)
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	4a1e      	ldr	r2, [pc, #120]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003526:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003528:	4b1c      	ldr	r3, [pc, #112]	; (800359c <HAL_RCC_OscConfig+0x764>)
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	4a1b      	ldr	r2, [pc, #108]	; (800359c <HAL_RCC_OscConfig+0x764>)
 800352e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003532:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003534:	4b19      	ldr	r3, [pc, #100]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	4a18      	ldr	r2, [pc, #96]	; (800359c <HAL_RCC_OscConfig+0x764>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003540:	4b16      	ldr	r3, [pc, #88]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a15      	ldr	r2, [pc, #84]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800354a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fd ff70 	bl	8001430 <HAL_GetTick>
 8003550:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003554:	f7fd ff6c 	bl	8001430 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e066      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x71c>
 8003572:	e05e      	b.n	8003632 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003574:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_RCC_OscConfig+0x764>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a08      	ldr	r2, [pc, #32]	; (800359c <HAL_RCC_OscConfig+0x764>)
 800357a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800357e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fd ff56 	bl	8001430 <HAL_GetTick>
 8003584:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003586:	e00f      	b.n	80035a8 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003588:	f7fd ff52 	bl	8001430 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d908      	bls.n	80035a8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e04c      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
 800359a:	bf00      	nop
 800359c:	58024400 	.word	0x58024400
 80035a0:	fffffc0c 	.word	0xfffffc0c
 80035a4:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035a8:	4b24      	ldr	r3, [pc, #144]	; (800363c <HAL_RCC_OscConfig+0x804>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e9      	bne.n	8003588 <HAL_RCC_OscConfig+0x750>
 80035b4:	e03d      	b.n	8003632 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80035b6:	4b21      	ldr	r3, [pc, #132]	; (800363c <HAL_RCC_OscConfig+0x804>)
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80035bc:	4b1f      	ldr	r3, [pc, #124]	; (800363c <HAL_RCC_OscConfig+0x804>)
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d031      	beq.n	800362e <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f003 0203 	and.w	r2, r3, #3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d12a      	bne.n	800362e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	091b      	lsrs	r3, r3, #4
 80035dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d122      	bne.n	800362e <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d11a      	bne.n	800362e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	0a5b      	lsrs	r3, r3, #9
 80035fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003604:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003606:	429a      	cmp	r2, r3
 8003608:	d111      	bne.n	800362e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	0c1b      	lsrs	r3, r3, #16
 800360e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003616:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003618:	429a      	cmp	r2, r3
 800361a:	d108      	bne.n	800362e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	0e1b      	lsrs	r3, r3, #24
 8003620:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003628:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800362a:	429a      	cmp	r2, r3
 800362c:	d001      	beq.n	8003632 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3730      	adds	r7, #48	; 0x30
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	58024400 	.word	0x58024400

08003640 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e19c      	b.n	800398e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003654:	4b8a      	ldr	r3, [pc, #552]	; (8003880 <HAL_RCC_ClockConfig+0x240>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d910      	bls.n	8003684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b87      	ldr	r3, [pc, #540]	; (8003880 <HAL_RCC_ClockConfig+0x240>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 020f 	bic.w	r2, r3, #15
 800366a:	4985      	ldr	r1, [pc, #532]	; (8003880 <HAL_RCC_ClockConfig+0x240>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b83      	ldr	r3, [pc, #524]	; (8003880 <HAL_RCC_ClockConfig+0x240>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e184      	b.n	800398e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d010      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	4b7b      	ldr	r3, [pc, #492]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800369c:	429a      	cmp	r2, r3
 800369e:	d908      	bls.n	80036b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036a0:	4b78      	ldr	r3, [pc, #480]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	4975      	ldr	r1, [pc, #468]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d010      	beq.n	80036e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	4b70      	ldr	r3, [pc, #448]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d908      	bls.n	80036e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036ce:	4b6d      	ldr	r3, [pc, #436]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	496a      	ldr	r1, [pc, #424]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d010      	beq.n	800370e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699a      	ldr	r2, [r3, #24]
 80036f0:	4b64      	ldr	r3, [pc, #400]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d908      	bls.n	800370e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036fc:	4b61      	ldr	r3, [pc, #388]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	495e      	ldr	r1, [pc, #376]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 800370a:	4313      	orrs	r3, r2
 800370c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	d010      	beq.n	800373c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69da      	ldr	r2, [r3, #28]
 800371e:	4b59      	ldr	r3, [pc, #356]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003726:	429a      	cmp	r2, r3
 8003728:	d908      	bls.n	800373c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800372a:	4b56      	ldr	r3, [pc, #344]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	4953      	ldr	r1, [pc, #332]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 8003738:	4313      	orrs	r3, r2
 800373a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d010      	beq.n	800376a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	4b4d      	ldr	r3, [pc, #308]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	429a      	cmp	r2, r3
 8003756:	d908      	bls.n	800376a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003758:	4b4a      	ldr	r3, [pc, #296]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	f023 020f 	bic.w	r2, r3, #15
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4947      	ldr	r1, [pc, #284]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 8003766:	4313      	orrs	r3, r2
 8003768:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d055      	beq.n	8003822 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003776:	4b43      	ldr	r3, [pc, #268]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	4940      	ldr	r1, [pc, #256]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 8003784:	4313      	orrs	r3, r2
 8003786:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003790:	4b3c      	ldr	r3, [pc, #240]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d121      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0f6      	b.n	800398e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d107      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037a8:	4b36      	ldr	r3, [pc, #216]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d115      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0ea      	b.n	800398e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d107      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037c0:	4b30      	ldr	r3, [pc, #192]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d109      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0de      	b.n	800398e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037d0:	4b2c      	ldr	r3, [pc, #176]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0d6      	b.n	800398e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037e0:	4b28      	ldr	r3, [pc, #160]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f023 0207 	bic.w	r2, r3, #7
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4925      	ldr	r1, [pc, #148]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f2:	f7fd fe1d 	bl	8001430 <HAL_GetTick>
 80037f6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f8:	e00a      	b.n	8003810 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037fa:	f7fd fe19 	bl	8001430 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	f241 3288 	movw	r2, #5000	; 0x1388
 8003808:	4293      	cmp	r3, r2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e0be      	b.n	800398e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003810:	4b1c      	ldr	r3, [pc, #112]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	429a      	cmp	r2, r3
 8003820:	d1eb      	bne.n	80037fa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d010      	beq.n	8003850 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	4b14      	ldr	r3, [pc, #80]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	429a      	cmp	r2, r3
 800383c:	d208      	bcs.n	8003850 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800383e:	4b11      	ldr	r3, [pc, #68]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	f023 020f 	bic.w	r2, r3, #15
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	490e      	ldr	r1, [pc, #56]	; (8003884 <HAL_RCC_ClockConfig+0x244>)
 800384c:	4313      	orrs	r3, r2
 800384e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <HAL_RCC_ClockConfig+0x240>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 030f 	and.w	r3, r3, #15
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d214      	bcs.n	8003888 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385e:	4b08      	ldr	r3, [pc, #32]	; (8003880 <HAL_RCC_ClockConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 020f 	bic.w	r2, r3, #15
 8003866:	4906      	ldr	r1, [pc, #24]	; (8003880 <HAL_RCC_ClockConfig+0x240>)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	4313      	orrs	r3, r2
 800386c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386e:	4b04      	ldr	r3, [pc, #16]	; (8003880 <HAL_RCC_ClockConfig+0x240>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d005      	beq.n	8003888 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e086      	b.n	800398e <HAL_RCC_ClockConfig+0x34e>
 8003880:	52002000 	.word	0x52002000
 8003884:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d010      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	4b3f      	ldr	r3, [pc, #252]	; (8003998 <HAL_RCC_ClockConfig+0x358>)
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d208      	bcs.n	80038b6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038a4:	4b3c      	ldr	r3, [pc, #240]	; (8003998 <HAL_RCC_ClockConfig+0x358>)
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	4939      	ldr	r1, [pc, #228]	; (8003998 <HAL_RCC_ClockConfig+0x358>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d010      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	4b34      	ldr	r3, [pc, #208]	; (8003998 <HAL_RCC_ClockConfig+0x358>)
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d208      	bcs.n	80038e4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038d2:	4b31      	ldr	r3, [pc, #196]	; (8003998 <HAL_RCC_ClockConfig+0x358>)
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	492e      	ldr	r1, [pc, #184]	; (8003998 <HAL_RCC_ClockConfig+0x358>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d010      	beq.n	8003912 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699a      	ldr	r2, [r3, #24]
 80038f4:	4b28      	ldr	r3, [pc, #160]	; (8003998 <HAL_RCC_ClockConfig+0x358>)
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d208      	bcs.n	8003912 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003900:	4b25      	ldr	r3, [pc, #148]	; (8003998 <HAL_RCC_ClockConfig+0x358>)
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	4922      	ldr	r1, [pc, #136]	; (8003998 <HAL_RCC_ClockConfig+0x358>)
 800390e:	4313      	orrs	r3, r2
 8003910:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	2b00      	cmp	r3, #0
 800391c:	d010      	beq.n	8003940 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69da      	ldr	r2, [r3, #28]
 8003922:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <HAL_RCC_ClockConfig+0x358>)
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800392a:	429a      	cmp	r2, r3
 800392c:	d208      	bcs.n	8003940 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800392e:	4b1a      	ldr	r3, [pc, #104]	; (8003998 <HAL_RCC_ClockConfig+0x358>)
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	4917      	ldr	r1, [pc, #92]	; (8003998 <HAL_RCC_ClockConfig+0x358>)
 800393c:	4313      	orrs	r3, r2
 800393e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003940:	f000 f834 	bl	80039ac <HAL_RCC_GetSysClockFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	4b14      	ldr	r3, [pc, #80]	; (8003998 <HAL_RCC_ClockConfig+0x358>)
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	0a1b      	lsrs	r3, r3, #8
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	4912      	ldr	r1, [pc, #72]	; (800399c <HAL_RCC_ClockConfig+0x35c>)
 8003952:	5ccb      	ldrb	r3, [r1, r3]
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
 800395c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800395e:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <HAL_RCC_ClockConfig+0x358>)
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	4a0d      	ldr	r2, [pc, #52]	; (800399c <HAL_RCC_ClockConfig+0x35c>)
 8003968:	5cd3      	ldrb	r3, [r2, r3]
 800396a:	f003 031f 	and.w	r3, r3, #31
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
 8003974:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <HAL_RCC_ClockConfig+0x360>)
 8003976:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003978:	4a0a      	ldr	r2, [pc, #40]	; (80039a4 <HAL_RCC_ClockConfig+0x364>)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800397e:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <HAL_RCC_ClockConfig+0x368>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fd fd0a 	bl	800139c <HAL_InitTick>
 8003988:	4603      	mov	r3, r0
 800398a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800398c:	7bfb      	ldrb	r3, [r7, #15]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	58024400 	.word	0x58024400
 800399c:	08009fcc 	.word	0x08009fcc
 80039a0:	24000004 	.word	0x24000004
 80039a4:	24000000 	.word	0x24000000
 80039a8:	24000008 	.word	0x24000008

080039ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b089      	sub	sp, #36	; 0x24
 80039b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039b2:	4bb3      	ldr	r3, [pc, #716]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039ba:	2b18      	cmp	r3, #24
 80039bc:	f200 8155 	bhi.w	8003c6a <HAL_RCC_GetSysClockFreq+0x2be>
 80039c0:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	08003a2d 	.word	0x08003a2d
 80039cc:	08003c6b 	.word	0x08003c6b
 80039d0:	08003c6b 	.word	0x08003c6b
 80039d4:	08003c6b 	.word	0x08003c6b
 80039d8:	08003c6b 	.word	0x08003c6b
 80039dc:	08003c6b 	.word	0x08003c6b
 80039e0:	08003c6b 	.word	0x08003c6b
 80039e4:	08003c6b 	.word	0x08003c6b
 80039e8:	08003a53 	.word	0x08003a53
 80039ec:	08003c6b 	.word	0x08003c6b
 80039f0:	08003c6b 	.word	0x08003c6b
 80039f4:	08003c6b 	.word	0x08003c6b
 80039f8:	08003c6b 	.word	0x08003c6b
 80039fc:	08003c6b 	.word	0x08003c6b
 8003a00:	08003c6b 	.word	0x08003c6b
 8003a04:	08003c6b 	.word	0x08003c6b
 8003a08:	08003a59 	.word	0x08003a59
 8003a0c:	08003c6b 	.word	0x08003c6b
 8003a10:	08003c6b 	.word	0x08003c6b
 8003a14:	08003c6b 	.word	0x08003c6b
 8003a18:	08003c6b 	.word	0x08003c6b
 8003a1c:	08003c6b 	.word	0x08003c6b
 8003a20:	08003c6b 	.word	0x08003c6b
 8003a24:	08003c6b 	.word	0x08003c6b
 8003a28:	08003a5f 	.word	0x08003a5f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a2c:	4b94      	ldr	r3, [pc, #592]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d009      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a38:	4b91      	ldr	r3, [pc, #580]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	08db      	lsrs	r3, r3, #3
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	4a90      	ldr	r2, [pc, #576]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
 8003a48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003a4a:	e111      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a4c:	4b8d      	ldr	r3, [pc, #564]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a4e:	61bb      	str	r3, [r7, #24]
    break;
 8003a50:	e10e      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003a52:	4b8d      	ldr	r3, [pc, #564]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a54:	61bb      	str	r3, [r7, #24]
    break;
 8003a56:	e10b      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003a58:	4b8c      	ldr	r3, [pc, #560]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a5a:	61bb      	str	r3, [r7, #24]
    break;
 8003a5c:	e108      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a5e:	4b88      	ldr	r3, [pc, #544]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003a68:	4b85      	ldr	r3, [pc, #532]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a72:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a74:	4b82      	ldr	r3, [pc, #520]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003a7e:	4b80      	ldr	r3, [pc, #512]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a82:	08db      	lsrs	r3, r3, #3
 8003a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a96:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80e1 	beq.w	8003c64 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	f000 8083 	beq.w	8003bb0 <HAL_RCC_GetSysClockFreq+0x204>
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	f200 80a1 	bhi.w	8003bf4 <HAL_RCC_GetSysClockFreq+0x248>
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x114>
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d056      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003abe:	e099      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ac0:	4b6f      	ldr	r3, [pc, #444]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d02d      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003acc:	4b6c      	ldr	r3, [pc, #432]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	08db      	lsrs	r3, r3, #3
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	4a6b      	ldr	r2, [pc, #428]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8003adc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	ee07 3a90 	vmov	s15, r3
 8003ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af6:	4b62      	ldr	r3, [pc, #392]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b0a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003b26:	e087      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	ee07 3a90 	vmov	s15, r3
 8003b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b32:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003c94 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b3a:	4b51      	ldr	r3, [pc, #324]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b42:	ee07 3a90 	vmov	s15, r3
 8003b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b4e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b6a:	e065      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	ee07 3a90 	vmov	s15, r3
 8003b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b76:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003c98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b7e:	4b40      	ldr	r3, [pc, #256]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b86:	ee07 3a90 	vmov	s15, r3
 8003b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b92:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bae:	e043      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	ee07 3a90 	vmov	s15, r3
 8003bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bba:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003c9c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bc2:	4b2f      	ldr	r3, [pc, #188]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bd6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bf2:	e021      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	ee07 3a90 	vmov	s15, r3
 8003bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003c98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c06:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c1a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c36:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003c38:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	0a5b      	lsrs	r3, r3, #9
 8003c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c42:	3301      	adds	r3, #1
 8003c44:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	ee07 3a90 	vmov	s15, r3
 8003c4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c50:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c5c:	ee17 3a90 	vmov	r3, s15
 8003c60:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003c62:	e005      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	61bb      	str	r3, [r7, #24]
    break;
 8003c68:	e002      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003c6a:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c6c:	61bb      	str	r3, [r7, #24]
    break;
 8003c6e:	bf00      	nop
  }

  return sysclockfreq;
 8003c70:	69bb      	ldr	r3, [r7, #24]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3724      	adds	r7, #36	; 0x24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	58024400 	.word	0x58024400
 8003c84:	03d09000 	.word	0x03d09000
 8003c88:	003d0900 	.word	0x003d0900
 8003c8c:	007a1200 	.word	0x007a1200
 8003c90:	46000000 	.word	0x46000000
 8003c94:	4c742400 	.word	0x4c742400
 8003c98:	4a742400 	.word	0x4a742400
 8003c9c:	4af42400 	.word	0x4af42400

08003ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003ca6:	f7ff fe81 	bl	80039ac <HAL_RCC_GetSysClockFreq>
 8003caa:	4602      	mov	r2, r0
 8003cac:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	0a1b      	lsrs	r3, r3, #8
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	490f      	ldr	r1, [pc, #60]	; (8003cf4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003cb8:	5ccb      	ldrb	r3, [r1, r3]
 8003cba:	f003 031f 	and.w	r3, r3, #31
 8003cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003cc4:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	4a09      	ldr	r2, [pc, #36]	; (8003cf4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003cce:	5cd3      	ldrb	r3, [r2, r3]
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cda:	4a07      	ldr	r2, [pc, #28]	; (8003cf8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cdc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cde:	4a07      	ldr	r2, [pc, #28]	; (8003cfc <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	58024400 	.word	0x58024400
 8003cf4:	08009fcc 	.word	0x08009fcc
 8003cf8:	24000004 	.word	0x24000004
 8003cfc:	24000000 	.word	0x24000000

08003d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003d04:	f7ff ffcc 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	091b      	lsrs	r3, r3, #4
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	4904      	ldr	r1, [pc, #16]	; (8003d28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d16:	5ccb      	ldrb	r3, [r1, r3]
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	58024400 	.word	0x58024400
 8003d28:	08009fcc 	.word	0x08009fcc

08003d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003d30:	f7ff ffb6 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8003d34:	4602      	mov	r2, r0
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	0a1b      	lsrs	r3, r3, #8
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	4904      	ldr	r1, [pc, #16]	; (8003d54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d42:	5ccb      	ldrb	r3, [r1, r3]
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	58024400 	.word	0x58024400
 8003d54:	08009fcc 	.word	0x08009fcc

08003d58 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d60:	2300      	movs	r3, #0
 8003d62:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d64:	2300      	movs	r3, #0
 8003d66:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d03f      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d7c:	d02a      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d82:	d824      	bhi.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d88:	d018      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d8e:	d81e      	bhi.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d98:	d007      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d9a:	e018      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9c:	4b9f      	ldr	r3, [pc, #636]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	4a9e      	ldr	r2, [pc, #632]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003da8:	e015      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3304      	adds	r3, #4
 8003dae:	2102      	movs	r1, #2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f001 ff1b 	bl	8005bec <RCCEx_PLL2_Config>
 8003db6:	4603      	mov	r3, r0
 8003db8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003dba:	e00c      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3324      	adds	r3, #36	; 0x24
 8003dc0:	2102      	movs	r1, #2
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f001 ffc4 	bl	8005d50 <RCCEx_PLL3_Config>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003dcc:	e003      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003dd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d109      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ddc:	4b8f      	ldr	r3, [pc, #572]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003de8:	498c      	ldr	r1, [pc, #560]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	650b      	str	r3, [r1, #80]	; 0x50
 8003dee:	e001      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df0:	7dfb      	ldrb	r3, [r7, #23]
 8003df2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d03d      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d826      	bhi.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e08:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e25 	.word	0x08003e25
 8003e14:	08003e33 	.word	0x08003e33
 8003e18:	08003e45 	.word	0x08003e45
 8003e1c:	08003e5d 	.word	0x08003e5d
 8003e20:	08003e5d 	.word	0x08003e5d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e24:	4b7d      	ldr	r3, [pc, #500]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	4a7c      	ldr	r2, [pc, #496]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e30:	e015      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3304      	adds	r3, #4
 8003e36:	2100      	movs	r1, #0
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f001 fed7 	bl	8005bec <RCCEx_PLL2_Config>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e42:	e00c      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3324      	adds	r3, #36	; 0x24
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 ff80 	bl	8005d50 <RCCEx_PLL3_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e54:	e003      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	75fb      	strb	r3, [r7, #23]
      break;
 8003e5a:	e000      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d109      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e64:	4b6d      	ldr	r3, [pc, #436]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e68:	f023 0207 	bic.w	r2, r3, #7
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e70:	496a      	ldr	r1, [pc, #424]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	650b      	str	r3, [r1, #80]	; 0x50
 8003e76:	e001      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d04a      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003e90:	d031      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003e92:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003e96:	d82b      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e9c:	d02d      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea2:	d825      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003ea4:	2bc0      	cmp	r3, #192	; 0xc0
 8003ea6:	d02a      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003ea8:	2bc0      	cmp	r3, #192	; 0xc0
 8003eaa:	d821      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003eac:	2b80      	cmp	r3, #128	; 0x80
 8003eae:	d016      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003eb0:	2b80      	cmp	r3, #128	; 0x80
 8003eb2:	d81d      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003eb8:	2b40      	cmp	r3, #64	; 0x40
 8003eba:	d007      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003ebc:	e018      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ebe:	4b57      	ldr	r3, [pc, #348]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	4a56      	ldr	r2, [pc, #344]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003eca:	e019      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f001 fe8a 	bl	8005bec <RCCEx_PLL2_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003edc:	e010      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3324      	adds	r3, #36	; 0x24
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f001 ff33 	bl	8005d50 <RCCEx_PLL3_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003eee:	e007      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef4:	e004      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e002      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003efa:	bf00      	nop
 8003efc:	e000      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d109      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003f06:	4b45      	ldr	r3, [pc, #276]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f12:	4942      	ldr	r1, [pc, #264]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	650b      	str	r3, [r1, #80]	; 0x50
 8003f18:	e001      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1a:	7dfb      	ldrb	r3, [r7, #23]
 8003f1c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d04f      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003f32:	d036      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003f34:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003f38:	d830      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f3e:	d032      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f44:	d82a      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003f46:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f4a:	d02e      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003f4c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f50:	d824      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f56:	d018      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5c:	d81e      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f66:	d007      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003f68:	e018      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f6a:	4b2c      	ldr	r3, [pc, #176]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	4a2b      	ldr	r2, [pc, #172]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003f76:	e019      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 fe34 	bl	8005bec <RCCEx_PLL2_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003f88:	e010      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3324      	adds	r3, #36	; 0x24
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f001 fedd 	bl	8005d50 <RCCEx_PLL3_Config>
 8003f96:	4603      	mov	r3, r0
 8003f98:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003f9a:	e007      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003fa0:	e004      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003fa2:	bf00      	nop
 8003fa4:	e002      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003fa6:	bf00      	nop
 8003fa8:	e000      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003faa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fac:	7dfb      	ldrb	r3, [r7, #23]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d109      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003fb2:	4b1a      	ldr	r3, [pc, #104]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb6:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbe:	4917      	ldr	r1, [pc, #92]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	650b      	str	r3, [r1, #80]	; 0x50
 8003fc4:	e001      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
 8003fc8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d034      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fda:	2b30      	cmp	r3, #48	; 0x30
 8003fdc:	d01c      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003fde:	2b30      	cmp	r3, #48	; 0x30
 8003fe0:	d817      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	d00c      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003fe6:	2b20      	cmp	r3, #32
 8003fe8:	d813      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d018      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8003fee:	2b10      	cmp	r3, #16
 8003ff0:	d10f      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	4a09      	ldr	r2, [pc, #36]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003ffe:	e010      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	2102      	movs	r1, #2
 8004006:	4618      	mov	r0, r3
 8004008:	f001 fdf0 	bl	8005bec <RCCEx_PLL2_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004010:	e007      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	75fb      	strb	r3, [r7, #23]
      break;
 8004016:	e004      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8004018:	bf00      	nop
 800401a:	e002      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800401c:	58024400 	.word	0x58024400
      break;
 8004020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004022:	7dfb      	ldrb	r3, [r7, #23]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004028:	4b9b      	ldr	r3, [pc, #620]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800402a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004034:	4998      	ldr	r1, [pc, #608]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004036:	4313      	orrs	r3, r2
 8004038:	64cb      	str	r3, [r1, #76]	; 0x4c
 800403a:	e001      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403c:	7dfb      	ldrb	r3, [r7, #23]
 800403e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d047      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004054:	d030      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004056:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800405a:	d82a      	bhi.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800405c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004060:	d02c      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x364>
 8004062:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004066:	d824      	bhi.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800406c:	d018      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800406e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004072:	d81e      	bhi.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407c:	d007      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800407e:	e018      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004080:	4b85      	ldr	r3, [pc, #532]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	4a84      	ldr	r2, [pc, #528]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800408a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800408c:	e017      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3304      	adds	r3, #4
 8004092:	2100      	movs	r1, #0
 8004094:	4618      	mov	r0, r3
 8004096:	f001 fda9 	bl	8005bec <RCCEx_PLL2_Config>
 800409a:	4603      	mov	r3, r0
 800409c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800409e:	e00e      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3324      	adds	r3, #36	; 0x24
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f001 fe52 	bl	8005d50 <RCCEx_PLL3_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80040b0:	e005      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	75fb      	strb	r3, [r7, #23]
      break;
 80040b6:	e002      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80040b8:	bf00      	nop
 80040ba:	e000      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80040bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040be:	7dfb      	ldrb	r3, [r7, #23]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d109      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80040c4:	4b74      	ldr	r3, [pc, #464]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80040c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d0:	4971      	ldr	r1, [pc, #452]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	650b      	str	r3, [r1, #80]	; 0x50
 80040d6:	e001      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d8:	7dfb      	ldrb	r3, [r7, #23]
 80040da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d049      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040f0:	d02e      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80040f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040f6:	d828      	bhi.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80040f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040fc:	d02a      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80040fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004102:	d822      	bhi.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004104:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004108:	d026      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800410a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800410e:	d81c      	bhi.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004110:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004114:	d010      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800411a:	d816      	bhi.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01d      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004124:	d111      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3304      	adds	r3, #4
 800412a:	2101      	movs	r1, #1
 800412c:	4618      	mov	r0, r3
 800412e:	f001 fd5d 	bl	8005bec <RCCEx_PLL2_Config>
 8004132:	4603      	mov	r3, r0
 8004134:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004136:	e012      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3324      	adds	r3, #36	; 0x24
 800413c:	2101      	movs	r1, #1
 800413e:	4618      	mov	r0, r3
 8004140:	f001 fe06 	bl	8005d50 <RCCEx_PLL3_Config>
 8004144:	4603      	mov	r3, r0
 8004146:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004148:	e009      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	75fb      	strb	r3, [r7, #23]
      break;
 800414e:	e006      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004150:	bf00      	nop
 8004152:	e004      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004154:	bf00      	nop
 8004156:	e002      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004158:	bf00      	nop
 800415a:	e000      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800415c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800415e:	7dfb      	ldrb	r3, [r7, #23]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d109      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004164:	4b4c      	ldr	r3, [pc, #304]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004168:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004170:	4949      	ldr	r1, [pc, #292]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004172:	4313      	orrs	r3, r2
 8004174:	650b      	str	r3, [r1, #80]	; 0x50
 8004176:	e001      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004178:	7dfb      	ldrb	r3, [r7, #23]
 800417a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d053      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800418e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004192:	d034      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004194:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004198:	d82e      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800419a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800419e:	d030      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80041a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041a4:	d828      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80041a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041aa:	d02c      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80041ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b0:	d822      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80041b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041b6:	d028      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80041b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041bc:	d81c      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80041be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041c2:	d010      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80041c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041c8:	d816      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d01f      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80041ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041d2:	d111      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3304      	adds	r3, #4
 80041d8:	2101      	movs	r1, #1
 80041da:	4618      	mov	r0, r3
 80041dc:	f001 fd06 	bl	8005bec <RCCEx_PLL2_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80041e4:	e014      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3324      	adds	r3, #36	; 0x24
 80041ea:	2101      	movs	r1, #1
 80041ec:	4618      	mov	r0, r3
 80041ee:	f001 fdaf 	bl	8005d50 <RCCEx_PLL3_Config>
 80041f2:	4603      	mov	r3, r0
 80041f4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80041f6:	e00b      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	75fb      	strb	r3, [r7, #23]
      break;
 80041fc:	e008      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80041fe:	bf00      	nop
 8004200:	e006      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004202:	bf00      	nop
 8004204:	e004      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004206:	bf00      	nop
 8004208:	e002      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800420a:	bf00      	nop
 800420c:	e000      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800420e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004210:	7dfb      	ldrb	r3, [r7, #23]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10a      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004216:	4b20      	ldr	r3, [pc, #128]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004224:	491c      	ldr	r1, [pc, #112]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004226:	4313      	orrs	r3, r2
 8004228:	658b      	str	r3, [r1, #88]	; 0x58
 800422a:	e001      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422c:	7dfb      	ldrb	r3, [r7, #23]
 800422e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d031      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004244:	d00e      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800424a:	d814      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800424c:	2b00      	cmp	r3, #0
 800424e:	d015      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004250:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004254:	d10f      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004256:	4b10      	ldr	r3, [pc, #64]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	4a0f      	ldr	r2, [pc, #60]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800425c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004260:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004262:	e00c      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3304      	adds	r3, #4
 8004268:	2101      	movs	r1, #1
 800426a:	4618      	mov	r0, r3
 800426c:	f001 fcbe 	bl	8005bec <RCCEx_PLL2_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004274:	e003      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	75fb      	strb	r3, [r7, #23]
      break;
 800427a:	e000      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 800427c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800427e:	7dfb      	ldrb	r3, [r7, #23]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10b      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004284:	4b04      	ldr	r3, [pc, #16]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004288:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004290:	4901      	ldr	r1, [pc, #4]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004292:	4313      	orrs	r3, r2
 8004294:	650b      	str	r3, [r1, #80]	; 0x50
 8004296:	e003      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8004298:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429c:	7dfb      	ldrb	r3, [r7, #23]
 800429e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d032      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d81b      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x594>
 80042b4:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80042b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ba:	bf00      	nop
 80042bc:	080042f3 	.word	0x080042f3
 80042c0:	080042cd 	.word	0x080042cd
 80042c4:	080042db 	.word	0x080042db
 80042c8:	080042f3 	.word	0x080042f3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042cc:	4bb2      	ldr	r3, [pc, #712]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	4ab1      	ldr	r2, [pc, #708]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80042d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80042d8:	e00c      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3304      	adds	r3, #4
 80042de:	2102      	movs	r1, #2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f001 fc83 	bl	8005bec <RCCEx_PLL2_Config>
 80042e6:	4603      	mov	r3, r0
 80042e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80042ea:	e003      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	75fb      	strb	r3, [r7, #23]
      break;
 80042f0:	e000      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80042f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80042fa:	4ba7      	ldr	r3, [pc, #668]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80042fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fe:	f023 0203 	bic.w	r2, r3, #3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004306:	49a4      	ldr	r1, [pc, #656]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004308:	4313      	orrs	r3, r2
 800430a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800430c:	e001      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800430e:	7dfb      	ldrb	r3, [r7, #23]
 8004310:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 8086 	beq.w	800442c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004320:	4b9e      	ldr	r3, [pc, #632]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a9d      	ldr	r2, [pc, #628]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800432c:	f7fd f880 	bl	8001430 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004332:	e009      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004334:	f7fd f87c 	bl	8001430 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b64      	cmp	r3, #100	; 0x64
 8004340:	d902      	bls.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	75fb      	strb	r3, [r7, #23]
        break;
 8004346:	e005      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004348:	4b94      	ldr	r3, [pc, #592]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0ef      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004354:	7dfb      	ldrb	r3, [r7, #23]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d166      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800435a:	4b8f      	ldr	r3, [pc, #572]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800435c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004364:	4053      	eors	r3, r2
 8004366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436a:	2b00      	cmp	r3, #0
 800436c:	d013      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800436e:	4b8a      	ldr	r3, [pc, #552]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004376:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004378:	4b87      	ldr	r3, [pc, #540]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800437a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437c:	4a86      	ldr	r2, [pc, #536]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800437e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004382:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004384:	4b84      	ldr	r3, [pc, #528]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	4a83      	ldr	r2, [pc, #524]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800438a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800438e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004390:	4a81      	ldr	r2, [pc, #516]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800439c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a0:	d115      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a2:	f7fd f845 	bl	8001430 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043a8:	e00b      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043aa:	f7fd f841 	bl	8001430 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d902      	bls.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	75fb      	strb	r3, [r7, #23]
            break;
 80043c0:	e005      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043c2:	4b75      	ldr	r3, [pc, #468]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0ed      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 80043ce:	7dfb      	ldrb	r3, [r7, #23]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d126      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e2:	d10d      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 80043e4:	4b6c      	ldr	r3, [pc, #432]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043f2:	0919      	lsrs	r1, r3, #4
 80043f4:	4b6a      	ldr	r3, [pc, #424]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043f6:	400b      	ands	r3, r1
 80043f8:	4967      	ldr	r1, [pc, #412]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	610b      	str	r3, [r1, #16]
 80043fe:	e005      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8004400:	4b65      	ldr	r3, [pc, #404]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	4a64      	ldr	r2, [pc, #400]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004406:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800440a:	6113      	str	r3, [r2, #16]
 800440c:	4b62      	ldr	r3, [pc, #392]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800440e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441a:	495f      	ldr	r1, [pc, #380]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800441c:	4313      	orrs	r3, r2
 800441e:	670b      	str	r3, [r1, #112]	; 0x70
 8004420:	e004      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004422:	7dfb      	ldrb	r3, [r7, #23]
 8004424:	75bb      	strb	r3, [r7, #22]
 8004426:	e001      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004428:	7dfb      	ldrb	r3, [r7, #23]
 800442a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d07f      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800443e:	2b28      	cmp	r3, #40	; 0x28
 8004440:	d866      	bhi.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8004442:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8004444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004448:	08004517 	.word	0x08004517
 800444c:	08004511 	.word	0x08004511
 8004450:	08004511 	.word	0x08004511
 8004454:	08004511 	.word	0x08004511
 8004458:	08004511 	.word	0x08004511
 800445c:	08004511 	.word	0x08004511
 8004460:	08004511 	.word	0x08004511
 8004464:	08004511 	.word	0x08004511
 8004468:	080044ed 	.word	0x080044ed
 800446c:	08004511 	.word	0x08004511
 8004470:	08004511 	.word	0x08004511
 8004474:	08004511 	.word	0x08004511
 8004478:	08004511 	.word	0x08004511
 800447c:	08004511 	.word	0x08004511
 8004480:	08004511 	.word	0x08004511
 8004484:	08004511 	.word	0x08004511
 8004488:	080044ff 	.word	0x080044ff
 800448c:	08004511 	.word	0x08004511
 8004490:	08004511 	.word	0x08004511
 8004494:	08004511 	.word	0x08004511
 8004498:	08004511 	.word	0x08004511
 800449c:	08004511 	.word	0x08004511
 80044a0:	08004511 	.word	0x08004511
 80044a4:	08004511 	.word	0x08004511
 80044a8:	08004517 	.word	0x08004517
 80044ac:	08004511 	.word	0x08004511
 80044b0:	08004511 	.word	0x08004511
 80044b4:	08004511 	.word	0x08004511
 80044b8:	08004511 	.word	0x08004511
 80044bc:	08004511 	.word	0x08004511
 80044c0:	08004511 	.word	0x08004511
 80044c4:	08004511 	.word	0x08004511
 80044c8:	08004517 	.word	0x08004517
 80044cc:	08004511 	.word	0x08004511
 80044d0:	08004511 	.word	0x08004511
 80044d4:	08004511 	.word	0x08004511
 80044d8:	08004511 	.word	0x08004511
 80044dc:	08004511 	.word	0x08004511
 80044e0:	08004511 	.word	0x08004511
 80044e4:	08004511 	.word	0x08004511
 80044e8:	08004517 	.word	0x08004517
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3304      	adds	r3, #4
 80044f0:	2101      	movs	r1, #1
 80044f2:	4618      	mov	r0, r3
 80044f4:	f001 fb7a 	bl	8005bec <RCCEx_PLL2_Config>
 80044f8:	4603      	mov	r3, r0
 80044fa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80044fc:	e00c      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	3324      	adds	r3, #36	; 0x24
 8004502:	2101      	movs	r1, #1
 8004504:	4618      	mov	r0, r3
 8004506:	f001 fc23 	bl	8005d50 <RCCEx_PLL3_Config>
 800450a:	4603      	mov	r3, r0
 800450c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800450e:	e003      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	75fb      	strb	r3, [r7, #23]
      break;
 8004514:	e000      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8004516:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004518:	7dfb      	ldrb	r3, [r7, #23]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10a      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800451e:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004522:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800452c:	491a      	ldr	r1, [pc, #104]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800452e:	4313      	orrs	r3, r2
 8004530:	654b      	str	r3, [r1, #84]	; 0x54
 8004532:	e001      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004534:	7dfb      	ldrb	r3, [r7, #23]
 8004536:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d03f      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004548:	2b05      	cmp	r3, #5
 800454a:	d821      	bhi.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800454c:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800454e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004552:	bf00      	nop
 8004554:	080045a5 	.word	0x080045a5
 8004558:	0800456d 	.word	0x0800456d
 800455c:	0800457f 	.word	0x0800457f
 8004560:	080045a5 	.word	0x080045a5
 8004564:	080045a5 	.word	0x080045a5
 8004568:	080045a5 	.word	0x080045a5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3304      	adds	r3, #4
 8004570:	2101      	movs	r1, #1
 8004572:	4618      	mov	r0, r3
 8004574:	f001 fb3a 	bl	8005bec <RCCEx_PLL2_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800457c:	e013      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3324      	adds	r3, #36	; 0x24
 8004582:	2101      	movs	r1, #1
 8004584:	4618      	mov	r0, r3
 8004586:	f001 fbe3 	bl	8005d50 <RCCEx_PLL3_Config>
 800458a:	4603      	mov	r3, r0
 800458c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800458e:	e00a      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	75fb      	strb	r3, [r7, #23]
      break;
 8004594:	e007      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8004596:	bf00      	nop
 8004598:	58024400 	.word	0x58024400
 800459c:	58024800 	.word	0x58024800
 80045a0:	00ffffcf 	.word	0x00ffffcf
      break;
 80045a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045a6:	7dfb      	ldrb	r3, [r7, #23]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d109      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80045ac:	4b9f      	ldr	r3, [pc, #636]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80045ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b0:	f023 0207 	bic.w	r2, r3, #7
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045b8:	499c      	ldr	r1, [pc, #624]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	654b      	str	r3, [r1, #84]	; 0x54
 80045be:	e001      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c0:	7dfb      	ldrb	r3, [r7, #23]
 80045c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d039      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045d6:	2b05      	cmp	r3, #5
 80045d8:	d820      	bhi.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80045da:	a201      	add	r2, pc, #4	; (adr r2, 80045e0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80045dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e0:	08004623 	.word	0x08004623
 80045e4:	080045f9 	.word	0x080045f9
 80045e8:	0800460b 	.word	0x0800460b
 80045ec:	08004623 	.word	0x08004623
 80045f0:	08004623 	.word	0x08004623
 80045f4:	08004623 	.word	0x08004623
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	2101      	movs	r1, #1
 80045fe:	4618      	mov	r0, r3
 8004600:	f001 faf4 	bl	8005bec <RCCEx_PLL2_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004608:	e00c      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3324      	adds	r3, #36	; 0x24
 800460e:	2101      	movs	r1, #1
 8004610:	4618      	mov	r0, r3
 8004612:	f001 fb9d 	bl	8005d50 <RCCEx_PLL3_Config>
 8004616:	4603      	mov	r3, r0
 8004618:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800461a:	e003      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	75fb      	strb	r3, [r7, #23]
      break;
 8004620:	e000      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8004622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004624:	7dfb      	ldrb	r3, [r7, #23]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10a      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800462a:	4b80      	ldr	r3, [pc, #512]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800462c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462e:	f023 0207 	bic.w	r2, r3, #7
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004638:	497c      	ldr	r1, [pc, #496]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800463a:	4313      	orrs	r3, r2
 800463c:	658b      	str	r3, [r1, #88]	; 0x58
 800463e:	e001      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004640:	7dfb      	ldrb	r3, [r7, #23]
 8004642:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b00      	cmp	r3, #0
 800464e:	d04b      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004656:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800465a:	d02e      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x962>
 800465c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004660:	d828      	bhi.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004666:	d02a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466c:	d822      	bhi.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800466e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004672:	d026      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004674:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004678:	d81c      	bhi.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800467a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800467e:	d010      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8004680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004684:	d816      	bhi.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d01d      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800468a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800468e:	d111      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3304      	adds	r3, #4
 8004694:	2100      	movs	r1, #0
 8004696:	4618      	mov	r0, r3
 8004698:	f001 faa8 	bl	8005bec <RCCEx_PLL2_Config>
 800469c:	4603      	mov	r3, r0
 800469e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80046a0:	e012      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3324      	adds	r3, #36	; 0x24
 80046a6:	2102      	movs	r1, #2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 fb51 	bl	8005d50 <RCCEx_PLL3_Config>
 80046ae:	4603      	mov	r3, r0
 80046b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80046b2:	e009      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	75fb      	strb	r3, [r7, #23]
      break;
 80046b8:	e006      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80046ba:	bf00      	nop
 80046bc:	e004      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80046be:	bf00      	nop
 80046c0:	e002      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80046c2:	bf00      	nop
 80046c4:	e000      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80046c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ce:	4b57      	ldr	r3, [pc, #348]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80046d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046dc:	4953      	ldr	r1, [pc, #332]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	654b      	str	r3, [r1, #84]	; 0x54
 80046e2:	e001      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e4:	7dfb      	ldrb	r3, [r7, #23]
 80046e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d04b      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046fe:	d02e      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8004700:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004704:	d828      	bhi.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470a:	d02a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800470c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004710:	d822      	bhi.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004712:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004716:	d026      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004718:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800471c:	d81c      	bhi.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800471e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004722:	d010      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8004724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004728:	d816      	bhi.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d01d      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800472e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004732:	d111      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3304      	adds	r3, #4
 8004738:	2100      	movs	r1, #0
 800473a:	4618      	mov	r0, r3
 800473c:	f001 fa56 	bl	8005bec <RCCEx_PLL2_Config>
 8004740:	4603      	mov	r3, r0
 8004742:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004744:	e012      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3324      	adds	r3, #36	; 0x24
 800474a:	2102      	movs	r1, #2
 800474c:	4618      	mov	r0, r3
 800474e:	f001 faff 	bl	8005d50 <RCCEx_PLL3_Config>
 8004752:	4603      	mov	r3, r0
 8004754:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004756:	e009      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	75fb      	strb	r3, [r7, #23]
      break;
 800475c:	e006      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800475e:	bf00      	nop
 8004760:	e004      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004762:	bf00      	nop
 8004764:	e002      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004766:	bf00      	nop
 8004768:	e000      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800476a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800476c:	7dfb      	ldrb	r3, [r7, #23]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004772:	4b2e      	ldr	r3, [pc, #184]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004776:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004780:	492a      	ldr	r1, [pc, #168]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004782:	4313      	orrs	r3, r2
 8004784:	658b      	str	r3, [r1, #88]	; 0x58
 8004786:	e001      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004788:	7dfb      	ldrb	r3, [r7, #23]
 800478a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004794:	2b00      	cmp	r3, #0
 8004796:	d04d      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800479e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80047a2:	d02e      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80047a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80047a8:	d828      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80047aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ae:	d02a      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80047b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b4:	d822      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80047b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80047ba:	d026      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80047bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80047c0:	d81c      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80047c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047c6:	d010      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80047c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047cc:	d816      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d01d      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80047d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d6:	d111      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3304      	adds	r3, #4
 80047dc:	2100      	movs	r1, #0
 80047de:	4618      	mov	r0, r3
 80047e0:	f001 fa04 	bl	8005bec <RCCEx_PLL2_Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80047e8:	e012      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3324      	adds	r3, #36	; 0x24
 80047ee:	2102      	movs	r1, #2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f001 faad 	bl	8005d50 <RCCEx_PLL3_Config>
 80047f6:	4603      	mov	r3, r0
 80047f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80047fa:	e009      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004800:	e006      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004802:	bf00      	nop
 8004804:	e004      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004806:	bf00      	nop
 8004808:	e002      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800480a:	bf00      	nop
 800480c:	e000      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800480e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004810:	7dfb      	ldrb	r3, [r7, #23]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10c      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004816:	4b05      	ldr	r3, [pc, #20]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004824:	4901      	ldr	r1, [pc, #4]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004826:	4313      	orrs	r3, r2
 8004828:	658b      	str	r3, [r1, #88]	; 0x58
 800482a:	e003      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800482c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004830:	7dfb      	ldrb	r3, [r7, #23]
 8004832:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484a:	d10a      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3324      	adds	r3, #36	; 0x24
 8004850:	2102      	movs	r1, #2
 8004852:	4618      	mov	r0, r3
 8004854:	f001 fa7c 	bl	8005d50 <RCCEx_PLL3_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004862:	4b8c      	ldr	r3, [pc, #560]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004866:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004870:	4988      	ldr	r1, [pc, #544]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004872:	4313      	orrs	r3, r2
 8004874:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01a      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800488c:	d10a      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3324      	adds	r3, #36	; 0x24
 8004892:	2102      	movs	r1, #2
 8004894:	4618      	mov	r0, r3
 8004896:	f001 fa5b 	bl	8005d50 <RCCEx_PLL3_Config>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048a4:	4b7b      	ldr	r3, [pc, #492]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80048a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048b2:	4978      	ldr	r1, [pc, #480]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d034      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048ce:	d01d      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80048d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048d4:	d817      	bhi.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80048da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048de:	d009      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80048e0:	e011      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3304      	adds	r3, #4
 80048e6:	2100      	movs	r1, #0
 80048e8:	4618      	mov	r0, r3
 80048ea:	f001 f97f 	bl	8005bec <RCCEx_PLL2_Config>
 80048ee:	4603      	mov	r3, r0
 80048f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80048f2:	e00c      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3324      	adds	r3, #36	; 0x24
 80048f8:	2102      	movs	r1, #2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f001 fa28 	bl	8005d50 <RCCEx_PLL3_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004904:	e003      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	75fb      	strb	r3, [r7, #23]
      break;
 800490a:	e000      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 800490c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800490e:	7dfb      	ldrb	r3, [r7, #23]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10a      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004914:	4b5f      	ldr	r3, [pc, #380]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004922:	495c      	ldr	r1, [pc, #368]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004924:	4313      	orrs	r3, r2
 8004926:	658b      	str	r3, [r1, #88]	; 0x58
 8004928:	e001      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492a:	7dfb      	ldrb	r3, [r7, #23]
 800492c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d033      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004940:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004944:	d01c      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004946:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800494a:	d816      	bhi.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800494c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004950:	d003      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004956:	d007      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004958:	e00f      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800495a:	4b4e      	ldr	r3, [pc, #312]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	4a4d      	ldr	r2, [pc, #308]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004964:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004966:	e00c      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3324      	adds	r3, #36	; 0x24
 800496c:	2101      	movs	r1, #1
 800496e:	4618      	mov	r0, r3
 8004970:	f001 f9ee 	bl	8005d50 <RCCEx_PLL3_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004978:	e003      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	75fb      	strb	r3, [r7, #23]
      break;
 800497e:	e000      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004982:	7dfb      	ldrb	r3, [r7, #23]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10a      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004988:	4b42      	ldr	r3, [pc, #264]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004996:	493f      	ldr	r1, [pc, #252]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004998:	4313      	orrs	r3, r2
 800499a:	654b      	str	r3, [r1, #84]	; 0x54
 800499c:	e001      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499e:	7dfb      	ldrb	r3, [r7, #23]
 80049a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d029      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80049b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ba:	d007      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80049bc:	e00f      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049be:	4b35      	ldr	r3, [pc, #212]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80049c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c2:	4a34      	ldr	r2, [pc, #208]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80049c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80049ca:	e00b      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3304      	adds	r3, #4
 80049d0:	2102      	movs	r1, #2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f001 f90a 	bl	8005bec <RCCEx_PLL2_Config>
 80049d8:	4603      	mov	r3, r0
 80049da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80049dc:	e002      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	75fb      	strb	r3, [r7, #23]
      break;
 80049e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049e4:	7dfb      	ldrb	r3, [r7, #23]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049ea:	4b2a      	ldr	r3, [pc, #168]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80049ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f6:	4927      	ldr	r1, [pc, #156]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80049fc:	e001      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fe:	7dfb      	ldrb	r3, [r7, #23]
 8004a00:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3324      	adds	r3, #36	; 0x24
 8004a12:	2102      	movs	r1, #2
 8004a14:	4618      	mov	r0, r3
 8004a16:	f001 f99b 	bl	8005d50 <RCCEx_PLL3_Config>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d035      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a3a:	d017      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004a3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a40:	d811      	bhi.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a46:	d013      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a4c:	d80b      	bhi.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d010      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a56:	d106      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a58:	4b0e      	ldr	r3, [pc, #56]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	4a0d      	ldr	r2, [pc, #52]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004a64:	e007      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	75fb      	strb	r3, [r7, #23]
      break;
 8004a6a:	e004      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004a6c:	bf00      	nop
 8004a6e:	e002      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004a70:	bf00      	nop
 8004a72:	e000      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10d      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a8a:	4902      	ldr	r1, [pc, #8]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	654b      	str	r3, [r1, #84]	; 0x54
 8004a90:	e004      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004a92:	bf00      	nop
 8004a94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
 8004a9a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004aa8:	4b30      	ldr	r3, [pc, #192]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ab4:	492d      	ldr	r1, [pc, #180]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d008      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ac6:	4b29      	ldr	r3, [pc, #164]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad2:	4926      	ldr	r1, [pc, #152]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004ae4:	4b21      	ldr	r3, [pc, #132]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af0:	491e      	ldr	r1, [pc, #120]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00d      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b02:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	4a19      	ldr	r2, [pc, #100]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b0c:	6113      	str	r3, [r2, #16]
 8004b0e:	4b17      	ldr	r3, [pc, #92]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b10:	691a      	ldr	r2, [r3, #16]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b18:	4914      	ldr	r1, [pc, #80]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	da08      	bge.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b26:	4b11      	ldr	r3, [pc, #68]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b32:	490e      	ldr	r1, [pc, #56]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d009      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b44:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b52:	4906      	ldr	r1, [pc, #24]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004b58:	7dbb      	ldrb	r3, [r7, #22]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e000      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	58024400 	.word	0x58024400

08004b70 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b090      	sub	sp, #64	; 0x40
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7e:	f040 8089 	bne.w	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004b82:	4b91      	ldr	r3, [pc, #580]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d87d      	bhi.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004b92:	a201      	add	r2, pc, #4	; (adr r2, 8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b98:	08004bad 	.word	0x08004bad
 8004b9c:	08004bd1 	.word	0x08004bd1
 8004ba0:	08004bf5 	.word	0x08004bf5
 8004ba4:	08004c89 	.word	0x08004c89
 8004ba8:	08004c19 	.word	0x08004c19
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004bac:	4b86      	ldr	r3, [pc, #536]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bb8:	d107      	bne.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fec2 	bl	8005948 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bc8:	e3f4      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bce:	e3f1      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004bd0:	4b7d      	ldr	r3, [pc, #500]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bdc:	d107      	bne.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bde:	f107 0318 	add.w	r3, r7, #24
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fc08 	bl	80053f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bec:	e3e2      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bf2:	e3df      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004bf4:	4b74      	ldr	r3, [pc, #464]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c00:	d107      	bne.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c02:	f107 030c 	add.w	r3, r7, #12
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fd4a 	bl	80056a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c10:	e3d0      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c16:	e3cd      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c18:	4b6b      	ldr	r3, [pc, #428]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c20:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c22:	4b69      	ldr	r3, [pc, #420]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d10c      	bne.n	8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d109      	bne.n	8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c34:	4b64      	ldr	r3, [pc, #400]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	08db      	lsrs	r3, r3, #3
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	4a63      	ldr	r2, [pc, #396]	; (8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004c40:	fa22 f303 	lsr.w	r3, r2, r3
 8004c44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c46:	e01e      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c48:	4b5f      	ldr	r3, [pc, #380]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c54:	d106      	bne.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c5c:	d102      	bne.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004c5e:	4b5c      	ldr	r3, [pc, #368]	; (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c62:	e010      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c64:	4b58      	ldr	r3, [pc, #352]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c70:	d106      	bne.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c78:	d102      	bne.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004c7a:	4b56      	ldr	r3, [pc, #344]	; (8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c7e:	e002      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004c80:	2300      	movs	r3, #0
 8004c82:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004c84:	e396      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004c86:	e395      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c88:	4b53      	ldr	r3, [pc, #332]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c8c:	e392      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c92:	e38f      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c9a:	f040 809f 	bne.w	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8004c9e:	4b4a      	ldr	r3, [pc, #296]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004ca6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cae:	d04d      	beq.n	8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cb6:	f200 8084 	bhi.w	8004dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	2bc0      	cmp	r3, #192	; 0xc0
 8004cbe:	d07d      	beq.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc2:	2bc0      	cmp	r3, #192	; 0xc0
 8004cc4:	d87d      	bhi.n	8004dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc8:	2b80      	cmp	r3, #128	; 0x80
 8004cca:	d02d      	beq.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cce:	2b80      	cmp	r3, #128	; 0x80
 8004cd0:	d877      	bhi.n	8004dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	2b40      	cmp	r3, #64	; 0x40
 8004cdc:	d012      	beq.n	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8004cde:	e070      	b.n	8004dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ce0:	4b39      	ldr	r3, [pc, #228]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cec:	d107      	bne.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fe28 	bl	8005948 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004cfc:	e35a      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d02:	e357      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d04:	4b30      	ldr	r3, [pc, #192]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d10:	d107      	bne.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d12:	f107 0318 	add.w	r3, r7, #24
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fb6e 	bl	80053f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d20:	e348      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004d22:	2300      	movs	r3, #0
 8004d24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d26:	e345      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d28:	4b27      	ldr	r3, [pc, #156]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d34:	d107      	bne.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d36:	f107 030c 	add.w	r3, r7, #12
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fcb0 	bl	80056a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d44:	e336      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d4a:	e333      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d4c:	4b1e      	ldr	r3, [pc, #120]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d54:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d56:	4b1c      	ldr	r3, [pc, #112]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d10c      	bne.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8004d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d109      	bne.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d68:	4b17      	ldr	r3, [pc, #92]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	08db      	lsrs	r3, r3, #3
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	4a16      	ldr	r2, [pc, #88]	; (8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004d74:	fa22 f303 	lsr.w	r3, r2, r3
 8004d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d7a:	e01e      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d7c:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d88:	d106      	bne.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d90:	d102      	bne.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004d92:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004d94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d96:	e010      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004da4:	d106      	bne.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dac:	d102      	bne.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004dae:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db2:	e002      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004db8:	e2fc      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004dba:	e2fb      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dc0:	e2f8      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dc6:	e2f5      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004dc8:	58024400 	.word	0x58024400
 8004dcc:	03d09000 	.word	0x03d09000
 8004dd0:	003d0900 	.word	0x003d0900
 8004dd4:	007a1200 	.word	0x007a1200
 8004dd8:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de2:	f040 809c 	bne.w	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8004de6:	4b9d      	ldr	r3, [pc, #628]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dea:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8004dee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004df6:	d054      	beq.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8004df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dfe:	f200 808b 	bhi.w	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e08:	f000 8083 	beq.w	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e12:	f200 8081 	bhi.w	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1c:	d02f      	beq.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e24:	d878      	bhi.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8004e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d004      	beq.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e32:	d012      	beq.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8004e34:	e070      	b.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e36:	4b89      	ldr	r3, [pc, #548]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e42:	d107      	bne.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fd7d 	bl	8005948 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e52:	e2af      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004e54:	2300      	movs	r3, #0
 8004e56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e58:	e2ac      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e5a:	4b80      	ldr	r3, [pc, #512]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e66:	d107      	bne.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e68:	f107 0318 	add.w	r3, r7, #24
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 fac3 	bl	80053f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e76:	e29d      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e7c:	e29a      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e7e:	4b77      	ldr	r3, [pc, #476]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e8a:	d107      	bne.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e8c:	f107 030c 	add.w	r3, r7, #12
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 fc05 	bl	80056a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e9a:	e28b      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ea0:	e288      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004ea2:	4b6e      	ldr	r3, [pc, #440]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004eaa:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004eac:	4b6b      	ldr	r3, [pc, #428]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d10c      	bne.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8004eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d109      	bne.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ebe:	4b67      	ldr	r3, [pc, #412]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	08db      	lsrs	r3, r3, #3
 8004ec4:	f003 0303 	and.w	r3, r3, #3
 8004ec8:	4a65      	ldr	r2, [pc, #404]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8004eca:	fa22 f303 	lsr.w	r3, r2, r3
 8004ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ed0:	e01e      	b.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ed2:	4b62      	ldr	r3, [pc, #392]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ede:	d106      	bne.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8004ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ee6:	d102      	bne.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004ee8:	4b5e      	ldr	r3, [pc, #376]	; (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8004eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eec:	e010      	b.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004eee:	4b5b      	ldr	r3, [pc, #364]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004efa:	d106      	bne.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8004efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f02:	d102      	bne.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004f04:	4b58      	ldr	r3, [pc, #352]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8004f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f08:	e002      	b.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8004f0e:	e251      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004f10:	e250      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f12:	4b56      	ldr	r3, [pc, #344]	; (800506c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8004f14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f16:	e24d      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f1c:	e24a      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f24:	f040 80a7 	bne.w	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004f28:	4b4c      	ldr	r3, [pc, #304]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004f30:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f38:	d055      	beq.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f40:	f200 8096 	bhi.w	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8004f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f4a:	f000 8084 	beq.w	8005056 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f54:	f200 808c 	bhi.w	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8004f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f5e:	d030      	beq.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f66:	f200 8083 	bhi.w	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d004      	beq.n	8004f7a <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8004f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f76:	d012      	beq.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8004f78:	e07a      	b.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f7a:	4b38      	ldr	r3, [pc, #224]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f86:	d107      	bne.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 fcdb 	bl	8005948 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f96:	e20d      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f9c:	e20a      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f9e:	4b2f      	ldr	r3, [pc, #188]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004faa:	d107      	bne.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fac:	f107 0318 	add.w	r3, r7, #24
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fa21 	bl	80053f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004fba:	e1fb      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fc0:	e1f8      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004fc2:	4b26      	ldr	r3, [pc, #152]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fce:	d107      	bne.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fd0:	f107 030c 	add.w	r3, r7, #12
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 fb63 	bl	80056a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004fde:	e1e9      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fe4:	e1e6      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004fe6:	4b1d      	ldr	r3, [pc, #116]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004fee:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ff0:	4b1a      	ldr	r3, [pc, #104]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d10c      	bne.n	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d109      	bne.n	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005002:	4b16      	ldr	r3, [pc, #88]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	08db      	lsrs	r3, r3, #3
 8005008:	f003 0303 	and.w	r3, r3, #3
 800500c:	4a14      	ldr	r2, [pc, #80]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 800500e:	fa22 f303 	lsr.w	r3, r2, r3
 8005012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005014:	e01e      	b.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005016:	4b11      	ldr	r3, [pc, #68]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005022:	d106      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8005024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005026:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800502a:	d102      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800502c:	4b0d      	ldr	r3, [pc, #52]	; (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800502e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005030:	e010      	b.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005032:	4b0a      	ldr	r3, [pc, #40]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800503e:	d106      	bne.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8005040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005046:	d102      	bne.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005048:	4b07      	ldr	r3, [pc, #28]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 800504a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800504c:	e002      	b.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800504e:	2300      	movs	r3, #0
 8005050:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005052:	e1af      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005054:	e1ae      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005056:	4b05      	ldr	r3, [pc, #20]	; (800506c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8005058:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800505a:	e1ab      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800505c:	58024400 	.word	0x58024400
 8005060:	03d09000 	.word	0x03d09000
 8005064:	003d0900 	.word	0x003d0900
 8005068:	007a1200 	.word	0x007a1200
 800506c:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8005070:	2300      	movs	r3, #0
 8005072:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005074:	e19e      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800507c:	d173      	bne.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800507e:	4b9d      	ldr	r3, [pc, #628]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005082:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005086:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800508e:	d02f      	beq.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8005090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005092:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005096:	d863      	bhi.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	2b00      	cmp	r3, #0
 800509c:	d004      	beq.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800509e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a4:	d012      	beq.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 80050a6:	e05b      	b.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050a8:	4b92      	ldr	r3, [pc, #584]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050b4:	d107      	bne.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050b6:	f107 0318 	add.w	r3, r7, #24
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 f99c 	bl	80053f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80050c4:	e176      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80050c6:	2300      	movs	r3, #0
 80050c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050ca:	e173      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80050cc:	4b89      	ldr	r3, [pc, #548]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050d8:	d107      	bne.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050da:	f107 030c 	add.w	r3, r7, #12
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fade 	bl	80056a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80050e8:	e164      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80050ea:	2300      	movs	r3, #0
 80050ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050ee:	e161      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80050f0:	4b80      	ldr	r3, [pc, #512]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80050f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050f8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050fa:	4b7e      	ldr	r3, [pc, #504]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0304 	and.w	r3, r3, #4
 8005102:	2b04      	cmp	r3, #4
 8005104:	d10c      	bne.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8005106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005108:	2b00      	cmp	r3, #0
 800510a:	d109      	bne.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800510c:	4b79      	ldr	r3, [pc, #484]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	08db      	lsrs	r3, r3, #3
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	4a78      	ldr	r2, [pc, #480]	; (80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
 800511c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800511e:	e01e      	b.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005120:	4b74      	ldr	r3, [pc, #464]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512c:	d106      	bne.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800512e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005130:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005134:	d102      	bne.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005136:	4b71      	ldr	r3, [pc, #452]	; (80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800513a:	e010      	b.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800513c:	4b6d      	ldr	r3, [pc, #436]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005144:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005148:	d106      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800514a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800514c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005150:	d102      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005152:	4b6b      	ldr	r3, [pc, #428]	; (8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005154:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005156:	e002      	b.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800515c:	e12a      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800515e:	e129      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8005160:	2300      	movs	r3, #0
 8005162:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005164:	e126      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800516c:	d133      	bne.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800516e:	4b61      	ldr	r3, [pc, #388]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005176:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517a:	2b00      	cmp	r3, #0
 800517c:	d004      	beq.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800517e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005184:	d012      	beq.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005186:	e023      	b.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005188:	4b5a      	ldr	r3, [pc, #360]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005190:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005194:	d107      	bne.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fbd4 	bl	8005948 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80051a4:	e106      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051aa:	e103      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051ac:	4b51      	ldr	r3, [pc, #324]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051b8:	d107      	bne.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051ba:	f107 0318 	add.w	r3, r7, #24
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 f91a 	bl	80053f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80051c8:	e0f4      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051ce:	e0f1      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051d4:	e0ee      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051dc:	f040 809b 	bne.w	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80051e0:	4b44      	ldr	r3, [pc, #272]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80051e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80051e8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80051ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ec:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80051f0:	f000 808b 	beq.w	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80051f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80051fa:	f200 8089 	bhi.w	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80051fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005200:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005204:	d06c      	beq.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800520c:	f200 8080 	bhi.w	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005216:	d056      	beq.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8005218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521e:	d877      	bhi.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005222:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005226:	d03b      	beq.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8005228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800522e:	d86f      	bhi.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005236:	d021      	beq.n	800527c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8005238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800523e:	d867      	bhi.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005242:	2b00      	cmp	r3, #0
 8005244:	d004      	beq.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005248:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800524c:	d004      	beq.n	8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 800524e:	e05f      	b.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005250:	f000 f8bc 	bl	80053cc <HAL_RCCEx_GetD3PCLK1Freq>
 8005254:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005256:	e0ad      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005258:	4b26      	ldr	r3, [pc, #152]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005264:	d107      	bne.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005266:	f107 0318 	add.w	r3, r7, #24
 800526a:	4618      	mov	r0, r3
 800526c:	f000 f8c4 	bl	80053f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005274:	e09e      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800527a:	e09b      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800527c:	4b1d      	ldr	r3, [pc, #116]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005288:	d107      	bne.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800528a:	f107 030c 	add.w	r3, r7, #12
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fa06 	bl	80056a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005298:	e08c      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800529a:	2300      	movs	r3, #0
 800529c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800529e:	e089      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052a0:	4b14      	ldr	r3, [pc, #80]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	d109      	bne.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052ac:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	08db      	lsrs	r3, r3, #3
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	4a10      	ldr	r2, [pc, #64]	; (80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80052b8:	fa22 f303 	lsr.w	r3, r2, r3
 80052bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80052be:	e079      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052c4:	e076      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80052c6:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052d2:	d102      	bne.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 80052d4:	4b09      	ldr	r3, [pc, #36]	; (80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80052d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052d8:	e06c      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80052da:	2300      	movs	r3, #0
 80052dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052de:	e069      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80052e0:	4b04      	ldr	r3, [pc, #16]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052ec:	d10a      	bne.n	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 80052ee:	4b04      	ldr	r3, [pc, #16]	; (8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80052f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80052f2:	e05f      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80052f4:	58024400 	.word	0x58024400
 80052f8:	03d09000 	.word	0x03d09000
 80052fc:	003d0900 	.word	0x003d0900
 8005300:	007a1200 	.word	0x007a1200
          frequency = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005308:	e054      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800530a:	4b2d      	ldr	r3, [pc, #180]	; (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800530c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800530e:	e051      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005310:	2300      	movs	r3, #0
 8005312:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005314:	e04e      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800531c:	d148      	bne.n	80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800531e:	4b29      	ldr	r3, [pc, #164]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005326:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800532e:	d02a      	beq.n	8005386 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005336:	d838      	bhi.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533a:	2b00      	cmp	r3, #0
 800533c:	d004      	beq.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 800533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005340:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005344:	d00d      	beq.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005346:	e030      	b.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005348:	4b1e      	ldr	r3, [pc, #120]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005350:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005354:	d102      	bne.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 8005356:	4b1c      	ldr	r3, [pc, #112]	; (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005358:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800535a:	e02b      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005360:	e028      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005362:	4b18      	ldr	r3, [pc, #96]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800536e:	d107      	bne.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005374:	4618      	mov	r0, r3
 8005376:	f000 fae7 	bl	8005948 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800537e:	e019      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005384:	e016      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005386:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800538e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005392:	d107      	bne.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005394:	f107 0318 	add.w	r3, r7, #24
 8005398:	4618      	mov	r0, r3
 800539a:	f000 f82d 	bl	80053f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80053a2:	e007      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80053a4:	2300      	movs	r3, #0
 80053a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053a8:	e004      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 80053aa:	2300      	movs	r3, #0
 80053ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053ae:	e001      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80053b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3740      	adds	r7, #64	; 0x40
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	00bb8000 	.word	0x00bb8000
 80053c4:	58024400 	.word	0x58024400
 80053c8:	007a1200 	.word	0x007a1200

080053cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80053d0:	f7fe fc66 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 80053d4:	4602      	mov	r2, r0
 80053d6:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	091b      	lsrs	r3, r3, #4
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	4904      	ldr	r1, [pc, #16]	; (80053f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80053e2:	5ccb      	ldrb	r3, [r1, r3]
 80053e4:	f003 031f 	and.w	r3, r3, #31
 80053e8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	58024400 	.word	0x58024400
 80053f4:	08009fcc 	.word	0x08009fcc

080053f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b089      	sub	sp, #36	; 0x24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005400:	4ba1      	ldr	r3, [pc, #644]	; (8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005404:	f003 0303 	and.w	r3, r3, #3
 8005408:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800540a:	4b9f      	ldr	r3, [pc, #636]	; (8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	0b1b      	lsrs	r3, r3, #12
 8005410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005414:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005416:	4b9c      	ldr	r3, [pc, #624]	; (8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541a:	091b      	lsrs	r3, r3, #4
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005422:	4b99      	ldr	r3, [pc, #612]	; (8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005426:	08db      	lsrs	r3, r3, #3
 8005428:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	fb02 f303 	mul.w	r3, r2, r3
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 8111 	beq.w	8005668 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	2b02      	cmp	r3, #2
 800544a:	f000 8083 	beq.w	8005554 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2b02      	cmp	r3, #2
 8005452:	f200 80a1 	bhi.w	8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d056      	beq.n	8005510 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005462:	e099      	b.n	8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005464:	4b88      	ldr	r3, [pc, #544]	; (8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b00      	cmp	r3, #0
 800546e:	d02d      	beq.n	80054cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005470:	4b85      	ldr	r3, [pc, #532]	; (8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	08db      	lsrs	r3, r3, #3
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	4a84      	ldr	r2, [pc, #528]	; (800568c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800547c:	fa22 f303 	lsr.w	r3, r2, r3
 8005480:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	ee07 3a90 	vmov	s15, r3
 8005488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800549a:	4b7b      	ldr	r3, [pc, #492]	; (8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800549c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80054ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005690 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80054ca:	e087      	b.n	80055dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005694 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80054da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054de:	4b6a      	ldr	r3, [pc, #424]	; (8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80054f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005690 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800550e:	e065      	b.n	80055dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800551e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005522:	4b59      	ldr	r3, [pc, #356]	; (8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005532:	ed97 6a03 	vldr	s12, [r7, #12]
 8005536:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005690 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800553a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800553e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800554a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800554e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005552:	e043      	b.n	80055dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800569c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005566:	4b48      	ldr	r3, [pc, #288]	; (8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005576:	ed97 6a03 	vldr	s12, [r7, #12]
 800557a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005690 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800557e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800558a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800558e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005592:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005596:	e021      	b.n	80055dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	ee07 3a90 	vmov	s15, r3
 800559e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80055a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055aa:	4b37      	ldr	r3, [pc, #220]	; (8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80055be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005690 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80055dc:	4b2a      	ldr	r3, [pc, #168]	; (8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e0:	0a5b      	lsrs	r3, r3, #9
 80055e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055e6:	ee07 3a90 	vmov	s15, r3
 80055ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80055fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005602:	ee17 2a90 	vmov	r2, s15
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800560a:	4b1f      	ldr	r3, [pc, #124]	; (8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	0c1b      	lsrs	r3, r3, #16
 8005610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005614:	ee07 3a90 	vmov	s15, r3
 8005618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005620:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005624:	edd7 6a07 	vldr	s13, [r7, #28]
 8005628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800562c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005630:	ee17 2a90 	vmov	r2, s15
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005638:	4b13      	ldr	r3, [pc, #76]	; (8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800563a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563c:	0e1b      	lsrs	r3, r3, #24
 800563e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800564e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005652:	edd7 6a07 	vldr	s13, [r7, #28]
 8005656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800565a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800565e:	ee17 2a90 	vmov	r2, s15
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005666:	e008      	b.n	800567a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	609a      	str	r2, [r3, #8]
}
 800567a:	bf00      	nop
 800567c:	3724      	adds	r7, #36	; 0x24
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	58024400 	.word	0x58024400
 800568c:	03d09000 	.word	0x03d09000
 8005690:	46000000 	.word	0x46000000
 8005694:	4c742400 	.word	0x4c742400
 8005698:	4a742400 	.word	0x4a742400
 800569c:	4af42400 	.word	0x4af42400

080056a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b089      	sub	sp, #36	; 0x24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056a8:	4ba1      	ldr	r3, [pc, #644]	; (8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	f003 0303 	and.w	r3, r3, #3
 80056b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80056b2:	4b9f      	ldr	r3, [pc, #636]	; (8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b6:	0d1b      	lsrs	r3, r3, #20
 80056b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80056be:	4b9c      	ldr	r3, [pc, #624]	; (8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c2:	0a1b      	lsrs	r3, r3, #8
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80056ca:	4b99      	ldr	r3, [pc, #612]	; (8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ce:	08db      	lsrs	r3, r3, #3
 80056d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	fb02 f303 	mul.w	r3, r2, r3
 80056da:	ee07 3a90 	vmov	s15, r3
 80056de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 8111 	beq.w	8005910 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	f000 8083 	beq.w	80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	f200 80a1 	bhi.w	8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d056      	beq.n	80057b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800570a:	e099      	b.n	8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800570c:	4b88      	ldr	r3, [pc, #544]	; (8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b00      	cmp	r3, #0
 8005716:	d02d      	beq.n	8005774 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005718:	4b85      	ldr	r3, [pc, #532]	; (8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	08db      	lsrs	r3, r3, #3
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	4a84      	ldr	r2, [pc, #528]	; (8005934 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005724:	fa22 f303 	lsr.w	r3, r2, r3
 8005728:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	ee07 3a90 	vmov	s15, r3
 8005730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005742:	4b7b      	ldr	r3, [pc, #492]	; (8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574a:	ee07 3a90 	vmov	s15, r3
 800574e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005752:	ed97 6a03 	vldr	s12, [r7, #12]
 8005756:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005938 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800575a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800575e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005772:	e087      	b.n	8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800593c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005786:	4b6a      	ldr	r3, [pc, #424]	; (8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578e:	ee07 3a90 	vmov	s15, r3
 8005792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005796:	ed97 6a03 	vldr	s12, [r7, #12]
 800579a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005938 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800579e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057b6:	e065      	b.n	8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	ee07 3a90 	vmov	s15, r3
 80057be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80057c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ca:	4b59      	ldr	r3, [pc, #356]	; (8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057da:	ed97 6a03 	vldr	s12, [r7, #12]
 80057de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005938 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057fa:	e043      	b.n	8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005806:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005944 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800580a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800580e:	4b48      	ldr	r3, [pc, #288]	; (8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800581e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005822:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005938 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800582a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800582e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800583e:	e021      	b.n	8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800584e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005852:	4b37      	ldr	r3, [pc, #220]	; (8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005862:	ed97 6a03 	vldr	s12, [r7, #12]
 8005866:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005938 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800586a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800586e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005882:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005884:	4b2a      	ldr	r3, [pc, #168]	; (8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005888:	0a5b      	lsrs	r3, r3, #9
 800588a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800588e:	ee07 3a90 	vmov	s15, r3
 8005892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005896:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800589a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800589e:	edd7 6a07 	vldr	s13, [r7, #28]
 80058a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058aa:	ee17 2a90 	vmov	r2, s15
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80058b2:	4b1f      	ldr	r3, [pc, #124]	; (8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	0c1b      	lsrs	r3, r3, #16
 80058b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058bc:	ee07 3a90 	vmov	s15, r3
 80058c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80058d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058d8:	ee17 2a90 	vmov	r2, s15
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80058e0:	4b13      	ldr	r3, [pc, #76]	; (8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	0e1b      	lsrs	r3, r3, #24
 80058e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80058fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005906:	ee17 2a90 	vmov	r2, s15
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800590e:	e008      	b.n	8005922 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	609a      	str	r2, [r3, #8]
}
 8005922:	bf00      	nop
 8005924:	3724      	adds	r7, #36	; 0x24
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	58024400 	.word	0x58024400
 8005934:	03d09000 	.word	0x03d09000
 8005938:	46000000 	.word	0x46000000
 800593c:	4c742400 	.word	0x4c742400
 8005940:	4a742400 	.word	0x4a742400
 8005944:	4af42400 	.word	0x4af42400

08005948 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005948:	b480      	push	{r7}
 800594a:	b089      	sub	sp, #36	; 0x24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005950:	4ba0      	ldr	r3, [pc, #640]	; (8005bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800595a:	4b9e      	ldr	r3, [pc, #632]	; (8005bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800595c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595e:	091b      	lsrs	r3, r3, #4
 8005960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005964:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005966:	4b9b      	ldr	r3, [pc, #620]	; (8005bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005970:	4b98      	ldr	r3, [pc, #608]	; (8005bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005974:	08db      	lsrs	r3, r3, #3
 8005976:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	fb02 f303 	mul.w	r3, r2, r3
 8005980:	ee07 3a90 	vmov	s15, r3
 8005984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005988:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 8111 	beq.w	8005bb6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	2b02      	cmp	r3, #2
 8005998:	f000 8083 	beq.w	8005aa2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	2b02      	cmp	r3, #2
 80059a0:	f200 80a1 	bhi.w	8005ae6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d056      	beq.n	8005a5e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80059b0:	e099      	b.n	8005ae6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059b2:	4b88      	ldr	r3, [pc, #544]	; (8005bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d02d      	beq.n	8005a1a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059be:	4b85      	ldr	r3, [pc, #532]	; (8005bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	08db      	lsrs	r3, r3, #3
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	4a83      	ldr	r2, [pc, #524]	; (8005bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80059ca:	fa22 f303 	lsr.w	r3, r2, r3
 80059ce:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	ee07 3a90 	vmov	s15, r3
 80059d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	ee07 3a90 	vmov	s15, r3
 80059e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e8:	4b7a      	ldr	r3, [pc, #488]	; (8005bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f0:	ee07 3a90 	vmov	s15, r3
 80059f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80059fc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005bdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a14:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005a18:	e087      	b.n	8005b2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	ee07 3a90 	vmov	s15, r3
 8005a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a24:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005be0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005a28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a2c:	4b69      	ldr	r3, [pc, #420]	; (8005bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a34:	ee07 3a90 	vmov	s15, r3
 8005a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a40:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005bdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a5c:	e065      	b.n	8005b2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	ee07 3a90 	vmov	s15, r3
 8005a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a68:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005a6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a70:	4b58      	ldr	r3, [pc, #352]	; (8005bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a78:	ee07 3a90 	vmov	s15, r3
 8005a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a80:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a84:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005bdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aa0:	e043      	b.n	8005b2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	ee07 3a90 	vmov	s15, r3
 8005aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005be8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005ab0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab4:	4b47      	ldr	r3, [pc, #284]	; (8005bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005abc:	ee07 3a90 	vmov	s15, r3
 8005ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ac8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005bdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005acc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ad8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ae4:	e021      	b.n	8005b2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	ee07 3a90 	vmov	s15, r3
 8005aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005be0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005af4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005af8:	4b36      	ldr	r3, [pc, #216]	; (8005bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b00:	ee07 3a90 	vmov	s15, r3
 8005b04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b08:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b0c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005bdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005b10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b28:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005b2a:	4b2a      	ldr	r3, [pc, #168]	; (8005bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2e:	0a5b      	lsrs	r3, r3, #9
 8005b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b34:	ee07 3a90 	vmov	s15, r3
 8005b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b44:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b50:	ee17 2a90 	vmov	r2, s15
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005b58:	4b1e      	ldr	r3, [pc, #120]	; (8005bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5c:	0c1b      	lsrs	r3, r3, #16
 8005b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b62:	ee07 3a90 	vmov	s15, r3
 8005b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b72:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b7e:	ee17 2a90 	vmov	r2, s15
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005b86:	4b13      	ldr	r3, [pc, #76]	; (8005bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8a:	0e1b      	lsrs	r3, r3, #24
 8005b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b90:	ee07 3a90 	vmov	s15, r3
 8005b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ba0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bac:	ee17 2a90 	vmov	r2, s15
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	609a      	str	r2, [r3, #8]
}
 8005bc8:	bf00      	nop
 8005bca:	3724      	adds	r7, #36	; 0x24
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	03d09000 	.word	0x03d09000
 8005bdc:	46000000 	.word	0x46000000
 8005be0:	4c742400 	.word	0x4c742400
 8005be4:	4a742400 	.word	0x4a742400
 8005be8:	4af42400 	.word	0x4af42400

08005bec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005bfa:	4b53      	ldr	r3, [pc, #332]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d101      	bne.n	8005c0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e099      	b.n	8005d3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005c0a:	4b4f      	ldr	r3, [pc, #316]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a4e      	ldr	r2, [pc, #312]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005c10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c16:	f7fb fc0b 	bl	8001430 <HAL_GetTick>
 8005c1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c1c:	e008      	b.n	8005c30 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c1e:	f7fb fc07 	bl	8001430 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d901      	bls.n	8005c30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e086      	b.n	8005d3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c30:	4b45      	ldr	r3, [pc, #276]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1f0      	bne.n	8005c1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005c3c:	4b42      	ldr	r3, [pc, #264]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	031b      	lsls	r3, r3, #12
 8005c4a:	493f      	ldr	r1, [pc, #252]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	628b      	str	r3, [r1, #40]	; 0x28
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	3b01      	subs	r3, #1
 8005c56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	025b      	lsls	r3, r3, #9
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	041b      	lsls	r3, r3, #16
 8005c6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	061b      	lsls	r3, r3, #24
 8005c7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c80:	4931      	ldr	r1, [pc, #196]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005c86:	4b30      	ldr	r3, [pc, #192]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	492d      	ldr	r1, [pc, #180]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005c98:	4b2b      	ldr	r3, [pc, #172]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	f023 0220 	bic.w	r2, r3, #32
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	4928      	ldr	r1, [pc, #160]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005caa:	4b27      	ldr	r3, [pc, #156]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	4a26      	ldr	r2, [pc, #152]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005cb0:	f023 0310 	bic.w	r3, r3, #16
 8005cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005cb6:	4b24      	ldr	r3, [pc, #144]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cba:	4b24      	ldr	r3, [pc, #144]	; (8005d4c <RCCEx_PLL2_Config+0x160>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	69d2      	ldr	r2, [r2, #28]
 8005cc2:	00d2      	lsls	r2, r2, #3
 8005cc4:	4920      	ldr	r1, [pc, #128]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005cca:	4b1f      	ldr	r3, [pc, #124]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	4a1e      	ldr	r2, [pc, #120]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005cd0:	f043 0310 	orr.w	r3, r3, #16
 8005cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d106      	bne.n	8005cea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005cdc:	4b1a      	ldr	r3, [pc, #104]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	4a19      	ldr	r2, [pc, #100]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005ce2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ce6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ce8:	e00f      	b.n	8005d0a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d106      	bne.n	8005cfe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005cf0:	4b15      	ldr	r3, [pc, #84]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	4a14      	ldr	r2, [pc, #80]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cfc:	e005      	b.n	8005d0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005cfe:	4b12      	ldr	r3, [pc, #72]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	4a11      	ldr	r2, [pc, #68]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005d04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005d0a:	4b0f      	ldr	r3, [pc, #60]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a0e      	ldr	r2, [pc, #56]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005d10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d16:	f7fb fb8b 	bl	8001430 <HAL_GetTick>
 8005d1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d1c:	e008      	b.n	8005d30 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005d1e:	f7fb fb87 	bl	8001430 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d901      	bls.n	8005d30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e006      	b.n	8005d3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d30:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <RCCEx_PLL2_Config+0x15c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0f0      	beq.n	8005d1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	58024400 	.word	0x58024400
 8005d4c:	ffff0007 	.word	0xffff0007

08005d50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d5e:	4b53      	ldr	r3, [pc, #332]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d101      	bne.n	8005d6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e099      	b.n	8005ea2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005d6e:	4b4f      	ldr	r3, [pc, #316]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a4e      	ldr	r2, [pc, #312]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d7a:	f7fb fb59 	bl	8001430 <HAL_GetTick>
 8005d7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d80:	e008      	b.n	8005d94 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005d82:	f7fb fb55 	bl	8001430 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e086      	b.n	8005ea2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d94:	4b45      	ldr	r3, [pc, #276]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1f0      	bne.n	8005d82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005da0:	4b42      	ldr	r3, [pc, #264]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	051b      	lsls	r3, r3, #20
 8005dae:	493f      	ldr	r1, [pc, #252]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	628b      	str	r3, [r1, #40]	; 0x28
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	025b      	lsls	r3, r3, #9
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	041b      	lsls	r3, r3, #16
 8005dd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	061b      	lsls	r3, r3, #24
 8005de0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005de4:	4931      	ldr	r1, [pc, #196]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005dea:	4b30      	ldr	r3, [pc, #192]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	492d      	ldr	r1, [pc, #180]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005dfc:	4b2b      	ldr	r3, [pc, #172]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	4928      	ldr	r1, [pc, #160]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005e0e:	4b27      	ldr	r3, [pc, #156]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	4a26      	ldr	r2, [pc, #152]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005e1a:	4b24      	ldr	r3, [pc, #144]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e1e:	4b24      	ldr	r3, [pc, #144]	; (8005eb0 <RCCEx_PLL3_Config+0x160>)
 8005e20:	4013      	ands	r3, r2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	69d2      	ldr	r2, [r2, #28]
 8005e26:	00d2      	lsls	r2, r2, #3
 8005e28:	4920      	ldr	r1, [pc, #128]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005e2e:	4b1f      	ldr	r3, [pc, #124]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e32:	4a1e      	ldr	r2, [pc, #120]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d106      	bne.n	8005e4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005e40:	4b1a      	ldr	r3, [pc, #104]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	4a19      	ldr	r2, [pc, #100]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e4c:	e00f      	b.n	8005e6e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d106      	bne.n	8005e62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005e54:	4b15      	ldr	r3, [pc, #84]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	4a14      	ldr	r2, [pc, #80]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e60:	e005      	b.n	8005e6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005e62:	4b12      	ldr	r3, [pc, #72]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e66:	4a11      	ldr	r2, [pc, #68]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005e6e:	4b0f      	ldr	r3, [pc, #60]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a0e      	ldr	r2, [pc, #56]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e7a:	f7fb fad9 	bl	8001430 <HAL_GetTick>
 8005e7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e80:	e008      	b.n	8005e94 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005e82:	f7fb fad5 	bl	8001430 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d901      	bls.n	8005e94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e006      	b.n	8005ea2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e94:	4b05      	ldr	r3, [pc, #20]	; (8005eac <RCCEx_PLL3_Config+0x15c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0f0      	beq.n	8005e82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	58024400 	.word	0x58024400
 8005eb0:	ffff0007 	.word	0xffff0007

08005eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e042      	b.n	8005f4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d106      	bne.n	8005ede <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7fb f82b 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2224      	movs	r2, #36	; 0x24
 8005ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0201 	bic.w	r2, r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f8c2 	bl	8006080 <UART_SetConfig>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d101      	bne.n	8005f06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e022      	b.n	8005f4c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 ff22 	bl	8006d58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 ffa9 	bl	8006e9c <UART_CheckIdleState>
 8005f4a:	4603      	mov	r3, r0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08a      	sub	sp, #40	; 0x28
 8005f58:	af02      	add	r7, sp, #8
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	603b      	str	r3, [r7, #0]
 8005f60:	4613      	mov	r3, r2
 8005f62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f6a:	2b20      	cmp	r3, #32
 8005f6c:	f040 8083 	bne.w	8006076 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <HAL_UART_Transmit+0x28>
 8005f76:	88fb      	ldrh	r3, [r7, #6]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e07b      	b.n	8006078 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d101      	bne.n	8005f8e <HAL_UART_Transmit+0x3a>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e074      	b.n	8006078 <HAL_UART_Transmit+0x124>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2221      	movs	r2, #33	; 0x21
 8005fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fa6:	f7fb fa43 	bl	8001430 <HAL_GetTick>
 8005faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	88fa      	ldrh	r2, [r7, #6]
 8005fb0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	88fa      	ldrh	r2, [r7, #6]
 8005fb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc4:	d108      	bne.n	8005fd8 <HAL_UART_Transmit+0x84>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d104      	bne.n	8005fd8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	61bb      	str	r3, [r7, #24]
 8005fd6:	e003      	b.n	8005fe0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005fe8:	e02c      	b.n	8006044 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2180      	movs	r1, #128	; 0x80
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 ff9c 	bl	8006f32 <UART_WaitOnFlagUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e039      	b.n	8006078 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10b      	bne.n	8006022 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006018:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	3302      	adds	r3, #2
 800601e:	61bb      	str	r3, [r7, #24]
 8006020:	e007      	b.n	8006032 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	781a      	ldrb	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	3301      	adds	r3, #1
 8006030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800604a:	b29b      	uxth	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1cc      	bne.n	8005fea <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2200      	movs	r2, #0
 8006058:	2140      	movs	r1, #64	; 0x40
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 ff69 	bl	8006f32 <UART_WaitOnFlagUntilTimeout>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e006      	b.n	8006078 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2220      	movs	r2, #32
 800606e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	e000      	b.n	8006078 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006076:	2302      	movs	r3, #2
  }
}
 8006078:	4618      	mov	r0, r3
 800607a:	3720      	adds	r7, #32
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006084:	b092      	sub	sp, #72	; 0x48
 8006086:	af00      	add	r7, sp, #0
 8006088:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	431a      	orrs	r2, r3
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	431a      	orrs	r2, r3
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	4bbe      	ldr	r3, [pc, #760]	; (80063a8 <UART_SetConfig+0x328>)
 80060b0:	4013      	ands	r3, r2
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	6812      	ldr	r2, [r2, #0]
 80060b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060b8:	430b      	orrs	r3, r1
 80060ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4ab3      	ldr	r2, [pc, #716]	; (80063ac <UART_SetConfig+0x32c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d004      	beq.n	80060ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060e8:	4313      	orrs	r3, r2
 80060ea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689a      	ldr	r2, [r3, #8]
 80060f2:	4baf      	ldr	r3, [pc, #700]	; (80063b0 <UART_SetConfig+0x330>)
 80060f4:	4013      	ands	r3, r2
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	6812      	ldr	r2, [r2, #0]
 80060fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060fc:	430b      	orrs	r3, r1
 80060fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006106:	f023 010f 	bic.w	r1, r3, #15
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4aa6      	ldr	r2, [pc, #664]	; (80063b4 <UART_SetConfig+0x334>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d177      	bne.n	8006210 <UART_SetConfig+0x190>
 8006120:	4ba5      	ldr	r3, [pc, #660]	; (80063b8 <UART_SetConfig+0x338>)
 8006122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006124:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006128:	2b28      	cmp	r3, #40	; 0x28
 800612a:	d86d      	bhi.n	8006208 <UART_SetConfig+0x188>
 800612c:	a201      	add	r2, pc, #4	; (adr r2, 8006134 <UART_SetConfig+0xb4>)
 800612e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006132:	bf00      	nop
 8006134:	080061d9 	.word	0x080061d9
 8006138:	08006209 	.word	0x08006209
 800613c:	08006209 	.word	0x08006209
 8006140:	08006209 	.word	0x08006209
 8006144:	08006209 	.word	0x08006209
 8006148:	08006209 	.word	0x08006209
 800614c:	08006209 	.word	0x08006209
 8006150:	08006209 	.word	0x08006209
 8006154:	080061e1 	.word	0x080061e1
 8006158:	08006209 	.word	0x08006209
 800615c:	08006209 	.word	0x08006209
 8006160:	08006209 	.word	0x08006209
 8006164:	08006209 	.word	0x08006209
 8006168:	08006209 	.word	0x08006209
 800616c:	08006209 	.word	0x08006209
 8006170:	08006209 	.word	0x08006209
 8006174:	080061e9 	.word	0x080061e9
 8006178:	08006209 	.word	0x08006209
 800617c:	08006209 	.word	0x08006209
 8006180:	08006209 	.word	0x08006209
 8006184:	08006209 	.word	0x08006209
 8006188:	08006209 	.word	0x08006209
 800618c:	08006209 	.word	0x08006209
 8006190:	08006209 	.word	0x08006209
 8006194:	080061f1 	.word	0x080061f1
 8006198:	08006209 	.word	0x08006209
 800619c:	08006209 	.word	0x08006209
 80061a0:	08006209 	.word	0x08006209
 80061a4:	08006209 	.word	0x08006209
 80061a8:	08006209 	.word	0x08006209
 80061ac:	08006209 	.word	0x08006209
 80061b0:	08006209 	.word	0x08006209
 80061b4:	080061f9 	.word	0x080061f9
 80061b8:	08006209 	.word	0x08006209
 80061bc:	08006209 	.word	0x08006209
 80061c0:	08006209 	.word	0x08006209
 80061c4:	08006209 	.word	0x08006209
 80061c8:	08006209 	.word	0x08006209
 80061cc:	08006209 	.word	0x08006209
 80061d0:	08006209 	.word	0x08006209
 80061d4:	08006201 	.word	0x08006201
 80061d8:	2301      	movs	r3, #1
 80061da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061de:	e326      	b.n	800682e <UART_SetConfig+0x7ae>
 80061e0:	2304      	movs	r3, #4
 80061e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061e6:	e322      	b.n	800682e <UART_SetConfig+0x7ae>
 80061e8:	2308      	movs	r3, #8
 80061ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ee:	e31e      	b.n	800682e <UART_SetConfig+0x7ae>
 80061f0:	2310      	movs	r3, #16
 80061f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061f6:	e31a      	b.n	800682e <UART_SetConfig+0x7ae>
 80061f8:	2320      	movs	r3, #32
 80061fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061fe:	e316      	b.n	800682e <UART_SetConfig+0x7ae>
 8006200:	2340      	movs	r3, #64	; 0x40
 8006202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006206:	e312      	b.n	800682e <UART_SetConfig+0x7ae>
 8006208:	2380      	movs	r3, #128	; 0x80
 800620a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800620e:	e30e      	b.n	800682e <UART_SetConfig+0x7ae>
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a69      	ldr	r2, [pc, #420]	; (80063bc <UART_SetConfig+0x33c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d130      	bne.n	800627c <UART_SetConfig+0x1fc>
 800621a:	4b67      	ldr	r3, [pc, #412]	; (80063b8 <UART_SetConfig+0x338>)
 800621c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621e:	f003 0307 	and.w	r3, r3, #7
 8006222:	2b05      	cmp	r3, #5
 8006224:	d826      	bhi.n	8006274 <UART_SetConfig+0x1f4>
 8006226:	a201      	add	r2, pc, #4	; (adr r2, 800622c <UART_SetConfig+0x1ac>)
 8006228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622c:	08006245 	.word	0x08006245
 8006230:	0800624d 	.word	0x0800624d
 8006234:	08006255 	.word	0x08006255
 8006238:	0800625d 	.word	0x0800625d
 800623c:	08006265 	.word	0x08006265
 8006240:	0800626d 	.word	0x0800626d
 8006244:	2300      	movs	r3, #0
 8006246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800624a:	e2f0      	b.n	800682e <UART_SetConfig+0x7ae>
 800624c:	2304      	movs	r3, #4
 800624e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006252:	e2ec      	b.n	800682e <UART_SetConfig+0x7ae>
 8006254:	2308      	movs	r3, #8
 8006256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800625a:	e2e8      	b.n	800682e <UART_SetConfig+0x7ae>
 800625c:	2310      	movs	r3, #16
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006262:	e2e4      	b.n	800682e <UART_SetConfig+0x7ae>
 8006264:	2320      	movs	r3, #32
 8006266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800626a:	e2e0      	b.n	800682e <UART_SetConfig+0x7ae>
 800626c:	2340      	movs	r3, #64	; 0x40
 800626e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006272:	e2dc      	b.n	800682e <UART_SetConfig+0x7ae>
 8006274:	2380      	movs	r3, #128	; 0x80
 8006276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800627a:	e2d8      	b.n	800682e <UART_SetConfig+0x7ae>
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a4f      	ldr	r2, [pc, #316]	; (80063c0 <UART_SetConfig+0x340>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d130      	bne.n	80062e8 <UART_SetConfig+0x268>
 8006286:	4b4c      	ldr	r3, [pc, #304]	; (80063b8 <UART_SetConfig+0x338>)
 8006288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	2b05      	cmp	r3, #5
 8006290:	d826      	bhi.n	80062e0 <UART_SetConfig+0x260>
 8006292:	a201      	add	r2, pc, #4	; (adr r2, 8006298 <UART_SetConfig+0x218>)
 8006294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006298:	080062b1 	.word	0x080062b1
 800629c:	080062b9 	.word	0x080062b9
 80062a0:	080062c1 	.word	0x080062c1
 80062a4:	080062c9 	.word	0x080062c9
 80062a8:	080062d1 	.word	0x080062d1
 80062ac:	080062d9 	.word	0x080062d9
 80062b0:	2300      	movs	r3, #0
 80062b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062b6:	e2ba      	b.n	800682e <UART_SetConfig+0x7ae>
 80062b8:	2304      	movs	r3, #4
 80062ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062be:	e2b6      	b.n	800682e <UART_SetConfig+0x7ae>
 80062c0:	2308      	movs	r3, #8
 80062c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062c6:	e2b2      	b.n	800682e <UART_SetConfig+0x7ae>
 80062c8:	2310      	movs	r3, #16
 80062ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ce:	e2ae      	b.n	800682e <UART_SetConfig+0x7ae>
 80062d0:	2320      	movs	r3, #32
 80062d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062d6:	e2aa      	b.n	800682e <UART_SetConfig+0x7ae>
 80062d8:	2340      	movs	r3, #64	; 0x40
 80062da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062de:	e2a6      	b.n	800682e <UART_SetConfig+0x7ae>
 80062e0:	2380      	movs	r3, #128	; 0x80
 80062e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062e6:	e2a2      	b.n	800682e <UART_SetConfig+0x7ae>
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a35      	ldr	r2, [pc, #212]	; (80063c4 <UART_SetConfig+0x344>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d130      	bne.n	8006354 <UART_SetConfig+0x2d4>
 80062f2:	4b31      	ldr	r3, [pc, #196]	; (80063b8 <UART_SetConfig+0x338>)
 80062f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	2b05      	cmp	r3, #5
 80062fc:	d826      	bhi.n	800634c <UART_SetConfig+0x2cc>
 80062fe:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <UART_SetConfig+0x284>)
 8006300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006304:	0800631d 	.word	0x0800631d
 8006308:	08006325 	.word	0x08006325
 800630c:	0800632d 	.word	0x0800632d
 8006310:	08006335 	.word	0x08006335
 8006314:	0800633d 	.word	0x0800633d
 8006318:	08006345 	.word	0x08006345
 800631c:	2300      	movs	r3, #0
 800631e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006322:	e284      	b.n	800682e <UART_SetConfig+0x7ae>
 8006324:	2304      	movs	r3, #4
 8006326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800632a:	e280      	b.n	800682e <UART_SetConfig+0x7ae>
 800632c:	2308      	movs	r3, #8
 800632e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006332:	e27c      	b.n	800682e <UART_SetConfig+0x7ae>
 8006334:	2310      	movs	r3, #16
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800633a:	e278      	b.n	800682e <UART_SetConfig+0x7ae>
 800633c:	2320      	movs	r3, #32
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006342:	e274      	b.n	800682e <UART_SetConfig+0x7ae>
 8006344:	2340      	movs	r3, #64	; 0x40
 8006346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800634a:	e270      	b.n	800682e <UART_SetConfig+0x7ae>
 800634c:	2380      	movs	r3, #128	; 0x80
 800634e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006352:	e26c      	b.n	800682e <UART_SetConfig+0x7ae>
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a1b      	ldr	r2, [pc, #108]	; (80063c8 <UART_SetConfig+0x348>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d142      	bne.n	80063e4 <UART_SetConfig+0x364>
 800635e:	4b16      	ldr	r3, [pc, #88]	; (80063b8 <UART_SetConfig+0x338>)
 8006360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	2b05      	cmp	r3, #5
 8006368:	d838      	bhi.n	80063dc <UART_SetConfig+0x35c>
 800636a:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <UART_SetConfig+0x2f0>)
 800636c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006370:	08006389 	.word	0x08006389
 8006374:	08006391 	.word	0x08006391
 8006378:	08006399 	.word	0x08006399
 800637c:	080063a1 	.word	0x080063a1
 8006380:	080063cd 	.word	0x080063cd
 8006384:	080063d5 	.word	0x080063d5
 8006388:	2300      	movs	r3, #0
 800638a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800638e:	e24e      	b.n	800682e <UART_SetConfig+0x7ae>
 8006390:	2304      	movs	r3, #4
 8006392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006396:	e24a      	b.n	800682e <UART_SetConfig+0x7ae>
 8006398:	2308      	movs	r3, #8
 800639a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800639e:	e246      	b.n	800682e <UART_SetConfig+0x7ae>
 80063a0:	2310      	movs	r3, #16
 80063a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063a6:	e242      	b.n	800682e <UART_SetConfig+0x7ae>
 80063a8:	cfff69f3 	.word	0xcfff69f3
 80063ac:	58000c00 	.word	0x58000c00
 80063b0:	11fff4ff 	.word	0x11fff4ff
 80063b4:	40011000 	.word	0x40011000
 80063b8:	58024400 	.word	0x58024400
 80063bc:	40004400 	.word	0x40004400
 80063c0:	40004800 	.word	0x40004800
 80063c4:	40004c00 	.word	0x40004c00
 80063c8:	40005000 	.word	0x40005000
 80063cc:	2320      	movs	r3, #32
 80063ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063d2:	e22c      	b.n	800682e <UART_SetConfig+0x7ae>
 80063d4:	2340      	movs	r3, #64	; 0x40
 80063d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063da:	e228      	b.n	800682e <UART_SetConfig+0x7ae>
 80063dc:	2380      	movs	r3, #128	; 0x80
 80063de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063e2:	e224      	b.n	800682e <UART_SetConfig+0x7ae>
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4ab1      	ldr	r2, [pc, #708]	; (80066b0 <UART_SetConfig+0x630>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d176      	bne.n	80064dc <UART_SetConfig+0x45c>
 80063ee:	4bb1      	ldr	r3, [pc, #708]	; (80066b4 <UART_SetConfig+0x634>)
 80063f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063f6:	2b28      	cmp	r3, #40	; 0x28
 80063f8:	d86c      	bhi.n	80064d4 <UART_SetConfig+0x454>
 80063fa:	a201      	add	r2, pc, #4	; (adr r2, 8006400 <UART_SetConfig+0x380>)
 80063fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006400:	080064a5 	.word	0x080064a5
 8006404:	080064d5 	.word	0x080064d5
 8006408:	080064d5 	.word	0x080064d5
 800640c:	080064d5 	.word	0x080064d5
 8006410:	080064d5 	.word	0x080064d5
 8006414:	080064d5 	.word	0x080064d5
 8006418:	080064d5 	.word	0x080064d5
 800641c:	080064d5 	.word	0x080064d5
 8006420:	080064ad 	.word	0x080064ad
 8006424:	080064d5 	.word	0x080064d5
 8006428:	080064d5 	.word	0x080064d5
 800642c:	080064d5 	.word	0x080064d5
 8006430:	080064d5 	.word	0x080064d5
 8006434:	080064d5 	.word	0x080064d5
 8006438:	080064d5 	.word	0x080064d5
 800643c:	080064d5 	.word	0x080064d5
 8006440:	080064b5 	.word	0x080064b5
 8006444:	080064d5 	.word	0x080064d5
 8006448:	080064d5 	.word	0x080064d5
 800644c:	080064d5 	.word	0x080064d5
 8006450:	080064d5 	.word	0x080064d5
 8006454:	080064d5 	.word	0x080064d5
 8006458:	080064d5 	.word	0x080064d5
 800645c:	080064d5 	.word	0x080064d5
 8006460:	080064bd 	.word	0x080064bd
 8006464:	080064d5 	.word	0x080064d5
 8006468:	080064d5 	.word	0x080064d5
 800646c:	080064d5 	.word	0x080064d5
 8006470:	080064d5 	.word	0x080064d5
 8006474:	080064d5 	.word	0x080064d5
 8006478:	080064d5 	.word	0x080064d5
 800647c:	080064d5 	.word	0x080064d5
 8006480:	080064c5 	.word	0x080064c5
 8006484:	080064d5 	.word	0x080064d5
 8006488:	080064d5 	.word	0x080064d5
 800648c:	080064d5 	.word	0x080064d5
 8006490:	080064d5 	.word	0x080064d5
 8006494:	080064d5 	.word	0x080064d5
 8006498:	080064d5 	.word	0x080064d5
 800649c:	080064d5 	.word	0x080064d5
 80064a0:	080064cd 	.word	0x080064cd
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064aa:	e1c0      	b.n	800682e <UART_SetConfig+0x7ae>
 80064ac:	2304      	movs	r3, #4
 80064ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b2:	e1bc      	b.n	800682e <UART_SetConfig+0x7ae>
 80064b4:	2308      	movs	r3, #8
 80064b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ba:	e1b8      	b.n	800682e <UART_SetConfig+0x7ae>
 80064bc:	2310      	movs	r3, #16
 80064be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064c2:	e1b4      	b.n	800682e <UART_SetConfig+0x7ae>
 80064c4:	2320      	movs	r3, #32
 80064c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ca:	e1b0      	b.n	800682e <UART_SetConfig+0x7ae>
 80064cc:	2340      	movs	r3, #64	; 0x40
 80064ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064d2:	e1ac      	b.n	800682e <UART_SetConfig+0x7ae>
 80064d4:	2380      	movs	r3, #128	; 0x80
 80064d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064da:	e1a8      	b.n	800682e <UART_SetConfig+0x7ae>
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a75      	ldr	r2, [pc, #468]	; (80066b8 <UART_SetConfig+0x638>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d130      	bne.n	8006548 <UART_SetConfig+0x4c8>
 80064e6:	4b73      	ldr	r3, [pc, #460]	; (80066b4 <UART_SetConfig+0x634>)
 80064e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	2b05      	cmp	r3, #5
 80064f0:	d826      	bhi.n	8006540 <UART_SetConfig+0x4c0>
 80064f2:	a201      	add	r2, pc, #4	; (adr r2, 80064f8 <UART_SetConfig+0x478>)
 80064f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f8:	08006511 	.word	0x08006511
 80064fc:	08006519 	.word	0x08006519
 8006500:	08006521 	.word	0x08006521
 8006504:	08006529 	.word	0x08006529
 8006508:	08006531 	.word	0x08006531
 800650c:	08006539 	.word	0x08006539
 8006510:	2300      	movs	r3, #0
 8006512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006516:	e18a      	b.n	800682e <UART_SetConfig+0x7ae>
 8006518:	2304      	movs	r3, #4
 800651a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800651e:	e186      	b.n	800682e <UART_SetConfig+0x7ae>
 8006520:	2308      	movs	r3, #8
 8006522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006526:	e182      	b.n	800682e <UART_SetConfig+0x7ae>
 8006528:	2310      	movs	r3, #16
 800652a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800652e:	e17e      	b.n	800682e <UART_SetConfig+0x7ae>
 8006530:	2320      	movs	r3, #32
 8006532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006536:	e17a      	b.n	800682e <UART_SetConfig+0x7ae>
 8006538:	2340      	movs	r3, #64	; 0x40
 800653a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800653e:	e176      	b.n	800682e <UART_SetConfig+0x7ae>
 8006540:	2380      	movs	r3, #128	; 0x80
 8006542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006546:	e172      	b.n	800682e <UART_SetConfig+0x7ae>
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a5b      	ldr	r2, [pc, #364]	; (80066bc <UART_SetConfig+0x63c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d130      	bne.n	80065b4 <UART_SetConfig+0x534>
 8006552:	4b58      	ldr	r3, [pc, #352]	; (80066b4 <UART_SetConfig+0x634>)
 8006554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	2b05      	cmp	r3, #5
 800655c:	d826      	bhi.n	80065ac <UART_SetConfig+0x52c>
 800655e:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <UART_SetConfig+0x4e4>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	0800657d 	.word	0x0800657d
 8006568:	08006585 	.word	0x08006585
 800656c:	0800658d 	.word	0x0800658d
 8006570:	08006595 	.word	0x08006595
 8006574:	0800659d 	.word	0x0800659d
 8006578:	080065a5 	.word	0x080065a5
 800657c:	2300      	movs	r3, #0
 800657e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006582:	e154      	b.n	800682e <UART_SetConfig+0x7ae>
 8006584:	2304      	movs	r3, #4
 8006586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800658a:	e150      	b.n	800682e <UART_SetConfig+0x7ae>
 800658c:	2308      	movs	r3, #8
 800658e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006592:	e14c      	b.n	800682e <UART_SetConfig+0x7ae>
 8006594:	2310      	movs	r3, #16
 8006596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800659a:	e148      	b.n	800682e <UART_SetConfig+0x7ae>
 800659c:	2320      	movs	r3, #32
 800659e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065a2:	e144      	b.n	800682e <UART_SetConfig+0x7ae>
 80065a4:	2340      	movs	r3, #64	; 0x40
 80065a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065aa:	e140      	b.n	800682e <UART_SetConfig+0x7ae>
 80065ac:	2380      	movs	r3, #128	; 0x80
 80065ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065b2:	e13c      	b.n	800682e <UART_SetConfig+0x7ae>
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a41      	ldr	r2, [pc, #260]	; (80066c0 <UART_SetConfig+0x640>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	f040 8082 	bne.w	80066c4 <UART_SetConfig+0x644>
 80065c0:	4b3c      	ldr	r3, [pc, #240]	; (80066b4 <UART_SetConfig+0x634>)
 80065c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065c8:	2b28      	cmp	r3, #40	; 0x28
 80065ca:	d86d      	bhi.n	80066a8 <UART_SetConfig+0x628>
 80065cc:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <UART_SetConfig+0x554>)
 80065ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d2:	bf00      	nop
 80065d4:	08006679 	.word	0x08006679
 80065d8:	080066a9 	.word	0x080066a9
 80065dc:	080066a9 	.word	0x080066a9
 80065e0:	080066a9 	.word	0x080066a9
 80065e4:	080066a9 	.word	0x080066a9
 80065e8:	080066a9 	.word	0x080066a9
 80065ec:	080066a9 	.word	0x080066a9
 80065f0:	080066a9 	.word	0x080066a9
 80065f4:	08006681 	.word	0x08006681
 80065f8:	080066a9 	.word	0x080066a9
 80065fc:	080066a9 	.word	0x080066a9
 8006600:	080066a9 	.word	0x080066a9
 8006604:	080066a9 	.word	0x080066a9
 8006608:	080066a9 	.word	0x080066a9
 800660c:	080066a9 	.word	0x080066a9
 8006610:	080066a9 	.word	0x080066a9
 8006614:	08006689 	.word	0x08006689
 8006618:	080066a9 	.word	0x080066a9
 800661c:	080066a9 	.word	0x080066a9
 8006620:	080066a9 	.word	0x080066a9
 8006624:	080066a9 	.word	0x080066a9
 8006628:	080066a9 	.word	0x080066a9
 800662c:	080066a9 	.word	0x080066a9
 8006630:	080066a9 	.word	0x080066a9
 8006634:	08006691 	.word	0x08006691
 8006638:	080066a9 	.word	0x080066a9
 800663c:	080066a9 	.word	0x080066a9
 8006640:	080066a9 	.word	0x080066a9
 8006644:	080066a9 	.word	0x080066a9
 8006648:	080066a9 	.word	0x080066a9
 800664c:	080066a9 	.word	0x080066a9
 8006650:	080066a9 	.word	0x080066a9
 8006654:	08006699 	.word	0x08006699
 8006658:	080066a9 	.word	0x080066a9
 800665c:	080066a9 	.word	0x080066a9
 8006660:	080066a9 	.word	0x080066a9
 8006664:	080066a9 	.word	0x080066a9
 8006668:	080066a9 	.word	0x080066a9
 800666c:	080066a9 	.word	0x080066a9
 8006670:	080066a9 	.word	0x080066a9
 8006674:	080066a1 	.word	0x080066a1
 8006678:	2301      	movs	r3, #1
 800667a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800667e:	e0d6      	b.n	800682e <UART_SetConfig+0x7ae>
 8006680:	2304      	movs	r3, #4
 8006682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006686:	e0d2      	b.n	800682e <UART_SetConfig+0x7ae>
 8006688:	2308      	movs	r3, #8
 800668a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800668e:	e0ce      	b.n	800682e <UART_SetConfig+0x7ae>
 8006690:	2310      	movs	r3, #16
 8006692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006696:	e0ca      	b.n	800682e <UART_SetConfig+0x7ae>
 8006698:	2320      	movs	r3, #32
 800669a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800669e:	e0c6      	b.n	800682e <UART_SetConfig+0x7ae>
 80066a0:	2340      	movs	r3, #64	; 0x40
 80066a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066a6:	e0c2      	b.n	800682e <UART_SetConfig+0x7ae>
 80066a8:	2380      	movs	r3, #128	; 0x80
 80066aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ae:	e0be      	b.n	800682e <UART_SetConfig+0x7ae>
 80066b0:	40011400 	.word	0x40011400
 80066b4:	58024400 	.word	0x58024400
 80066b8:	40007800 	.word	0x40007800
 80066bc:	40007c00 	.word	0x40007c00
 80066c0:	40011800 	.word	0x40011800
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4aad      	ldr	r2, [pc, #692]	; (8006980 <UART_SetConfig+0x900>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d176      	bne.n	80067bc <UART_SetConfig+0x73c>
 80066ce:	4bad      	ldr	r3, [pc, #692]	; (8006984 <UART_SetConfig+0x904>)
 80066d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066d6:	2b28      	cmp	r3, #40	; 0x28
 80066d8:	d86c      	bhi.n	80067b4 <UART_SetConfig+0x734>
 80066da:	a201      	add	r2, pc, #4	; (adr r2, 80066e0 <UART_SetConfig+0x660>)
 80066dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e0:	08006785 	.word	0x08006785
 80066e4:	080067b5 	.word	0x080067b5
 80066e8:	080067b5 	.word	0x080067b5
 80066ec:	080067b5 	.word	0x080067b5
 80066f0:	080067b5 	.word	0x080067b5
 80066f4:	080067b5 	.word	0x080067b5
 80066f8:	080067b5 	.word	0x080067b5
 80066fc:	080067b5 	.word	0x080067b5
 8006700:	0800678d 	.word	0x0800678d
 8006704:	080067b5 	.word	0x080067b5
 8006708:	080067b5 	.word	0x080067b5
 800670c:	080067b5 	.word	0x080067b5
 8006710:	080067b5 	.word	0x080067b5
 8006714:	080067b5 	.word	0x080067b5
 8006718:	080067b5 	.word	0x080067b5
 800671c:	080067b5 	.word	0x080067b5
 8006720:	08006795 	.word	0x08006795
 8006724:	080067b5 	.word	0x080067b5
 8006728:	080067b5 	.word	0x080067b5
 800672c:	080067b5 	.word	0x080067b5
 8006730:	080067b5 	.word	0x080067b5
 8006734:	080067b5 	.word	0x080067b5
 8006738:	080067b5 	.word	0x080067b5
 800673c:	080067b5 	.word	0x080067b5
 8006740:	0800679d 	.word	0x0800679d
 8006744:	080067b5 	.word	0x080067b5
 8006748:	080067b5 	.word	0x080067b5
 800674c:	080067b5 	.word	0x080067b5
 8006750:	080067b5 	.word	0x080067b5
 8006754:	080067b5 	.word	0x080067b5
 8006758:	080067b5 	.word	0x080067b5
 800675c:	080067b5 	.word	0x080067b5
 8006760:	080067a5 	.word	0x080067a5
 8006764:	080067b5 	.word	0x080067b5
 8006768:	080067b5 	.word	0x080067b5
 800676c:	080067b5 	.word	0x080067b5
 8006770:	080067b5 	.word	0x080067b5
 8006774:	080067b5 	.word	0x080067b5
 8006778:	080067b5 	.word	0x080067b5
 800677c:	080067b5 	.word	0x080067b5
 8006780:	080067ad 	.word	0x080067ad
 8006784:	2301      	movs	r3, #1
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678a:	e050      	b.n	800682e <UART_SetConfig+0x7ae>
 800678c:	2304      	movs	r3, #4
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006792:	e04c      	b.n	800682e <UART_SetConfig+0x7ae>
 8006794:	2308      	movs	r3, #8
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800679a:	e048      	b.n	800682e <UART_SetConfig+0x7ae>
 800679c:	2310      	movs	r3, #16
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067a2:	e044      	b.n	800682e <UART_SetConfig+0x7ae>
 80067a4:	2320      	movs	r3, #32
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067aa:	e040      	b.n	800682e <UART_SetConfig+0x7ae>
 80067ac:	2340      	movs	r3, #64	; 0x40
 80067ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067b2:	e03c      	b.n	800682e <UART_SetConfig+0x7ae>
 80067b4:	2380      	movs	r3, #128	; 0x80
 80067b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ba:	e038      	b.n	800682e <UART_SetConfig+0x7ae>
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a71      	ldr	r2, [pc, #452]	; (8006988 <UART_SetConfig+0x908>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d130      	bne.n	8006828 <UART_SetConfig+0x7a8>
 80067c6:	4b6f      	ldr	r3, [pc, #444]	; (8006984 <UART_SetConfig+0x904>)
 80067c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	2b05      	cmp	r3, #5
 80067d0:	d826      	bhi.n	8006820 <UART_SetConfig+0x7a0>
 80067d2:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <UART_SetConfig+0x758>)
 80067d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d8:	080067f1 	.word	0x080067f1
 80067dc:	080067f9 	.word	0x080067f9
 80067e0:	08006801 	.word	0x08006801
 80067e4:	08006809 	.word	0x08006809
 80067e8:	08006811 	.word	0x08006811
 80067ec:	08006819 	.word	0x08006819
 80067f0:	2302      	movs	r3, #2
 80067f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067f6:	e01a      	b.n	800682e <UART_SetConfig+0x7ae>
 80067f8:	2304      	movs	r3, #4
 80067fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067fe:	e016      	b.n	800682e <UART_SetConfig+0x7ae>
 8006800:	2308      	movs	r3, #8
 8006802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006806:	e012      	b.n	800682e <UART_SetConfig+0x7ae>
 8006808:	2310      	movs	r3, #16
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800680e:	e00e      	b.n	800682e <UART_SetConfig+0x7ae>
 8006810:	2320      	movs	r3, #32
 8006812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006816:	e00a      	b.n	800682e <UART_SetConfig+0x7ae>
 8006818:	2340      	movs	r3, #64	; 0x40
 800681a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800681e:	e006      	b.n	800682e <UART_SetConfig+0x7ae>
 8006820:	2380      	movs	r3, #128	; 0x80
 8006822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006826:	e002      	b.n	800682e <UART_SetConfig+0x7ae>
 8006828:	2380      	movs	r3, #128	; 0x80
 800682a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a55      	ldr	r2, [pc, #340]	; (8006988 <UART_SetConfig+0x908>)
 8006834:	4293      	cmp	r3, r2
 8006836:	f040 80f8 	bne.w	8006a2a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800683a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800683e:	2b20      	cmp	r3, #32
 8006840:	dc46      	bgt.n	80068d0 <UART_SetConfig+0x850>
 8006842:	2b02      	cmp	r3, #2
 8006844:	db75      	blt.n	8006932 <UART_SetConfig+0x8b2>
 8006846:	3b02      	subs	r3, #2
 8006848:	2b1e      	cmp	r3, #30
 800684a:	d872      	bhi.n	8006932 <UART_SetConfig+0x8b2>
 800684c:	a201      	add	r2, pc, #4	; (adr r2, 8006854 <UART_SetConfig+0x7d4>)
 800684e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006852:	bf00      	nop
 8006854:	080068d7 	.word	0x080068d7
 8006858:	08006933 	.word	0x08006933
 800685c:	080068df 	.word	0x080068df
 8006860:	08006933 	.word	0x08006933
 8006864:	08006933 	.word	0x08006933
 8006868:	08006933 	.word	0x08006933
 800686c:	080068ef 	.word	0x080068ef
 8006870:	08006933 	.word	0x08006933
 8006874:	08006933 	.word	0x08006933
 8006878:	08006933 	.word	0x08006933
 800687c:	08006933 	.word	0x08006933
 8006880:	08006933 	.word	0x08006933
 8006884:	08006933 	.word	0x08006933
 8006888:	08006933 	.word	0x08006933
 800688c:	080068ff 	.word	0x080068ff
 8006890:	08006933 	.word	0x08006933
 8006894:	08006933 	.word	0x08006933
 8006898:	08006933 	.word	0x08006933
 800689c:	08006933 	.word	0x08006933
 80068a0:	08006933 	.word	0x08006933
 80068a4:	08006933 	.word	0x08006933
 80068a8:	08006933 	.word	0x08006933
 80068ac:	08006933 	.word	0x08006933
 80068b0:	08006933 	.word	0x08006933
 80068b4:	08006933 	.word	0x08006933
 80068b8:	08006933 	.word	0x08006933
 80068bc:	08006933 	.word	0x08006933
 80068c0:	08006933 	.word	0x08006933
 80068c4:	08006933 	.word	0x08006933
 80068c8:	08006933 	.word	0x08006933
 80068cc:	08006925 	.word	0x08006925
 80068d0:	2b40      	cmp	r3, #64	; 0x40
 80068d2:	d02a      	beq.n	800692a <UART_SetConfig+0x8aa>
 80068d4:	e02d      	b.n	8006932 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80068d6:	f7fe fd79 	bl	80053cc <HAL_RCCEx_GetD3PCLK1Freq>
 80068da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80068dc:	e02f      	b.n	800693e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fe fd88 	bl	80053f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068ec:	e027      	b.n	800693e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068ee:	f107 0318 	add.w	r3, r7, #24
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fe fed4 	bl	80056a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068fc:	e01f      	b.n	800693e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068fe:	4b21      	ldr	r3, [pc, #132]	; (8006984 <UART_SetConfig+0x904>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	2b00      	cmp	r3, #0
 8006908:	d009      	beq.n	800691e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800690a:	4b1e      	ldr	r3, [pc, #120]	; (8006984 <UART_SetConfig+0x904>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	08db      	lsrs	r3, r3, #3
 8006910:	f003 0303 	and.w	r3, r3, #3
 8006914:	4a1d      	ldr	r2, [pc, #116]	; (800698c <UART_SetConfig+0x90c>)
 8006916:	fa22 f303 	lsr.w	r3, r2, r3
 800691a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800691c:	e00f      	b.n	800693e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800691e:	4b1b      	ldr	r3, [pc, #108]	; (800698c <UART_SetConfig+0x90c>)
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006922:	e00c      	b.n	800693e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006924:	4b1a      	ldr	r3, [pc, #104]	; (8006990 <UART_SetConfig+0x910>)
 8006926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006928:	e009      	b.n	800693e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800692a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800692e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006930:	e005      	b.n	800693e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800693c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800693e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 81ee 	beq.w	8006d22 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	4a12      	ldr	r2, [pc, #72]	; (8006994 <UART_SetConfig+0x914>)
 800694c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006950:	461a      	mov	r2, r3
 8006952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006954:	fbb3 f3f2 	udiv	r3, r3, r2
 8006958:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	4613      	mov	r3, r2
 8006960:	005b      	lsls	r3, r3, #1
 8006962:	4413      	add	r3, r2
 8006964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006966:	429a      	cmp	r2, r3
 8006968:	d305      	bcc.n	8006976 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006972:	429a      	cmp	r2, r3
 8006974:	d910      	bls.n	8006998 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800697c:	e1d1      	b.n	8006d22 <UART_SetConfig+0xca2>
 800697e:	bf00      	nop
 8006980:	40011c00 	.word	0x40011c00
 8006984:	58024400 	.word	0x58024400
 8006988:	58000c00 	.word	0x58000c00
 800698c:	03d09000 	.word	0x03d09000
 8006990:	003d0900 	.word	0x003d0900
 8006994:	08009fdc 	.word	0x08009fdc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699a:	2200      	movs	r2, #0
 800699c:	60bb      	str	r3, [r7, #8]
 800699e:	60fa      	str	r2, [r7, #12]
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	4ac0      	ldr	r2, [pc, #768]	; (8006ca8 <UART_SetConfig+0xc28>)
 80069a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	2200      	movs	r2, #0
 80069ae:	603b      	str	r3, [r7, #0]
 80069b0:	607a      	str	r2, [r7, #4]
 80069b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069ba:	f7f9 fcf1 	bl	80003a0 <__aeabi_uldivmod>
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	4610      	mov	r0, r2
 80069c4:	4619      	mov	r1, r3
 80069c6:	f04f 0200 	mov.w	r2, #0
 80069ca:	f04f 0300 	mov.w	r3, #0
 80069ce:	020b      	lsls	r3, r1, #8
 80069d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069d4:	0202      	lsls	r2, r0, #8
 80069d6:	6979      	ldr	r1, [r7, #20]
 80069d8:	6849      	ldr	r1, [r1, #4]
 80069da:	0849      	lsrs	r1, r1, #1
 80069dc:	2000      	movs	r0, #0
 80069de:	460c      	mov	r4, r1
 80069e0:	4605      	mov	r5, r0
 80069e2:	eb12 0804 	adds.w	r8, r2, r4
 80069e6:	eb43 0905 	adc.w	r9, r3, r5
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	469a      	mov	sl, r3
 80069f2:	4693      	mov	fp, r2
 80069f4:	4652      	mov	r2, sl
 80069f6:	465b      	mov	r3, fp
 80069f8:	4640      	mov	r0, r8
 80069fa:	4649      	mov	r1, r9
 80069fc:	f7f9 fcd0 	bl	80003a0 <__aeabi_uldivmod>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4613      	mov	r3, r2
 8006a06:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a0e:	d308      	bcc.n	8006a22 <UART_SetConfig+0x9a2>
 8006a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a16:	d204      	bcs.n	8006a22 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a1e:	60da      	str	r2, [r3, #12]
 8006a20:	e17f      	b.n	8006d22 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a28:	e17b      	b.n	8006d22 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a32:	f040 80bd 	bne.w	8006bb0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006a36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006a3a:	2b20      	cmp	r3, #32
 8006a3c:	dc48      	bgt.n	8006ad0 <UART_SetConfig+0xa50>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	db7b      	blt.n	8006b3a <UART_SetConfig+0xaba>
 8006a42:	2b20      	cmp	r3, #32
 8006a44:	d879      	bhi.n	8006b3a <UART_SetConfig+0xaba>
 8006a46:	a201      	add	r2, pc, #4	; (adr r2, 8006a4c <UART_SetConfig+0x9cc>)
 8006a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4c:	08006ad7 	.word	0x08006ad7
 8006a50:	08006adf 	.word	0x08006adf
 8006a54:	08006b3b 	.word	0x08006b3b
 8006a58:	08006b3b 	.word	0x08006b3b
 8006a5c:	08006ae7 	.word	0x08006ae7
 8006a60:	08006b3b 	.word	0x08006b3b
 8006a64:	08006b3b 	.word	0x08006b3b
 8006a68:	08006b3b 	.word	0x08006b3b
 8006a6c:	08006af7 	.word	0x08006af7
 8006a70:	08006b3b 	.word	0x08006b3b
 8006a74:	08006b3b 	.word	0x08006b3b
 8006a78:	08006b3b 	.word	0x08006b3b
 8006a7c:	08006b3b 	.word	0x08006b3b
 8006a80:	08006b3b 	.word	0x08006b3b
 8006a84:	08006b3b 	.word	0x08006b3b
 8006a88:	08006b3b 	.word	0x08006b3b
 8006a8c:	08006b07 	.word	0x08006b07
 8006a90:	08006b3b 	.word	0x08006b3b
 8006a94:	08006b3b 	.word	0x08006b3b
 8006a98:	08006b3b 	.word	0x08006b3b
 8006a9c:	08006b3b 	.word	0x08006b3b
 8006aa0:	08006b3b 	.word	0x08006b3b
 8006aa4:	08006b3b 	.word	0x08006b3b
 8006aa8:	08006b3b 	.word	0x08006b3b
 8006aac:	08006b3b 	.word	0x08006b3b
 8006ab0:	08006b3b 	.word	0x08006b3b
 8006ab4:	08006b3b 	.word	0x08006b3b
 8006ab8:	08006b3b 	.word	0x08006b3b
 8006abc:	08006b3b 	.word	0x08006b3b
 8006ac0:	08006b3b 	.word	0x08006b3b
 8006ac4:	08006b3b 	.word	0x08006b3b
 8006ac8:	08006b3b 	.word	0x08006b3b
 8006acc:	08006b2d 	.word	0x08006b2d
 8006ad0:	2b40      	cmp	r3, #64	; 0x40
 8006ad2:	d02e      	beq.n	8006b32 <UART_SetConfig+0xab2>
 8006ad4:	e031      	b.n	8006b3a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ad6:	f7fd f913 	bl	8003d00 <HAL_RCC_GetPCLK1Freq>
 8006ada:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006adc:	e033      	b.n	8006b46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ade:	f7fd f925 	bl	8003d2c <HAL_RCC_GetPCLK2Freq>
 8006ae2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006ae4:	e02f      	b.n	8006b46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fe fc84 	bl	80053f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006af4:	e027      	b.n	8006b46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006af6:	f107 0318 	add.w	r3, r7, #24
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fe fdd0 	bl	80056a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b04:	e01f      	b.n	8006b46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b06:	4b69      	ldr	r3, [pc, #420]	; (8006cac <UART_SetConfig+0xc2c>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b12:	4b66      	ldr	r3, [pc, #408]	; (8006cac <UART_SetConfig+0xc2c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	08db      	lsrs	r3, r3, #3
 8006b18:	f003 0303 	and.w	r3, r3, #3
 8006b1c:	4a64      	ldr	r2, [pc, #400]	; (8006cb0 <UART_SetConfig+0xc30>)
 8006b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b24:	e00f      	b.n	8006b46 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006b26:	4b62      	ldr	r3, [pc, #392]	; (8006cb0 <UART_SetConfig+0xc30>)
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b2a:	e00c      	b.n	8006b46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b2c:	4b61      	ldr	r3, [pc, #388]	; (8006cb4 <UART_SetConfig+0xc34>)
 8006b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b30:	e009      	b.n	8006b46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b38:	e005      	b.n	8006b46 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006b44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 80ea 	beq.w	8006d22 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	4a55      	ldr	r2, [pc, #340]	; (8006ca8 <UART_SetConfig+0xc28>)
 8006b54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b60:	005a      	lsls	r2, r3, #1
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	085b      	lsrs	r3, r3, #1
 8006b68:	441a      	add	r2, r3
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b72:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b76:	2b0f      	cmp	r3, #15
 8006b78:	d916      	bls.n	8006ba8 <UART_SetConfig+0xb28>
 8006b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b80:	d212      	bcs.n	8006ba8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	f023 030f 	bic.w	r3, r3, #15
 8006b8a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8e:	085b      	lsrs	r3, r3, #1
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	f003 0307 	and.w	r3, r3, #7
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006ba4:	60da      	str	r2, [r3, #12]
 8006ba6:	e0bc      	b.n	8006d22 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006bae:	e0b8      	b.n	8006d22 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bb0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006bb4:	2b20      	cmp	r3, #32
 8006bb6:	dc4b      	bgt.n	8006c50 <UART_SetConfig+0xbd0>
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f2c0 8087 	blt.w	8006ccc <UART_SetConfig+0xc4c>
 8006bbe:	2b20      	cmp	r3, #32
 8006bc0:	f200 8084 	bhi.w	8006ccc <UART_SetConfig+0xc4c>
 8006bc4:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <UART_SetConfig+0xb4c>)
 8006bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bca:	bf00      	nop
 8006bcc:	08006c57 	.word	0x08006c57
 8006bd0:	08006c5f 	.word	0x08006c5f
 8006bd4:	08006ccd 	.word	0x08006ccd
 8006bd8:	08006ccd 	.word	0x08006ccd
 8006bdc:	08006c67 	.word	0x08006c67
 8006be0:	08006ccd 	.word	0x08006ccd
 8006be4:	08006ccd 	.word	0x08006ccd
 8006be8:	08006ccd 	.word	0x08006ccd
 8006bec:	08006c77 	.word	0x08006c77
 8006bf0:	08006ccd 	.word	0x08006ccd
 8006bf4:	08006ccd 	.word	0x08006ccd
 8006bf8:	08006ccd 	.word	0x08006ccd
 8006bfc:	08006ccd 	.word	0x08006ccd
 8006c00:	08006ccd 	.word	0x08006ccd
 8006c04:	08006ccd 	.word	0x08006ccd
 8006c08:	08006ccd 	.word	0x08006ccd
 8006c0c:	08006c87 	.word	0x08006c87
 8006c10:	08006ccd 	.word	0x08006ccd
 8006c14:	08006ccd 	.word	0x08006ccd
 8006c18:	08006ccd 	.word	0x08006ccd
 8006c1c:	08006ccd 	.word	0x08006ccd
 8006c20:	08006ccd 	.word	0x08006ccd
 8006c24:	08006ccd 	.word	0x08006ccd
 8006c28:	08006ccd 	.word	0x08006ccd
 8006c2c:	08006ccd 	.word	0x08006ccd
 8006c30:	08006ccd 	.word	0x08006ccd
 8006c34:	08006ccd 	.word	0x08006ccd
 8006c38:	08006ccd 	.word	0x08006ccd
 8006c3c:	08006ccd 	.word	0x08006ccd
 8006c40:	08006ccd 	.word	0x08006ccd
 8006c44:	08006ccd 	.word	0x08006ccd
 8006c48:	08006ccd 	.word	0x08006ccd
 8006c4c:	08006cbf 	.word	0x08006cbf
 8006c50:	2b40      	cmp	r3, #64	; 0x40
 8006c52:	d037      	beq.n	8006cc4 <UART_SetConfig+0xc44>
 8006c54:	e03a      	b.n	8006ccc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c56:	f7fd f853 	bl	8003d00 <HAL_RCC_GetPCLK1Freq>
 8006c5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c5c:	e03c      	b.n	8006cd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c5e:	f7fd f865 	bl	8003d2c <HAL_RCC_GetPCLK2Freq>
 8006c62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c64:	e038      	b.n	8006cd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fe fbc4 	bl	80053f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c74:	e030      	b.n	8006cd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c76:	f107 0318 	add.w	r3, r7, #24
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fe fd10 	bl	80056a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c84:	e028      	b.n	8006cd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c86:	4b09      	ldr	r3, [pc, #36]	; (8006cac <UART_SetConfig+0xc2c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0320 	and.w	r3, r3, #32
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d012      	beq.n	8006cb8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c92:	4b06      	ldr	r3, [pc, #24]	; (8006cac <UART_SetConfig+0xc2c>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	08db      	lsrs	r3, r3, #3
 8006c98:	f003 0303 	and.w	r3, r3, #3
 8006c9c:	4a04      	ldr	r2, [pc, #16]	; (8006cb0 <UART_SetConfig+0xc30>)
 8006c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ca4:	e018      	b.n	8006cd8 <UART_SetConfig+0xc58>
 8006ca6:	bf00      	nop
 8006ca8:	08009fdc 	.word	0x08009fdc
 8006cac:	58024400 	.word	0x58024400
 8006cb0:	03d09000 	.word	0x03d09000
 8006cb4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006cb8:	4b24      	ldr	r3, [pc, #144]	; (8006d4c <UART_SetConfig+0xccc>)
 8006cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cbc:	e00c      	b.n	8006cd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006cbe:	4b24      	ldr	r3, [pc, #144]	; (8006d50 <UART_SetConfig+0xcd0>)
 8006cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cc2:	e009      	b.n	8006cd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cca:	e005      	b.n	8006cd8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006cd6:	bf00      	nop
    }

    if (pclk != 0U)
 8006cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d021      	beq.n	8006d22 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	4a1c      	ldr	r2, [pc, #112]	; (8006d54 <UART_SetConfig+0xcd4>)
 8006ce4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cec:	fbb3 f2f2 	udiv	r2, r3, r2
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	085b      	lsrs	r3, r3, #1
 8006cf6:	441a      	add	r2, r3
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d00:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d04:	2b0f      	cmp	r3, #15
 8006d06:	d909      	bls.n	8006d1c <UART_SetConfig+0xc9c>
 8006d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d0e:	d205      	bcs.n	8006d1c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	60da      	str	r2, [r3, #12]
 8006d1a:	e002      	b.n	8006d22 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2200      	movs	r2, #0
 8006d36:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006d3e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3748      	adds	r7, #72	; 0x48
 8006d46:	46bd      	mov	sp, r7
 8006d48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d4c:	03d09000 	.word	0x03d09000
 8006d50:	003d0900 	.word	0x003d0900
 8006d54:	08009fdc 	.word	0x08009fdc

08006d58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00a      	beq.n	8006d82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d86:	f003 0302 	and.w	r3, r3, #2
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00a      	beq.n	8006dc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dca:	f003 0308 	and.w	r3, r3, #8
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dec:	f003 0310 	and.w	r3, r3, #16
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00a      	beq.n	8006e0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0e:	f003 0320 	and.w	r3, r3, #32
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00a      	beq.n	8006e2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d01a      	beq.n	8006e6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e56:	d10a      	bne.n	8006e6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	605a      	str	r2, [r3, #4]
  }
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af02      	add	r7, sp, #8
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006eac:	f7fa fac0 	bl	8001430 <HAL_GetTick>
 8006eb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0308 	and.w	r3, r3, #8
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d10e      	bne.n	8006ede <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ec0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f82f 	bl	8006f32 <UART_WaitOnFlagUntilTimeout>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e025      	b.n	8006f2a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0304 	and.w	r3, r3, #4
 8006ee8:	2b04      	cmp	r3, #4
 8006eea:	d10e      	bne.n	8006f0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f819 	bl	8006f32 <UART_WaitOnFlagUntilTimeout>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e00f      	b.n	8006f2a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2220      	movs	r2, #32
 8006f16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b09c      	sub	sp, #112	; 0x70
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	60f8      	str	r0, [r7, #12]
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	603b      	str	r3, [r7, #0]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f42:	e0a9      	b.n	8007098 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4a:	f000 80a5 	beq.w	8007098 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f4e:	f7fa fa6f 	bl	8001430 <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d302      	bcc.n	8006f64 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d140      	bne.n	8006fe6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f6c:	e853 3f00 	ldrex	r3, [r3]
 8006f70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f78:	667b      	str	r3, [r7, #100]	; 0x64
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f84:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f8a:	e841 2300 	strex	r3, r2, [r1]
 8006f8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1e6      	bne.n	8006f64 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa8:	f023 0301 	bic.w	r3, r3, #1
 8006fac:	663b      	str	r3, [r7, #96]	; 0x60
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3308      	adds	r3, #8
 8006fb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fb6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fb8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fbe:	e841 2300 	strex	r3, r2, [r1]
 8006fc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1e5      	bne.n	8006f96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e069      	b.n	80070ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0304 	and.w	r3, r3, #4
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d051      	beq.n	8007098 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007002:	d149      	bne.n	8007098 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800700c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007016:	e853 3f00 	ldrex	r3, [r3]
 800701a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007022:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	461a      	mov	r2, r3
 800702a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800702c:	637b      	str	r3, [r7, #52]	; 0x34
 800702e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007030:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007034:	e841 2300 	strex	r3, r2, [r1]
 8007038:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800703a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e6      	bne.n	800700e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3308      	adds	r3, #8
 8007046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	e853 3f00 	ldrex	r3, [r3]
 800704e:	613b      	str	r3, [r7, #16]
   return(result);
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	f023 0301 	bic.w	r3, r3, #1
 8007056:	66bb      	str	r3, [r7, #104]	; 0x68
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3308      	adds	r3, #8
 800705e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007060:	623a      	str	r2, [r7, #32]
 8007062:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	69f9      	ldr	r1, [r7, #28]
 8007066:	6a3a      	ldr	r2, [r7, #32]
 8007068:	e841 2300 	strex	r3, r2, [r1]
 800706c:	61bb      	str	r3, [r7, #24]
   return(result);
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e5      	bne.n	8007040 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2220      	movs	r2, #32
 8007078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2220      	movs	r2, #32
 8007080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2220      	movs	r2, #32
 8007088:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e010      	b.n	80070ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	69da      	ldr	r2, [r3, #28]
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	4013      	ands	r3, r2
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	bf0c      	ite	eq
 80070a8:	2301      	moveq	r3, #1
 80070aa:	2300      	movne	r3, #0
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	461a      	mov	r2, r3
 80070b0:	79fb      	ldrb	r3, [r7, #7]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	f43f af46 	beq.w	8006f44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3770      	adds	r7, #112	; 0x70
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b085      	sub	sp, #20
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d101      	bne.n	80070d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80070d4:	2302      	movs	r3, #2
 80070d6:	e027      	b.n	8007128 <HAL_UARTEx_DisableFifoMode+0x66>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2224      	movs	r2, #36	; 0x24
 80070e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 0201 	bic.w	r2, r2, #1
 80070fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007106:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2220      	movs	r2, #32
 800711a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3714      	adds	r7, #20
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007144:	2b01      	cmp	r3, #1
 8007146:	d101      	bne.n	800714c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007148:	2302      	movs	r3, #2
 800714a:	e02d      	b.n	80071a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2224      	movs	r2, #36	; 0x24
 8007158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 0201 	bic.w	r2, r2, #1
 8007172:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f84f 	bl	800722c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2220      	movs	r2, #32
 800719a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d101      	bne.n	80071c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80071c4:	2302      	movs	r3, #2
 80071c6:	e02d      	b.n	8007224 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2224      	movs	r2, #36	; 0x24
 80071d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0201 	bic.w	r2, r2, #1
 80071ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	430a      	orrs	r2, r1
 8007202:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f811 	bl	800722c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007238:	2b00      	cmp	r3, #0
 800723a:	d108      	bne.n	800724e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800724c:	e031      	b.n	80072b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800724e:	2310      	movs	r3, #16
 8007250:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007252:	2310      	movs	r3, #16
 8007254:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	0e5b      	lsrs	r3, r3, #25
 800725e:	b2db      	uxtb	r3, r3
 8007260:	f003 0307 	and.w	r3, r3, #7
 8007264:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	0f5b      	lsrs	r3, r3, #29
 800726e:	b2db      	uxtb	r3, r3
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007276:	7bbb      	ldrb	r3, [r7, #14]
 8007278:	7b3a      	ldrb	r2, [r7, #12]
 800727a:	4911      	ldr	r1, [pc, #68]	; (80072c0 <UARTEx_SetNbDataToProcess+0x94>)
 800727c:	5c8a      	ldrb	r2, [r1, r2]
 800727e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007282:	7b3a      	ldrb	r2, [r7, #12]
 8007284:	490f      	ldr	r1, [pc, #60]	; (80072c4 <UARTEx_SetNbDataToProcess+0x98>)
 8007286:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007288:	fb93 f3f2 	sdiv	r3, r3, r2
 800728c:	b29a      	uxth	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007294:	7bfb      	ldrb	r3, [r7, #15]
 8007296:	7b7a      	ldrb	r2, [r7, #13]
 8007298:	4909      	ldr	r1, [pc, #36]	; (80072c0 <UARTEx_SetNbDataToProcess+0x94>)
 800729a:	5c8a      	ldrb	r2, [r1, r2]
 800729c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072a0:	7b7a      	ldrb	r2, [r7, #13]
 80072a2:	4908      	ldr	r1, [pc, #32]	; (80072c4 <UARTEx_SetNbDataToProcess+0x98>)
 80072a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80072b2:	bf00      	nop
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	08009ff4 	.word	0x08009ff4
 80072c4:	08009ffc 	.word	0x08009ffc

080072c8 <__errno>:
 80072c8:	4b01      	ldr	r3, [pc, #4]	; (80072d0 <__errno+0x8>)
 80072ca:	6818      	ldr	r0, [r3, #0]
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	24000010 	.word	0x24000010

080072d4 <__libc_init_array>:
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	4d0d      	ldr	r5, [pc, #52]	; (800730c <__libc_init_array+0x38>)
 80072d8:	4c0d      	ldr	r4, [pc, #52]	; (8007310 <__libc_init_array+0x3c>)
 80072da:	1b64      	subs	r4, r4, r5
 80072dc:	10a4      	asrs	r4, r4, #2
 80072de:	2600      	movs	r6, #0
 80072e0:	42a6      	cmp	r6, r4
 80072e2:	d109      	bne.n	80072f8 <__libc_init_array+0x24>
 80072e4:	4d0b      	ldr	r5, [pc, #44]	; (8007314 <__libc_init_array+0x40>)
 80072e6:	4c0c      	ldr	r4, [pc, #48]	; (8007318 <__libc_init_array+0x44>)
 80072e8:	f002 fe5e 	bl	8009fa8 <_init>
 80072ec:	1b64      	subs	r4, r4, r5
 80072ee:	10a4      	asrs	r4, r4, #2
 80072f0:	2600      	movs	r6, #0
 80072f2:	42a6      	cmp	r6, r4
 80072f4:	d105      	bne.n	8007302 <__libc_init_array+0x2e>
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
 80072f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80072fc:	4798      	blx	r3
 80072fe:	3601      	adds	r6, #1
 8007300:	e7ee      	b.n	80072e0 <__libc_init_array+0xc>
 8007302:	f855 3b04 	ldr.w	r3, [r5], #4
 8007306:	4798      	blx	r3
 8007308:	3601      	adds	r6, #1
 800730a:	e7f2      	b.n	80072f2 <__libc_init_array+0x1e>
 800730c:	0800a3e4 	.word	0x0800a3e4
 8007310:	0800a3e4 	.word	0x0800a3e4
 8007314:	0800a3e4 	.word	0x0800a3e4
 8007318:	0800a3e8 	.word	0x0800a3e8

0800731c <memset>:
 800731c:	4402      	add	r2, r0
 800731e:	4603      	mov	r3, r0
 8007320:	4293      	cmp	r3, r2
 8007322:	d100      	bne.n	8007326 <memset+0xa>
 8007324:	4770      	bx	lr
 8007326:	f803 1b01 	strb.w	r1, [r3], #1
 800732a:	e7f9      	b.n	8007320 <memset+0x4>

0800732c <__cvt>:
 800732c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800732e:	ed2d 8b02 	vpush	{d8}
 8007332:	eeb0 8b40 	vmov.f64	d8, d0
 8007336:	b085      	sub	sp, #20
 8007338:	4617      	mov	r7, r2
 800733a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800733c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800733e:	ee18 2a90 	vmov	r2, s17
 8007342:	f025 0520 	bic.w	r5, r5, #32
 8007346:	2a00      	cmp	r2, #0
 8007348:	bfb6      	itet	lt
 800734a:	222d      	movlt	r2, #45	; 0x2d
 800734c:	2200      	movge	r2, #0
 800734e:	eeb1 8b40 	vneglt.f64	d8, d0
 8007352:	2d46      	cmp	r5, #70	; 0x46
 8007354:	460c      	mov	r4, r1
 8007356:	701a      	strb	r2, [r3, #0]
 8007358:	d004      	beq.n	8007364 <__cvt+0x38>
 800735a:	2d45      	cmp	r5, #69	; 0x45
 800735c:	d100      	bne.n	8007360 <__cvt+0x34>
 800735e:	3401      	adds	r4, #1
 8007360:	2102      	movs	r1, #2
 8007362:	e000      	b.n	8007366 <__cvt+0x3a>
 8007364:	2103      	movs	r1, #3
 8007366:	ab03      	add	r3, sp, #12
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	ab02      	add	r3, sp, #8
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	4622      	mov	r2, r4
 8007370:	4633      	mov	r3, r6
 8007372:	eeb0 0b48 	vmov.f64	d0, d8
 8007376:	f000 fccb 	bl	8007d10 <_dtoa_r>
 800737a:	2d47      	cmp	r5, #71	; 0x47
 800737c:	d101      	bne.n	8007382 <__cvt+0x56>
 800737e:	07fb      	lsls	r3, r7, #31
 8007380:	d51a      	bpl.n	80073b8 <__cvt+0x8c>
 8007382:	2d46      	cmp	r5, #70	; 0x46
 8007384:	eb00 0204 	add.w	r2, r0, r4
 8007388:	d10c      	bne.n	80073a4 <__cvt+0x78>
 800738a:	7803      	ldrb	r3, [r0, #0]
 800738c:	2b30      	cmp	r3, #48	; 0x30
 800738e:	d107      	bne.n	80073a0 <__cvt+0x74>
 8007390:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007398:	bf1c      	itt	ne
 800739a:	f1c4 0401 	rsbne	r4, r4, #1
 800739e:	6034      	strne	r4, [r6, #0]
 80073a0:	6833      	ldr	r3, [r6, #0]
 80073a2:	441a      	add	r2, r3
 80073a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80073a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ac:	bf08      	it	eq
 80073ae:	9203      	streq	r2, [sp, #12]
 80073b0:	2130      	movs	r1, #48	; 0x30
 80073b2:	9b03      	ldr	r3, [sp, #12]
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d307      	bcc.n	80073c8 <__cvt+0x9c>
 80073b8:	9b03      	ldr	r3, [sp, #12]
 80073ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073bc:	1a1b      	subs	r3, r3, r0
 80073be:	6013      	str	r3, [r2, #0]
 80073c0:	b005      	add	sp, #20
 80073c2:	ecbd 8b02 	vpop	{d8}
 80073c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073c8:	1c5c      	adds	r4, r3, #1
 80073ca:	9403      	str	r4, [sp, #12]
 80073cc:	7019      	strb	r1, [r3, #0]
 80073ce:	e7f0      	b.n	80073b2 <__cvt+0x86>

080073d0 <__exponent>:
 80073d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073d2:	4603      	mov	r3, r0
 80073d4:	2900      	cmp	r1, #0
 80073d6:	bfb8      	it	lt
 80073d8:	4249      	neglt	r1, r1
 80073da:	f803 2b02 	strb.w	r2, [r3], #2
 80073de:	bfb4      	ite	lt
 80073e0:	222d      	movlt	r2, #45	; 0x2d
 80073e2:	222b      	movge	r2, #43	; 0x2b
 80073e4:	2909      	cmp	r1, #9
 80073e6:	7042      	strb	r2, [r0, #1]
 80073e8:	dd2a      	ble.n	8007440 <__exponent+0x70>
 80073ea:	f10d 0407 	add.w	r4, sp, #7
 80073ee:	46a4      	mov	ip, r4
 80073f0:	270a      	movs	r7, #10
 80073f2:	46a6      	mov	lr, r4
 80073f4:	460a      	mov	r2, r1
 80073f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80073fa:	fb07 1516 	mls	r5, r7, r6, r1
 80073fe:	3530      	adds	r5, #48	; 0x30
 8007400:	2a63      	cmp	r2, #99	; 0x63
 8007402:	f104 34ff 	add.w	r4, r4, #4294967295
 8007406:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800740a:	4631      	mov	r1, r6
 800740c:	dcf1      	bgt.n	80073f2 <__exponent+0x22>
 800740e:	3130      	adds	r1, #48	; 0x30
 8007410:	f1ae 0502 	sub.w	r5, lr, #2
 8007414:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007418:	1c44      	adds	r4, r0, #1
 800741a:	4629      	mov	r1, r5
 800741c:	4561      	cmp	r1, ip
 800741e:	d30a      	bcc.n	8007436 <__exponent+0x66>
 8007420:	f10d 0209 	add.w	r2, sp, #9
 8007424:	eba2 020e 	sub.w	r2, r2, lr
 8007428:	4565      	cmp	r5, ip
 800742a:	bf88      	it	hi
 800742c:	2200      	movhi	r2, #0
 800742e:	4413      	add	r3, r2
 8007430:	1a18      	subs	r0, r3, r0
 8007432:	b003      	add	sp, #12
 8007434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800743a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800743e:	e7ed      	b.n	800741c <__exponent+0x4c>
 8007440:	2330      	movs	r3, #48	; 0x30
 8007442:	3130      	adds	r1, #48	; 0x30
 8007444:	7083      	strb	r3, [r0, #2]
 8007446:	70c1      	strb	r1, [r0, #3]
 8007448:	1d03      	adds	r3, r0, #4
 800744a:	e7f1      	b.n	8007430 <__exponent+0x60>
 800744c:	0000      	movs	r0, r0
	...

08007450 <_printf_float>:
 8007450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007454:	b08b      	sub	sp, #44	; 0x2c
 8007456:	460c      	mov	r4, r1
 8007458:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800745c:	4616      	mov	r6, r2
 800745e:	461f      	mov	r7, r3
 8007460:	4605      	mov	r5, r0
 8007462:	f001 f9c3 	bl	80087ec <_localeconv_r>
 8007466:	f8d0 b000 	ldr.w	fp, [r0]
 800746a:	4658      	mov	r0, fp
 800746c:	f7f8 ff40 	bl	80002f0 <strlen>
 8007470:	2300      	movs	r3, #0
 8007472:	9308      	str	r3, [sp, #32]
 8007474:	f8d8 3000 	ldr.w	r3, [r8]
 8007478:	f894 9018 	ldrb.w	r9, [r4, #24]
 800747c:	6822      	ldr	r2, [r4, #0]
 800747e:	3307      	adds	r3, #7
 8007480:	f023 0307 	bic.w	r3, r3, #7
 8007484:	f103 0108 	add.w	r1, r3, #8
 8007488:	f8c8 1000 	str.w	r1, [r8]
 800748c:	4682      	mov	sl, r0
 800748e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007492:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007496:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80076f8 <_printf_float+0x2a8>
 800749a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800749e:	eeb0 6bc0 	vabs.f64	d6, d0
 80074a2:	eeb4 6b47 	vcmp.f64	d6, d7
 80074a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074aa:	dd24      	ble.n	80074f6 <_printf_float+0xa6>
 80074ac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80074b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b4:	d502      	bpl.n	80074bc <_printf_float+0x6c>
 80074b6:	232d      	movs	r3, #45	; 0x2d
 80074b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074bc:	4b90      	ldr	r3, [pc, #576]	; (8007700 <_printf_float+0x2b0>)
 80074be:	4891      	ldr	r0, [pc, #580]	; (8007704 <_printf_float+0x2b4>)
 80074c0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80074c4:	bf94      	ite	ls
 80074c6:	4698      	movls	r8, r3
 80074c8:	4680      	movhi	r8, r0
 80074ca:	2303      	movs	r3, #3
 80074cc:	6123      	str	r3, [r4, #16]
 80074ce:	f022 0204 	bic.w	r2, r2, #4
 80074d2:	2300      	movs	r3, #0
 80074d4:	6022      	str	r2, [r4, #0]
 80074d6:	9304      	str	r3, [sp, #16]
 80074d8:	9700      	str	r7, [sp, #0]
 80074da:	4633      	mov	r3, r6
 80074dc:	aa09      	add	r2, sp, #36	; 0x24
 80074de:	4621      	mov	r1, r4
 80074e0:	4628      	mov	r0, r5
 80074e2:	f000 f9d3 	bl	800788c <_printf_common>
 80074e6:	3001      	adds	r0, #1
 80074e8:	f040 808a 	bne.w	8007600 <_printf_float+0x1b0>
 80074ec:	f04f 30ff 	mov.w	r0, #4294967295
 80074f0:	b00b      	add	sp, #44	; 0x2c
 80074f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f6:	eeb4 0b40 	vcmp.f64	d0, d0
 80074fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074fe:	d709      	bvc.n	8007514 <_printf_float+0xc4>
 8007500:	ee10 3a90 	vmov	r3, s1
 8007504:	2b00      	cmp	r3, #0
 8007506:	bfbc      	itt	lt
 8007508:	232d      	movlt	r3, #45	; 0x2d
 800750a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800750e:	487e      	ldr	r0, [pc, #504]	; (8007708 <_printf_float+0x2b8>)
 8007510:	4b7e      	ldr	r3, [pc, #504]	; (800770c <_printf_float+0x2bc>)
 8007512:	e7d5      	b.n	80074c0 <_printf_float+0x70>
 8007514:	6863      	ldr	r3, [r4, #4]
 8007516:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800751a:	9104      	str	r1, [sp, #16]
 800751c:	1c59      	adds	r1, r3, #1
 800751e:	d13c      	bne.n	800759a <_printf_float+0x14a>
 8007520:	2306      	movs	r3, #6
 8007522:	6063      	str	r3, [r4, #4]
 8007524:	2300      	movs	r3, #0
 8007526:	9303      	str	r3, [sp, #12]
 8007528:	ab08      	add	r3, sp, #32
 800752a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800752e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007532:	ab07      	add	r3, sp, #28
 8007534:	6861      	ldr	r1, [r4, #4]
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	6022      	str	r2, [r4, #0]
 800753a:	f10d 031b 	add.w	r3, sp, #27
 800753e:	4628      	mov	r0, r5
 8007540:	f7ff fef4 	bl	800732c <__cvt>
 8007544:	9b04      	ldr	r3, [sp, #16]
 8007546:	9907      	ldr	r1, [sp, #28]
 8007548:	2b47      	cmp	r3, #71	; 0x47
 800754a:	4680      	mov	r8, r0
 800754c:	d108      	bne.n	8007560 <_printf_float+0x110>
 800754e:	1cc8      	adds	r0, r1, #3
 8007550:	db02      	blt.n	8007558 <_printf_float+0x108>
 8007552:	6863      	ldr	r3, [r4, #4]
 8007554:	4299      	cmp	r1, r3
 8007556:	dd41      	ble.n	80075dc <_printf_float+0x18c>
 8007558:	f1a9 0902 	sub.w	r9, r9, #2
 800755c:	fa5f f989 	uxtb.w	r9, r9
 8007560:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007564:	d820      	bhi.n	80075a8 <_printf_float+0x158>
 8007566:	3901      	subs	r1, #1
 8007568:	464a      	mov	r2, r9
 800756a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800756e:	9107      	str	r1, [sp, #28]
 8007570:	f7ff ff2e 	bl	80073d0 <__exponent>
 8007574:	9a08      	ldr	r2, [sp, #32]
 8007576:	9004      	str	r0, [sp, #16]
 8007578:	1813      	adds	r3, r2, r0
 800757a:	2a01      	cmp	r2, #1
 800757c:	6123      	str	r3, [r4, #16]
 800757e:	dc02      	bgt.n	8007586 <_printf_float+0x136>
 8007580:	6822      	ldr	r2, [r4, #0]
 8007582:	07d2      	lsls	r2, r2, #31
 8007584:	d501      	bpl.n	800758a <_printf_float+0x13a>
 8007586:	3301      	adds	r3, #1
 8007588:	6123      	str	r3, [r4, #16]
 800758a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d0a2      	beq.n	80074d8 <_printf_float+0x88>
 8007592:	232d      	movs	r3, #45	; 0x2d
 8007594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007598:	e79e      	b.n	80074d8 <_printf_float+0x88>
 800759a:	9904      	ldr	r1, [sp, #16]
 800759c:	2947      	cmp	r1, #71	; 0x47
 800759e:	d1c1      	bne.n	8007524 <_printf_float+0xd4>
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1bf      	bne.n	8007524 <_printf_float+0xd4>
 80075a4:	2301      	movs	r3, #1
 80075a6:	e7bc      	b.n	8007522 <_printf_float+0xd2>
 80075a8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80075ac:	d118      	bne.n	80075e0 <_printf_float+0x190>
 80075ae:	2900      	cmp	r1, #0
 80075b0:	6863      	ldr	r3, [r4, #4]
 80075b2:	dd0b      	ble.n	80075cc <_printf_float+0x17c>
 80075b4:	6121      	str	r1, [r4, #16]
 80075b6:	b913      	cbnz	r3, 80075be <_printf_float+0x16e>
 80075b8:	6822      	ldr	r2, [r4, #0]
 80075ba:	07d0      	lsls	r0, r2, #31
 80075bc:	d502      	bpl.n	80075c4 <_printf_float+0x174>
 80075be:	3301      	adds	r3, #1
 80075c0:	440b      	add	r3, r1
 80075c2:	6123      	str	r3, [r4, #16]
 80075c4:	2300      	movs	r3, #0
 80075c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80075c8:	9304      	str	r3, [sp, #16]
 80075ca:	e7de      	b.n	800758a <_printf_float+0x13a>
 80075cc:	b913      	cbnz	r3, 80075d4 <_printf_float+0x184>
 80075ce:	6822      	ldr	r2, [r4, #0]
 80075d0:	07d2      	lsls	r2, r2, #31
 80075d2:	d501      	bpl.n	80075d8 <_printf_float+0x188>
 80075d4:	3302      	adds	r3, #2
 80075d6:	e7f4      	b.n	80075c2 <_printf_float+0x172>
 80075d8:	2301      	movs	r3, #1
 80075da:	e7f2      	b.n	80075c2 <_printf_float+0x172>
 80075dc:	f04f 0967 	mov.w	r9, #103	; 0x67
 80075e0:	9b08      	ldr	r3, [sp, #32]
 80075e2:	4299      	cmp	r1, r3
 80075e4:	db05      	blt.n	80075f2 <_printf_float+0x1a2>
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	6121      	str	r1, [r4, #16]
 80075ea:	07d8      	lsls	r0, r3, #31
 80075ec:	d5ea      	bpl.n	80075c4 <_printf_float+0x174>
 80075ee:	1c4b      	adds	r3, r1, #1
 80075f0:	e7e7      	b.n	80075c2 <_printf_float+0x172>
 80075f2:	2900      	cmp	r1, #0
 80075f4:	bfd4      	ite	le
 80075f6:	f1c1 0202 	rsble	r2, r1, #2
 80075fa:	2201      	movgt	r2, #1
 80075fc:	4413      	add	r3, r2
 80075fe:	e7e0      	b.n	80075c2 <_printf_float+0x172>
 8007600:	6823      	ldr	r3, [r4, #0]
 8007602:	055a      	lsls	r2, r3, #21
 8007604:	d407      	bmi.n	8007616 <_printf_float+0x1c6>
 8007606:	6923      	ldr	r3, [r4, #16]
 8007608:	4642      	mov	r2, r8
 800760a:	4631      	mov	r1, r6
 800760c:	4628      	mov	r0, r5
 800760e:	47b8      	blx	r7
 8007610:	3001      	adds	r0, #1
 8007612:	d12a      	bne.n	800766a <_printf_float+0x21a>
 8007614:	e76a      	b.n	80074ec <_printf_float+0x9c>
 8007616:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800761a:	f240 80e2 	bls.w	80077e2 <_printf_float+0x392>
 800761e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007622:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800762a:	d133      	bne.n	8007694 <_printf_float+0x244>
 800762c:	4a38      	ldr	r2, [pc, #224]	; (8007710 <_printf_float+0x2c0>)
 800762e:	2301      	movs	r3, #1
 8007630:	4631      	mov	r1, r6
 8007632:	4628      	mov	r0, r5
 8007634:	47b8      	blx	r7
 8007636:	3001      	adds	r0, #1
 8007638:	f43f af58 	beq.w	80074ec <_printf_float+0x9c>
 800763c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007640:	429a      	cmp	r2, r3
 8007642:	db02      	blt.n	800764a <_printf_float+0x1fa>
 8007644:	6823      	ldr	r3, [r4, #0]
 8007646:	07d8      	lsls	r0, r3, #31
 8007648:	d50f      	bpl.n	800766a <_printf_float+0x21a>
 800764a:	4653      	mov	r3, sl
 800764c:	465a      	mov	r2, fp
 800764e:	4631      	mov	r1, r6
 8007650:	4628      	mov	r0, r5
 8007652:	47b8      	blx	r7
 8007654:	3001      	adds	r0, #1
 8007656:	f43f af49 	beq.w	80074ec <_printf_float+0x9c>
 800765a:	f04f 0800 	mov.w	r8, #0
 800765e:	f104 091a 	add.w	r9, r4, #26
 8007662:	9b08      	ldr	r3, [sp, #32]
 8007664:	3b01      	subs	r3, #1
 8007666:	4543      	cmp	r3, r8
 8007668:	dc09      	bgt.n	800767e <_printf_float+0x22e>
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	079b      	lsls	r3, r3, #30
 800766e:	f100 8108 	bmi.w	8007882 <_printf_float+0x432>
 8007672:	68e0      	ldr	r0, [r4, #12]
 8007674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007676:	4298      	cmp	r0, r3
 8007678:	bfb8      	it	lt
 800767a:	4618      	movlt	r0, r3
 800767c:	e738      	b.n	80074f0 <_printf_float+0xa0>
 800767e:	2301      	movs	r3, #1
 8007680:	464a      	mov	r2, r9
 8007682:	4631      	mov	r1, r6
 8007684:	4628      	mov	r0, r5
 8007686:	47b8      	blx	r7
 8007688:	3001      	adds	r0, #1
 800768a:	f43f af2f 	beq.w	80074ec <_printf_float+0x9c>
 800768e:	f108 0801 	add.w	r8, r8, #1
 8007692:	e7e6      	b.n	8007662 <_printf_float+0x212>
 8007694:	9b07      	ldr	r3, [sp, #28]
 8007696:	2b00      	cmp	r3, #0
 8007698:	dc3c      	bgt.n	8007714 <_printf_float+0x2c4>
 800769a:	4a1d      	ldr	r2, [pc, #116]	; (8007710 <_printf_float+0x2c0>)
 800769c:	2301      	movs	r3, #1
 800769e:	4631      	mov	r1, r6
 80076a0:	4628      	mov	r0, r5
 80076a2:	47b8      	blx	r7
 80076a4:	3001      	adds	r0, #1
 80076a6:	f43f af21 	beq.w	80074ec <_printf_float+0x9c>
 80076aa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	d102      	bne.n	80076b8 <_printf_float+0x268>
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	07d9      	lsls	r1, r3, #31
 80076b6:	d5d8      	bpl.n	800766a <_printf_float+0x21a>
 80076b8:	4653      	mov	r3, sl
 80076ba:	465a      	mov	r2, fp
 80076bc:	4631      	mov	r1, r6
 80076be:	4628      	mov	r0, r5
 80076c0:	47b8      	blx	r7
 80076c2:	3001      	adds	r0, #1
 80076c4:	f43f af12 	beq.w	80074ec <_printf_float+0x9c>
 80076c8:	f04f 0900 	mov.w	r9, #0
 80076cc:	f104 0a1a 	add.w	sl, r4, #26
 80076d0:	9b07      	ldr	r3, [sp, #28]
 80076d2:	425b      	negs	r3, r3
 80076d4:	454b      	cmp	r3, r9
 80076d6:	dc01      	bgt.n	80076dc <_printf_float+0x28c>
 80076d8:	9b08      	ldr	r3, [sp, #32]
 80076da:	e795      	b.n	8007608 <_printf_float+0x1b8>
 80076dc:	2301      	movs	r3, #1
 80076de:	4652      	mov	r2, sl
 80076e0:	4631      	mov	r1, r6
 80076e2:	4628      	mov	r0, r5
 80076e4:	47b8      	blx	r7
 80076e6:	3001      	adds	r0, #1
 80076e8:	f43f af00 	beq.w	80074ec <_printf_float+0x9c>
 80076ec:	f109 0901 	add.w	r9, r9, #1
 80076f0:	e7ee      	b.n	80076d0 <_printf_float+0x280>
 80076f2:	bf00      	nop
 80076f4:	f3af 8000 	nop.w
 80076f8:	ffffffff 	.word	0xffffffff
 80076fc:	7fefffff 	.word	0x7fefffff
 8007700:	0800a008 	.word	0x0800a008
 8007704:	0800a00c 	.word	0x0800a00c
 8007708:	0800a014 	.word	0x0800a014
 800770c:	0800a010 	.word	0x0800a010
 8007710:	0800a018 	.word	0x0800a018
 8007714:	9a08      	ldr	r2, [sp, #32]
 8007716:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007718:	429a      	cmp	r2, r3
 800771a:	bfa8      	it	ge
 800771c:	461a      	movge	r2, r3
 800771e:	2a00      	cmp	r2, #0
 8007720:	4691      	mov	r9, r2
 8007722:	dc38      	bgt.n	8007796 <_printf_float+0x346>
 8007724:	2300      	movs	r3, #0
 8007726:	9305      	str	r3, [sp, #20]
 8007728:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800772c:	f104 021a 	add.w	r2, r4, #26
 8007730:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007732:	9905      	ldr	r1, [sp, #20]
 8007734:	9304      	str	r3, [sp, #16]
 8007736:	eba3 0309 	sub.w	r3, r3, r9
 800773a:	428b      	cmp	r3, r1
 800773c:	dc33      	bgt.n	80077a6 <_printf_float+0x356>
 800773e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007742:	429a      	cmp	r2, r3
 8007744:	db3c      	blt.n	80077c0 <_printf_float+0x370>
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	07da      	lsls	r2, r3, #31
 800774a:	d439      	bmi.n	80077c0 <_printf_float+0x370>
 800774c:	9b08      	ldr	r3, [sp, #32]
 800774e:	9a04      	ldr	r2, [sp, #16]
 8007750:	9907      	ldr	r1, [sp, #28]
 8007752:	1a9a      	subs	r2, r3, r2
 8007754:	eba3 0901 	sub.w	r9, r3, r1
 8007758:	4591      	cmp	r9, r2
 800775a:	bfa8      	it	ge
 800775c:	4691      	movge	r9, r2
 800775e:	f1b9 0f00 	cmp.w	r9, #0
 8007762:	dc35      	bgt.n	80077d0 <_printf_float+0x380>
 8007764:	f04f 0800 	mov.w	r8, #0
 8007768:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800776c:	f104 0a1a 	add.w	sl, r4, #26
 8007770:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007774:	1a9b      	subs	r3, r3, r2
 8007776:	eba3 0309 	sub.w	r3, r3, r9
 800777a:	4543      	cmp	r3, r8
 800777c:	f77f af75 	ble.w	800766a <_printf_float+0x21a>
 8007780:	2301      	movs	r3, #1
 8007782:	4652      	mov	r2, sl
 8007784:	4631      	mov	r1, r6
 8007786:	4628      	mov	r0, r5
 8007788:	47b8      	blx	r7
 800778a:	3001      	adds	r0, #1
 800778c:	f43f aeae 	beq.w	80074ec <_printf_float+0x9c>
 8007790:	f108 0801 	add.w	r8, r8, #1
 8007794:	e7ec      	b.n	8007770 <_printf_float+0x320>
 8007796:	4613      	mov	r3, r2
 8007798:	4631      	mov	r1, r6
 800779a:	4642      	mov	r2, r8
 800779c:	4628      	mov	r0, r5
 800779e:	47b8      	blx	r7
 80077a0:	3001      	adds	r0, #1
 80077a2:	d1bf      	bne.n	8007724 <_printf_float+0x2d4>
 80077a4:	e6a2      	b.n	80074ec <_printf_float+0x9c>
 80077a6:	2301      	movs	r3, #1
 80077a8:	4631      	mov	r1, r6
 80077aa:	4628      	mov	r0, r5
 80077ac:	9204      	str	r2, [sp, #16]
 80077ae:	47b8      	blx	r7
 80077b0:	3001      	adds	r0, #1
 80077b2:	f43f ae9b 	beq.w	80074ec <_printf_float+0x9c>
 80077b6:	9b05      	ldr	r3, [sp, #20]
 80077b8:	9a04      	ldr	r2, [sp, #16]
 80077ba:	3301      	adds	r3, #1
 80077bc:	9305      	str	r3, [sp, #20]
 80077be:	e7b7      	b.n	8007730 <_printf_float+0x2e0>
 80077c0:	4653      	mov	r3, sl
 80077c2:	465a      	mov	r2, fp
 80077c4:	4631      	mov	r1, r6
 80077c6:	4628      	mov	r0, r5
 80077c8:	47b8      	blx	r7
 80077ca:	3001      	adds	r0, #1
 80077cc:	d1be      	bne.n	800774c <_printf_float+0x2fc>
 80077ce:	e68d      	b.n	80074ec <_printf_float+0x9c>
 80077d0:	9a04      	ldr	r2, [sp, #16]
 80077d2:	464b      	mov	r3, r9
 80077d4:	4442      	add	r2, r8
 80077d6:	4631      	mov	r1, r6
 80077d8:	4628      	mov	r0, r5
 80077da:	47b8      	blx	r7
 80077dc:	3001      	adds	r0, #1
 80077de:	d1c1      	bne.n	8007764 <_printf_float+0x314>
 80077e0:	e684      	b.n	80074ec <_printf_float+0x9c>
 80077e2:	9a08      	ldr	r2, [sp, #32]
 80077e4:	2a01      	cmp	r2, #1
 80077e6:	dc01      	bgt.n	80077ec <_printf_float+0x39c>
 80077e8:	07db      	lsls	r3, r3, #31
 80077ea:	d537      	bpl.n	800785c <_printf_float+0x40c>
 80077ec:	2301      	movs	r3, #1
 80077ee:	4642      	mov	r2, r8
 80077f0:	4631      	mov	r1, r6
 80077f2:	4628      	mov	r0, r5
 80077f4:	47b8      	blx	r7
 80077f6:	3001      	adds	r0, #1
 80077f8:	f43f ae78 	beq.w	80074ec <_printf_float+0x9c>
 80077fc:	4653      	mov	r3, sl
 80077fe:	465a      	mov	r2, fp
 8007800:	4631      	mov	r1, r6
 8007802:	4628      	mov	r0, r5
 8007804:	47b8      	blx	r7
 8007806:	3001      	adds	r0, #1
 8007808:	f43f ae70 	beq.w	80074ec <_printf_float+0x9c>
 800780c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007810:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007818:	d01b      	beq.n	8007852 <_printf_float+0x402>
 800781a:	9b08      	ldr	r3, [sp, #32]
 800781c:	f108 0201 	add.w	r2, r8, #1
 8007820:	3b01      	subs	r3, #1
 8007822:	4631      	mov	r1, r6
 8007824:	4628      	mov	r0, r5
 8007826:	47b8      	blx	r7
 8007828:	3001      	adds	r0, #1
 800782a:	d10e      	bne.n	800784a <_printf_float+0x3fa>
 800782c:	e65e      	b.n	80074ec <_printf_float+0x9c>
 800782e:	2301      	movs	r3, #1
 8007830:	464a      	mov	r2, r9
 8007832:	4631      	mov	r1, r6
 8007834:	4628      	mov	r0, r5
 8007836:	47b8      	blx	r7
 8007838:	3001      	adds	r0, #1
 800783a:	f43f ae57 	beq.w	80074ec <_printf_float+0x9c>
 800783e:	f108 0801 	add.w	r8, r8, #1
 8007842:	9b08      	ldr	r3, [sp, #32]
 8007844:	3b01      	subs	r3, #1
 8007846:	4543      	cmp	r3, r8
 8007848:	dcf1      	bgt.n	800782e <_printf_float+0x3de>
 800784a:	9b04      	ldr	r3, [sp, #16]
 800784c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007850:	e6db      	b.n	800760a <_printf_float+0x1ba>
 8007852:	f04f 0800 	mov.w	r8, #0
 8007856:	f104 091a 	add.w	r9, r4, #26
 800785a:	e7f2      	b.n	8007842 <_printf_float+0x3f2>
 800785c:	2301      	movs	r3, #1
 800785e:	4642      	mov	r2, r8
 8007860:	e7df      	b.n	8007822 <_printf_float+0x3d2>
 8007862:	2301      	movs	r3, #1
 8007864:	464a      	mov	r2, r9
 8007866:	4631      	mov	r1, r6
 8007868:	4628      	mov	r0, r5
 800786a:	47b8      	blx	r7
 800786c:	3001      	adds	r0, #1
 800786e:	f43f ae3d 	beq.w	80074ec <_printf_float+0x9c>
 8007872:	f108 0801 	add.w	r8, r8, #1
 8007876:	68e3      	ldr	r3, [r4, #12]
 8007878:	9909      	ldr	r1, [sp, #36]	; 0x24
 800787a:	1a5b      	subs	r3, r3, r1
 800787c:	4543      	cmp	r3, r8
 800787e:	dcf0      	bgt.n	8007862 <_printf_float+0x412>
 8007880:	e6f7      	b.n	8007672 <_printf_float+0x222>
 8007882:	f04f 0800 	mov.w	r8, #0
 8007886:	f104 0919 	add.w	r9, r4, #25
 800788a:	e7f4      	b.n	8007876 <_printf_float+0x426>

0800788c <_printf_common>:
 800788c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007890:	4616      	mov	r6, r2
 8007892:	4699      	mov	r9, r3
 8007894:	688a      	ldr	r2, [r1, #8]
 8007896:	690b      	ldr	r3, [r1, #16]
 8007898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800789c:	4293      	cmp	r3, r2
 800789e:	bfb8      	it	lt
 80078a0:	4613      	movlt	r3, r2
 80078a2:	6033      	str	r3, [r6, #0]
 80078a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078a8:	4607      	mov	r7, r0
 80078aa:	460c      	mov	r4, r1
 80078ac:	b10a      	cbz	r2, 80078b2 <_printf_common+0x26>
 80078ae:	3301      	adds	r3, #1
 80078b0:	6033      	str	r3, [r6, #0]
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	0699      	lsls	r1, r3, #26
 80078b6:	bf42      	ittt	mi
 80078b8:	6833      	ldrmi	r3, [r6, #0]
 80078ba:	3302      	addmi	r3, #2
 80078bc:	6033      	strmi	r3, [r6, #0]
 80078be:	6825      	ldr	r5, [r4, #0]
 80078c0:	f015 0506 	ands.w	r5, r5, #6
 80078c4:	d106      	bne.n	80078d4 <_printf_common+0x48>
 80078c6:	f104 0a19 	add.w	sl, r4, #25
 80078ca:	68e3      	ldr	r3, [r4, #12]
 80078cc:	6832      	ldr	r2, [r6, #0]
 80078ce:	1a9b      	subs	r3, r3, r2
 80078d0:	42ab      	cmp	r3, r5
 80078d2:	dc26      	bgt.n	8007922 <_printf_common+0x96>
 80078d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078d8:	1e13      	subs	r3, r2, #0
 80078da:	6822      	ldr	r2, [r4, #0]
 80078dc:	bf18      	it	ne
 80078de:	2301      	movne	r3, #1
 80078e0:	0692      	lsls	r2, r2, #26
 80078e2:	d42b      	bmi.n	800793c <_printf_common+0xb0>
 80078e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078e8:	4649      	mov	r1, r9
 80078ea:	4638      	mov	r0, r7
 80078ec:	47c0      	blx	r8
 80078ee:	3001      	adds	r0, #1
 80078f0:	d01e      	beq.n	8007930 <_printf_common+0xa4>
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	68e5      	ldr	r5, [r4, #12]
 80078f6:	6832      	ldr	r2, [r6, #0]
 80078f8:	f003 0306 	and.w	r3, r3, #6
 80078fc:	2b04      	cmp	r3, #4
 80078fe:	bf08      	it	eq
 8007900:	1aad      	subeq	r5, r5, r2
 8007902:	68a3      	ldr	r3, [r4, #8]
 8007904:	6922      	ldr	r2, [r4, #16]
 8007906:	bf0c      	ite	eq
 8007908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800790c:	2500      	movne	r5, #0
 800790e:	4293      	cmp	r3, r2
 8007910:	bfc4      	itt	gt
 8007912:	1a9b      	subgt	r3, r3, r2
 8007914:	18ed      	addgt	r5, r5, r3
 8007916:	2600      	movs	r6, #0
 8007918:	341a      	adds	r4, #26
 800791a:	42b5      	cmp	r5, r6
 800791c:	d11a      	bne.n	8007954 <_printf_common+0xc8>
 800791e:	2000      	movs	r0, #0
 8007920:	e008      	b.n	8007934 <_printf_common+0xa8>
 8007922:	2301      	movs	r3, #1
 8007924:	4652      	mov	r2, sl
 8007926:	4649      	mov	r1, r9
 8007928:	4638      	mov	r0, r7
 800792a:	47c0      	blx	r8
 800792c:	3001      	adds	r0, #1
 800792e:	d103      	bne.n	8007938 <_printf_common+0xac>
 8007930:	f04f 30ff 	mov.w	r0, #4294967295
 8007934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007938:	3501      	adds	r5, #1
 800793a:	e7c6      	b.n	80078ca <_printf_common+0x3e>
 800793c:	18e1      	adds	r1, r4, r3
 800793e:	1c5a      	adds	r2, r3, #1
 8007940:	2030      	movs	r0, #48	; 0x30
 8007942:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007946:	4422      	add	r2, r4
 8007948:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800794c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007950:	3302      	adds	r3, #2
 8007952:	e7c7      	b.n	80078e4 <_printf_common+0x58>
 8007954:	2301      	movs	r3, #1
 8007956:	4622      	mov	r2, r4
 8007958:	4649      	mov	r1, r9
 800795a:	4638      	mov	r0, r7
 800795c:	47c0      	blx	r8
 800795e:	3001      	adds	r0, #1
 8007960:	d0e6      	beq.n	8007930 <_printf_common+0xa4>
 8007962:	3601      	adds	r6, #1
 8007964:	e7d9      	b.n	800791a <_printf_common+0x8e>
	...

08007968 <_printf_i>:
 8007968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800796c:	7e0f      	ldrb	r7, [r1, #24]
 800796e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007970:	2f78      	cmp	r7, #120	; 0x78
 8007972:	4691      	mov	r9, r2
 8007974:	4680      	mov	r8, r0
 8007976:	460c      	mov	r4, r1
 8007978:	469a      	mov	sl, r3
 800797a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800797e:	d807      	bhi.n	8007990 <_printf_i+0x28>
 8007980:	2f62      	cmp	r7, #98	; 0x62
 8007982:	d80a      	bhi.n	800799a <_printf_i+0x32>
 8007984:	2f00      	cmp	r7, #0
 8007986:	f000 80d8 	beq.w	8007b3a <_printf_i+0x1d2>
 800798a:	2f58      	cmp	r7, #88	; 0x58
 800798c:	f000 80a3 	beq.w	8007ad6 <_printf_i+0x16e>
 8007990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007994:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007998:	e03a      	b.n	8007a10 <_printf_i+0xa8>
 800799a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800799e:	2b15      	cmp	r3, #21
 80079a0:	d8f6      	bhi.n	8007990 <_printf_i+0x28>
 80079a2:	a101      	add	r1, pc, #4	; (adr r1, 80079a8 <_printf_i+0x40>)
 80079a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079a8:	08007a01 	.word	0x08007a01
 80079ac:	08007a15 	.word	0x08007a15
 80079b0:	08007991 	.word	0x08007991
 80079b4:	08007991 	.word	0x08007991
 80079b8:	08007991 	.word	0x08007991
 80079bc:	08007991 	.word	0x08007991
 80079c0:	08007a15 	.word	0x08007a15
 80079c4:	08007991 	.word	0x08007991
 80079c8:	08007991 	.word	0x08007991
 80079cc:	08007991 	.word	0x08007991
 80079d0:	08007991 	.word	0x08007991
 80079d4:	08007b21 	.word	0x08007b21
 80079d8:	08007a45 	.word	0x08007a45
 80079dc:	08007b03 	.word	0x08007b03
 80079e0:	08007991 	.word	0x08007991
 80079e4:	08007991 	.word	0x08007991
 80079e8:	08007b43 	.word	0x08007b43
 80079ec:	08007991 	.word	0x08007991
 80079f0:	08007a45 	.word	0x08007a45
 80079f4:	08007991 	.word	0x08007991
 80079f8:	08007991 	.word	0x08007991
 80079fc:	08007b0b 	.word	0x08007b0b
 8007a00:	682b      	ldr	r3, [r5, #0]
 8007a02:	1d1a      	adds	r2, r3, #4
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	602a      	str	r2, [r5, #0]
 8007a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a10:	2301      	movs	r3, #1
 8007a12:	e0a3      	b.n	8007b5c <_printf_i+0x1f4>
 8007a14:	6820      	ldr	r0, [r4, #0]
 8007a16:	6829      	ldr	r1, [r5, #0]
 8007a18:	0606      	lsls	r6, r0, #24
 8007a1a:	f101 0304 	add.w	r3, r1, #4
 8007a1e:	d50a      	bpl.n	8007a36 <_printf_i+0xce>
 8007a20:	680e      	ldr	r6, [r1, #0]
 8007a22:	602b      	str	r3, [r5, #0]
 8007a24:	2e00      	cmp	r6, #0
 8007a26:	da03      	bge.n	8007a30 <_printf_i+0xc8>
 8007a28:	232d      	movs	r3, #45	; 0x2d
 8007a2a:	4276      	negs	r6, r6
 8007a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a30:	485e      	ldr	r0, [pc, #376]	; (8007bac <_printf_i+0x244>)
 8007a32:	230a      	movs	r3, #10
 8007a34:	e019      	b.n	8007a6a <_printf_i+0x102>
 8007a36:	680e      	ldr	r6, [r1, #0]
 8007a38:	602b      	str	r3, [r5, #0]
 8007a3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a3e:	bf18      	it	ne
 8007a40:	b236      	sxthne	r6, r6
 8007a42:	e7ef      	b.n	8007a24 <_printf_i+0xbc>
 8007a44:	682b      	ldr	r3, [r5, #0]
 8007a46:	6820      	ldr	r0, [r4, #0]
 8007a48:	1d19      	adds	r1, r3, #4
 8007a4a:	6029      	str	r1, [r5, #0]
 8007a4c:	0601      	lsls	r1, r0, #24
 8007a4e:	d501      	bpl.n	8007a54 <_printf_i+0xec>
 8007a50:	681e      	ldr	r6, [r3, #0]
 8007a52:	e002      	b.n	8007a5a <_printf_i+0xf2>
 8007a54:	0646      	lsls	r6, r0, #25
 8007a56:	d5fb      	bpl.n	8007a50 <_printf_i+0xe8>
 8007a58:	881e      	ldrh	r6, [r3, #0]
 8007a5a:	4854      	ldr	r0, [pc, #336]	; (8007bac <_printf_i+0x244>)
 8007a5c:	2f6f      	cmp	r7, #111	; 0x6f
 8007a5e:	bf0c      	ite	eq
 8007a60:	2308      	moveq	r3, #8
 8007a62:	230a      	movne	r3, #10
 8007a64:	2100      	movs	r1, #0
 8007a66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a6a:	6865      	ldr	r5, [r4, #4]
 8007a6c:	60a5      	str	r5, [r4, #8]
 8007a6e:	2d00      	cmp	r5, #0
 8007a70:	bfa2      	ittt	ge
 8007a72:	6821      	ldrge	r1, [r4, #0]
 8007a74:	f021 0104 	bicge.w	r1, r1, #4
 8007a78:	6021      	strge	r1, [r4, #0]
 8007a7a:	b90e      	cbnz	r6, 8007a80 <_printf_i+0x118>
 8007a7c:	2d00      	cmp	r5, #0
 8007a7e:	d04d      	beq.n	8007b1c <_printf_i+0x1b4>
 8007a80:	4615      	mov	r5, r2
 8007a82:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a86:	fb03 6711 	mls	r7, r3, r1, r6
 8007a8a:	5dc7      	ldrb	r7, [r0, r7]
 8007a8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a90:	4637      	mov	r7, r6
 8007a92:	42bb      	cmp	r3, r7
 8007a94:	460e      	mov	r6, r1
 8007a96:	d9f4      	bls.n	8007a82 <_printf_i+0x11a>
 8007a98:	2b08      	cmp	r3, #8
 8007a9a:	d10b      	bne.n	8007ab4 <_printf_i+0x14c>
 8007a9c:	6823      	ldr	r3, [r4, #0]
 8007a9e:	07de      	lsls	r6, r3, #31
 8007aa0:	d508      	bpl.n	8007ab4 <_printf_i+0x14c>
 8007aa2:	6923      	ldr	r3, [r4, #16]
 8007aa4:	6861      	ldr	r1, [r4, #4]
 8007aa6:	4299      	cmp	r1, r3
 8007aa8:	bfde      	ittt	le
 8007aaa:	2330      	movle	r3, #48	; 0x30
 8007aac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ab0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ab4:	1b52      	subs	r2, r2, r5
 8007ab6:	6122      	str	r2, [r4, #16]
 8007ab8:	f8cd a000 	str.w	sl, [sp]
 8007abc:	464b      	mov	r3, r9
 8007abe:	aa03      	add	r2, sp, #12
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	4640      	mov	r0, r8
 8007ac4:	f7ff fee2 	bl	800788c <_printf_common>
 8007ac8:	3001      	adds	r0, #1
 8007aca:	d14c      	bne.n	8007b66 <_printf_i+0x1fe>
 8007acc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad0:	b004      	add	sp, #16
 8007ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad6:	4835      	ldr	r0, [pc, #212]	; (8007bac <_printf_i+0x244>)
 8007ad8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007adc:	6829      	ldr	r1, [r5, #0]
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ae4:	6029      	str	r1, [r5, #0]
 8007ae6:	061d      	lsls	r5, r3, #24
 8007ae8:	d514      	bpl.n	8007b14 <_printf_i+0x1ac>
 8007aea:	07df      	lsls	r7, r3, #31
 8007aec:	bf44      	itt	mi
 8007aee:	f043 0320 	orrmi.w	r3, r3, #32
 8007af2:	6023      	strmi	r3, [r4, #0]
 8007af4:	b91e      	cbnz	r6, 8007afe <_printf_i+0x196>
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	f023 0320 	bic.w	r3, r3, #32
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	2310      	movs	r3, #16
 8007b00:	e7b0      	b.n	8007a64 <_printf_i+0xfc>
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	f043 0320 	orr.w	r3, r3, #32
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	2378      	movs	r3, #120	; 0x78
 8007b0c:	4828      	ldr	r0, [pc, #160]	; (8007bb0 <_printf_i+0x248>)
 8007b0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b12:	e7e3      	b.n	8007adc <_printf_i+0x174>
 8007b14:	0659      	lsls	r1, r3, #25
 8007b16:	bf48      	it	mi
 8007b18:	b2b6      	uxthmi	r6, r6
 8007b1a:	e7e6      	b.n	8007aea <_printf_i+0x182>
 8007b1c:	4615      	mov	r5, r2
 8007b1e:	e7bb      	b.n	8007a98 <_printf_i+0x130>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	6826      	ldr	r6, [r4, #0]
 8007b24:	6961      	ldr	r1, [r4, #20]
 8007b26:	1d18      	adds	r0, r3, #4
 8007b28:	6028      	str	r0, [r5, #0]
 8007b2a:	0635      	lsls	r5, r6, #24
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	d501      	bpl.n	8007b34 <_printf_i+0x1cc>
 8007b30:	6019      	str	r1, [r3, #0]
 8007b32:	e002      	b.n	8007b3a <_printf_i+0x1d2>
 8007b34:	0670      	lsls	r0, r6, #25
 8007b36:	d5fb      	bpl.n	8007b30 <_printf_i+0x1c8>
 8007b38:	8019      	strh	r1, [r3, #0]
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	6123      	str	r3, [r4, #16]
 8007b3e:	4615      	mov	r5, r2
 8007b40:	e7ba      	b.n	8007ab8 <_printf_i+0x150>
 8007b42:	682b      	ldr	r3, [r5, #0]
 8007b44:	1d1a      	adds	r2, r3, #4
 8007b46:	602a      	str	r2, [r5, #0]
 8007b48:	681d      	ldr	r5, [r3, #0]
 8007b4a:	6862      	ldr	r2, [r4, #4]
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f7f8 fbd6 	bl	8000300 <memchr>
 8007b54:	b108      	cbz	r0, 8007b5a <_printf_i+0x1f2>
 8007b56:	1b40      	subs	r0, r0, r5
 8007b58:	6060      	str	r0, [r4, #4]
 8007b5a:	6863      	ldr	r3, [r4, #4]
 8007b5c:	6123      	str	r3, [r4, #16]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b64:	e7a8      	b.n	8007ab8 <_printf_i+0x150>
 8007b66:	6923      	ldr	r3, [r4, #16]
 8007b68:	462a      	mov	r2, r5
 8007b6a:	4649      	mov	r1, r9
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	47d0      	blx	sl
 8007b70:	3001      	adds	r0, #1
 8007b72:	d0ab      	beq.n	8007acc <_printf_i+0x164>
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	079b      	lsls	r3, r3, #30
 8007b78:	d413      	bmi.n	8007ba2 <_printf_i+0x23a>
 8007b7a:	68e0      	ldr	r0, [r4, #12]
 8007b7c:	9b03      	ldr	r3, [sp, #12]
 8007b7e:	4298      	cmp	r0, r3
 8007b80:	bfb8      	it	lt
 8007b82:	4618      	movlt	r0, r3
 8007b84:	e7a4      	b.n	8007ad0 <_printf_i+0x168>
 8007b86:	2301      	movs	r3, #1
 8007b88:	4632      	mov	r2, r6
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	4640      	mov	r0, r8
 8007b8e:	47d0      	blx	sl
 8007b90:	3001      	adds	r0, #1
 8007b92:	d09b      	beq.n	8007acc <_printf_i+0x164>
 8007b94:	3501      	adds	r5, #1
 8007b96:	68e3      	ldr	r3, [r4, #12]
 8007b98:	9903      	ldr	r1, [sp, #12]
 8007b9a:	1a5b      	subs	r3, r3, r1
 8007b9c:	42ab      	cmp	r3, r5
 8007b9e:	dcf2      	bgt.n	8007b86 <_printf_i+0x21e>
 8007ba0:	e7eb      	b.n	8007b7a <_printf_i+0x212>
 8007ba2:	2500      	movs	r5, #0
 8007ba4:	f104 0619 	add.w	r6, r4, #25
 8007ba8:	e7f5      	b.n	8007b96 <_printf_i+0x22e>
 8007baa:	bf00      	nop
 8007bac:	0800a01a 	.word	0x0800a01a
 8007bb0:	0800a02b 	.word	0x0800a02b

08007bb4 <siprintf>:
 8007bb4:	b40e      	push	{r1, r2, r3}
 8007bb6:	b500      	push	{lr}
 8007bb8:	b09c      	sub	sp, #112	; 0x70
 8007bba:	ab1d      	add	r3, sp, #116	; 0x74
 8007bbc:	9002      	str	r0, [sp, #8]
 8007bbe:	9006      	str	r0, [sp, #24]
 8007bc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bc4:	4809      	ldr	r0, [pc, #36]	; (8007bec <siprintf+0x38>)
 8007bc6:	9107      	str	r1, [sp, #28]
 8007bc8:	9104      	str	r1, [sp, #16]
 8007bca:	4909      	ldr	r1, [pc, #36]	; (8007bf0 <siprintf+0x3c>)
 8007bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bd0:	9105      	str	r1, [sp, #20]
 8007bd2:	6800      	ldr	r0, [r0, #0]
 8007bd4:	9301      	str	r3, [sp, #4]
 8007bd6:	a902      	add	r1, sp, #8
 8007bd8:	f001 faf8 	bl	80091cc <_svfiprintf_r>
 8007bdc:	9b02      	ldr	r3, [sp, #8]
 8007bde:	2200      	movs	r2, #0
 8007be0:	701a      	strb	r2, [r3, #0]
 8007be2:	b01c      	add	sp, #112	; 0x70
 8007be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007be8:	b003      	add	sp, #12
 8007bea:	4770      	bx	lr
 8007bec:	24000010 	.word	0x24000010
 8007bf0:	ffff0208 	.word	0xffff0208

08007bf4 <quorem>:
 8007bf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf8:	6903      	ldr	r3, [r0, #16]
 8007bfa:	690c      	ldr	r4, [r1, #16]
 8007bfc:	42a3      	cmp	r3, r4
 8007bfe:	4607      	mov	r7, r0
 8007c00:	f2c0 8081 	blt.w	8007d06 <quorem+0x112>
 8007c04:	3c01      	subs	r4, #1
 8007c06:	f101 0814 	add.w	r8, r1, #20
 8007c0a:	f100 0514 	add.w	r5, r0, #20
 8007c0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c12:	9301      	str	r3, [sp, #4]
 8007c14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c28:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c2c:	d331      	bcc.n	8007c92 <quorem+0x9e>
 8007c2e:	f04f 0e00 	mov.w	lr, #0
 8007c32:	4640      	mov	r0, r8
 8007c34:	46ac      	mov	ip, r5
 8007c36:	46f2      	mov	sl, lr
 8007c38:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c3c:	b293      	uxth	r3, r2
 8007c3e:	fb06 e303 	mla	r3, r6, r3, lr
 8007c42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	ebaa 0303 	sub.w	r3, sl, r3
 8007c4c:	f8dc a000 	ldr.w	sl, [ip]
 8007c50:	0c12      	lsrs	r2, r2, #16
 8007c52:	fa13 f38a 	uxtah	r3, r3, sl
 8007c56:	fb06 e202 	mla	r2, r6, r2, lr
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	9b00      	ldr	r3, [sp, #0]
 8007c5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c62:	b292      	uxth	r2, r2
 8007c64:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c6c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c70:	4581      	cmp	r9, r0
 8007c72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c76:	f84c 3b04 	str.w	r3, [ip], #4
 8007c7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c7e:	d2db      	bcs.n	8007c38 <quorem+0x44>
 8007c80:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c84:	b92b      	cbnz	r3, 8007c92 <quorem+0x9e>
 8007c86:	9b01      	ldr	r3, [sp, #4]
 8007c88:	3b04      	subs	r3, #4
 8007c8a:	429d      	cmp	r5, r3
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	d32e      	bcc.n	8007cee <quorem+0xfa>
 8007c90:	613c      	str	r4, [r7, #16]
 8007c92:	4638      	mov	r0, r7
 8007c94:	f001 f846 	bl	8008d24 <__mcmp>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	db24      	blt.n	8007ce6 <quorem+0xf2>
 8007c9c:	3601      	adds	r6, #1
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	f04f 0c00 	mov.w	ip, #0
 8007ca4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ca8:	f8d0 e000 	ldr.w	lr, [r0]
 8007cac:	b293      	uxth	r3, r2
 8007cae:	ebac 0303 	sub.w	r3, ip, r3
 8007cb2:	0c12      	lsrs	r2, r2, #16
 8007cb4:	fa13 f38e 	uxtah	r3, r3, lr
 8007cb8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007cbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cc6:	45c1      	cmp	r9, r8
 8007cc8:	f840 3b04 	str.w	r3, [r0], #4
 8007ccc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007cd0:	d2e8      	bcs.n	8007ca4 <quorem+0xb0>
 8007cd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cda:	b922      	cbnz	r2, 8007ce6 <quorem+0xf2>
 8007cdc:	3b04      	subs	r3, #4
 8007cde:	429d      	cmp	r5, r3
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	d30a      	bcc.n	8007cfa <quorem+0x106>
 8007ce4:	613c      	str	r4, [r7, #16]
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	b003      	add	sp, #12
 8007cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cee:	6812      	ldr	r2, [r2, #0]
 8007cf0:	3b04      	subs	r3, #4
 8007cf2:	2a00      	cmp	r2, #0
 8007cf4:	d1cc      	bne.n	8007c90 <quorem+0x9c>
 8007cf6:	3c01      	subs	r4, #1
 8007cf8:	e7c7      	b.n	8007c8a <quorem+0x96>
 8007cfa:	6812      	ldr	r2, [r2, #0]
 8007cfc:	3b04      	subs	r3, #4
 8007cfe:	2a00      	cmp	r2, #0
 8007d00:	d1f0      	bne.n	8007ce4 <quorem+0xf0>
 8007d02:	3c01      	subs	r4, #1
 8007d04:	e7eb      	b.n	8007cde <quorem+0xea>
 8007d06:	2000      	movs	r0, #0
 8007d08:	e7ee      	b.n	8007ce8 <quorem+0xf4>
 8007d0a:	0000      	movs	r0, r0
 8007d0c:	0000      	movs	r0, r0
	...

08007d10 <_dtoa_r>:
 8007d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d14:	ed2d 8b02 	vpush	{d8}
 8007d18:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d1a:	b091      	sub	sp, #68	; 0x44
 8007d1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007d20:	ec59 8b10 	vmov	r8, r9, d0
 8007d24:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007d26:	9106      	str	r1, [sp, #24]
 8007d28:	4606      	mov	r6, r0
 8007d2a:	9208      	str	r2, [sp, #32]
 8007d2c:	930c      	str	r3, [sp, #48]	; 0x30
 8007d2e:	b975      	cbnz	r5, 8007d4e <_dtoa_r+0x3e>
 8007d30:	2010      	movs	r0, #16
 8007d32:	f000 fd5f 	bl	80087f4 <malloc>
 8007d36:	4602      	mov	r2, r0
 8007d38:	6270      	str	r0, [r6, #36]	; 0x24
 8007d3a:	b920      	cbnz	r0, 8007d46 <_dtoa_r+0x36>
 8007d3c:	4baa      	ldr	r3, [pc, #680]	; (8007fe8 <_dtoa_r+0x2d8>)
 8007d3e:	21ea      	movs	r1, #234	; 0xea
 8007d40:	48aa      	ldr	r0, [pc, #680]	; (8007fec <_dtoa_r+0x2dc>)
 8007d42:	f001 fb53 	bl	80093ec <__assert_func>
 8007d46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d4a:	6005      	str	r5, [r0, #0]
 8007d4c:	60c5      	str	r5, [r0, #12]
 8007d4e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007d50:	6819      	ldr	r1, [r3, #0]
 8007d52:	b151      	cbz	r1, 8007d6a <_dtoa_r+0x5a>
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	604a      	str	r2, [r1, #4]
 8007d58:	2301      	movs	r3, #1
 8007d5a:	4093      	lsls	r3, r2
 8007d5c:	608b      	str	r3, [r1, #8]
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f000 fd9e 	bl	80088a0 <_Bfree>
 8007d64:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007d66:	2200      	movs	r2, #0
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	f1b9 0300 	subs.w	r3, r9, #0
 8007d6e:	bfbb      	ittet	lt
 8007d70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d74:	9303      	strlt	r3, [sp, #12]
 8007d76:	2300      	movge	r3, #0
 8007d78:	2201      	movlt	r2, #1
 8007d7a:	bfac      	ite	ge
 8007d7c:	6023      	strge	r3, [r4, #0]
 8007d7e:	6022      	strlt	r2, [r4, #0]
 8007d80:	4b9b      	ldr	r3, [pc, #620]	; (8007ff0 <_dtoa_r+0x2e0>)
 8007d82:	9c03      	ldr	r4, [sp, #12]
 8007d84:	43a3      	bics	r3, r4
 8007d86:	d11c      	bne.n	8007dc2 <_dtoa_r+0xb2>
 8007d88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d8e:	6013      	str	r3, [r2, #0]
 8007d90:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007d94:	ea53 0308 	orrs.w	r3, r3, r8
 8007d98:	f000 84fd 	beq.w	8008796 <_dtoa_r+0xa86>
 8007d9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d9e:	b963      	cbnz	r3, 8007dba <_dtoa_r+0xaa>
 8007da0:	4b94      	ldr	r3, [pc, #592]	; (8007ff4 <_dtoa_r+0x2e4>)
 8007da2:	e01f      	b.n	8007de4 <_dtoa_r+0xd4>
 8007da4:	4b94      	ldr	r3, [pc, #592]	; (8007ff8 <_dtoa_r+0x2e8>)
 8007da6:	9301      	str	r3, [sp, #4]
 8007da8:	3308      	adds	r3, #8
 8007daa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	9801      	ldr	r0, [sp, #4]
 8007db0:	b011      	add	sp, #68	; 0x44
 8007db2:	ecbd 8b02 	vpop	{d8}
 8007db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dba:	4b8e      	ldr	r3, [pc, #568]	; (8007ff4 <_dtoa_r+0x2e4>)
 8007dbc:	9301      	str	r3, [sp, #4]
 8007dbe:	3303      	adds	r3, #3
 8007dc0:	e7f3      	b.n	8007daa <_dtoa_r+0x9a>
 8007dc2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007dc6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dce:	d10b      	bne.n	8007de8 <_dtoa_r+0xd8>
 8007dd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	6013      	str	r3, [r2, #0]
 8007dd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 84d9 	beq.w	8008790 <_dtoa_r+0xa80>
 8007dde:	4887      	ldr	r0, [pc, #540]	; (8007ffc <_dtoa_r+0x2ec>)
 8007de0:	6018      	str	r0, [r3, #0]
 8007de2:	1e43      	subs	r3, r0, #1
 8007de4:	9301      	str	r3, [sp, #4]
 8007de6:	e7e2      	b.n	8007dae <_dtoa_r+0x9e>
 8007de8:	a90f      	add	r1, sp, #60	; 0x3c
 8007dea:	aa0e      	add	r2, sp, #56	; 0x38
 8007dec:	4630      	mov	r0, r6
 8007dee:	eeb0 0b48 	vmov.f64	d0, d8
 8007df2:	f001 f83d 	bl	8008e70 <__d2b>
 8007df6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007dfa:	4605      	mov	r5, r0
 8007dfc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007dfe:	2900      	cmp	r1, #0
 8007e00:	d046      	beq.n	8007e90 <_dtoa_r+0x180>
 8007e02:	ee18 4a90 	vmov	r4, s17
 8007e06:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007e0a:	ec53 2b18 	vmov	r2, r3, d8
 8007e0e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007e12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007e16:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007e1a:	2400      	movs	r4, #0
 8007e1c:	ec43 2b16 	vmov	d6, r2, r3
 8007e20:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007e24:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007fd0 <_dtoa_r+0x2c0>
 8007e28:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007e2c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8007fd8 <_dtoa_r+0x2c8>
 8007e30:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007e34:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007fe0 <_dtoa_r+0x2d0>
 8007e38:	ee07 1a90 	vmov	s15, r1
 8007e3c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007e40:	eeb0 7b46 	vmov.f64	d7, d6
 8007e44:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007e48:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007e4c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e54:	ee16 ba90 	vmov	fp, s13
 8007e58:	940a      	str	r4, [sp, #40]	; 0x28
 8007e5a:	d508      	bpl.n	8007e6e <_dtoa_r+0x15e>
 8007e5c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007e60:	eeb4 6b47 	vcmp.f64	d6, d7
 8007e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e68:	bf18      	it	ne
 8007e6a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007e6e:	f1bb 0f16 	cmp.w	fp, #22
 8007e72:	d82f      	bhi.n	8007ed4 <_dtoa_r+0x1c4>
 8007e74:	4b62      	ldr	r3, [pc, #392]	; (8008000 <_dtoa_r+0x2f0>)
 8007e76:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e7a:	ed93 7b00 	vldr	d7, [r3]
 8007e7e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e86:	d501      	bpl.n	8007e8c <_dtoa_r+0x17c>
 8007e88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	e022      	b.n	8007ed6 <_dtoa_r+0x1c6>
 8007e90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007e92:	4401      	add	r1, r0
 8007e94:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007e98:	2b20      	cmp	r3, #32
 8007e9a:	bfc1      	itttt	gt
 8007e9c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ea0:	fa04 f303 	lslgt.w	r3, r4, r3
 8007ea4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007ea8:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007eac:	bfd6      	itet	le
 8007eae:	f1c3 0320 	rsble	r3, r3, #32
 8007eb2:	ea43 0808 	orrgt.w	r8, r3, r8
 8007eb6:	fa08 f803 	lslle.w	r8, r8, r3
 8007eba:	ee07 8a90 	vmov	s15, r8
 8007ebe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007ec2:	3901      	subs	r1, #1
 8007ec4:	ee17 4a90 	vmov	r4, s15
 8007ec8:	ec53 2b17 	vmov	r2, r3, d7
 8007ecc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007ed0:	2401      	movs	r4, #1
 8007ed2:	e7a3      	b.n	8007e1c <_dtoa_r+0x10c>
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ed8:	1a43      	subs	r3, r0, r1
 8007eda:	1e5a      	subs	r2, r3, #1
 8007edc:	bf45      	ittet	mi
 8007ede:	f1c3 0301 	rsbmi	r3, r3, #1
 8007ee2:	9304      	strmi	r3, [sp, #16]
 8007ee4:	2300      	movpl	r3, #0
 8007ee6:	2300      	movmi	r3, #0
 8007ee8:	9205      	str	r2, [sp, #20]
 8007eea:	bf54      	ite	pl
 8007eec:	9304      	strpl	r3, [sp, #16]
 8007eee:	9305      	strmi	r3, [sp, #20]
 8007ef0:	f1bb 0f00 	cmp.w	fp, #0
 8007ef4:	db18      	blt.n	8007f28 <_dtoa_r+0x218>
 8007ef6:	9b05      	ldr	r3, [sp, #20]
 8007ef8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8007efc:	445b      	add	r3, fp
 8007efe:	9305      	str	r3, [sp, #20]
 8007f00:	2300      	movs	r3, #0
 8007f02:	9a06      	ldr	r2, [sp, #24]
 8007f04:	2a09      	cmp	r2, #9
 8007f06:	d849      	bhi.n	8007f9c <_dtoa_r+0x28c>
 8007f08:	2a05      	cmp	r2, #5
 8007f0a:	bfc4      	itt	gt
 8007f0c:	3a04      	subgt	r2, #4
 8007f0e:	9206      	strgt	r2, [sp, #24]
 8007f10:	9a06      	ldr	r2, [sp, #24]
 8007f12:	f1a2 0202 	sub.w	r2, r2, #2
 8007f16:	bfcc      	ite	gt
 8007f18:	2400      	movgt	r4, #0
 8007f1a:	2401      	movle	r4, #1
 8007f1c:	2a03      	cmp	r2, #3
 8007f1e:	d848      	bhi.n	8007fb2 <_dtoa_r+0x2a2>
 8007f20:	e8df f002 	tbb	[pc, r2]
 8007f24:	3a2c2e0b 	.word	0x3a2c2e0b
 8007f28:	9b04      	ldr	r3, [sp, #16]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	eba3 030b 	sub.w	r3, r3, fp
 8007f30:	9304      	str	r3, [sp, #16]
 8007f32:	9209      	str	r2, [sp, #36]	; 0x24
 8007f34:	f1cb 0300 	rsb	r3, fp, #0
 8007f38:	e7e3      	b.n	8007f02 <_dtoa_r+0x1f2>
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	9207      	str	r2, [sp, #28]
 8007f3e:	9a08      	ldr	r2, [sp, #32]
 8007f40:	2a00      	cmp	r2, #0
 8007f42:	dc39      	bgt.n	8007fb8 <_dtoa_r+0x2a8>
 8007f44:	f04f 0a01 	mov.w	sl, #1
 8007f48:	46d1      	mov	r9, sl
 8007f4a:	4652      	mov	r2, sl
 8007f4c:	f8cd a020 	str.w	sl, [sp, #32]
 8007f50:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007f52:	2100      	movs	r1, #0
 8007f54:	6079      	str	r1, [r7, #4]
 8007f56:	2004      	movs	r0, #4
 8007f58:	f100 0c14 	add.w	ip, r0, #20
 8007f5c:	4594      	cmp	ip, r2
 8007f5e:	6879      	ldr	r1, [r7, #4]
 8007f60:	d92f      	bls.n	8007fc2 <_dtoa_r+0x2b2>
 8007f62:	4630      	mov	r0, r6
 8007f64:	930d      	str	r3, [sp, #52]	; 0x34
 8007f66:	f000 fc5b 	bl	8008820 <_Balloc>
 8007f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f6c:	9001      	str	r0, [sp, #4]
 8007f6e:	4602      	mov	r2, r0
 8007f70:	2800      	cmp	r0, #0
 8007f72:	d149      	bne.n	8008008 <_dtoa_r+0x2f8>
 8007f74:	4b23      	ldr	r3, [pc, #140]	; (8008004 <_dtoa_r+0x2f4>)
 8007f76:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f7a:	e6e1      	b.n	8007d40 <_dtoa_r+0x30>
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	e7dd      	b.n	8007f3c <_dtoa_r+0x22c>
 8007f80:	2200      	movs	r2, #0
 8007f82:	9207      	str	r2, [sp, #28]
 8007f84:	9a08      	ldr	r2, [sp, #32]
 8007f86:	eb0b 0a02 	add.w	sl, fp, r2
 8007f8a:	f10a 0901 	add.w	r9, sl, #1
 8007f8e:	464a      	mov	r2, r9
 8007f90:	2a01      	cmp	r2, #1
 8007f92:	bfb8      	it	lt
 8007f94:	2201      	movlt	r2, #1
 8007f96:	e7db      	b.n	8007f50 <_dtoa_r+0x240>
 8007f98:	2201      	movs	r2, #1
 8007f9a:	e7f2      	b.n	8007f82 <_dtoa_r+0x272>
 8007f9c:	2401      	movs	r4, #1
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007fa4:	f04f 3aff 	mov.w	sl, #4294967295
 8007fa8:	2100      	movs	r1, #0
 8007faa:	46d1      	mov	r9, sl
 8007fac:	2212      	movs	r2, #18
 8007fae:	9108      	str	r1, [sp, #32]
 8007fb0:	e7ce      	b.n	8007f50 <_dtoa_r+0x240>
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	9207      	str	r2, [sp, #28]
 8007fb6:	e7f5      	b.n	8007fa4 <_dtoa_r+0x294>
 8007fb8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007fbc:	46d1      	mov	r9, sl
 8007fbe:	4652      	mov	r2, sl
 8007fc0:	e7c6      	b.n	8007f50 <_dtoa_r+0x240>
 8007fc2:	3101      	adds	r1, #1
 8007fc4:	6079      	str	r1, [r7, #4]
 8007fc6:	0040      	lsls	r0, r0, #1
 8007fc8:	e7c6      	b.n	8007f58 <_dtoa_r+0x248>
 8007fca:	bf00      	nop
 8007fcc:	f3af 8000 	nop.w
 8007fd0:	636f4361 	.word	0x636f4361
 8007fd4:	3fd287a7 	.word	0x3fd287a7
 8007fd8:	8b60c8b3 	.word	0x8b60c8b3
 8007fdc:	3fc68a28 	.word	0x3fc68a28
 8007fe0:	509f79fb 	.word	0x509f79fb
 8007fe4:	3fd34413 	.word	0x3fd34413
 8007fe8:	0800a049 	.word	0x0800a049
 8007fec:	0800a060 	.word	0x0800a060
 8007ff0:	7ff00000 	.word	0x7ff00000
 8007ff4:	0800a045 	.word	0x0800a045
 8007ff8:	0800a03c 	.word	0x0800a03c
 8007ffc:	0800a019 	.word	0x0800a019
 8008000:	0800a150 	.word	0x0800a150
 8008004:	0800a0bb 	.word	0x0800a0bb
 8008008:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800800a:	9901      	ldr	r1, [sp, #4]
 800800c:	6011      	str	r1, [r2, #0]
 800800e:	f1b9 0f0e 	cmp.w	r9, #14
 8008012:	d86c      	bhi.n	80080ee <_dtoa_r+0x3de>
 8008014:	2c00      	cmp	r4, #0
 8008016:	d06a      	beq.n	80080ee <_dtoa_r+0x3de>
 8008018:	f1bb 0f00 	cmp.w	fp, #0
 800801c:	f340 80a0 	ble.w	8008160 <_dtoa_r+0x450>
 8008020:	49c1      	ldr	r1, [pc, #772]	; (8008328 <_dtoa_r+0x618>)
 8008022:	f00b 020f 	and.w	r2, fp, #15
 8008026:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800802a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800802e:	ed92 7b00 	vldr	d7, [r2]
 8008032:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008036:	f000 8087 	beq.w	8008148 <_dtoa_r+0x438>
 800803a:	4abc      	ldr	r2, [pc, #752]	; (800832c <_dtoa_r+0x61c>)
 800803c:	ed92 6b08 	vldr	d6, [r2, #32]
 8008040:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008044:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008048:	f001 010f 	and.w	r1, r1, #15
 800804c:	2203      	movs	r2, #3
 800804e:	48b7      	ldr	r0, [pc, #732]	; (800832c <_dtoa_r+0x61c>)
 8008050:	2900      	cmp	r1, #0
 8008052:	d17b      	bne.n	800814c <_dtoa_r+0x43c>
 8008054:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008058:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800805c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008060:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008062:	2900      	cmp	r1, #0
 8008064:	f000 80a2 	beq.w	80081ac <_dtoa_r+0x49c>
 8008068:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800806c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008070:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008078:	f140 8098 	bpl.w	80081ac <_dtoa_r+0x49c>
 800807c:	f1b9 0f00 	cmp.w	r9, #0
 8008080:	f000 8094 	beq.w	80081ac <_dtoa_r+0x49c>
 8008084:	f1ba 0f00 	cmp.w	sl, #0
 8008088:	dd2f      	ble.n	80080ea <_dtoa_r+0x3da>
 800808a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800808e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008092:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008096:	f10b 37ff 	add.w	r7, fp, #4294967295
 800809a:	3201      	adds	r2, #1
 800809c:	4650      	mov	r0, sl
 800809e:	ed9d 6b02 	vldr	d6, [sp, #8]
 80080a2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80080a6:	ee07 2a90 	vmov	s15, r2
 80080aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80080ae:	eea7 5b06 	vfma.f64	d5, d7, d6
 80080b2:	ee15 4a90 	vmov	r4, s11
 80080b6:	ec52 1b15 	vmov	r1, r2, d5
 80080ba:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80080be:	2800      	cmp	r0, #0
 80080c0:	d177      	bne.n	80081b2 <_dtoa_r+0x4a2>
 80080c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80080c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80080ca:	ec42 1b17 	vmov	d7, r1, r2
 80080ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80080d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d6:	f300 8263 	bgt.w	80085a0 <_dtoa_r+0x890>
 80080da:	eeb1 7b47 	vneg.f64	d7, d7
 80080de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80080e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e6:	f100 8258 	bmi.w	800859a <_dtoa_r+0x88a>
 80080ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80080ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080f0:	2a00      	cmp	r2, #0
 80080f2:	f2c0 811d 	blt.w	8008330 <_dtoa_r+0x620>
 80080f6:	f1bb 0f0e 	cmp.w	fp, #14
 80080fa:	f300 8119 	bgt.w	8008330 <_dtoa_r+0x620>
 80080fe:	4b8a      	ldr	r3, [pc, #552]	; (8008328 <_dtoa_r+0x618>)
 8008100:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008104:	ed93 6b00 	vldr	d6, [r3]
 8008108:	9b08      	ldr	r3, [sp, #32]
 800810a:	2b00      	cmp	r3, #0
 800810c:	f280 80b7 	bge.w	800827e <_dtoa_r+0x56e>
 8008110:	f1b9 0f00 	cmp.w	r9, #0
 8008114:	f300 80b3 	bgt.w	800827e <_dtoa_r+0x56e>
 8008118:	f040 823f 	bne.w	800859a <_dtoa_r+0x88a>
 800811c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008120:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008124:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008128:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800812c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008130:	464c      	mov	r4, r9
 8008132:	464f      	mov	r7, r9
 8008134:	f280 8215 	bge.w	8008562 <_dtoa_r+0x852>
 8008138:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800813c:	2331      	movs	r3, #49	; 0x31
 800813e:	f808 3b01 	strb.w	r3, [r8], #1
 8008142:	f10b 0b01 	add.w	fp, fp, #1
 8008146:	e211      	b.n	800856c <_dtoa_r+0x85c>
 8008148:	2202      	movs	r2, #2
 800814a:	e780      	b.n	800804e <_dtoa_r+0x33e>
 800814c:	07cc      	lsls	r4, r1, #31
 800814e:	d504      	bpl.n	800815a <_dtoa_r+0x44a>
 8008150:	ed90 6b00 	vldr	d6, [r0]
 8008154:	3201      	adds	r2, #1
 8008156:	ee27 7b06 	vmul.f64	d7, d7, d6
 800815a:	1049      	asrs	r1, r1, #1
 800815c:	3008      	adds	r0, #8
 800815e:	e777      	b.n	8008050 <_dtoa_r+0x340>
 8008160:	d022      	beq.n	80081a8 <_dtoa_r+0x498>
 8008162:	f1cb 0100 	rsb	r1, fp, #0
 8008166:	4a70      	ldr	r2, [pc, #448]	; (8008328 <_dtoa_r+0x618>)
 8008168:	f001 000f 	and.w	r0, r1, #15
 800816c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008170:	ed92 7b00 	vldr	d7, [r2]
 8008174:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008178:	ed8d 7b02 	vstr	d7, [sp, #8]
 800817c:	486b      	ldr	r0, [pc, #428]	; (800832c <_dtoa_r+0x61c>)
 800817e:	1109      	asrs	r1, r1, #4
 8008180:	2400      	movs	r4, #0
 8008182:	2202      	movs	r2, #2
 8008184:	b929      	cbnz	r1, 8008192 <_dtoa_r+0x482>
 8008186:	2c00      	cmp	r4, #0
 8008188:	f43f af6a 	beq.w	8008060 <_dtoa_r+0x350>
 800818c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008190:	e766      	b.n	8008060 <_dtoa_r+0x350>
 8008192:	07cf      	lsls	r7, r1, #31
 8008194:	d505      	bpl.n	80081a2 <_dtoa_r+0x492>
 8008196:	ed90 6b00 	vldr	d6, [r0]
 800819a:	3201      	adds	r2, #1
 800819c:	2401      	movs	r4, #1
 800819e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80081a2:	1049      	asrs	r1, r1, #1
 80081a4:	3008      	adds	r0, #8
 80081a6:	e7ed      	b.n	8008184 <_dtoa_r+0x474>
 80081a8:	2202      	movs	r2, #2
 80081aa:	e759      	b.n	8008060 <_dtoa_r+0x350>
 80081ac:	465f      	mov	r7, fp
 80081ae:	4648      	mov	r0, r9
 80081b0:	e775      	b.n	800809e <_dtoa_r+0x38e>
 80081b2:	ec42 1b17 	vmov	d7, r1, r2
 80081b6:	4a5c      	ldr	r2, [pc, #368]	; (8008328 <_dtoa_r+0x618>)
 80081b8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80081bc:	ed12 4b02 	vldr	d4, [r2, #-8]
 80081c0:	9a01      	ldr	r2, [sp, #4]
 80081c2:	1814      	adds	r4, r2, r0
 80081c4:	9a07      	ldr	r2, [sp, #28]
 80081c6:	b352      	cbz	r2, 800821e <_dtoa_r+0x50e>
 80081c8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80081cc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80081d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80081d4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80081d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80081dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80081e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80081e4:	ee14 2a90 	vmov	r2, s9
 80081e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80081ec:	3230      	adds	r2, #48	; 0x30
 80081ee:	ee36 6b45 	vsub.f64	d6, d6, d5
 80081f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80081f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081fa:	f808 2b01 	strb.w	r2, [r8], #1
 80081fe:	d439      	bmi.n	8008274 <_dtoa_r+0x564>
 8008200:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008204:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800820c:	d472      	bmi.n	80082f4 <_dtoa_r+0x5e4>
 800820e:	45a0      	cmp	r8, r4
 8008210:	f43f af6b 	beq.w	80080ea <_dtoa_r+0x3da>
 8008214:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008218:	ee26 6b03 	vmul.f64	d6, d6, d3
 800821c:	e7e0      	b.n	80081e0 <_dtoa_r+0x4d0>
 800821e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008222:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008226:	4621      	mov	r1, r4
 8008228:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800822c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008230:	ee14 2a90 	vmov	r2, s9
 8008234:	3230      	adds	r2, #48	; 0x30
 8008236:	f808 2b01 	strb.w	r2, [r8], #1
 800823a:	45a0      	cmp	r8, r4
 800823c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008240:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008244:	d118      	bne.n	8008278 <_dtoa_r+0x568>
 8008246:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800824a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800824e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008256:	dc4d      	bgt.n	80082f4 <_dtoa_r+0x5e4>
 8008258:	ee35 7b47 	vsub.f64	d7, d5, d7
 800825c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008264:	f57f af41 	bpl.w	80080ea <_dtoa_r+0x3da>
 8008268:	4688      	mov	r8, r1
 800826a:	3901      	subs	r1, #1
 800826c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008270:	2b30      	cmp	r3, #48	; 0x30
 8008272:	d0f9      	beq.n	8008268 <_dtoa_r+0x558>
 8008274:	46bb      	mov	fp, r7
 8008276:	e02a      	b.n	80082ce <_dtoa_r+0x5be>
 8008278:	ee26 6b03 	vmul.f64	d6, d6, d3
 800827c:	e7d6      	b.n	800822c <_dtoa_r+0x51c>
 800827e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008282:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008286:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800828a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800828e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008292:	ee15 3a10 	vmov	r3, s10
 8008296:	3330      	adds	r3, #48	; 0x30
 8008298:	f808 3b01 	strb.w	r3, [r8], #1
 800829c:	9b01      	ldr	r3, [sp, #4]
 800829e:	eba8 0303 	sub.w	r3, r8, r3
 80082a2:	4599      	cmp	r9, r3
 80082a4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80082a8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80082ac:	d133      	bne.n	8008316 <_dtoa_r+0x606>
 80082ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 80082b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80082b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ba:	dc1a      	bgt.n	80082f2 <_dtoa_r+0x5e2>
 80082bc:	eeb4 7b46 	vcmp.f64	d7, d6
 80082c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c4:	d103      	bne.n	80082ce <_dtoa_r+0x5be>
 80082c6:	ee15 3a10 	vmov	r3, s10
 80082ca:	07d9      	lsls	r1, r3, #31
 80082cc:	d411      	bmi.n	80082f2 <_dtoa_r+0x5e2>
 80082ce:	4629      	mov	r1, r5
 80082d0:	4630      	mov	r0, r6
 80082d2:	f000 fae5 	bl	80088a0 <_Bfree>
 80082d6:	2300      	movs	r3, #0
 80082d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082da:	f888 3000 	strb.w	r3, [r8]
 80082de:	f10b 0301 	add.w	r3, fp, #1
 80082e2:	6013      	str	r3, [r2, #0]
 80082e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f43f ad61 	beq.w	8007dae <_dtoa_r+0x9e>
 80082ec:	f8c3 8000 	str.w	r8, [r3]
 80082f0:	e55d      	b.n	8007dae <_dtoa_r+0x9e>
 80082f2:	465f      	mov	r7, fp
 80082f4:	4643      	mov	r3, r8
 80082f6:	4698      	mov	r8, r3
 80082f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082fc:	2a39      	cmp	r2, #57	; 0x39
 80082fe:	d106      	bne.n	800830e <_dtoa_r+0x5fe>
 8008300:	9a01      	ldr	r2, [sp, #4]
 8008302:	429a      	cmp	r2, r3
 8008304:	d1f7      	bne.n	80082f6 <_dtoa_r+0x5e6>
 8008306:	9901      	ldr	r1, [sp, #4]
 8008308:	2230      	movs	r2, #48	; 0x30
 800830a:	3701      	adds	r7, #1
 800830c:	700a      	strb	r2, [r1, #0]
 800830e:	781a      	ldrb	r2, [r3, #0]
 8008310:	3201      	adds	r2, #1
 8008312:	701a      	strb	r2, [r3, #0]
 8008314:	e7ae      	b.n	8008274 <_dtoa_r+0x564>
 8008316:	ee27 7b04 	vmul.f64	d7, d7, d4
 800831a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800831e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008322:	d1b2      	bne.n	800828a <_dtoa_r+0x57a>
 8008324:	e7d3      	b.n	80082ce <_dtoa_r+0x5be>
 8008326:	bf00      	nop
 8008328:	0800a150 	.word	0x0800a150
 800832c:	0800a128 	.word	0x0800a128
 8008330:	9907      	ldr	r1, [sp, #28]
 8008332:	2900      	cmp	r1, #0
 8008334:	f000 80d0 	beq.w	80084d8 <_dtoa_r+0x7c8>
 8008338:	9906      	ldr	r1, [sp, #24]
 800833a:	2901      	cmp	r1, #1
 800833c:	f300 80b4 	bgt.w	80084a8 <_dtoa_r+0x798>
 8008340:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008342:	2900      	cmp	r1, #0
 8008344:	f000 80ac 	beq.w	80084a0 <_dtoa_r+0x790>
 8008348:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800834c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008350:	461c      	mov	r4, r3
 8008352:	930a      	str	r3, [sp, #40]	; 0x28
 8008354:	9b04      	ldr	r3, [sp, #16]
 8008356:	4413      	add	r3, r2
 8008358:	9304      	str	r3, [sp, #16]
 800835a:	9b05      	ldr	r3, [sp, #20]
 800835c:	2101      	movs	r1, #1
 800835e:	4413      	add	r3, r2
 8008360:	4630      	mov	r0, r6
 8008362:	9305      	str	r3, [sp, #20]
 8008364:	f000 fb54 	bl	8008a10 <__i2b>
 8008368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800836a:	4607      	mov	r7, r0
 800836c:	f1b8 0f00 	cmp.w	r8, #0
 8008370:	dd0d      	ble.n	800838e <_dtoa_r+0x67e>
 8008372:	9a05      	ldr	r2, [sp, #20]
 8008374:	2a00      	cmp	r2, #0
 8008376:	dd0a      	ble.n	800838e <_dtoa_r+0x67e>
 8008378:	4542      	cmp	r2, r8
 800837a:	9904      	ldr	r1, [sp, #16]
 800837c:	bfa8      	it	ge
 800837e:	4642      	movge	r2, r8
 8008380:	1a89      	subs	r1, r1, r2
 8008382:	9104      	str	r1, [sp, #16]
 8008384:	9905      	ldr	r1, [sp, #20]
 8008386:	eba8 0802 	sub.w	r8, r8, r2
 800838a:	1a8a      	subs	r2, r1, r2
 800838c:	9205      	str	r2, [sp, #20]
 800838e:	b303      	cbz	r3, 80083d2 <_dtoa_r+0x6c2>
 8008390:	9a07      	ldr	r2, [sp, #28]
 8008392:	2a00      	cmp	r2, #0
 8008394:	f000 80a5 	beq.w	80084e2 <_dtoa_r+0x7d2>
 8008398:	2c00      	cmp	r4, #0
 800839a:	dd13      	ble.n	80083c4 <_dtoa_r+0x6b4>
 800839c:	4639      	mov	r1, r7
 800839e:	4622      	mov	r2, r4
 80083a0:	4630      	mov	r0, r6
 80083a2:	930d      	str	r3, [sp, #52]	; 0x34
 80083a4:	f000 fbf4 	bl	8008b90 <__pow5mult>
 80083a8:	462a      	mov	r2, r5
 80083aa:	4601      	mov	r1, r0
 80083ac:	4607      	mov	r7, r0
 80083ae:	4630      	mov	r0, r6
 80083b0:	f000 fb44 	bl	8008a3c <__multiply>
 80083b4:	4629      	mov	r1, r5
 80083b6:	900a      	str	r0, [sp, #40]	; 0x28
 80083b8:	4630      	mov	r0, r6
 80083ba:	f000 fa71 	bl	80088a0 <_Bfree>
 80083be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083c2:	4615      	mov	r5, r2
 80083c4:	1b1a      	subs	r2, r3, r4
 80083c6:	d004      	beq.n	80083d2 <_dtoa_r+0x6c2>
 80083c8:	4629      	mov	r1, r5
 80083ca:	4630      	mov	r0, r6
 80083cc:	f000 fbe0 	bl	8008b90 <__pow5mult>
 80083d0:	4605      	mov	r5, r0
 80083d2:	2101      	movs	r1, #1
 80083d4:	4630      	mov	r0, r6
 80083d6:	f000 fb1b 	bl	8008a10 <__i2b>
 80083da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083dc:	2b00      	cmp	r3, #0
 80083de:	4604      	mov	r4, r0
 80083e0:	f340 8081 	ble.w	80084e6 <_dtoa_r+0x7d6>
 80083e4:	461a      	mov	r2, r3
 80083e6:	4601      	mov	r1, r0
 80083e8:	4630      	mov	r0, r6
 80083ea:	f000 fbd1 	bl	8008b90 <__pow5mult>
 80083ee:	9b06      	ldr	r3, [sp, #24]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	4604      	mov	r4, r0
 80083f4:	dd7a      	ble.n	80084ec <_dtoa_r+0x7dc>
 80083f6:	2300      	movs	r3, #0
 80083f8:	930a      	str	r3, [sp, #40]	; 0x28
 80083fa:	6922      	ldr	r2, [r4, #16]
 80083fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008400:	6910      	ldr	r0, [r2, #16]
 8008402:	f000 fab5 	bl	8008970 <__hi0bits>
 8008406:	f1c0 0020 	rsb	r0, r0, #32
 800840a:	9b05      	ldr	r3, [sp, #20]
 800840c:	4418      	add	r0, r3
 800840e:	f010 001f 	ands.w	r0, r0, #31
 8008412:	f000 808c 	beq.w	800852e <_dtoa_r+0x81e>
 8008416:	f1c0 0220 	rsb	r2, r0, #32
 800841a:	2a04      	cmp	r2, #4
 800841c:	f340 8085 	ble.w	800852a <_dtoa_r+0x81a>
 8008420:	f1c0 001c 	rsb	r0, r0, #28
 8008424:	9b04      	ldr	r3, [sp, #16]
 8008426:	4403      	add	r3, r0
 8008428:	9304      	str	r3, [sp, #16]
 800842a:	9b05      	ldr	r3, [sp, #20]
 800842c:	4403      	add	r3, r0
 800842e:	4480      	add	r8, r0
 8008430:	9305      	str	r3, [sp, #20]
 8008432:	9b04      	ldr	r3, [sp, #16]
 8008434:	2b00      	cmp	r3, #0
 8008436:	dd05      	ble.n	8008444 <_dtoa_r+0x734>
 8008438:	4629      	mov	r1, r5
 800843a:	461a      	mov	r2, r3
 800843c:	4630      	mov	r0, r6
 800843e:	f000 fc01 	bl	8008c44 <__lshift>
 8008442:	4605      	mov	r5, r0
 8008444:	9b05      	ldr	r3, [sp, #20]
 8008446:	2b00      	cmp	r3, #0
 8008448:	dd05      	ble.n	8008456 <_dtoa_r+0x746>
 800844a:	4621      	mov	r1, r4
 800844c:	461a      	mov	r2, r3
 800844e:	4630      	mov	r0, r6
 8008450:	f000 fbf8 	bl	8008c44 <__lshift>
 8008454:	4604      	mov	r4, r0
 8008456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008458:	2b00      	cmp	r3, #0
 800845a:	d06a      	beq.n	8008532 <_dtoa_r+0x822>
 800845c:	4621      	mov	r1, r4
 800845e:	4628      	mov	r0, r5
 8008460:	f000 fc60 	bl	8008d24 <__mcmp>
 8008464:	2800      	cmp	r0, #0
 8008466:	da64      	bge.n	8008532 <_dtoa_r+0x822>
 8008468:	2300      	movs	r3, #0
 800846a:	4629      	mov	r1, r5
 800846c:	220a      	movs	r2, #10
 800846e:	4630      	mov	r0, r6
 8008470:	f000 fa38 	bl	80088e4 <__multadd>
 8008474:	9b07      	ldr	r3, [sp, #28]
 8008476:	f10b 3bff 	add.w	fp, fp, #4294967295
 800847a:	4605      	mov	r5, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 8191 	beq.w	80087a4 <_dtoa_r+0xa94>
 8008482:	4639      	mov	r1, r7
 8008484:	2300      	movs	r3, #0
 8008486:	220a      	movs	r2, #10
 8008488:	4630      	mov	r0, r6
 800848a:	f000 fa2b 	bl	80088e4 <__multadd>
 800848e:	f1ba 0f00 	cmp.w	sl, #0
 8008492:	4607      	mov	r7, r0
 8008494:	f300 808d 	bgt.w	80085b2 <_dtoa_r+0x8a2>
 8008498:	9b06      	ldr	r3, [sp, #24]
 800849a:	2b02      	cmp	r3, #2
 800849c:	dc50      	bgt.n	8008540 <_dtoa_r+0x830>
 800849e:	e088      	b.n	80085b2 <_dtoa_r+0x8a2>
 80084a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80084a6:	e751      	b.n	800834c <_dtoa_r+0x63c>
 80084a8:	f109 34ff 	add.w	r4, r9, #4294967295
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	bfbf      	itttt	lt
 80084b0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80084b2:	1ae3      	sublt	r3, r4, r3
 80084b4:	18d2      	addlt	r2, r2, r3
 80084b6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80084b8:	bfb6      	itet	lt
 80084ba:	4623      	movlt	r3, r4
 80084bc:	1b1c      	subge	r4, r3, r4
 80084be:	2400      	movlt	r4, #0
 80084c0:	f1b9 0f00 	cmp.w	r9, #0
 80084c4:	bfb5      	itete	lt
 80084c6:	9a04      	ldrlt	r2, [sp, #16]
 80084c8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80084cc:	eba2 0809 	sublt.w	r8, r2, r9
 80084d0:	464a      	movge	r2, r9
 80084d2:	bfb8      	it	lt
 80084d4:	2200      	movlt	r2, #0
 80084d6:	e73c      	b.n	8008352 <_dtoa_r+0x642>
 80084d8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80084dc:	9f07      	ldr	r7, [sp, #28]
 80084de:	461c      	mov	r4, r3
 80084e0:	e744      	b.n	800836c <_dtoa_r+0x65c>
 80084e2:	461a      	mov	r2, r3
 80084e4:	e770      	b.n	80083c8 <_dtoa_r+0x6b8>
 80084e6:	9b06      	ldr	r3, [sp, #24]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	dc18      	bgt.n	800851e <_dtoa_r+0x80e>
 80084ec:	9b02      	ldr	r3, [sp, #8]
 80084ee:	b9b3      	cbnz	r3, 800851e <_dtoa_r+0x80e>
 80084f0:	9b03      	ldr	r3, [sp, #12]
 80084f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80084f6:	b9a2      	cbnz	r2, 8008522 <_dtoa_r+0x812>
 80084f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80084fc:	0d12      	lsrs	r2, r2, #20
 80084fe:	0512      	lsls	r2, r2, #20
 8008500:	b18a      	cbz	r2, 8008526 <_dtoa_r+0x816>
 8008502:	9b04      	ldr	r3, [sp, #16]
 8008504:	3301      	adds	r3, #1
 8008506:	9304      	str	r3, [sp, #16]
 8008508:	9b05      	ldr	r3, [sp, #20]
 800850a:	3301      	adds	r3, #1
 800850c:	9305      	str	r3, [sp, #20]
 800850e:	2301      	movs	r3, #1
 8008510:	930a      	str	r3, [sp, #40]	; 0x28
 8008512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008514:	2b00      	cmp	r3, #0
 8008516:	f47f af70 	bne.w	80083fa <_dtoa_r+0x6ea>
 800851a:	2001      	movs	r0, #1
 800851c:	e775      	b.n	800840a <_dtoa_r+0x6fa>
 800851e:	2300      	movs	r3, #0
 8008520:	e7f6      	b.n	8008510 <_dtoa_r+0x800>
 8008522:	9b02      	ldr	r3, [sp, #8]
 8008524:	e7f4      	b.n	8008510 <_dtoa_r+0x800>
 8008526:	920a      	str	r2, [sp, #40]	; 0x28
 8008528:	e7f3      	b.n	8008512 <_dtoa_r+0x802>
 800852a:	d082      	beq.n	8008432 <_dtoa_r+0x722>
 800852c:	4610      	mov	r0, r2
 800852e:	301c      	adds	r0, #28
 8008530:	e778      	b.n	8008424 <_dtoa_r+0x714>
 8008532:	f1b9 0f00 	cmp.w	r9, #0
 8008536:	dc37      	bgt.n	80085a8 <_dtoa_r+0x898>
 8008538:	9b06      	ldr	r3, [sp, #24]
 800853a:	2b02      	cmp	r3, #2
 800853c:	dd34      	ble.n	80085a8 <_dtoa_r+0x898>
 800853e:	46ca      	mov	sl, r9
 8008540:	f1ba 0f00 	cmp.w	sl, #0
 8008544:	d10d      	bne.n	8008562 <_dtoa_r+0x852>
 8008546:	4621      	mov	r1, r4
 8008548:	4653      	mov	r3, sl
 800854a:	2205      	movs	r2, #5
 800854c:	4630      	mov	r0, r6
 800854e:	f000 f9c9 	bl	80088e4 <__multadd>
 8008552:	4601      	mov	r1, r0
 8008554:	4604      	mov	r4, r0
 8008556:	4628      	mov	r0, r5
 8008558:	f000 fbe4 	bl	8008d24 <__mcmp>
 800855c:	2800      	cmp	r0, #0
 800855e:	f73f adeb 	bgt.w	8008138 <_dtoa_r+0x428>
 8008562:	9b08      	ldr	r3, [sp, #32]
 8008564:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008568:	ea6f 0b03 	mvn.w	fp, r3
 800856c:	f04f 0900 	mov.w	r9, #0
 8008570:	4621      	mov	r1, r4
 8008572:	4630      	mov	r0, r6
 8008574:	f000 f994 	bl	80088a0 <_Bfree>
 8008578:	2f00      	cmp	r7, #0
 800857a:	f43f aea8 	beq.w	80082ce <_dtoa_r+0x5be>
 800857e:	f1b9 0f00 	cmp.w	r9, #0
 8008582:	d005      	beq.n	8008590 <_dtoa_r+0x880>
 8008584:	45b9      	cmp	r9, r7
 8008586:	d003      	beq.n	8008590 <_dtoa_r+0x880>
 8008588:	4649      	mov	r1, r9
 800858a:	4630      	mov	r0, r6
 800858c:	f000 f988 	bl	80088a0 <_Bfree>
 8008590:	4639      	mov	r1, r7
 8008592:	4630      	mov	r0, r6
 8008594:	f000 f984 	bl	80088a0 <_Bfree>
 8008598:	e699      	b.n	80082ce <_dtoa_r+0x5be>
 800859a:	2400      	movs	r4, #0
 800859c:	4627      	mov	r7, r4
 800859e:	e7e0      	b.n	8008562 <_dtoa_r+0x852>
 80085a0:	46bb      	mov	fp, r7
 80085a2:	4604      	mov	r4, r0
 80085a4:	4607      	mov	r7, r0
 80085a6:	e5c7      	b.n	8008138 <_dtoa_r+0x428>
 80085a8:	9b07      	ldr	r3, [sp, #28]
 80085aa:	46ca      	mov	sl, r9
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 8100 	beq.w	80087b2 <_dtoa_r+0xaa2>
 80085b2:	f1b8 0f00 	cmp.w	r8, #0
 80085b6:	dd05      	ble.n	80085c4 <_dtoa_r+0x8b4>
 80085b8:	4639      	mov	r1, r7
 80085ba:	4642      	mov	r2, r8
 80085bc:	4630      	mov	r0, r6
 80085be:	f000 fb41 	bl	8008c44 <__lshift>
 80085c2:	4607      	mov	r7, r0
 80085c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d05d      	beq.n	8008686 <_dtoa_r+0x976>
 80085ca:	6879      	ldr	r1, [r7, #4]
 80085cc:	4630      	mov	r0, r6
 80085ce:	f000 f927 	bl	8008820 <_Balloc>
 80085d2:	4680      	mov	r8, r0
 80085d4:	b928      	cbnz	r0, 80085e2 <_dtoa_r+0x8d2>
 80085d6:	4b82      	ldr	r3, [pc, #520]	; (80087e0 <_dtoa_r+0xad0>)
 80085d8:	4602      	mov	r2, r0
 80085da:	f240 21ea 	movw	r1, #746	; 0x2ea
 80085de:	f7ff bbaf 	b.w	8007d40 <_dtoa_r+0x30>
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	3202      	adds	r2, #2
 80085e6:	0092      	lsls	r2, r2, #2
 80085e8:	f107 010c 	add.w	r1, r7, #12
 80085ec:	300c      	adds	r0, #12
 80085ee:	f000 f909 	bl	8008804 <memcpy>
 80085f2:	2201      	movs	r2, #1
 80085f4:	4641      	mov	r1, r8
 80085f6:	4630      	mov	r0, r6
 80085f8:	f000 fb24 	bl	8008c44 <__lshift>
 80085fc:	9b01      	ldr	r3, [sp, #4]
 80085fe:	3301      	adds	r3, #1
 8008600:	9304      	str	r3, [sp, #16]
 8008602:	9b01      	ldr	r3, [sp, #4]
 8008604:	4453      	add	r3, sl
 8008606:	9308      	str	r3, [sp, #32]
 8008608:	9b02      	ldr	r3, [sp, #8]
 800860a:	f003 0301 	and.w	r3, r3, #1
 800860e:	46b9      	mov	r9, r7
 8008610:	9307      	str	r3, [sp, #28]
 8008612:	4607      	mov	r7, r0
 8008614:	9b04      	ldr	r3, [sp, #16]
 8008616:	4621      	mov	r1, r4
 8008618:	3b01      	subs	r3, #1
 800861a:	4628      	mov	r0, r5
 800861c:	9302      	str	r3, [sp, #8]
 800861e:	f7ff fae9 	bl	8007bf4 <quorem>
 8008622:	4603      	mov	r3, r0
 8008624:	3330      	adds	r3, #48	; 0x30
 8008626:	9005      	str	r0, [sp, #20]
 8008628:	4649      	mov	r1, r9
 800862a:	4628      	mov	r0, r5
 800862c:	9309      	str	r3, [sp, #36]	; 0x24
 800862e:	f000 fb79 	bl	8008d24 <__mcmp>
 8008632:	463a      	mov	r2, r7
 8008634:	4682      	mov	sl, r0
 8008636:	4621      	mov	r1, r4
 8008638:	4630      	mov	r0, r6
 800863a:	f000 fb8f 	bl	8008d5c <__mdiff>
 800863e:	68c2      	ldr	r2, [r0, #12]
 8008640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008642:	4680      	mov	r8, r0
 8008644:	bb0a      	cbnz	r2, 800868a <_dtoa_r+0x97a>
 8008646:	4601      	mov	r1, r0
 8008648:	4628      	mov	r0, r5
 800864a:	f000 fb6b 	bl	8008d24 <__mcmp>
 800864e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008650:	4602      	mov	r2, r0
 8008652:	4641      	mov	r1, r8
 8008654:	4630      	mov	r0, r6
 8008656:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800865a:	f000 f921 	bl	80088a0 <_Bfree>
 800865e:	9b06      	ldr	r3, [sp, #24]
 8008660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008662:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008666:	ea43 0102 	orr.w	r1, r3, r2
 800866a:	9b07      	ldr	r3, [sp, #28]
 800866c:	430b      	orrs	r3, r1
 800866e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008670:	d10d      	bne.n	800868e <_dtoa_r+0x97e>
 8008672:	2b39      	cmp	r3, #57	; 0x39
 8008674:	d029      	beq.n	80086ca <_dtoa_r+0x9ba>
 8008676:	f1ba 0f00 	cmp.w	sl, #0
 800867a:	dd01      	ble.n	8008680 <_dtoa_r+0x970>
 800867c:	9b05      	ldr	r3, [sp, #20]
 800867e:	3331      	adds	r3, #49	; 0x31
 8008680:	9a02      	ldr	r2, [sp, #8]
 8008682:	7013      	strb	r3, [r2, #0]
 8008684:	e774      	b.n	8008570 <_dtoa_r+0x860>
 8008686:	4638      	mov	r0, r7
 8008688:	e7b8      	b.n	80085fc <_dtoa_r+0x8ec>
 800868a:	2201      	movs	r2, #1
 800868c:	e7e1      	b.n	8008652 <_dtoa_r+0x942>
 800868e:	f1ba 0f00 	cmp.w	sl, #0
 8008692:	db06      	blt.n	80086a2 <_dtoa_r+0x992>
 8008694:	9906      	ldr	r1, [sp, #24]
 8008696:	ea41 0a0a 	orr.w	sl, r1, sl
 800869a:	9907      	ldr	r1, [sp, #28]
 800869c:	ea5a 0101 	orrs.w	r1, sl, r1
 80086a0:	d120      	bne.n	80086e4 <_dtoa_r+0x9d4>
 80086a2:	2a00      	cmp	r2, #0
 80086a4:	ddec      	ble.n	8008680 <_dtoa_r+0x970>
 80086a6:	4629      	mov	r1, r5
 80086a8:	2201      	movs	r2, #1
 80086aa:	4630      	mov	r0, r6
 80086ac:	9304      	str	r3, [sp, #16]
 80086ae:	f000 fac9 	bl	8008c44 <__lshift>
 80086b2:	4621      	mov	r1, r4
 80086b4:	4605      	mov	r5, r0
 80086b6:	f000 fb35 	bl	8008d24 <__mcmp>
 80086ba:	2800      	cmp	r0, #0
 80086bc:	9b04      	ldr	r3, [sp, #16]
 80086be:	dc02      	bgt.n	80086c6 <_dtoa_r+0x9b6>
 80086c0:	d1de      	bne.n	8008680 <_dtoa_r+0x970>
 80086c2:	07da      	lsls	r2, r3, #31
 80086c4:	d5dc      	bpl.n	8008680 <_dtoa_r+0x970>
 80086c6:	2b39      	cmp	r3, #57	; 0x39
 80086c8:	d1d8      	bne.n	800867c <_dtoa_r+0x96c>
 80086ca:	9a02      	ldr	r2, [sp, #8]
 80086cc:	2339      	movs	r3, #57	; 0x39
 80086ce:	7013      	strb	r3, [r2, #0]
 80086d0:	4643      	mov	r3, r8
 80086d2:	4698      	mov	r8, r3
 80086d4:	3b01      	subs	r3, #1
 80086d6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80086da:	2a39      	cmp	r2, #57	; 0x39
 80086dc:	d051      	beq.n	8008782 <_dtoa_r+0xa72>
 80086de:	3201      	adds	r2, #1
 80086e0:	701a      	strb	r2, [r3, #0]
 80086e2:	e745      	b.n	8008570 <_dtoa_r+0x860>
 80086e4:	2a00      	cmp	r2, #0
 80086e6:	dd03      	ble.n	80086f0 <_dtoa_r+0x9e0>
 80086e8:	2b39      	cmp	r3, #57	; 0x39
 80086ea:	d0ee      	beq.n	80086ca <_dtoa_r+0x9ba>
 80086ec:	3301      	adds	r3, #1
 80086ee:	e7c7      	b.n	8008680 <_dtoa_r+0x970>
 80086f0:	9a04      	ldr	r2, [sp, #16]
 80086f2:	9908      	ldr	r1, [sp, #32]
 80086f4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80086f8:	428a      	cmp	r2, r1
 80086fa:	d02b      	beq.n	8008754 <_dtoa_r+0xa44>
 80086fc:	4629      	mov	r1, r5
 80086fe:	2300      	movs	r3, #0
 8008700:	220a      	movs	r2, #10
 8008702:	4630      	mov	r0, r6
 8008704:	f000 f8ee 	bl	80088e4 <__multadd>
 8008708:	45b9      	cmp	r9, r7
 800870a:	4605      	mov	r5, r0
 800870c:	f04f 0300 	mov.w	r3, #0
 8008710:	f04f 020a 	mov.w	r2, #10
 8008714:	4649      	mov	r1, r9
 8008716:	4630      	mov	r0, r6
 8008718:	d107      	bne.n	800872a <_dtoa_r+0xa1a>
 800871a:	f000 f8e3 	bl	80088e4 <__multadd>
 800871e:	4681      	mov	r9, r0
 8008720:	4607      	mov	r7, r0
 8008722:	9b04      	ldr	r3, [sp, #16]
 8008724:	3301      	adds	r3, #1
 8008726:	9304      	str	r3, [sp, #16]
 8008728:	e774      	b.n	8008614 <_dtoa_r+0x904>
 800872a:	f000 f8db 	bl	80088e4 <__multadd>
 800872e:	4639      	mov	r1, r7
 8008730:	4681      	mov	r9, r0
 8008732:	2300      	movs	r3, #0
 8008734:	220a      	movs	r2, #10
 8008736:	4630      	mov	r0, r6
 8008738:	f000 f8d4 	bl	80088e4 <__multadd>
 800873c:	4607      	mov	r7, r0
 800873e:	e7f0      	b.n	8008722 <_dtoa_r+0xa12>
 8008740:	f1ba 0f00 	cmp.w	sl, #0
 8008744:	9a01      	ldr	r2, [sp, #4]
 8008746:	bfcc      	ite	gt
 8008748:	46d0      	movgt	r8, sl
 800874a:	f04f 0801 	movle.w	r8, #1
 800874e:	4490      	add	r8, r2
 8008750:	f04f 0900 	mov.w	r9, #0
 8008754:	4629      	mov	r1, r5
 8008756:	2201      	movs	r2, #1
 8008758:	4630      	mov	r0, r6
 800875a:	9302      	str	r3, [sp, #8]
 800875c:	f000 fa72 	bl	8008c44 <__lshift>
 8008760:	4621      	mov	r1, r4
 8008762:	4605      	mov	r5, r0
 8008764:	f000 fade 	bl	8008d24 <__mcmp>
 8008768:	2800      	cmp	r0, #0
 800876a:	dcb1      	bgt.n	80086d0 <_dtoa_r+0x9c0>
 800876c:	d102      	bne.n	8008774 <_dtoa_r+0xa64>
 800876e:	9b02      	ldr	r3, [sp, #8]
 8008770:	07db      	lsls	r3, r3, #31
 8008772:	d4ad      	bmi.n	80086d0 <_dtoa_r+0x9c0>
 8008774:	4643      	mov	r3, r8
 8008776:	4698      	mov	r8, r3
 8008778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800877c:	2a30      	cmp	r2, #48	; 0x30
 800877e:	d0fa      	beq.n	8008776 <_dtoa_r+0xa66>
 8008780:	e6f6      	b.n	8008570 <_dtoa_r+0x860>
 8008782:	9a01      	ldr	r2, [sp, #4]
 8008784:	429a      	cmp	r2, r3
 8008786:	d1a4      	bne.n	80086d2 <_dtoa_r+0x9c2>
 8008788:	f10b 0b01 	add.w	fp, fp, #1
 800878c:	2331      	movs	r3, #49	; 0x31
 800878e:	e778      	b.n	8008682 <_dtoa_r+0x972>
 8008790:	4b14      	ldr	r3, [pc, #80]	; (80087e4 <_dtoa_r+0xad4>)
 8008792:	f7ff bb27 	b.w	8007de4 <_dtoa_r+0xd4>
 8008796:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008798:	2b00      	cmp	r3, #0
 800879a:	f47f ab03 	bne.w	8007da4 <_dtoa_r+0x94>
 800879e:	4b12      	ldr	r3, [pc, #72]	; (80087e8 <_dtoa_r+0xad8>)
 80087a0:	f7ff bb20 	b.w	8007de4 <_dtoa_r+0xd4>
 80087a4:	f1ba 0f00 	cmp.w	sl, #0
 80087a8:	dc03      	bgt.n	80087b2 <_dtoa_r+0xaa2>
 80087aa:	9b06      	ldr	r3, [sp, #24]
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	f73f aec7 	bgt.w	8008540 <_dtoa_r+0x830>
 80087b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80087b6:	4621      	mov	r1, r4
 80087b8:	4628      	mov	r0, r5
 80087ba:	f7ff fa1b 	bl	8007bf4 <quorem>
 80087be:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80087c2:	f808 3b01 	strb.w	r3, [r8], #1
 80087c6:	9a01      	ldr	r2, [sp, #4]
 80087c8:	eba8 0202 	sub.w	r2, r8, r2
 80087cc:	4592      	cmp	sl, r2
 80087ce:	ddb7      	ble.n	8008740 <_dtoa_r+0xa30>
 80087d0:	4629      	mov	r1, r5
 80087d2:	2300      	movs	r3, #0
 80087d4:	220a      	movs	r2, #10
 80087d6:	4630      	mov	r0, r6
 80087d8:	f000 f884 	bl	80088e4 <__multadd>
 80087dc:	4605      	mov	r5, r0
 80087de:	e7ea      	b.n	80087b6 <_dtoa_r+0xaa6>
 80087e0:	0800a0bb 	.word	0x0800a0bb
 80087e4:	0800a018 	.word	0x0800a018
 80087e8:	0800a03c 	.word	0x0800a03c

080087ec <_localeconv_r>:
 80087ec:	4800      	ldr	r0, [pc, #0]	; (80087f0 <_localeconv_r+0x4>)
 80087ee:	4770      	bx	lr
 80087f0:	24000164 	.word	0x24000164

080087f4 <malloc>:
 80087f4:	4b02      	ldr	r3, [pc, #8]	; (8008800 <malloc+0xc>)
 80087f6:	4601      	mov	r1, r0
 80087f8:	6818      	ldr	r0, [r3, #0]
 80087fa:	f000 bc17 	b.w	800902c <_malloc_r>
 80087fe:	bf00      	nop
 8008800:	24000010 	.word	0x24000010

08008804 <memcpy>:
 8008804:	440a      	add	r2, r1
 8008806:	4291      	cmp	r1, r2
 8008808:	f100 33ff 	add.w	r3, r0, #4294967295
 800880c:	d100      	bne.n	8008810 <memcpy+0xc>
 800880e:	4770      	bx	lr
 8008810:	b510      	push	{r4, lr}
 8008812:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008816:	f803 4f01 	strb.w	r4, [r3, #1]!
 800881a:	4291      	cmp	r1, r2
 800881c:	d1f9      	bne.n	8008812 <memcpy+0xe>
 800881e:	bd10      	pop	{r4, pc}

08008820 <_Balloc>:
 8008820:	b570      	push	{r4, r5, r6, lr}
 8008822:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008824:	4604      	mov	r4, r0
 8008826:	460d      	mov	r5, r1
 8008828:	b976      	cbnz	r6, 8008848 <_Balloc+0x28>
 800882a:	2010      	movs	r0, #16
 800882c:	f7ff ffe2 	bl	80087f4 <malloc>
 8008830:	4602      	mov	r2, r0
 8008832:	6260      	str	r0, [r4, #36]	; 0x24
 8008834:	b920      	cbnz	r0, 8008840 <_Balloc+0x20>
 8008836:	4b18      	ldr	r3, [pc, #96]	; (8008898 <_Balloc+0x78>)
 8008838:	4818      	ldr	r0, [pc, #96]	; (800889c <_Balloc+0x7c>)
 800883a:	2166      	movs	r1, #102	; 0x66
 800883c:	f000 fdd6 	bl	80093ec <__assert_func>
 8008840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008844:	6006      	str	r6, [r0, #0]
 8008846:	60c6      	str	r6, [r0, #12]
 8008848:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800884a:	68f3      	ldr	r3, [r6, #12]
 800884c:	b183      	cbz	r3, 8008870 <_Balloc+0x50>
 800884e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008856:	b9b8      	cbnz	r0, 8008888 <_Balloc+0x68>
 8008858:	2101      	movs	r1, #1
 800885a:	fa01 f605 	lsl.w	r6, r1, r5
 800885e:	1d72      	adds	r2, r6, #5
 8008860:	0092      	lsls	r2, r2, #2
 8008862:	4620      	mov	r0, r4
 8008864:	f000 fb60 	bl	8008f28 <_calloc_r>
 8008868:	b160      	cbz	r0, 8008884 <_Balloc+0x64>
 800886a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800886e:	e00e      	b.n	800888e <_Balloc+0x6e>
 8008870:	2221      	movs	r2, #33	; 0x21
 8008872:	2104      	movs	r1, #4
 8008874:	4620      	mov	r0, r4
 8008876:	f000 fb57 	bl	8008f28 <_calloc_r>
 800887a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800887c:	60f0      	str	r0, [r6, #12]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1e4      	bne.n	800884e <_Balloc+0x2e>
 8008884:	2000      	movs	r0, #0
 8008886:	bd70      	pop	{r4, r5, r6, pc}
 8008888:	6802      	ldr	r2, [r0, #0]
 800888a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800888e:	2300      	movs	r3, #0
 8008890:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008894:	e7f7      	b.n	8008886 <_Balloc+0x66>
 8008896:	bf00      	nop
 8008898:	0800a049 	.word	0x0800a049
 800889c:	0800a0cc 	.word	0x0800a0cc

080088a0 <_Bfree>:
 80088a0:	b570      	push	{r4, r5, r6, lr}
 80088a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088a4:	4605      	mov	r5, r0
 80088a6:	460c      	mov	r4, r1
 80088a8:	b976      	cbnz	r6, 80088c8 <_Bfree+0x28>
 80088aa:	2010      	movs	r0, #16
 80088ac:	f7ff ffa2 	bl	80087f4 <malloc>
 80088b0:	4602      	mov	r2, r0
 80088b2:	6268      	str	r0, [r5, #36]	; 0x24
 80088b4:	b920      	cbnz	r0, 80088c0 <_Bfree+0x20>
 80088b6:	4b09      	ldr	r3, [pc, #36]	; (80088dc <_Bfree+0x3c>)
 80088b8:	4809      	ldr	r0, [pc, #36]	; (80088e0 <_Bfree+0x40>)
 80088ba:	218a      	movs	r1, #138	; 0x8a
 80088bc:	f000 fd96 	bl	80093ec <__assert_func>
 80088c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088c4:	6006      	str	r6, [r0, #0]
 80088c6:	60c6      	str	r6, [r0, #12]
 80088c8:	b13c      	cbz	r4, 80088da <_Bfree+0x3a>
 80088ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088cc:	6862      	ldr	r2, [r4, #4]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088d4:	6021      	str	r1, [r4, #0]
 80088d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088da:	bd70      	pop	{r4, r5, r6, pc}
 80088dc:	0800a049 	.word	0x0800a049
 80088e0:	0800a0cc 	.word	0x0800a0cc

080088e4 <__multadd>:
 80088e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e8:	690d      	ldr	r5, [r1, #16]
 80088ea:	4607      	mov	r7, r0
 80088ec:	460c      	mov	r4, r1
 80088ee:	461e      	mov	r6, r3
 80088f0:	f101 0c14 	add.w	ip, r1, #20
 80088f4:	2000      	movs	r0, #0
 80088f6:	f8dc 3000 	ldr.w	r3, [ip]
 80088fa:	b299      	uxth	r1, r3
 80088fc:	fb02 6101 	mla	r1, r2, r1, r6
 8008900:	0c1e      	lsrs	r6, r3, #16
 8008902:	0c0b      	lsrs	r3, r1, #16
 8008904:	fb02 3306 	mla	r3, r2, r6, r3
 8008908:	b289      	uxth	r1, r1
 800890a:	3001      	adds	r0, #1
 800890c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008910:	4285      	cmp	r5, r0
 8008912:	f84c 1b04 	str.w	r1, [ip], #4
 8008916:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800891a:	dcec      	bgt.n	80088f6 <__multadd+0x12>
 800891c:	b30e      	cbz	r6, 8008962 <__multadd+0x7e>
 800891e:	68a3      	ldr	r3, [r4, #8]
 8008920:	42ab      	cmp	r3, r5
 8008922:	dc19      	bgt.n	8008958 <__multadd+0x74>
 8008924:	6861      	ldr	r1, [r4, #4]
 8008926:	4638      	mov	r0, r7
 8008928:	3101      	adds	r1, #1
 800892a:	f7ff ff79 	bl	8008820 <_Balloc>
 800892e:	4680      	mov	r8, r0
 8008930:	b928      	cbnz	r0, 800893e <__multadd+0x5a>
 8008932:	4602      	mov	r2, r0
 8008934:	4b0c      	ldr	r3, [pc, #48]	; (8008968 <__multadd+0x84>)
 8008936:	480d      	ldr	r0, [pc, #52]	; (800896c <__multadd+0x88>)
 8008938:	21b5      	movs	r1, #181	; 0xb5
 800893a:	f000 fd57 	bl	80093ec <__assert_func>
 800893e:	6922      	ldr	r2, [r4, #16]
 8008940:	3202      	adds	r2, #2
 8008942:	f104 010c 	add.w	r1, r4, #12
 8008946:	0092      	lsls	r2, r2, #2
 8008948:	300c      	adds	r0, #12
 800894a:	f7ff ff5b 	bl	8008804 <memcpy>
 800894e:	4621      	mov	r1, r4
 8008950:	4638      	mov	r0, r7
 8008952:	f7ff ffa5 	bl	80088a0 <_Bfree>
 8008956:	4644      	mov	r4, r8
 8008958:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800895c:	3501      	adds	r5, #1
 800895e:	615e      	str	r6, [r3, #20]
 8008960:	6125      	str	r5, [r4, #16]
 8008962:	4620      	mov	r0, r4
 8008964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008968:	0800a0bb 	.word	0x0800a0bb
 800896c:	0800a0cc 	.word	0x0800a0cc

08008970 <__hi0bits>:
 8008970:	0c03      	lsrs	r3, r0, #16
 8008972:	041b      	lsls	r3, r3, #16
 8008974:	b9d3      	cbnz	r3, 80089ac <__hi0bits+0x3c>
 8008976:	0400      	lsls	r0, r0, #16
 8008978:	2310      	movs	r3, #16
 800897a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800897e:	bf04      	itt	eq
 8008980:	0200      	lsleq	r0, r0, #8
 8008982:	3308      	addeq	r3, #8
 8008984:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008988:	bf04      	itt	eq
 800898a:	0100      	lsleq	r0, r0, #4
 800898c:	3304      	addeq	r3, #4
 800898e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008992:	bf04      	itt	eq
 8008994:	0080      	lsleq	r0, r0, #2
 8008996:	3302      	addeq	r3, #2
 8008998:	2800      	cmp	r0, #0
 800899a:	db05      	blt.n	80089a8 <__hi0bits+0x38>
 800899c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80089a0:	f103 0301 	add.w	r3, r3, #1
 80089a4:	bf08      	it	eq
 80089a6:	2320      	moveq	r3, #32
 80089a8:	4618      	mov	r0, r3
 80089aa:	4770      	bx	lr
 80089ac:	2300      	movs	r3, #0
 80089ae:	e7e4      	b.n	800897a <__hi0bits+0xa>

080089b0 <__lo0bits>:
 80089b0:	6803      	ldr	r3, [r0, #0]
 80089b2:	f013 0207 	ands.w	r2, r3, #7
 80089b6:	4601      	mov	r1, r0
 80089b8:	d00b      	beq.n	80089d2 <__lo0bits+0x22>
 80089ba:	07da      	lsls	r2, r3, #31
 80089bc:	d423      	bmi.n	8008a06 <__lo0bits+0x56>
 80089be:	0798      	lsls	r0, r3, #30
 80089c0:	bf49      	itett	mi
 80089c2:	085b      	lsrmi	r3, r3, #1
 80089c4:	089b      	lsrpl	r3, r3, #2
 80089c6:	2001      	movmi	r0, #1
 80089c8:	600b      	strmi	r3, [r1, #0]
 80089ca:	bf5c      	itt	pl
 80089cc:	600b      	strpl	r3, [r1, #0]
 80089ce:	2002      	movpl	r0, #2
 80089d0:	4770      	bx	lr
 80089d2:	b298      	uxth	r0, r3
 80089d4:	b9a8      	cbnz	r0, 8008a02 <__lo0bits+0x52>
 80089d6:	0c1b      	lsrs	r3, r3, #16
 80089d8:	2010      	movs	r0, #16
 80089da:	b2da      	uxtb	r2, r3
 80089dc:	b90a      	cbnz	r2, 80089e2 <__lo0bits+0x32>
 80089de:	3008      	adds	r0, #8
 80089e0:	0a1b      	lsrs	r3, r3, #8
 80089e2:	071a      	lsls	r2, r3, #28
 80089e4:	bf04      	itt	eq
 80089e6:	091b      	lsreq	r3, r3, #4
 80089e8:	3004      	addeq	r0, #4
 80089ea:	079a      	lsls	r2, r3, #30
 80089ec:	bf04      	itt	eq
 80089ee:	089b      	lsreq	r3, r3, #2
 80089f0:	3002      	addeq	r0, #2
 80089f2:	07da      	lsls	r2, r3, #31
 80089f4:	d403      	bmi.n	80089fe <__lo0bits+0x4e>
 80089f6:	085b      	lsrs	r3, r3, #1
 80089f8:	f100 0001 	add.w	r0, r0, #1
 80089fc:	d005      	beq.n	8008a0a <__lo0bits+0x5a>
 80089fe:	600b      	str	r3, [r1, #0]
 8008a00:	4770      	bx	lr
 8008a02:	4610      	mov	r0, r2
 8008a04:	e7e9      	b.n	80089da <__lo0bits+0x2a>
 8008a06:	2000      	movs	r0, #0
 8008a08:	4770      	bx	lr
 8008a0a:	2020      	movs	r0, #32
 8008a0c:	4770      	bx	lr
	...

08008a10 <__i2b>:
 8008a10:	b510      	push	{r4, lr}
 8008a12:	460c      	mov	r4, r1
 8008a14:	2101      	movs	r1, #1
 8008a16:	f7ff ff03 	bl	8008820 <_Balloc>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	b928      	cbnz	r0, 8008a2a <__i2b+0x1a>
 8008a1e:	4b05      	ldr	r3, [pc, #20]	; (8008a34 <__i2b+0x24>)
 8008a20:	4805      	ldr	r0, [pc, #20]	; (8008a38 <__i2b+0x28>)
 8008a22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a26:	f000 fce1 	bl	80093ec <__assert_func>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	6144      	str	r4, [r0, #20]
 8008a2e:	6103      	str	r3, [r0, #16]
 8008a30:	bd10      	pop	{r4, pc}
 8008a32:	bf00      	nop
 8008a34:	0800a0bb 	.word	0x0800a0bb
 8008a38:	0800a0cc 	.word	0x0800a0cc

08008a3c <__multiply>:
 8008a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a40:	4691      	mov	r9, r2
 8008a42:	690a      	ldr	r2, [r1, #16]
 8008a44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	bfb8      	it	lt
 8008a4c:	460b      	movlt	r3, r1
 8008a4e:	460c      	mov	r4, r1
 8008a50:	bfbc      	itt	lt
 8008a52:	464c      	movlt	r4, r9
 8008a54:	4699      	movlt	r9, r3
 8008a56:	6927      	ldr	r7, [r4, #16]
 8008a58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a5c:	68a3      	ldr	r3, [r4, #8]
 8008a5e:	6861      	ldr	r1, [r4, #4]
 8008a60:	eb07 060a 	add.w	r6, r7, sl
 8008a64:	42b3      	cmp	r3, r6
 8008a66:	b085      	sub	sp, #20
 8008a68:	bfb8      	it	lt
 8008a6a:	3101      	addlt	r1, #1
 8008a6c:	f7ff fed8 	bl	8008820 <_Balloc>
 8008a70:	b930      	cbnz	r0, 8008a80 <__multiply+0x44>
 8008a72:	4602      	mov	r2, r0
 8008a74:	4b44      	ldr	r3, [pc, #272]	; (8008b88 <__multiply+0x14c>)
 8008a76:	4845      	ldr	r0, [pc, #276]	; (8008b8c <__multiply+0x150>)
 8008a78:	f240 115d 	movw	r1, #349	; 0x15d
 8008a7c:	f000 fcb6 	bl	80093ec <__assert_func>
 8008a80:	f100 0514 	add.w	r5, r0, #20
 8008a84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a88:	462b      	mov	r3, r5
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	4543      	cmp	r3, r8
 8008a8e:	d321      	bcc.n	8008ad4 <__multiply+0x98>
 8008a90:	f104 0314 	add.w	r3, r4, #20
 8008a94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a98:	f109 0314 	add.w	r3, r9, #20
 8008a9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008aa0:	9202      	str	r2, [sp, #8]
 8008aa2:	1b3a      	subs	r2, r7, r4
 8008aa4:	3a15      	subs	r2, #21
 8008aa6:	f022 0203 	bic.w	r2, r2, #3
 8008aaa:	3204      	adds	r2, #4
 8008aac:	f104 0115 	add.w	r1, r4, #21
 8008ab0:	428f      	cmp	r7, r1
 8008ab2:	bf38      	it	cc
 8008ab4:	2204      	movcc	r2, #4
 8008ab6:	9201      	str	r2, [sp, #4]
 8008ab8:	9a02      	ldr	r2, [sp, #8]
 8008aba:	9303      	str	r3, [sp, #12]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d80c      	bhi.n	8008ada <__multiply+0x9e>
 8008ac0:	2e00      	cmp	r6, #0
 8008ac2:	dd03      	ble.n	8008acc <__multiply+0x90>
 8008ac4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d05a      	beq.n	8008b82 <__multiply+0x146>
 8008acc:	6106      	str	r6, [r0, #16]
 8008ace:	b005      	add	sp, #20
 8008ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad4:	f843 2b04 	str.w	r2, [r3], #4
 8008ad8:	e7d8      	b.n	8008a8c <__multiply+0x50>
 8008ada:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ade:	f1ba 0f00 	cmp.w	sl, #0
 8008ae2:	d024      	beq.n	8008b2e <__multiply+0xf2>
 8008ae4:	f104 0e14 	add.w	lr, r4, #20
 8008ae8:	46a9      	mov	r9, r5
 8008aea:	f04f 0c00 	mov.w	ip, #0
 8008aee:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008af2:	f8d9 1000 	ldr.w	r1, [r9]
 8008af6:	fa1f fb82 	uxth.w	fp, r2
 8008afa:	b289      	uxth	r1, r1
 8008afc:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b04:	f8d9 2000 	ldr.w	r2, [r9]
 8008b08:	4461      	add	r1, ip
 8008b0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b0e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b16:	b289      	uxth	r1, r1
 8008b18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b1c:	4577      	cmp	r7, lr
 8008b1e:	f849 1b04 	str.w	r1, [r9], #4
 8008b22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b26:	d8e2      	bhi.n	8008aee <__multiply+0xb2>
 8008b28:	9a01      	ldr	r2, [sp, #4]
 8008b2a:	f845 c002 	str.w	ip, [r5, r2]
 8008b2e:	9a03      	ldr	r2, [sp, #12]
 8008b30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b34:	3304      	adds	r3, #4
 8008b36:	f1b9 0f00 	cmp.w	r9, #0
 8008b3a:	d020      	beq.n	8008b7e <__multiply+0x142>
 8008b3c:	6829      	ldr	r1, [r5, #0]
 8008b3e:	f104 0c14 	add.w	ip, r4, #20
 8008b42:	46ae      	mov	lr, r5
 8008b44:	f04f 0a00 	mov.w	sl, #0
 8008b48:	f8bc b000 	ldrh.w	fp, [ip]
 8008b4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008b50:	fb09 220b 	mla	r2, r9, fp, r2
 8008b54:	4492      	add	sl, r2
 8008b56:	b289      	uxth	r1, r1
 8008b58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008b5c:	f84e 1b04 	str.w	r1, [lr], #4
 8008b60:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b64:	f8be 1000 	ldrh.w	r1, [lr]
 8008b68:	0c12      	lsrs	r2, r2, #16
 8008b6a:	fb09 1102 	mla	r1, r9, r2, r1
 8008b6e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008b72:	4567      	cmp	r7, ip
 8008b74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b78:	d8e6      	bhi.n	8008b48 <__multiply+0x10c>
 8008b7a:	9a01      	ldr	r2, [sp, #4]
 8008b7c:	50a9      	str	r1, [r5, r2]
 8008b7e:	3504      	adds	r5, #4
 8008b80:	e79a      	b.n	8008ab8 <__multiply+0x7c>
 8008b82:	3e01      	subs	r6, #1
 8008b84:	e79c      	b.n	8008ac0 <__multiply+0x84>
 8008b86:	bf00      	nop
 8008b88:	0800a0bb 	.word	0x0800a0bb
 8008b8c:	0800a0cc 	.word	0x0800a0cc

08008b90 <__pow5mult>:
 8008b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b94:	4615      	mov	r5, r2
 8008b96:	f012 0203 	ands.w	r2, r2, #3
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	460f      	mov	r7, r1
 8008b9e:	d007      	beq.n	8008bb0 <__pow5mult+0x20>
 8008ba0:	4c25      	ldr	r4, [pc, #148]	; (8008c38 <__pow5mult+0xa8>)
 8008ba2:	3a01      	subs	r2, #1
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008baa:	f7ff fe9b 	bl	80088e4 <__multadd>
 8008bae:	4607      	mov	r7, r0
 8008bb0:	10ad      	asrs	r5, r5, #2
 8008bb2:	d03d      	beq.n	8008c30 <__pow5mult+0xa0>
 8008bb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008bb6:	b97c      	cbnz	r4, 8008bd8 <__pow5mult+0x48>
 8008bb8:	2010      	movs	r0, #16
 8008bba:	f7ff fe1b 	bl	80087f4 <malloc>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	6270      	str	r0, [r6, #36]	; 0x24
 8008bc2:	b928      	cbnz	r0, 8008bd0 <__pow5mult+0x40>
 8008bc4:	4b1d      	ldr	r3, [pc, #116]	; (8008c3c <__pow5mult+0xac>)
 8008bc6:	481e      	ldr	r0, [pc, #120]	; (8008c40 <__pow5mult+0xb0>)
 8008bc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008bcc:	f000 fc0e 	bl	80093ec <__assert_func>
 8008bd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bd4:	6004      	str	r4, [r0, #0]
 8008bd6:	60c4      	str	r4, [r0, #12]
 8008bd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008bdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008be0:	b94c      	cbnz	r4, 8008bf6 <__pow5mult+0x66>
 8008be2:	f240 2171 	movw	r1, #625	; 0x271
 8008be6:	4630      	mov	r0, r6
 8008be8:	f7ff ff12 	bl	8008a10 <__i2b>
 8008bec:	2300      	movs	r3, #0
 8008bee:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	6003      	str	r3, [r0, #0]
 8008bf6:	f04f 0900 	mov.w	r9, #0
 8008bfa:	07eb      	lsls	r3, r5, #31
 8008bfc:	d50a      	bpl.n	8008c14 <__pow5mult+0x84>
 8008bfe:	4639      	mov	r1, r7
 8008c00:	4622      	mov	r2, r4
 8008c02:	4630      	mov	r0, r6
 8008c04:	f7ff ff1a 	bl	8008a3c <__multiply>
 8008c08:	4639      	mov	r1, r7
 8008c0a:	4680      	mov	r8, r0
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f7ff fe47 	bl	80088a0 <_Bfree>
 8008c12:	4647      	mov	r7, r8
 8008c14:	106d      	asrs	r5, r5, #1
 8008c16:	d00b      	beq.n	8008c30 <__pow5mult+0xa0>
 8008c18:	6820      	ldr	r0, [r4, #0]
 8008c1a:	b938      	cbnz	r0, 8008c2c <__pow5mult+0x9c>
 8008c1c:	4622      	mov	r2, r4
 8008c1e:	4621      	mov	r1, r4
 8008c20:	4630      	mov	r0, r6
 8008c22:	f7ff ff0b 	bl	8008a3c <__multiply>
 8008c26:	6020      	str	r0, [r4, #0]
 8008c28:	f8c0 9000 	str.w	r9, [r0]
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	e7e4      	b.n	8008bfa <__pow5mult+0x6a>
 8008c30:	4638      	mov	r0, r7
 8008c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c36:	bf00      	nop
 8008c38:	0800a218 	.word	0x0800a218
 8008c3c:	0800a049 	.word	0x0800a049
 8008c40:	0800a0cc 	.word	0x0800a0cc

08008c44 <__lshift>:
 8008c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c48:	460c      	mov	r4, r1
 8008c4a:	6849      	ldr	r1, [r1, #4]
 8008c4c:	6923      	ldr	r3, [r4, #16]
 8008c4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c52:	68a3      	ldr	r3, [r4, #8]
 8008c54:	4607      	mov	r7, r0
 8008c56:	4691      	mov	r9, r2
 8008c58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c5c:	f108 0601 	add.w	r6, r8, #1
 8008c60:	42b3      	cmp	r3, r6
 8008c62:	db0b      	blt.n	8008c7c <__lshift+0x38>
 8008c64:	4638      	mov	r0, r7
 8008c66:	f7ff fddb 	bl	8008820 <_Balloc>
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	b948      	cbnz	r0, 8008c82 <__lshift+0x3e>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	4b2a      	ldr	r3, [pc, #168]	; (8008d1c <__lshift+0xd8>)
 8008c72:	482b      	ldr	r0, [pc, #172]	; (8008d20 <__lshift+0xdc>)
 8008c74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c78:	f000 fbb8 	bl	80093ec <__assert_func>
 8008c7c:	3101      	adds	r1, #1
 8008c7e:	005b      	lsls	r3, r3, #1
 8008c80:	e7ee      	b.n	8008c60 <__lshift+0x1c>
 8008c82:	2300      	movs	r3, #0
 8008c84:	f100 0114 	add.w	r1, r0, #20
 8008c88:	f100 0210 	add.w	r2, r0, #16
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	4553      	cmp	r3, sl
 8008c90:	db37      	blt.n	8008d02 <__lshift+0xbe>
 8008c92:	6920      	ldr	r0, [r4, #16]
 8008c94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c98:	f104 0314 	add.w	r3, r4, #20
 8008c9c:	f019 091f 	ands.w	r9, r9, #31
 8008ca0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ca4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ca8:	d02f      	beq.n	8008d0a <__lshift+0xc6>
 8008caa:	f1c9 0e20 	rsb	lr, r9, #32
 8008cae:	468a      	mov	sl, r1
 8008cb0:	f04f 0c00 	mov.w	ip, #0
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	fa02 f209 	lsl.w	r2, r2, r9
 8008cba:	ea42 020c 	orr.w	r2, r2, ip
 8008cbe:	f84a 2b04 	str.w	r2, [sl], #4
 8008cc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cc6:	4298      	cmp	r0, r3
 8008cc8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008ccc:	d8f2      	bhi.n	8008cb4 <__lshift+0x70>
 8008cce:	1b03      	subs	r3, r0, r4
 8008cd0:	3b15      	subs	r3, #21
 8008cd2:	f023 0303 	bic.w	r3, r3, #3
 8008cd6:	3304      	adds	r3, #4
 8008cd8:	f104 0215 	add.w	r2, r4, #21
 8008cdc:	4290      	cmp	r0, r2
 8008cde:	bf38      	it	cc
 8008ce0:	2304      	movcc	r3, #4
 8008ce2:	f841 c003 	str.w	ip, [r1, r3]
 8008ce6:	f1bc 0f00 	cmp.w	ip, #0
 8008cea:	d001      	beq.n	8008cf0 <__lshift+0xac>
 8008cec:	f108 0602 	add.w	r6, r8, #2
 8008cf0:	3e01      	subs	r6, #1
 8008cf2:	4638      	mov	r0, r7
 8008cf4:	612e      	str	r6, [r5, #16]
 8008cf6:	4621      	mov	r1, r4
 8008cf8:	f7ff fdd2 	bl	80088a0 <_Bfree>
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d02:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d06:	3301      	adds	r3, #1
 8008d08:	e7c1      	b.n	8008c8e <__lshift+0x4a>
 8008d0a:	3904      	subs	r1, #4
 8008d0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d10:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d14:	4298      	cmp	r0, r3
 8008d16:	d8f9      	bhi.n	8008d0c <__lshift+0xc8>
 8008d18:	e7ea      	b.n	8008cf0 <__lshift+0xac>
 8008d1a:	bf00      	nop
 8008d1c:	0800a0bb 	.word	0x0800a0bb
 8008d20:	0800a0cc 	.word	0x0800a0cc

08008d24 <__mcmp>:
 8008d24:	b530      	push	{r4, r5, lr}
 8008d26:	6902      	ldr	r2, [r0, #16]
 8008d28:	690c      	ldr	r4, [r1, #16]
 8008d2a:	1b12      	subs	r2, r2, r4
 8008d2c:	d10e      	bne.n	8008d4c <__mcmp+0x28>
 8008d2e:	f100 0314 	add.w	r3, r0, #20
 8008d32:	3114      	adds	r1, #20
 8008d34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d44:	42a5      	cmp	r5, r4
 8008d46:	d003      	beq.n	8008d50 <__mcmp+0x2c>
 8008d48:	d305      	bcc.n	8008d56 <__mcmp+0x32>
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	bd30      	pop	{r4, r5, pc}
 8008d50:	4283      	cmp	r3, r0
 8008d52:	d3f3      	bcc.n	8008d3c <__mcmp+0x18>
 8008d54:	e7fa      	b.n	8008d4c <__mcmp+0x28>
 8008d56:	f04f 32ff 	mov.w	r2, #4294967295
 8008d5a:	e7f7      	b.n	8008d4c <__mcmp+0x28>

08008d5c <__mdiff>:
 8008d5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d60:	460c      	mov	r4, r1
 8008d62:	4606      	mov	r6, r0
 8008d64:	4611      	mov	r1, r2
 8008d66:	4620      	mov	r0, r4
 8008d68:	4690      	mov	r8, r2
 8008d6a:	f7ff ffdb 	bl	8008d24 <__mcmp>
 8008d6e:	1e05      	subs	r5, r0, #0
 8008d70:	d110      	bne.n	8008d94 <__mdiff+0x38>
 8008d72:	4629      	mov	r1, r5
 8008d74:	4630      	mov	r0, r6
 8008d76:	f7ff fd53 	bl	8008820 <_Balloc>
 8008d7a:	b930      	cbnz	r0, 8008d8a <__mdiff+0x2e>
 8008d7c:	4b3a      	ldr	r3, [pc, #232]	; (8008e68 <__mdiff+0x10c>)
 8008d7e:	4602      	mov	r2, r0
 8008d80:	f240 2132 	movw	r1, #562	; 0x232
 8008d84:	4839      	ldr	r0, [pc, #228]	; (8008e6c <__mdiff+0x110>)
 8008d86:	f000 fb31 	bl	80093ec <__assert_func>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d94:	bfa4      	itt	ge
 8008d96:	4643      	movge	r3, r8
 8008d98:	46a0      	movge	r8, r4
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008da0:	bfa6      	itte	ge
 8008da2:	461c      	movge	r4, r3
 8008da4:	2500      	movge	r5, #0
 8008da6:	2501      	movlt	r5, #1
 8008da8:	f7ff fd3a 	bl	8008820 <_Balloc>
 8008dac:	b920      	cbnz	r0, 8008db8 <__mdiff+0x5c>
 8008dae:	4b2e      	ldr	r3, [pc, #184]	; (8008e68 <__mdiff+0x10c>)
 8008db0:	4602      	mov	r2, r0
 8008db2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008db6:	e7e5      	b.n	8008d84 <__mdiff+0x28>
 8008db8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008dbc:	6926      	ldr	r6, [r4, #16]
 8008dbe:	60c5      	str	r5, [r0, #12]
 8008dc0:	f104 0914 	add.w	r9, r4, #20
 8008dc4:	f108 0514 	add.w	r5, r8, #20
 8008dc8:	f100 0e14 	add.w	lr, r0, #20
 8008dcc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008dd0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008dd4:	f108 0210 	add.w	r2, r8, #16
 8008dd8:	46f2      	mov	sl, lr
 8008dda:	2100      	movs	r1, #0
 8008ddc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008de0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008de4:	fa1f f883 	uxth.w	r8, r3
 8008de8:	fa11 f18b 	uxtah	r1, r1, fp
 8008dec:	0c1b      	lsrs	r3, r3, #16
 8008dee:	eba1 0808 	sub.w	r8, r1, r8
 8008df2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008df6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008dfa:	fa1f f888 	uxth.w	r8, r8
 8008dfe:	1419      	asrs	r1, r3, #16
 8008e00:	454e      	cmp	r6, r9
 8008e02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e06:	f84a 3b04 	str.w	r3, [sl], #4
 8008e0a:	d8e7      	bhi.n	8008ddc <__mdiff+0x80>
 8008e0c:	1b33      	subs	r3, r6, r4
 8008e0e:	3b15      	subs	r3, #21
 8008e10:	f023 0303 	bic.w	r3, r3, #3
 8008e14:	3304      	adds	r3, #4
 8008e16:	3415      	adds	r4, #21
 8008e18:	42a6      	cmp	r6, r4
 8008e1a:	bf38      	it	cc
 8008e1c:	2304      	movcc	r3, #4
 8008e1e:	441d      	add	r5, r3
 8008e20:	4473      	add	r3, lr
 8008e22:	469e      	mov	lr, r3
 8008e24:	462e      	mov	r6, r5
 8008e26:	4566      	cmp	r6, ip
 8008e28:	d30e      	bcc.n	8008e48 <__mdiff+0xec>
 8008e2a:	f10c 0203 	add.w	r2, ip, #3
 8008e2e:	1b52      	subs	r2, r2, r5
 8008e30:	f022 0203 	bic.w	r2, r2, #3
 8008e34:	3d03      	subs	r5, #3
 8008e36:	45ac      	cmp	ip, r5
 8008e38:	bf38      	it	cc
 8008e3a:	2200      	movcc	r2, #0
 8008e3c:	441a      	add	r2, r3
 8008e3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008e42:	b17b      	cbz	r3, 8008e64 <__mdiff+0x108>
 8008e44:	6107      	str	r7, [r0, #16]
 8008e46:	e7a3      	b.n	8008d90 <__mdiff+0x34>
 8008e48:	f856 8b04 	ldr.w	r8, [r6], #4
 8008e4c:	fa11 f288 	uxtah	r2, r1, r8
 8008e50:	1414      	asrs	r4, r2, #16
 8008e52:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008e56:	b292      	uxth	r2, r2
 8008e58:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008e5c:	f84e 2b04 	str.w	r2, [lr], #4
 8008e60:	1421      	asrs	r1, r4, #16
 8008e62:	e7e0      	b.n	8008e26 <__mdiff+0xca>
 8008e64:	3f01      	subs	r7, #1
 8008e66:	e7ea      	b.n	8008e3e <__mdiff+0xe2>
 8008e68:	0800a0bb 	.word	0x0800a0bb
 8008e6c:	0800a0cc 	.word	0x0800a0cc

08008e70 <__d2b>:
 8008e70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e74:	4689      	mov	r9, r1
 8008e76:	2101      	movs	r1, #1
 8008e78:	ec57 6b10 	vmov	r6, r7, d0
 8008e7c:	4690      	mov	r8, r2
 8008e7e:	f7ff fccf 	bl	8008820 <_Balloc>
 8008e82:	4604      	mov	r4, r0
 8008e84:	b930      	cbnz	r0, 8008e94 <__d2b+0x24>
 8008e86:	4602      	mov	r2, r0
 8008e88:	4b25      	ldr	r3, [pc, #148]	; (8008f20 <__d2b+0xb0>)
 8008e8a:	4826      	ldr	r0, [pc, #152]	; (8008f24 <__d2b+0xb4>)
 8008e8c:	f240 310a 	movw	r1, #778	; 0x30a
 8008e90:	f000 faac 	bl	80093ec <__assert_func>
 8008e94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e9c:	bb35      	cbnz	r5, 8008eec <__d2b+0x7c>
 8008e9e:	2e00      	cmp	r6, #0
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	d028      	beq.n	8008ef6 <__d2b+0x86>
 8008ea4:	4668      	mov	r0, sp
 8008ea6:	9600      	str	r6, [sp, #0]
 8008ea8:	f7ff fd82 	bl	80089b0 <__lo0bits>
 8008eac:	9900      	ldr	r1, [sp, #0]
 8008eae:	b300      	cbz	r0, 8008ef2 <__d2b+0x82>
 8008eb0:	9a01      	ldr	r2, [sp, #4]
 8008eb2:	f1c0 0320 	rsb	r3, r0, #32
 8008eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eba:	430b      	orrs	r3, r1
 8008ebc:	40c2      	lsrs	r2, r0
 8008ebe:	6163      	str	r3, [r4, #20]
 8008ec0:	9201      	str	r2, [sp, #4]
 8008ec2:	9b01      	ldr	r3, [sp, #4]
 8008ec4:	61a3      	str	r3, [r4, #24]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	bf14      	ite	ne
 8008eca:	2202      	movne	r2, #2
 8008ecc:	2201      	moveq	r2, #1
 8008ece:	6122      	str	r2, [r4, #16]
 8008ed0:	b1d5      	cbz	r5, 8008f08 <__d2b+0x98>
 8008ed2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ed6:	4405      	add	r5, r0
 8008ed8:	f8c9 5000 	str.w	r5, [r9]
 8008edc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ee0:	f8c8 0000 	str.w	r0, [r8]
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	b003      	add	sp, #12
 8008ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ef0:	e7d5      	b.n	8008e9e <__d2b+0x2e>
 8008ef2:	6161      	str	r1, [r4, #20]
 8008ef4:	e7e5      	b.n	8008ec2 <__d2b+0x52>
 8008ef6:	a801      	add	r0, sp, #4
 8008ef8:	f7ff fd5a 	bl	80089b0 <__lo0bits>
 8008efc:	9b01      	ldr	r3, [sp, #4]
 8008efe:	6163      	str	r3, [r4, #20]
 8008f00:	2201      	movs	r2, #1
 8008f02:	6122      	str	r2, [r4, #16]
 8008f04:	3020      	adds	r0, #32
 8008f06:	e7e3      	b.n	8008ed0 <__d2b+0x60>
 8008f08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f10:	f8c9 0000 	str.w	r0, [r9]
 8008f14:	6918      	ldr	r0, [r3, #16]
 8008f16:	f7ff fd2b 	bl	8008970 <__hi0bits>
 8008f1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f1e:	e7df      	b.n	8008ee0 <__d2b+0x70>
 8008f20:	0800a0bb 	.word	0x0800a0bb
 8008f24:	0800a0cc 	.word	0x0800a0cc

08008f28 <_calloc_r>:
 8008f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f2a:	fba1 2402 	umull	r2, r4, r1, r2
 8008f2e:	b94c      	cbnz	r4, 8008f44 <_calloc_r+0x1c>
 8008f30:	4611      	mov	r1, r2
 8008f32:	9201      	str	r2, [sp, #4]
 8008f34:	f000 f87a 	bl	800902c <_malloc_r>
 8008f38:	9a01      	ldr	r2, [sp, #4]
 8008f3a:	4605      	mov	r5, r0
 8008f3c:	b930      	cbnz	r0, 8008f4c <_calloc_r+0x24>
 8008f3e:	4628      	mov	r0, r5
 8008f40:	b003      	add	sp, #12
 8008f42:	bd30      	pop	{r4, r5, pc}
 8008f44:	220c      	movs	r2, #12
 8008f46:	6002      	str	r2, [r0, #0]
 8008f48:	2500      	movs	r5, #0
 8008f4a:	e7f8      	b.n	8008f3e <_calloc_r+0x16>
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	f7fe f9e5 	bl	800731c <memset>
 8008f52:	e7f4      	b.n	8008f3e <_calloc_r+0x16>

08008f54 <_free_r>:
 8008f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f56:	2900      	cmp	r1, #0
 8008f58:	d044      	beq.n	8008fe4 <_free_r+0x90>
 8008f5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f5e:	9001      	str	r0, [sp, #4]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f1a1 0404 	sub.w	r4, r1, #4
 8008f66:	bfb8      	it	lt
 8008f68:	18e4      	addlt	r4, r4, r3
 8008f6a:	f000 fa9b 	bl	80094a4 <__malloc_lock>
 8008f6e:	4a1e      	ldr	r2, [pc, #120]	; (8008fe8 <_free_r+0x94>)
 8008f70:	9801      	ldr	r0, [sp, #4]
 8008f72:	6813      	ldr	r3, [r2, #0]
 8008f74:	b933      	cbnz	r3, 8008f84 <_free_r+0x30>
 8008f76:	6063      	str	r3, [r4, #4]
 8008f78:	6014      	str	r4, [r2, #0]
 8008f7a:	b003      	add	sp, #12
 8008f7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f80:	f000 ba96 	b.w	80094b0 <__malloc_unlock>
 8008f84:	42a3      	cmp	r3, r4
 8008f86:	d908      	bls.n	8008f9a <_free_r+0x46>
 8008f88:	6825      	ldr	r5, [r4, #0]
 8008f8a:	1961      	adds	r1, r4, r5
 8008f8c:	428b      	cmp	r3, r1
 8008f8e:	bf01      	itttt	eq
 8008f90:	6819      	ldreq	r1, [r3, #0]
 8008f92:	685b      	ldreq	r3, [r3, #4]
 8008f94:	1949      	addeq	r1, r1, r5
 8008f96:	6021      	streq	r1, [r4, #0]
 8008f98:	e7ed      	b.n	8008f76 <_free_r+0x22>
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	b10b      	cbz	r3, 8008fa4 <_free_r+0x50>
 8008fa0:	42a3      	cmp	r3, r4
 8008fa2:	d9fa      	bls.n	8008f9a <_free_r+0x46>
 8008fa4:	6811      	ldr	r1, [r2, #0]
 8008fa6:	1855      	adds	r5, r2, r1
 8008fa8:	42a5      	cmp	r5, r4
 8008faa:	d10b      	bne.n	8008fc4 <_free_r+0x70>
 8008fac:	6824      	ldr	r4, [r4, #0]
 8008fae:	4421      	add	r1, r4
 8008fb0:	1854      	adds	r4, r2, r1
 8008fb2:	42a3      	cmp	r3, r4
 8008fb4:	6011      	str	r1, [r2, #0]
 8008fb6:	d1e0      	bne.n	8008f7a <_free_r+0x26>
 8008fb8:	681c      	ldr	r4, [r3, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	6053      	str	r3, [r2, #4]
 8008fbe:	4421      	add	r1, r4
 8008fc0:	6011      	str	r1, [r2, #0]
 8008fc2:	e7da      	b.n	8008f7a <_free_r+0x26>
 8008fc4:	d902      	bls.n	8008fcc <_free_r+0x78>
 8008fc6:	230c      	movs	r3, #12
 8008fc8:	6003      	str	r3, [r0, #0]
 8008fca:	e7d6      	b.n	8008f7a <_free_r+0x26>
 8008fcc:	6825      	ldr	r5, [r4, #0]
 8008fce:	1961      	adds	r1, r4, r5
 8008fd0:	428b      	cmp	r3, r1
 8008fd2:	bf04      	itt	eq
 8008fd4:	6819      	ldreq	r1, [r3, #0]
 8008fd6:	685b      	ldreq	r3, [r3, #4]
 8008fd8:	6063      	str	r3, [r4, #4]
 8008fda:	bf04      	itt	eq
 8008fdc:	1949      	addeq	r1, r1, r5
 8008fde:	6021      	streq	r1, [r4, #0]
 8008fe0:	6054      	str	r4, [r2, #4]
 8008fe2:	e7ca      	b.n	8008f7a <_free_r+0x26>
 8008fe4:	b003      	add	sp, #12
 8008fe6:	bd30      	pop	{r4, r5, pc}
 8008fe8:	240002f8 	.word	0x240002f8

08008fec <sbrk_aligned>:
 8008fec:	b570      	push	{r4, r5, r6, lr}
 8008fee:	4e0e      	ldr	r6, [pc, #56]	; (8009028 <sbrk_aligned+0x3c>)
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	6831      	ldr	r1, [r6, #0]
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	b911      	cbnz	r1, 8008ffe <sbrk_aligned+0x12>
 8008ff8:	f000 f9e8 	bl	80093cc <_sbrk_r>
 8008ffc:	6030      	str	r0, [r6, #0]
 8008ffe:	4621      	mov	r1, r4
 8009000:	4628      	mov	r0, r5
 8009002:	f000 f9e3 	bl	80093cc <_sbrk_r>
 8009006:	1c43      	adds	r3, r0, #1
 8009008:	d00a      	beq.n	8009020 <sbrk_aligned+0x34>
 800900a:	1cc4      	adds	r4, r0, #3
 800900c:	f024 0403 	bic.w	r4, r4, #3
 8009010:	42a0      	cmp	r0, r4
 8009012:	d007      	beq.n	8009024 <sbrk_aligned+0x38>
 8009014:	1a21      	subs	r1, r4, r0
 8009016:	4628      	mov	r0, r5
 8009018:	f000 f9d8 	bl	80093cc <_sbrk_r>
 800901c:	3001      	adds	r0, #1
 800901e:	d101      	bne.n	8009024 <sbrk_aligned+0x38>
 8009020:	f04f 34ff 	mov.w	r4, #4294967295
 8009024:	4620      	mov	r0, r4
 8009026:	bd70      	pop	{r4, r5, r6, pc}
 8009028:	240002fc 	.word	0x240002fc

0800902c <_malloc_r>:
 800902c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009030:	1ccd      	adds	r5, r1, #3
 8009032:	f025 0503 	bic.w	r5, r5, #3
 8009036:	3508      	adds	r5, #8
 8009038:	2d0c      	cmp	r5, #12
 800903a:	bf38      	it	cc
 800903c:	250c      	movcc	r5, #12
 800903e:	2d00      	cmp	r5, #0
 8009040:	4607      	mov	r7, r0
 8009042:	db01      	blt.n	8009048 <_malloc_r+0x1c>
 8009044:	42a9      	cmp	r1, r5
 8009046:	d905      	bls.n	8009054 <_malloc_r+0x28>
 8009048:	230c      	movs	r3, #12
 800904a:	603b      	str	r3, [r7, #0]
 800904c:	2600      	movs	r6, #0
 800904e:	4630      	mov	r0, r6
 8009050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009054:	4e2e      	ldr	r6, [pc, #184]	; (8009110 <_malloc_r+0xe4>)
 8009056:	f000 fa25 	bl	80094a4 <__malloc_lock>
 800905a:	6833      	ldr	r3, [r6, #0]
 800905c:	461c      	mov	r4, r3
 800905e:	bb34      	cbnz	r4, 80090ae <_malloc_r+0x82>
 8009060:	4629      	mov	r1, r5
 8009062:	4638      	mov	r0, r7
 8009064:	f7ff ffc2 	bl	8008fec <sbrk_aligned>
 8009068:	1c43      	adds	r3, r0, #1
 800906a:	4604      	mov	r4, r0
 800906c:	d14d      	bne.n	800910a <_malloc_r+0xde>
 800906e:	6834      	ldr	r4, [r6, #0]
 8009070:	4626      	mov	r6, r4
 8009072:	2e00      	cmp	r6, #0
 8009074:	d140      	bne.n	80090f8 <_malloc_r+0xcc>
 8009076:	6823      	ldr	r3, [r4, #0]
 8009078:	4631      	mov	r1, r6
 800907a:	4638      	mov	r0, r7
 800907c:	eb04 0803 	add.w	r8, r4, r3
 8009080:	f000 f9a4 	bl	80093cc <_sbrk_r>
 8009084:	4580      	cmp	r8, r0
 8009086:	d13a      	bne.n	80090fe <_malloc_r+0xd2>
 8009088:	6821      	ldr	r1, [r4, #0]
 800908a:	3503      	adds	r5, #3
 800908c:	1a6d      	subs	r5, r5, r1
 800908e:	f025 0503 	bic.w	r5, r5, #3
 8009092:	3508      	adds	r5, #8
 8009094:	2d0c      	cmp	r5, #12
 8009096:	bf38      	it	cc
 8009098:	250c      	movcc	r5, #12
 800909a:	4629      	mov	r1, r5
 800909c:	4638      	mov	r0, r7
 800909e:	f7ff ffa5 	bl	8008fec <sbrk_aligned>
 80090a2:	3001      	adds	r0, #1
 80090a4:	d02b      	beq.n	80090fe <_malloc_r+0xd2>
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	442b      	add	r3, r5
 80090aa:	6023      	str	r3, [r4, #0]
 80090ac:	e00e      	b.n	80090cc <_malloc_r+0xa0>
 80090ae:	6822      	ldr	r2, [r4, #0]
 80090b0:	1b52      	subs	r2, r2, r5
 80090b2:	d41e      	bmi.n	80090f2 <_malloc_r+0xc6>
 80090b4:	2a0b      	cmp	r2, #11
 80090b6:	d916      	bls.n	80090e6 <_malloc_r+0xba>
 80090b8:	1961      	adds	r1, r4, r5
 80090ba:	42a3      	cmp	r3, r4
 80090bc:	6025      	str	r5, [r4, #0]
 80090be:	bf18      	it	ne
 80090c0:	6059      	strne	r1, [r3, #4]
 80090c2:	6863      	ldr	r3, [r4, #4]
 80090c4:	bf08      	it	eq
 80090c6:	6031      	streq	r1, [r6, #0]
 80090c8:	5162      	str	r2, [r4, r5]
 80090ca:	604b      	str	r3, [r1, #4]
 80090cc:	4638      	mov	r0, r7
 80090ce:	f104 060b 	add.w	r6, r4, #11
 80090d2:	f000 f9ed 	bl	80094b0 <__malloc_unlock>
 80090d6:	f026 0607 	bic.w	r6, r6, #7
 80090da:	1d23      	adds	r3, r4, #4
 80090dc:	1af2      	subs	r2, r6, r3
 80090de:	d0b6      	beq.n	800904e <_malloc_r+0x22>
 80090e0:	1b9b      	subs	r3, r3, r6
 80090e2:	50a3      	str	r3, [r4, r2]
 80090e4:	e7b3      	b.n	800904e <_malloc_r+0x22>
 80090e6:	6862      	ldr	r2, [r4, #4]
 80090e8:	42a3      	cmp	r3, r4
 80090ea:	bf0c      	ite	eq
 80090ec:	6032      	streq	r2, [r6, #0]
 80090ee:	605a      	strne	r2, [r3, #4]
 80090f0:	e7ec      	b.n	80090cc <_malloc_r+0xa0>
 80090f2:	4623      	mov	r3, r4
 80090f4:	6864      	ldr	r4, [r4, #4]
 80090f6:	e7b2      	b.n	800905e <_malloc_r+0x32>
 80090f8:	4634      	mov	r4, r6
 80090fa:	6876      	ldr	r6, [r6, #4]
 80090fc:	e7b9      	b.n	8009072 <_malloc_r+0x46>
 80090fe:	230c      	movs	r3, #12
 8009100:	603b      	str	r3, [r7, #0]
 8009102:	4638      	mov	r0, r7
 8009104:	f000 f9d4 	bl	80094b0 <__malloc_unlock>
 8009108:	e7a1      	b.n	800904e <_malloc_r+0x22>
 800910a:	6025      	str	r5, [r4, #0]
 800910c:	e7de      	b.n	80090cc <_malloc_r+0xa0>
 800910e:	bf00      	nop
 8009110:	240002f8 	.word	0x240002f8

08009114 <__ssputs_r>:
 8009114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009118:	688e      	ldr	r6, [r1, #8]
 800911a:	429e      	cmp	r6, r3
 800911c:	4682      	mov	sl, r0
 800911e:	460c      	mov	r4, r1
 8009120:	4690      	mov	r8, r2
 8009122:	461f      	mov	r7, r3
 8009124:	d838      	bhi.n	8009198 <__ssputs_r+0x84>
 8009126:	898a      	ldrh	r2, [r1, #12]
 8009128:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800912c:	d032      	beq.n	8009194 <__ssputs_r+0x80>
 800912e:	6825      	ldr	r5, [r4, #0]
 8009130:	6909      	ldr	r1, [r1, #16]
 8009132:	eba5 0901 	sub.w	r9, r5, r1
 8009136:	6965      	ldr	r5, [r4, #20]
 8009138:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800913c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009140:	3301      	adds	r3, #1
 8009142:	444b      	add	r3, r9
 8009144:	106d      	asrs	r5, r5, #1
 8009146:	429d      	cmp	r5, r3
 8009148:	bf38      	it	cc
 800914a:	461d      	movcc	r5, r3
 800914c:	0553      	lsls	r3, r2, #21
 800914e:	d531      	bpl.n	80091b4 <__ssputs_r+0xa0>
 8009150:	4629      	mov	r1, r5
 8009152:	f7ff ff6b 	bl	800902c <_malloc_r>
 8009156:	4606      	mov	r6, r0
 8009158:	b950      	cbnz	r0, 8009170 <__ssputs_r+0x5c>
 800915a:	230c      	movs	r3, #12
 800915c:	f8ca 3000 	str.w	r3, [sl]
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009166:	81a3      	strh	r3, [r4, #12]
 8009168:	f04f 30ff 	mov.w	r0, #4294967295
 800916c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009170:	6921      	ldr	r1, [r4, #16]
 8009172:	464a      	mov	r2, r9
 8009174:	f7ff fb46 	bl	8008804 <memcpy>
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800917e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009182:	81a3      	strh	r3, [r4, #12]
 8009184:	6126      	str	r6, [r4, #16]
 8009186:	6165      	str	r5, [r4, #20]
 8009188:	444e      	add	r6, r9
 800918a:	eba5 0509 	sub.w	r5, r5, r9
 800918e:	6026      	str	r6, [r4, #0]
 8009190:	60a5      	str	r5, [r4, #8]
 8009192:	463e      	mov	r6, r7
 8009194:	42be      	cmp	r6, r7
 8009196:	d900      	bls.n	800919a <__ssputs_r+0x86>
 8009198:	463e      	mov	r6, r7
 800919a:	6820      	ldr	r0, [r4, #0]
 800919c:	4632      	mov	r2, r6
 800919e:	4641      	mov	r1, r8
 80091a0:	f000 f966 	bl	8009470 <memmove>
 80091a4:	68a3      	ldr	r3, [r4, #8]
 80091a6:	1b9b      	subs	r3, r3, r6
 80091a8:	60a3      	str	r3, [r4, #8]
 80091aa:	6823      	ldr	r3, [r4, #0]
 80091ac:	4433      	add	r3, r6
 80091ae:	6023      	str	r3, [r4, #0]
 80091b0:	2000      	movs	r0, #0
 80091b2:	e7db      	b.n	800916c <__ssputs_r+0x58>
 80091b4:	462a      	mov	r2, r5
 80091b6:	f000 f981 	bl	80094bc <_realloc_r>
 80091ba:	4606      	mov	r6, r0
 80091bc:	2800      	cmp	r0, #0
 80091be:	d1e1      	bne.n	8009184 <__ssputs_r+0x70>
 80091c0:	6921      	ldr	r1, [r4, #16]
 80091c2:	4650      	mov	r0, sl
 80091c4:	f7ff fec6 	bl	8008f54 <_free_r>
 80091c8:	e7c7      	b.n	800915a <__ssputs_r+0x46>
	...

080091cc <_svfiprintf_r>:
 80091cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d0:	4698      	mov	r8, r3
 80091d2:	898b      	ldrh	r3, [r1, #12]
 80091d4:	061b      	lsls	r3, r3, #24
 80091d6:	b09d      	sub	sp, #116	; 0x74
 80091d8:	4607      	mov	r7, r0
 80091da:	460d      	mov	r5, r1
 80091dc:	4614      	mov	r4, r2
 80091de:	d50e      	bpl.n	80091fe <_svfiprintf_r+0x32>
 80091e0:	690b      	ldr	r3, [r1, #16]
 80091e2:	b963      	cbnz	r3, 80091fe <_svfiprintf_r+0x32>
 80091e4:	2140      	movs	r1, #64	; 0x40
 80091e6:	f7ff ff21 	bl	800902c <_malloc_r>
 80091ea:	6028      	str	r0, [r5, #0]
 80091ec:	6128      	str	r0, [r5, #16]
 80091ee:	b920      	cbnz	r0, 80091fa <_svfiprintf_r+0x2e>
 80091f0:	230c      	movs	r3, #12
 80091f2:	603b      	str	r3, [r7, #0]
 80091f4:	f04f 30ff 	mov.w	r0, #4294967295
 80091f8:	e0d1      	b.n	800939e <_svfiprintf_r+0x1d2>
 80091fa:	2340      	movs	r3, #64	; 0x40
 80091fc:	616b      	str	r3, [r5, #20]
 80091fe:	2300      	movs	r3, #0
 8009200:	9309      	str	r3, [sp, #36]	; 0x24
 8009202:	2320      	movs	r3, #32
 8009204:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009208:	f8cd 800c 	str.w	r8, [sp, #12]
 800920c:	2330      	movs	r3, #48	; 0x30
 800920e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80093b8 <_svfiprintf_r+0x1ec>
 8009212:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009216:	f04f 0901 	mov.w	r9, #1
 800921a:	4623      	mov	r3, r4
 800921c:	469a      	mov	sl, r3
 800921e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009222:	b10a      	cbz	r2, 8009228 <_svfiprintf_r+0x5c>
 8009224:	2a25      	cmp	r2, #37	; 0x25
 8009226:	d1f9      	bne.n	800921c <_svfiprintf_r+0x50>
 8009228:	ebba 0b04 	subs.w	fp, sl, r4
 800922c:	d00b      	beq.n	8009246 <_svfiprintf_r+0x7a>
 800922e:	465b      	mov	r3, fp
 8009230:	4622      	mov	r2, r4
 8009232:	4629      	mov	r1, r5
 8009234:	4638      	mov	r0, r7
 8009236:	f7ff ff6d 	bl	8009114 <__ssputs_r>
 800923a:	3001      	adds	r0, #1
 800923c:	f000 80aa 	beq.w	8009394 <_svfiprintf_r+0x1c8>
 8009240:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009242:	445a      	add	r2, fp
 8009244:	9209      	str	r2, [sp, #36]	; 0x24
 8009246:	f89a 3000 	ldrb.w	r3, [sl]
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 80a2 	beq.w	8009394 <_svfiprintf_r+0x1c8>
 8009250:	2300      	movs	r3, #0
 8009252:	f04f 32ff 	mov.w	r2, #4294967295
 8009256:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800925a:	f10a 0a01 	add.w	sl, sl, #1
 800925e:	9304      	str	r3, [sp, #16]
 8009260:	9307      	str	r3, [sp, #28]
 8009262:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009266:	931a      	str	r3, [sp, #104]	; 0x68
 8009268:	4654      	mov	r4, sl
 800926a:	2205      	movs	r2, #5
 800926c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009270:	4851      	ldr	r0, [pc, #324]	; (80093b8 <_svfiprintf_r+0x1ec>)
 8009272:	f7f7 f845 	bl	8000300 <memchr>
 8009276:	9a04      	ldr	r2, [sp, #16]
 8009278:	b9d8      	cbnz	r0, 80092b2 <_svfiprintf_r+0xe6>
 800927a:	06d0      	lsls	r0, r2, #27
 800927c:	bf44      	itt	mi
 800927e:	2320      	movmi	r3, #32
 8009280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009284:	0711      	lsls	r1, r2, #28
 8009286:	bf44      	itt	mi
 8009288:	232b      	movmi	r3, #43	; 0x2b
 800928a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800928e:	f89a 3000 	ldrb.w	r3, [sl]
 8009292:	2b2a      	cmp	r3, #42	; 0x2a
 8009294:	d015      	beq.n	80092c2 <_svfiprintf_r+0xf6>
 8009296:	9a07      	ldr	r2, [sp, #28]
 8009298:	4654      	mov	r4, sl
 800929a:	2000      	movs	r0, #0
 800929c:	f04f 0c0a 	mov.w	ip, #10
 80092a0:	4621      	mov	r1, r4
 80092a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092a6:	3b30      	subs	r3, #48	; 0x30
 80092a8:	2b09      	cmp	r3, #9
 80092aa:	d94e      	bls.n	800934a <_svfiprintf_r+0x17e>
 80092ac:	b1b0      	cbz	r0, 80092dc <_svfiprintf_r+0x110>
 80092ae:	9207      	str	r2, [sp, #28]
 80092b0:	e014      	b.n	80092dc <_svfiprintf_r+0x110>
 80092b2:	eba0 0308 	sub.w	r3, r0, r8
 80092b6:	fa09 f303 	lsl.w	r3, r9, r3
 80092ba:	4313      	orrs	r3, r2
 80092bc:	9304      	str	r3, [sp, #16]
 80092be:	46a2      	mov	sl, r4
 80092c0:	e7d2      	b.n	8009268 <_svfiprintf_r+0x9c>
 80092c2:	9b03      	ldr	r3, [sp, #12]
 80092c4:	1d19      	adds	r1, r3, #4
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	9103      	str	r1, [sp, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	bfbb      	ittet	lt
 80092ce:	425b      	neglt	r3, r3
 80092d0:	f042 0202 	orrlt.w	r2, r2, #2
 80092d4:	9307      	strge	r3, [sp, #28]
 80092d6:	9307      	strlt	r3, [sp, #28]
 80092d8:	bfb8      	it	lt
 80092da:	9204      	strlt	r2, [sp, #16]
 80092dc:	7823      	ldrb	r3, [r4, #0]
 80092de:	2b2e      	cmp	r3, #46	; 0x2e
 80092e0:	d10c      	bne.n	80092fc <_svfiprintf_r+0x130>
 80092e2:	7863      	ldrb	r3, [r4, #1]
 80092e4:	2b2a      	cmp	r3, #42	; 0x2a
 80092e6:	d135      	bne.n	8009354 <_svfiprintf_r+0x188>
 80092e8:	9b03      	ldr	r3, [sp, #12]
 80092ea:	1d1a      	adds	r2, r3, #4
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	9203      	str	r2, [sp, #12]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	bfb8      	it	lt
 80092f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80092f8:	3402      	adds	r4, #2
 80092fa:	9305      	str	r3, [sp, #20]
 80092fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80093c8 <_svfiprintf_r+0x1fc>
 8009300:	7821      	ldrb	r1, [r4, #0]
 8009302:	2203      	movs	r2, #3
 8009304:	4650      	mov	r0, sl
 8009306:	f7f6 fffb 	bl	8000300 <memchr>
 800930a:	b140      	cbz	r0, 800931e <_svfiprintf_r+0x152>
 800930c:	2340      	movs	r3, #64	; 0x40
 800930e:	eba0 000a 	sub.w	r0, r0, sl
 8009312:	fa03 f000 	lsl.w	r0, r3, r0
 8009316:	9b04      	ldr	r3, [sp, #16]
 8009318:	4303      	orrs	r3, r0
 800931a:	3401      	adds	r4, #1
 800931c:	9304      	str	r3, [sp, #16]
 800931e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009322:	4826      	ldr	r0, [pc, #152]	; (80093bc <_svfiprintf_r+0x1f0>)
 8009324:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009328:	2206      	movs	r2, #6
 800932a:	f7f6 ffe9 	bl	8000300 <memchr>
 800932e:	2800      	cmp	r0, #0
 8009330:	d038      	beq.n	80093a4 <_svfiprintf_r+0x1d8>
 8009332:	4b23      	ldr	r3, [pc, #140]	; (80093c0 <_svfiprintf_r+0x1f4>)
 8009334:	bb1b      	cbnz	r3, 800937e <_svfiprintf_r+0x1b2>
 8009336:	9b03      	ldr	r3, [sp, #12]
 8009338:	3307      	adds	r3, #7
 800933a:	f023 0307 	bic.w	r3, r3, #7
 800933e:	3308      	adds	r3, #8
 8009340:	9303      	str	r3, [sp, #12]
 8009342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009344:	4433      	add	r3, r6
 8009346:	9309      	str	r3, [sp, #36]	; 0x24
 8009348:	e767      	b.n	800921a <_svfiprintf_r+0x4e>
 800934a:	fb0c 3202 	mla	r2, ip, r2, r3
 800934e:	460c      	mov	r4, r1
 8009350:	2001      	movs	r0, #1
 8009352:	e7a5      	b.n	80092a0 <_svfiprintf_r+0xd4>
 8009354:	2300      	movs	r3, #0
 8009356:	3401      	adds	r4, #1
 8009358:	9305      	str	r3, [sp, #20]
 800935a:	4619      	mov	r1, r3
 800935c:	f04f 0c0a 	mov.w	ip, #10
 8009360:	4620      	mov	r0, r4
 8009362:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009366:	3a30      	subs	r2, #48	; 0x30
 8009368:	2a09      	cmp	r2, #9
 800936a:	d903      	bls.n	8009374 <_svfiprintf_r+0x1a8>
 800936c:	2b00      	cmp	r3, #0
 800936e:	d0c5      	beq.n	80092fc <_svfiprintf_r+0x130>
 8009370:	9105      	str	r1, [sp, #20]
 8009372:	e7c3      	b.n	80092fc <_svfiprintf_r+0x130>
 8009374:	fb0c 2101 	mla	r1, ip, r1, r2
 8009378:	4604      	mov	r4, r0
 800937a:	2301      	movs	r3, #1
 800937c:	e7f0      	b.n	8009360 <_svfiprintf_r+0x194>
 800937e:	ab03      	add	r3, sp, #12
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	462a      	mov	r2, r5
 8009384:	4b0f      	ldr	r3, [pc, #60]	; (80093c4 <_svfiprintf_r+0x1f8>)
 8009386:	a904      	add	r1, sp, #16
 8009388:	4638      	mov	r0, r7
 800938a:	f7fe f861 	bl	8007450 <_printf_float>
 800938e:	1c42      	adds	r2, r0, #1
 8009390:	4606      	mov	r6, r0
 8009392:	d1d6      	bne.n	8009342 <_svfiprintf_r+0x176>
 8009394:	89ab      	ldrh	r3, [r5, #12]
 8009396:	065b      	lsls	r3, r3, #25
 8009398:	f53f af2c 	bmi.w	80091f4 <_svfiprintf_r+0x28>
 800939c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800939e:	b01d      	add	sp, #116	; 0x74
 80093a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a4:	ab03      	add	r3, sp, #12
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	462a      	mov	r2, r5
 80093aa:	4b06      	ldr	r3, [pc, #24]	; (80093c4 <_svfiprintf_r+0x1f8>)
 80093ac:	a904      	add	r1, sp, #16
 80093ae:	4638      	mov	r0, r7
 80093b0:	f7fe fada 	bl	8007968 <_printf_i>
 80093b4:	e7eb      	b.n	800938e <_svfiprintf_r+0x1c2>
 80093b6:	bf00      	nop
 80093b8:	0800a224 	.word	0x0800a224
 80093bc:	0800a22e 	.word	0x0800a22e
 80093c0:	08007451 	.word	0x08007451
 80093c4:	08009115 	.word	0x08009115
 80093c8:	0800a22a 	.word	0x0800a22a

080093cc <_sbrk_r>:
 80093cc:	b538      	push	{r3, r4, r5, lr}
 80093ce:	4d06      	ldr	r5, [pc, #24]	; (80093e8 <_sbrk_r+0x1c>)
 80093d0:	2300      	movs	r3, #0
 80093d2:	4604      	mov	r4, r0
 80093d4:	4608      	mov	r0, r1
 80093d6:	602b      	str	r3, [r5, #0]
 80093d8:	f7f7 fecc 	bl	8001174 <_sbrk>
 80093dc:	1c43      	adds	r3, r0, #1
 80093de:	d102      	bne.n	80093e6 <_sbrk_r+0x1a>
 80093e0:	682b      	ldr	r3, [r5, #0]
 80093e2:	b103      	cbz	r3, 80093e6 <_sbrk_r+0x1a>
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	bd38      	pop	{r3, r4, r5, pc}
 80093e8:	24000300 	.word	0x24000300

080093ec <__assert_func>:
 80093ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093ee:	4614      	mov	r4, r2
 80093f0:	461a      	mov	r2, r3
 80093f2:	4b09      	ldr	r3, [pc, #36]	; (8009418 <__assert_func+0x2c>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4605      	mov	r5, r0
 80093f8:	68d8      	ldr	r0, [r3, #12]
 80093fa:	b14c      	cbz	r4, 8009410 <__assert_func+0x24>
 80093fc:	4b07      	ldr	r3, [pc, #28]	; (800941c <__assert_func+0x30>)
 80093fe:	9100      	str	r1, [sp, #0]
 8009400:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009404:	4906      	ldr	r1, [pc, #24]	; (8009420 <__assert_func+0x34>)
 8009406:	462b      	mov	r3, r5
 8009408:	f000 f80e 	bl	8009428 <fiprintf>
 800940c:	f000 faac 	bl	8009968 <abort>
 8009410:	4b04      	ldr	r3, [pc, #16]	; (8009424 <__assert_func+0x38>)
 8009412:	461c      	mov	r4, r3
 8009414:	e7f3      	b.n	80093fe <__assert_func+0x12>
 8009416:	bf00      	nop
 8009418:	24000010 	.word	0x24000010
 800941c:	0800a235 	.word	0x0800a235
 8009420:	0800a242 	.word	0x0800a242
 8009424:	0800a270 	.word	0x0800a270

08009428 <fiprintf>:
 8009428:	b40e      	push	{r1, r2, r3}
 800942a:	b503      	push	{r0, r1, lr}
 800942c:	4601      	mov	r1, r0
 800942e:	ab03      	add	r3, sp, #12
 8009430:	4805      	ldr	r0, [pc, #20]	; (8009448 <fiprintf+0x20>)
 8009432:	f853 2b04 	ldr.w	r2, [r3], #4
 8009436:	6800      	ldr	r0, [r0, #0]
 8009438:	9301      	str	r3, [sp, #4]
 800943a:	f000 f897 	bl	800956c <_vfiprintf_r>
 800943e:	b002      	add	sp, #8
 8009440:	f85d eb04 	ldr.w	lr, [sp], #4
 8009444:	b003      	add	sp, #12
 8009446:	4770      	bx	lr
 8009448:	24000010 	.word	0x24000010

0800944c <__ascii_mbtowc>:
 800944c:	b082      	sub	sp, #8
 800944e:	b901      	cbnz	r1, 8009452 <__ascii_mbtowc+0x6>
 8009450:	a901      	add	r1, sp, #4
 8009452:	b142      	cbz	r2, 8009466 <__ascii_mbtowc+0x1a>
 8009454:	b14b      	cbz	r3, 800946a <__ascii_mbtowc+0x1e>
 8009456:	7813      	ldrb	r3, [r2, #0]
 8009458:	600b      	str	r3, [r1, #0]
 800945a:	7812      	ldrb	r2, [r2, #0]
 800945c:	1e10      	subs	r0, r2, #0
 800945e:	bf18      	it	ne
 8009460:	2001      	movne	r0, #1
 8009462:	b002      	add	sp, #8
 8009464:	4770      	bx	lr
 8009466:	4610      	mov	r0, r2
 8009468:	e7fb      	b.n	8009462 <__ascii_mbtowc+0x16>
 800946a:	f06f 0001 	mvn.w	r0, #1
 800946e:	e7f8      	b.n	8009462 <__ascii_mbtowc+0x16>

08009470 <memmove>:
 8009470:	4288      	cmp	r0, r1
 8009472:	b510      	push	{r4, lr}
 8009474:	eb01 0402 	add.w	r4, r1, r2
 8009478:	d902      	bls.n	8009480 <memmove+0x10>
 800947a:	4284      	cmp	r4, r0
 800947c:	4623      	mov	r3, r4
 800947e:	d807      	bhi.n	8009490 <memmove+0x20>
 8009480:	1e43      	subs	r3, r0, #1
 8009482:	42a1      	cmp	r1, r4
 8009484:	d008      	beq.n	8009498 <memmove+0x28>
 8009486:	f811 2b01 	ldrb.w	r2, [r1], #1
 800948a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800948e:	e7f8      	b.n	8009482 <memmove+0x12>
 8009490:	4402      	add	r2, r0
 8009492:	4601      	mov	r1, r0
 8009494:	428a      	cmp	r2, r1
 8009496:	d100      	bne.n	800949a <memmove+0x2a>
 8009498:	bd10      	pop	{r4, pc}
 800949a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800949e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094a2:	e7f7      	b.n	8009494 <memmove+0x24>

080094a4 <__malloc_lock>:
 80094a4:	4801      	ldr	r0, [pc, #4]	; (80094ac <__malloc_lock+0x8>)
 80094a6:	f000 bc1f 	b.w	8009ce8 <__retarget_lock_acquire_recursive>
 80094aa:	bf00      	nop
 80094ac:	24000304 	.word	0x24000304

080094b0 <__malloc_unlock>:
 80094b0:	4801      	ldr	r0, [pc, #4]	; (80094b8 <__malloc_unlock+0x8>)
 80094b2:	f000 bc1a 	b.w	8009cea <__retarget_lock_release_recursive>
 80094b6:	bf00      	nop
 80094b8:	24000304 	.word	0x24000304

080094bc <_realloc_r>:
 80094bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c0:	4680      	mov	r8, r0
 80094c2:	4614      	mov	r4, r2
 80094c4:	460e      	mov	r6, r1
 80094c6:	b921      	cbnz	r1, 80094d2 <_realloc_r+0x16>
 80094c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094cc:	4611      	mov	r1, r2
 80094ce:	f7ff bdad 	b.w	800902c <_malloc_r>
 80094d2:	b92a      	cbnz	r2, 80094e0 <_realloc_r+0x24>
 80094d4:	f7ff fd3e 	bl	8008f54 <_free_r>
 80094d8:	4625      	mov	r5, r4
 80094da:	4628      	mov	r0, r5
 80094dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e0:	f000 fc6a 	bl	8009db8 <_malloc_usable_size_r>
 80094e4:	4284      	cmp	r4, r0
 80094e6:	4607      	mov	r7, r0
 80094e8:	d802      	bhi.n	80094f0 <_realloc_r+0x34>
 80094ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094ee:	d812      	bhi.n	8009516 <_realloc_r+0x5a>
 80094f0:	4621      	mov	r1, r4
 80094f2:	4640      	mov	r0, r8
 80094f4:	f7ff fd9a 	bl	800902c <_malloc_r>
 80094f8:	4605      	mov	r5, r0
 80094fa:	2800      	cmp	r0, #0
 80094fc:	d0ed      	beq.n	80094da <_realloc_r+0x1e>
 80094fe:	42bc      	cmp	r4, r7
 8009500:	4622      	mov	r2, r4
 8009502:	4631      	mov	r1, r6
 8009504:	bf28      	it	cs
 8009506:	463a      	movcs	r2, r7
 8009508:	f7ff f97c 	bl	8008804 <memcpy>
 800950c:	4631      	mov	r1, r6
 800950e:	4640      	mov	r0, r8
 8009510:	f7ff fd20 	bl	8008f54 <_free_r>
 8009514:	e7e1      	b.n	80094da <_realloc_r+0x1e>
 8009516:	4635      	mov	r5, r6
 8009518:	e7df      	b.n	80094da <_realloc_r+0x1e>

0800951a <__sfputc_r>:
 800951a:	6893      	ldr	r3, [r2, #8]
 800951c:	3b01      	subs	r3, #1
 800951e:	2b00      	cmp	r3, #0
 8009520:	b410      	push	{r4}
 8009522:	6093      	str	r3, [r2, #8]
 8009524:	da08      	bge.n	8009538 <__sfputc_r+0x1e>
 8009526:	6994      	ldr	r4, [r2, #24]
 8009528:	42a3      	cmp	r3, r4
 800952a:	db01      	blt.n	8009530 <__sfputc_r+0x16>
 800952c:	290a      	cmp	r1, #10
 800952e:	d103      	bne.n	8009538 <__sfputc_r+0x1e>
 8009530:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009534:	f000 b94a 	b.w	80097cc <__swbuf_r>
 8009538:	6813      	ldr	r3, [r2, #0]
 800953a:	1c58      	adds	r0, r3, #1
 800953c:	6010      	str	r0, [r2, #0]
 800953e:	7019      	strb	r1, [r3, #0]
 8009540:	4608      	mov	r0, r1
 8009542:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009546:	4770      	bx	lr

08009548 <__sfputs_r>:
 8009548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954a:	4606      	mov	r6, r0
 800954c:	460f      	mov	r7, r1
 800954e:	4614      	mov	r4, r2
 8009550:	18d5      	adds	r5, r2, r3
 8009552:	42ac      	cmp	r4, r5
 8009554:	d101      	bne.n	800955a <__sfputs_r+0x12>
 8009556:	2000      	movs	r0, #0
 8009558:	e007      	b.n	800956a <__sfputs_r+0x22>
 800955a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800955e:	463a      	mov	r2, r7
 8009560:	4630      	mov	r0, r6
 8009562:	f7ff ffda 	bl	800951a <__sfputc_r>
 8009566:	1c43      	adds	r3, r0, #1
 8009568:	d1f3      	bne.n	8009552 <__sfputs_r+0xa>
 800956a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800956c <_vfiprintf_r>:
 800956c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009570:	460d      	mov	r5, r1
 8009572:	b09d      	sub	sp, #116	; 0x74
 8009574:	4614      	mov	r4, r2
 8009576:	4698      	mov	r8, r3
 8009578:	4606      	mov	r6, r0
 800957a:	b118      	cbz	r0, 8009584 <_vfiprintf_r+0x18>
 800957c:	6983      	ldr	r3, [r0, #24]
 800957e:	b90b      	cbnz	r3, 8009584 <_vfiprintf_r+0x18>
 8009580:	f000 fb14 	bl	8009bac <__sinit>
 8009584:	4b89      	ldr	r3, [pc, #548]	; (80097ac <_vfiprintf_r+0x240>)
 8009586:	429d      	cmp	r5, r3
 8009588:	d11b      	bne.n	80095c2 <_vfiprintf_r+0x56>
 800958a:	6875      	ldr	r5, [r6, #4]
 800958c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800958e:	07d9      	lsls	r1, r3, #31
 8009590:	d405      	bmi.n	800959e <_vfiprintf_r+0x32>
 8009592:	89ab      	ldrh	r3, [r5, #12]
 8009594:	059a      	lsls	r2, r3, #22
 8009596:	d402      	bmi.n	800959e <_vfiprintf_r+0x32>
 8009598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800959a:	f000 fba5 	bl	8009ce8 <__retarget_lock_acquire_recursive>
 800959e:	89ab      	ldrh	r3, [r5, #12]
 80095a0:	071b      	lsls	r3, r3, #28
 80095a2:	d501      	bpl.n	80095a8 <_vfiprintf_r+0x3c>
 80095a4:	692b      	ldr	r3, [r5, #16]
 80095a6:	b9eb      	cbnz	r3, 80095e4 <_vfiprintf_r+0x78>
 80095a8:	4629      	mov	r1, r5
 80095aa:	4630      	mov	r0, r6
 80095ac:	f000 f96e 	bl	800988c <__swsetup_r>
 80095b0:	b1c0      	cbz	r0, 80095e4 <_vfiprintf_r+0x78>
 80095b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095b4:	07dc      	lsls	r4, r3, #31
 80095b6:	d50e      	bpl.n	80095d6 <_vfiprintf_r+0x6a>
 80095b8:	f04f 30ff 	mov.w	r0, #4294967295
 80095bc:	b01d      	add	sp, #116	; 0x74
 80095be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c2:	4b7b      	ldr	r3, [pc, #492]	; (80097b0 <_vfiprintf_r+0x244>)
 80095c4:	429d      	cmp	r5, r3
 80095c6:	d101      	bne.n	80095cc <_vfiprintf_r+0x60>
 80095c8:	68b5      	ldr	r5, [r6, #8]
 80095ca:	e7df      	b.n	800958c <_vfiprintf_r+0x20>
 80095cc:	4b79      	ldr	r3, [pc, #484]	; (80097b4 <_vfiprintf_r+0x248>)
 80095ce:	429d      	cmp	r5, r3
 80095d0:	bf08      	it	eq
 80095d2:	68f5      	ldreq	r5, [r6, #12]
 80095d4:	e7da      	b.n	800958c <_vfiprintf_r+0x20>
 80095d6:	89ab      	ldrh	r3, [r5, #12]
 80095d8:	0598      	lsls	r0, r3, #22
 80095da:	d4ed      	bmi.n	80095b8 <_vfiprintf_r+0x4c>
 80095dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095de:	f000 fb84 	bl	8009cea <__retarget_lock_release_recursive>
 80095e2:	e7e9      	b.n	80095b8 <_vfiprintf_r+0x4c>
 80095e4:	2300      	movs	r3, #0
 80095e6:	9309      	str	r3, [sp, #36]	; 0x24
 80095e8:	2320      	movs	r3, #32
 80095ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80095f2:	2330      	movs	r3, #48	; 0x30
 80095f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80097b8 <_vfiprintf_r+0x24c>
 80095f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095fc:	f04f 0901 	mov.w	r9, #1
 8009600:	4623      	mov	r3, r4
 8009602:	469a      	mov	sl, r3
 8009604:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009608:	b10a      	cbz	r2, 800960e <_vfiprintf_r+0xa2>
 800960a:	2a25      	cmp	r2, #37	; 0x25
 800960c:	d1f9      	bne.n	8009602 <_vfiprintf_r+0x96>
 800960e:	ebba 0b04 	subs.w	fp, sl, r4
 8009612:	d00b      	beq.n	800962c <_vfiprintf_r+0xc0>
 8009614:	465b      	mov	r3, fp
 8009616:	4622      	mov	r2, r4
 8009618:	4629      	mov	r1, r5
 800961a:	4630      	mov	r0, r6
 800961c:	f7ff ff94 	bl	8009548 <__sfputs_r>
 8009620:	3001      	adds	r0, #1
 8009622:	f000 80aa 	beq.w	800977a <_vfiprintf_r+0x20e>
 8009626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009628:	445a      	add	r2, fp
 800962a:	9209      	str	r2, [sp, #36]	; 0x24
 800962c:	f89a 3000 	ldrb.w	r3, [sl]
 8009630:	2b00      	cmp	r3, #0
 8009632:	f000 80a2 	beq.w	800977a <_vfiprintf_r+0x20e>
 8009636:	2300      	movs	r3, #0
 8009638:	f04f 32ff 	mov.w	r2, #4294967295
 800963c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009640:	f10a 0a01 	add.w	sl, sl, #1
 8009644:	9304      	str	r3, [sp, #16]
 8009646:	9307      	str	r3, [sp, #28]
 8009648:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800964c:	931a      	str	r3, [sp, #104]	; 0x68
 800964e:	4654      	mov	r4, sl
 8009650:	2205      	movs	r2, #5
 8009652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009656:	4858      	ldr	r0, [pc, #352]	; (80097b8 <_vfiprintf_r+0x24c>)
 8009658:	f7f6 fe52 	bl	8000300 <memchr>
 800965c:	9a04      	ldr	r2, [sp, #16]
 800965e:	b9d8      	cbnz	r0, 8009698 <_vfiprintf_r+0x12c>
 8009660:	06d1      	lsls	r1, r2, #27
 8009662:	bf44      	itt	mi
 8009664:	2320      	movmi	r3, #32
 8009666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800966a:	0713      	lsls	r3, r2, #28
 800966c:	bf44      	itt	mi
 800966e:	232b      	movmi	r3, #43	; 0x2b
 8009670:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009674:	f89a 3000 	ldrb.w	r3, [sl]
 8009678:	2b2a      	cmp	r3, #42	; 0x2a
 800967a:	d015      	beq.n	80096a8 <_vfiprintf_r+0x13c>
 800967c:	9a07      	ldr	r2, [sp, #28]
 800967e:	4654      	mov	r4, sl
 8009680:	2000      	movs	r0, #0
 8009682:	f04f 0c0a 	mov.w	ip, #10
 8009686:	4621      	mov	r1, r4
 8009688:	f811 3b01 	ldrb.w	r3, [r1], #1
 800968c:	3b30      	subs	r3, #48	; 0x30
 800968e:	2b09      	cmp	r3, #9
 8009690:	d94e      	bls.n	8009730 <_vfiprintf_r+0x1c4>
 8009692:	b1b0      	cbz	r0, 80096c2 <_vfiprintf_r+0x156>
 8009694:	9207      	str	r2, [sp, #28]
 8009696:	e014      	b.n	80096c2 <_vfiprintf_r+0x156>
 8009698:	eba0 0308 	sub.w	r3, r0, r8
 800969c:	fa09 f303 	lsl.w	r3, r9, r3
 80096a0:	4313      	orrs	r3, r2
 80096a2:	9304      	str	r3, [sp, #16]
 80096a4:	46a2      	mov	sl, r4
 80096a6:	e7d2      	b.n	800964e <_vfiprintf_r+0xe2>
 80096a8:	9b03      	ldr	r3, [sp, #12]
 80096aa:	1d19      	adds	r1, r3, #4
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	9103      	str	r1, [sp, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	bfbb      	ittet	lt
 80096b4:	425b      	neglt	r3, r3
 80096b6:	f042 0202 	orrlt.w	r2, r2, #2
 80096ba:	9307      	strge	r3, [sp, #28]
 80096bc:	9307      	strlt	r3, [sp, #28]
 80096be:	bfb8      	it	lt
 80096c0:	9204      	strlt	r2, [sp, #16]
 80096c2:	7823      	ldrb	r3, [r4, #0]
 80096c4:	2b2e      	cmp	r3, #46	; 0x2e
 80096c6:	d10c      	bne.n	80096e2 <_vfiprintf_r+0x176>
 80096c8:	7863      	ldrb	r3, [r4, #1]
 80096ca:	2b2a      	cmp	r3, #42	; 0x2a
 80096cc:	d135      	bne.n	800973a <_vfiprintf_r+0x1ce>
 80096ce:	9b03      	ldr	r3, [sp, #12]
 80096d0:	1d1a      	adds	r2, r3, #4
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	9203      	str	r2, [sp, #12]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	bfb8      	it	lt
 80096da:	f04f 33ff 	movlt.w	r3, #4294967295
 80096de:	3402      	adds	r4, #2
 80096e0:	9305      	str	r3, [sp, #20]
 80096e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80097c8 <_vfiprintf_r+0x25c>
 80096e6:	7821      	ldrb	r1, [r4, #0]
 80096e8:	2203      	movs	r2, #3
 80096ea:	4650      	mov	r0, sl
 80096ec:	f7f6 fe08 	bl	8000300 <memchr>
 80096f0:	b140      	cbz	r0, 8009704 <_vfiprintf_r+0x198>
 80096f2:	2340      	movs	r3, #64	; 0x40
 80096f4:	eba0 000a 	sub.w	r0, r0, sl
 80096f8:	fa03 f000 	lsl.w	r0, r3, r0
 80096fc:	9b04      	ldr	r3, [sp, #16]
 80096fe:	4303      	orrs	r3, r0
 8009700:	3401      	adds	r4, #1
 8009702:	9304      	str	r3, [sp, #16]
 8009704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009708:	482c      	ldr	r0, [pc, #176]	; (80097bc <_vfiprintf_r+0x250>)
 800970a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800970e:	2206      	movs	r2, #6
 8009710:	f7f6 fdf6 	bl	8000300 <memchr>
 8009714:	2800      	cmp	r0, #0
 8009716:	d03f      	beq.n	8009798 <_vfiprintf_r+0x22c>
 8009718:	4b29      	ldr	r3, [pc, #164]	; (80097c0 <_vfiprintf_r+0x254>)
 800971a:	bb1b      	cbnz	r3, 8009764 <_vfiprintf_r+0x1f8>
 800971c:	9b03      	ldr	r3, [sp, #12]
 800971e:	3307      	adds	r3, #7
 8009720:	f023 0307 	bic.w	r3, r3, #7
 8009724:	3308      	adds	r3, #8
 8009726:	9303      	str	r3, [sp, #12]
 8009728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800972a:	443b      	add	r3, r7
 800972c:	9309      	str	r3, [sp, #36]	; 0x24
 800972e:	e767      	b.n	8009600 <_vfiprintf_r+0x94>
 8009730:	fb0c 3202 	mla	r2, ip, r2, r3
 8009734:	460c      	mov	r4, r1
 8009736:	2001      	movs	r0, #1
 8009738:	e7a5      	b.n	8009686 <_vfiprintf_r+0x11a>
 800973a:	2300      	movs	r3, #0
 800973c:	3401      	adds	r4, #1
 800973e:	9305      	str	r3, [sp, #20]
 8009740:	4619      	mov	r1, r3
 8009742:	f04f 0c0a 	mov.w	ip, #10
 8009746:	4620      	mov	r0, r4
 8009748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800974c:	3a30      	subs	r2, #48	; 0x30
 800974e:	2a09      	cmp	r2, #9
 8009750:	d903      	bls.n	800975a <_vfiprintf_r+0x1ee>
 8009752:	2b00      	cmp	r3, #0
 8009754:	d0c5      	beq.n	80096e2 <_vfiprintf_r+0x176>
 8009756:	9105      	str	r1, [sp, #20]
 8009758:	e7c3      	b.n	80096e2 <_vfiprintf_r+0x176>
 800975a:	fb0c 2101 	mla	r1, ip, r1, r2
 800975e:	4604      	mov	r4, r0
 8009760:	2301      	movs	r3, #1
 8009762:	e7f0      	b.n	8009746 <_vfiprintf_r+0x1da>
 8009764:	ab03      	add	r3, sp, #12
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	462a      	mov	r2, r5
 800976a:	4b16      	ldr	r3, [pc, #88]	; (80097c4 <_vfiprintf_r+0x258>)
 800976c:	a904      	add	r1, sp, #16
 800976e:	4630      	mov	r0, r6
 8009770:	f7fd fe6e 	bl	8007450 <_printf_float>
 8009774:	4607      	mov	r7, r0
 8009776:	1c78      	adds	r0, r7, #1
 8009778:	d1d6      	bne.n	8009728 <_vfiprintf_r+0x1bc>
 800977a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800977c:	07d9      	lsls	r1, r3, #31
 800977e:	d405      	bmi.n	800978c <_vfiprintf_r+0x220>
 8009780:	89ab      	ldrh	r3, [r5, #12]
 8009782:	059a      	lsls	r2, r3, #22
 8009784:	d402      	bmi.n	800978c <_vfiprintf_r+0x220>
 8009786:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009788:	f000 faaf 	bl	8009cea <__retarget_lock_release_recursive>
 800978c:	89ab      	ldrh	r3, [r5, #12]
 800978e:	065b      	lsls	r3, r3, #25
 8009790:	f53f af12 	bmi.w	80095b8 <_vfiprintf_r+0x4c>
 8009794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009796:	e711      	b.n	80095bc <_vfiprintf_r+0x50>
 8009798:	ab03      	add	r3, sp, #12
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	462a      	mov	r2, r5
 800979e:	4b09      	ldr	r3, [pc, #36]	; (80097c4 <_vfiprintf_r+0x258>)
 80097a0:	a904      	add	r1, sp, #16
 80097a2:	4630      	mov	r0, r6
 80097a4:	f7fe f8e0 	bl	8007968 <_printf_i>
 80097a8:	e7e4      	b.n	8009774 <_vfiprintf_r+0x208>
 80097aa:	bf00      	nop
 80097ac:	0800a39c 	.word	0x0800a39c
 80097b0:	0800a3bc 	.word	0x0800a3bc
 80097b4:	0800a37c 	.word	0x0800a37c
 80097b8:	0800a224 	.word	0x0800a224
 80097bc:	0800a22e 	.word	0x0800a22e
 80097c0:	08007451 	.word	0x08007451
 80097c4:	08009549 	.word	0x08009549
 80097c8:	0800a22a 	.word	0x0800a22a

080097cc <__swbuf_r>:
 80097cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ce:	460e      	mov	r6, r1
 80097d0:	4614      	mov	r4, r2
 80097d2:	4605      	mov	r5, r0
 80097d4:	b118      	cbz	r0, 80097de <__swbuf_r+0x12>
 80097d6:	6983      	ldr	r3, [r0, #24]
 80097d8:	b90b      	cbnz	r3, 80097de <__swbuf_r+0x12>
 80097da:	f000 f9e7 	bl	8009bac <__sinit>
 80097de:	4b21      	ldr	r3, [pc, #132]	; (8009864 <__swbuf_r+0x98>)
 80097e0:	429c      	cmp	r4, r3
 80097e2:	d12b      	bne.n	800983c <__swbuf_r+0x70>
 80097e4:	686c      	ldr	r4, [r5, #4]
 80097e6:	69a3      	ldr	r3, [r4, #24]
 80097e8:	60a3      	str	r3, [r4, #8]
 80097ea:	89a3      	ldrh	r3, [r4, #12]
 80097ec:	071a      	lsls	r2, r3, #28
 80097ee:	d52f      	bpl.n	8009850 <__swbuf_r+0x84>
 80097f0:	6923      	ldr	r3, [r4, #16]
 80097f2:	b36b      	cbz	r3, 8009850 <__swbuf_r+0x84>
 80097f4:	6923      	ldr	r3, [r4, #16]
 80097f6:	6820      	ldr	r0, [r4, #0]
 80097f8:	1ac0      	subs	r0, r0, r3
 80097fa:	6963      	ldr	r3, [r4, #20]
 80097fc:	b2f6      	uxtb	r6, r6
 80097fe:	4283      	cmp	r3, r0
 8009800:	4637      	mov	r7, r6
 8009802:	dc04      	bgt.n	800980e <__swbuf_r+0x42>
 8009804:	4621      	mov	r1, r4
 8009806:	4628      	mov	r0, r5
 8009808:	f000 f93c 	bl	8009a84 <_fflush_r>
 800980c:	bb30      	cbnz	r0, 800985c <__swbuf_r+0x90>
 800980e:	68a3      	ldr	r3, [r4, #8]
 8009810:	3b01      	subs	r3, #1
 8009812:	60a3      	str	r3, [r4, #8]
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	1c5a      	adds	r2, r3, #1
 8009818:	6022      	str	r2, [r4, #0]
 800981a:	701e      	strb	r6, [r3, #0]
 800981c:	6963      	ldr	r3, [r4, #20]
 800981e:	3001      	adds	r0, #1
 8009820:	4283      	cmp	r3, r0
 8009822:	d004      	beq.n	800982e <__swbuf_r+0x62>
 8009824:	89a3      	ldrh	r3, [r4, #12]
 8009826:	07db      	lsls	r3, r3, #31
 8009828:	d506      	bpl.n	8009838 <__swbuf_r+0x6c>
 800982a:	2e0a      	cmp	r6, #10
 800982c:	d104      	bne.n	8009838 <__swbuf_r+0x6c>
 800982e:	4621      	mov	r1, r4
 8009830:	4628      	mov	r0, r5
 8009832:	f000 f927 	bl	8009a84 <_fflush_r>
 8009836:	b988      	cbnz	r0, 800985c <__swbuf_r+0x90>
 8009838:	4638      	mov	r0, r7
 800983a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800983c:	4b0a      	ldr	r3, [pc, #40]	; (8009868 <__swbuf_r+0x9c>)
 800983e:	429c      	cmp	r4, r3
 8009840:	d101      	bne.n	8009846 <__swbuf_r+0x7a>
 8009842:	68ac      	ldr	r4, [r5, #8]
 8009844:	e7cf      	b.n	80097e6 <__swbuf_r+0x1a>
 8009846:	4b09      	ldr	r3, [pc, #36]	; (800986c <__swbuf_r+0xa0>)
 8009848:	429c      	cmp	r4, r3
 800984a:	bf08      	it	eq
 800984c:	68ec      	ldreq	r4, [r5, #12]
 800984e:	e7ca      	b.n	80097e6 <__swbuf_r+0x1a>
 8009850:	4621      	mov	r1, r4
 8009852:	4628      	mov	r0, r5
 8009854:	f000 f81a 	bl	800988c <__swsetup_r>
 8009858:	2800      	cmp	r0, #0
 800985a:	d0cb      	beq.n	80097f4 <__swbuf_r+0x28>
 800985c:	f04f 37ff 	mov.w	r7, #4294967295
 8009860:	e7ea      	b.n	8009838 <__swbuf_r+0x6c>
 8009862:	bf00      	nop
 8009864:	0800a39c 	.word	0x0800a39c
 8009868:	0800a3bc 	.word	0x0800a3bc
 800986c:	0800a37c 	.word	0x0800a37c

08009870 <__ascii_wctomb>:
 8009870:	b149      	cbz	r1, 8009886 <__ascii_wctomb+0x16>
 8009872:	2aff      	cmp	r2, #255	; 0xff
 8009874:	bf85      	ittet	hi
 8009876:	238a      	movhi	r3, #138	; 0x8a
 8009878:	6003      	strhi	r3, [r0, #0]
 800987a:	700a      	strbls	r2, [r1, #0]
 800987c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009880:	bf98      	it	ls
 8009882:	2001      	movls	r0, #1
 8009884:	4770      	bx	lr
 8009886:	4608      	mov	r0, r1
 8009888:	4770      	bx	lr
	...

0800988c <__swsetup_r>:
 800988c:	4b32      	ldr	r3, [pc, #200]	; (8009958 <__swsetup_r+0xcc>)
 800988e:	b570      	push	{r4, r5, r6, lr}
 8009890:	681d      	ldr	r5, [r3, #0]
 8009892:	4606      	mov	r6, r0
 8009894:	460c      	mov	r4, r1
 8009896:	b125      	cbz	r5, 80098a2 <__swsetup_r+0x16>
 8009898:	69ab      	ldr	r3, [r5, #24]
 800989a:	b913      	cbnz	r3, 80098a2 <__swsetup_r+0x16>
 800989c:	4628      	mov	r0, r5
 800989e:	f000 f985 	bl	8009bac <__sinit>
 80098a2:	4b2e      	ldr	r3, [pc, #184]	; (800995c <__swsetup_r+0xd0>)
 80098a4:	429c      	cmp	r4, r3
 80098a6:	d10f      	bne.n	80098c8 <__swsetup_r+0x3c>
 80098a8:	686c      	ldr	r4, [r5, #4]
 80098aa:	89a3      	ldrh	r3, [r4, #12]
 80098ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098b0:	0719      	lsls	r1, r3, #28
 80098b2:	d42c      	bmi.n	800990e <__swsetup_r+0x82>
 80098b4:	06dd      	lsls	r5, r3, #27
 80098b6:	d411      	bmi.n	80098dc <__swsetup_r+0x50>
 80098b8:	2309      	movs	r3, #9
 80098ba:	6033      	str	r3, [r6, #0]
 80098bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098c0:	81a3      	strh	r3, [r4, #12]
 80098c2:	f04f 30ff 	mov.w	r0, #4294967295
 80098c6:	e03e      	b.n	8009946 <__swsetup_r+0xba>
 80098c8:	4b25      	ldr	r3, [pc, #148]	; (8009960 <__swsetup_r+0xd4>)
 80098ca:	429c      	cmp	r4, r3
 80098cc:	d101      	bne.n	80098d2 <__swsetup_r+0x46>
 80098ce:	68ac      	ldr	r4, [r5, #8]
 80098d0:	e7eb      	b.n	80098aa <__swsetup_r+0x1e>
 80098d2:	4b24      	ldr	r3, [pc, #144]	; (8009964 <__swsetup_r+0xd8>)
 80098d4:	429c      	cmp	r4, r3
 80098d6:	bf08      	it	eq
 80098d8:	68ec      	ldreq	r4, [r5, #12]
 80098da:	e7e6      	b.n	80098aa <__swsetup_r+0x1e>
 80098dc:	0758      	lsls	r0, r3, #29
 80098de:	d512      	bpl.n	8009906 <__swsetup_r+0x7a>
 80098e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098e2:	b141      	cbz	r1, 80098f6 <__swsetup_r+0x6a>
 80098e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098e8:	4299      	cmp	r1, r3
 80098ea:	d002      	beq.n	80098f2 <__swsetup_r+0x66>
 80098ec:	4630      	mov	r0, r6
 80098ee:	f7ff fb31 	bl	8008f54 <_free_r>
 80098f2:	2300      	movs	r3, #0
 80098f4:	6363      	str	r3, [r4, #52]	; 0x34
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80098fc:	81a3      	strh	r3, [r4, #12]
 80098fe:	2300      	movs	r3, #0
 8009900:	6063      	str	r3, [r4, #4]
 8009902:	6923      	ldr	r3, [r4, #16]
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	89a3      	ldrh	r3, [r4, #12]
 8009908:	f043 0308 	orr.w	r3, r3, #8
 800990c:	81a3      	strh	r3, [r4, #12]
 800990e:	6923      	ldr	r3, [r4, #16]
 8009910:	b94b      	cbnz	r3, 8009926 <__swsetup_r+0x9a>
 8009912:	89a3      	ldrh	r3, [r4, #12]
 8009914:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800991c:	d003      	beq.n	8009926 <__swsetup_r+0x9a>
 800991e:	4621      	mov	r1, r4
 8009920:	4630      	mov	r0, r6
 8009922:	f000 fa09 	bl	8009d38 <__smakebuf_r>
 8009926:	89a0      	ldrh	r0, [r4, #12]
 8009928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800992c:	f010 0301 	ands.w	r3, r0, #1
 8009930:	d00a      	beq.n	8009948 <__swsetup_r+0xbc>
 8009932:	2300      	movs	r3, #0
 8009934:	60a3      	str	r3, [r4, #8]
 8009936:	6963      	ldr	r3, [r4, #20]
 8009938:	425b      	negs	r3, r3
 800993a:	61a3      	str	r3, [r4, #24]
 800993c:	6923      	ldr	r3, [r4, #16]
 800993e:	b943      	cbnz	r3, 8009952 <__swsetup_r+0xc6>
 8009940:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009944:	d1ba      	bne.n	80098bc <__swsetup_r+0x30>
 8009946:	bd70      	pop	{r4, r5, r6, pc}
 8009948:	0781      	lsls	r1, r0, #30
 800994a:	bf58      	it	pl
 800994c:	6963      	ldrpl	r3, [r4, #20]
 800994e:	60a3      	str	r3, [r4, #8]
 8009950:	e7f4      	b.n	800993c <__swsetup_r+0xb0>
 8009952:	2000      	movs	r0, #0
 8009954:	e7f7      	b.n	8009946 <__swsetup_r+0xba>
 8009956:	bf00      	nop
 8009958:	24000010 	.word	0x24000010
 800995c:	0800a39c 	.word	0x0800a39c
 8009960:	0800a3bc 	.word	0x0800a3bc
 8009964:	0800a37c 	.word	0x0800a37c

08009968 <abort>:
 8009968:	b508      	push	{r3, lr}
 800996a:	2006      	movs	r0, #6
 800996c:	f000 fa54 	bl	8009e18 <raise>
 8009970:	2001      	movs	r0, #1
 8009972:	f7f7 fb87 	bl	8001084 <_exit>
	...

08009978 <__sflush_r>:
 8009978:	898a      	ldrh	r2, [r1, #12]
 800997a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800997e:	4605      	mov	r5, r0
 8009980:	0710      	lsls	r0, r2, #28
 8009982:	460c      	mov	r4, r1
 8009984:	d458      	bmi.n	8009a38 <__sflush_r+0xc0>
 8009986:	684b      	ldr	r3, [r1, #4]
 8009988:	2b00      	cmp	r3, #0
 800998a:	dc05      	bgt.n	8009998 <__sflush_r+0x20>
 800998c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800998e:	2b00      	cmp	r3, #0
 8009990:	dc02      	bgt.n	8009998 <__sflush_r+0x20>
 8009992:	2000      	movs	r0, #0
 8009994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009998:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800999a:	2e00      	cmp	r6, #0
 800999c:	d0f9      	beq.n	8009992 <__sflush_r+0x1a>
 800999e:	2300      	movs	r3, #0
 80099a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099a4:	682f      	ldr	r7, [r5, #0]
 80099a6:	602b      	str	r3, [r5, #0]
 80099a8:	d032      	beq.n	8009a10 <__sflush_r+0x98>
 80099aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099ac:	89a3      	ldrh	r3, [r4, #12]
 80099ae:	075a      	lsls	r2, r3, #29
 80099b0:	d505      	bpl.n	80099be <__sflush_r+0x46>
 80099b2:	6863      	ldr	r3, [r4, #4]
 80099b4:	1ac0      	subs	r0, r0, r3
 80099b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099b8:	b10b      	cbz	r3, 80099be <__sflush_r+0x46>
 80099ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099bc:	1ac0      	subs	r0, r0, r3
 80099be:	2300      	movs	r3, #0
 80099c0:	4602      	mov	r2, r0
 80099c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099c4:	6a21      	ldr	r1, [r4, #32]
 80099c6:	4628      	mov	r0, r5
 80099c8:	47b0      	blx	r6
 80099ca:	1c43      	adds	r3, r0, #1
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	d106      	bne.n	80099de <__sflush_r+0x66>
 80099d0:	6829      	ldr	r1, [r5, #0]
 80099d2:	291d      	cmp	r1, #29
 80099d4:	d82c      	bhi.n	8009a30 <__sflush_r+0xb8>
 80099d6:	4a2a      	ldr	r2, [pc, #168]	; (8009a80 <__sflush_r+0x108>)
 80099d8:	40ca      	lsrs	r2, r1
 80099da:	07d6      	lsls	r6, r2, #31
 80099dc:	d528      	bpl.n	8009a30 <__sflush_r+0xb8>
 80099de:	2200      	movs	r2, #0
 80099e0:	6062      	str	r2, [r4, #4]
 80099e2:	04d9      	lsls	r1, r3, #19
 80099e4:	6922      	ldr	r2, [r4, #16]
 80099e6:	6022      	str	r2, [r4, #0]
 80099e8:	d504      	bpl.n	80099f4 <__sflush_r+0x7c>
 80099ea:	1c42      	adds	r2, r0, #1
 80099ec:	d101      	bne.n	80099f2 <__sflush_r+0x7a>
 80099ee:	682b      	ldr	r3, [r5, #0]
 80099f0:	b903      	cbnz	r3, 80099f4 <__sflush_r+0x7c>
 80099f2:	6560      	str	r0, [r4, #84]	; 0x54
 80099f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099f6:	602f      	str	r7, [r5, #0]
 80099f8:	2900      	cmp	r1, #0
 80099fa:	d0ca      	beq.n	8009992 <__sflush_r+0x1a>
 80099fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a00:	4299      	cmp	r1, r3
 8009a02:	d002      	beq.n	8009a0a <__sflush_r+0x92>
 8009a04:	4628      	mov	r0, r5
 8009a06:	f7ff faa5 	bl	8008f54 <_free_r>
 8009a0a:	2000      	movs	r0, #0
 8009a0c:	6360      	str	r0, [r4, #52]	; 0x34
 8009a0e:	e7c1      	b.n	8009994 <__sflush_r+0x1c>
 8009a10:	6a21      	ldr	r1, [r4, #32]
 8009a12:	2301      	movs	r3, #1
 8009a14:	4628      	mov	r0, r5
 8009a16:	47b0      	blx	r6
 8009a18:	1c41      	adds	r1, r0, #1
 8009a1a:	d1c7      	bne.n	80099ac <__sflush_r+0x34>
 8009a1c:	682b      	ldr	r3, [r5, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d0c4      	beq.n	80099ac <__sflush_r+0x34>
 8009a22:	2b1d      	cmp	r3, #29
 8009a24:	d001      	beq.n	8009a2a <__sflush_r+0xb2>
 8009a26:	2b16      	cmp	r3, #22
 8009a28:	d101      	bne.n	8009a2e <__sflush_r+0xb6>
 8009a2a:	602f      	str	r7, [r5, #0]
 8009a2c:	e7b1      	b.n	8009992 <__sflush_r+0x1a>
 8009a2e:	89a3      	ldrh	r3, [r4, #12]
 8009a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a34:	81a3      	strh	r3, [r4, #12]
 8009a36:	e7ad      	b.n	8009994 <__sflush_r+0x1c>
 8009a38:	690f      	ldr	r7, [r1, #16]
 8009a3a:	2f00      	cmp	r7, #0
 8009a3c:	d0a9      	beq.n	8009992 <__sflush_r+0x1a>
 8009a3e:	0793      	lsls	r3, r2, #30
 8009a40:	680e      	ldr	r6, [r1, #0]
 8009a42:	bf08      	it	eq
 8009a44:	694b      	ldreq	r3, [r1, #20]
 8009a46:	600f      	str	r7, [r1, #0]
 8009a48:	bf18      	it	ne
 8009a4a:	2300      	movne	r3, #0
 8009a4c:	eba6 0807 	sub.w	r8, r6, r7
 8009a50:	608b      	str	r3, [r1, #8]
 8009a52:	f1b8 0f00 	cmp.w	r8, #0
 8009a56:	dd9c      	ble.n	8009992 <__sflush_r+0x1a>
 8009a58:	6a21      	ldr	r1, [r4, #32]
 8009a5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a5c:	4643      	mov	r3, r8
 8009a5e:	463a      	mov	r2, r7
 8009a60:	4628      	mov	r0, r5
 8009a62:	47b0      	blx	r6
 8009a64:	2800      	cmp	r0, #0
 8009a66:	dc06      	bgt.n	8009a76 <__sflush_r+0xfe>
 8009a68:	89a3      	ldrh	r3, [r4, #12]
 8009a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a6e:	81a3      	strh	r3, [r4, #12]
 8009a70:	f04f 30ff 	mov.w	r0, #4294967295
 8009a74:	e78e      	b.n	8009994 <__sflush_r+0x1c>
 8009a76:	4407      	add	r7, r0
 8009a78:	eba8 0800 	sub.w	r8, r8, r0
 8009a7c:	e7e9      	b.n	8009a52 <__sflush_r+0xda>
 8009a7e:	bf00      	nop
 8009a80:	20400001 	.word	0x20400001

08009a84 <_fflush_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	690b      	ldr	r3, [r1, #16]
 8009a88:	4605      	mov	r5, r0
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	b913      	cbnz	r3, 8009a94 <_fflush_r+0x10>
 8009a8e:	2500      	movs	r5, #0
 8009a90:	4628      	mov	r0, r5
 8009a92:	bd38      	pop	{r3, r4, r5, pc}
 8009a94:	b118      	cbz	r0, 8009a9e <_fflush_r+0x1a>
 8009a96:	6983      	ldr	r3, [r0, #24]
 8009a98:	b90b      	cbnz	r3, 8009a9e <_fflush_r+0x1a>
 8009a9a:	f000 f887 	bl	8009bac <__sinit>
 8009a9e:	4b14      	ldr	r3, [pc, #80]	; (8009af0 <_fflush_r+0x6c>)
 8009aa0:	429c      	cmp	r4, r3
 8009aa2:	d11b      	bne.n	8009adc <_fflush_r+0x58>
 8009aa4:	686c      	ldr	r4, [r5, #4]
 8009aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d0ef      	beq.n	8009a8e <_fflush_r+0xa>
 8009aae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ab0:	07d0      	lsls	r0, r2, #31
 8009ab2:	d404      	bmi.n	8009abe <_fflush_r+0x3a>
 8009ab4:	0599      	lsls	r1, r3, #22
 8009ab6:	d402      	bmi.n	8009abe <_fflush_r+0x3a>
 8009ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009aba:	f000 f915 	bl	8009ce8 <__retarget_lock_acquire_recursive>
 8009abe:	4628      	mov	r0, r5
 8009ac0:	4621      	mov	r1, r4
 8009ac2:	f7ff ff59 	bl	8009978 <__sflush_r>
 8009ac6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ac8:	07da      	lsls	r2, r3, #31
 8009aca:	4605      	mov	r5, r0
 8009acc:	d4e0      	bmi.n	8009a90 <_fflush_r+0xc>
 8009ace:	89a3      	ldrh	r3, [r4, #12]
 8009ad0:	059b      	lsls	r3, r3, #22
 8009ad2:	d4dd      	bmi.n	8009a90 <_fflush_r+0xc>
 8009ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ad6:	f000 f908 	bl	8009cea <__retarget_lock_release_recursive>
 8009ada:	e7d9      	b.n	8009a90 <_fflush_r+0xc>
 8009adc:	4b05      	ldr	r3, [pc, #20]	; (8009af4 <_fflush_r+0x70>)
 8009ade:	429c      	cmp	r4, r3
 8009ae0:	d101      	bne.n	8009ae6 <_fflush_r+0x62>
 8009ae2:	68ac      	ldr	r4, [r5, #8]
 8009ae4:	e7df      	b.n	8009aa6 <_fflush_r+0x22>
 8009ae6:	4b04      	ldr	r3, [pc, #16]	; (8009af8 <_fflush_r+0x74>)
 8009ae8:	429c      	cmp	r4, r3
 8009aea:	bf08      	it	eq
 8009aec:	68ec      	ldreq	r4, [r5, #12]
 8009aee:	e7da      	b.n	8009aa6 <_fflush_r+0x22>
 8009af0:	0800a39c 	.word	0x0800a39c
 8009af4:	0800a3bc 	.word	0x0800a3bc
 8009af8:	0800a37c 	.word	0x0800a37c

08009afc <std>:
 8009afc:	2300      	movs	r3, #0
 8009afe:	b510      	push	{r4, lr}
 8009b00:	4604      	mov	r4, r0
 8009b02:	e9c0 3300 	strd	r3, r3, [r0]
 8009b06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b0a:	6083      	str	r3, [r0, #8]
 8009b0c:	8181      	strh	r1, [r0, #12]
 8009b0e:	6643      	str	r3, [r0, #100]	; 0x64
 8009b10:	81c2      	strh	r2, [r0, #14]
 8009b12:	6183      	str	r3, [r0, #24]
 8009b14:	4619      	mov	r1, r3
 8009b16:	2208      	movs	r2, #8
 8009b18:	305c      	adds	r0, #92	; 0x5c
 8009b1a:	f7fd fbff 	bl	800731c <memset>
 8009b1e:	4b05      	ldr	r3, [pc, #20]	; (8009b34 <std+0x38>)
 8009b20:	6263      	str	r3, [r4, #36]	; 0x24
 8009b22:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <std+0x3c>)
 8009b24:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b26:	4b05      	ldr	r3, [pc, #20]	; (8009b3c <std+0x40>)
 8009b28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b2a:	4b05      	ldr	r3, [pc, #20]	; (8009b40 <std+0x44>)
 8009b2c:	6224      	str	r4, [r4, #32]
 8009b2e:	6323      	str	r3, [r4, #48]	; 0x30
 8009b30:	bd10      	pop	{r4, pc}
 8009b32:	bf00      	nop
 8009b34:	08009e51 	.word	0x08009e51
 8009b38:	08009e73 	.word	0x08009e73
 8009b3c:	08009eab 	.word	0x08009eab
 8009b40:	08009ecf 	.word	0x08009ecf

08009b44 <_cleanup_r>:
 8009b44:	4901      	ldr	r1, [pc, #4]	; (8009b4c <_cleanup_r+0x8>)
 8009b46:	f000 b8af 	b.w	8009ca8 <_fwalk_reent>
 8009b4a:	bf00      	nop
 8009b4c:	08009a85 	.word	0x08009a85

08009b50 <__sfmoreglue>:
 8009b50:	b570      	push	{r4, r5, r6, lr}
 8009b52:	2268      	movs	r2, #104	; 0x68
 8009b54:	1e4d      	subs	r5, r1, #1
 8009b56:	4355      	muls	r5, r2
 8009b58:	460e      	mov	r6, r1
 8009b5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b5e:	f7ff fa65 	bl	800902c <_malloc_r>
 8009b62:	4604      	mov	r4, r0
 8009b64:	b140      	cbz	r0, 8009b78 <__sfmoreglue+0x28>
 8009b66:	2100      	movs	r1, #0
 8009b68:	e9c0 1600 	strd	r1, r6, [r0]
 8009b6c:	300c      	adds	r0, #12
 8009b6e:	60a0      	str	r0, [r4, #8]
 8009b70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b74:	f7fd fbd2 	bl	800731c <memset>
 8009b78:	4620      	mov	r0, r4
 8009b7a:	bd70      	pop	{r4, r5, r6, pc}

08009b7c <__sfp_lock_acquire>:
 8009b7c:	4801      	ldr	r0, [pc, #4]	; (8009b84 <__sfp_lock_acquire+0x8>)
 8009b7e:	f000 b8b3 	b.w	8009ce8 <__retarget_lock_acquire_recursive>
 8009b82:	bf00      	nop
 8009b84:	24000305 	.word	0x24000305

08009b88 <__sfp_lock_release>:
 8009b88:	4801      	ldr	r0, [pc, #4]	; (8009b90 <__sfp_lock_release+0x8>)
 8009b8a:	f000 b8ae 	b.w	8009cea <__retarget_lock_release_recursive>
 8009b8e:	bf00      	nop
 8009b90:	24000305 	.word	0x24000305

08009b94 <__sinit_lock_acquire>:
 8009b94:	4801      	ldr	r0, [pc, #4]	; (8009b9c <__sinit_lock_acquire+0x8>)
 8009b96:	f000 b8a7 	b.w	8009ce8 <__retarget_lock_acquire_recursive>
 8009b9a:	bf00      	nop
 8009b9c:	24000306 	.word	0x24000306

08009ba0 <__sinit_lock_release>:
 8009ba0:	4801      	ldr	r0, [pc, #4]	; (8009ba8 <__sinit_lock_release+0x8>)
 8009ba2:	f000 b8a2 	b.w	8009cea <__retarget_lock_release_recursive>
 8009ba6:	bf00      	nop
 8009ba8:	24000306 	.word	0x24000306

08009bac <__sinit>:
 8009bac:	b510      	push	{r4, lr}
 8009bae:	4604      	mov	r4, r0
 8009bb0:	f7ff fff0 	bl	8009b94 <__sinit_lock_acquire>
 8009bb4:	69a3      	ldr	r3, [r4, #24]
 8009bb6:	b11b      	cbz	r3, 8009bc0 <__sinit+0x14>
 8009bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bbc:	f7ff bff0 	b.w	8009ba0 <__sinit_lock_release>
 8009bc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bc4:	6523      	str	r3, [r4, #80]	; 0x50
 8009bc6:	4b13      	ldr	r3, [pc, #76]	; (8009c14 <__sinit+0x68>)
 8009bc8:	4a13      	ldr	r2, [pc, #76]	; (8009c18 <__sinit+0x6c>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009bce:	42a3      	cmp	r3, r4
 8009bd0:	bf04      	itt	eq
 8009bd2:	2301      	moveq	r3, #1
 8009bd4:	61a3      	streq	r3, [r4, #24]
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f000 f820 	bl	8009c1c <__sfp>
 8009bdc:	6060      	str	r0, [r4, #4]
 8009bde:	4620      	mov	r0, r4
 8009be0:	f000 f81c 	bl	8009c1c <__sfp>
 8009be4:	60a0      	str	r0, [r4, #8]
 8009be6:	4620      	mov	r0, r4
 8009be8:	f000 f818 	bl	8009c1c <__sfp>
 8009bec:	2200      	movs	r2, #0
 8009bee:	60e0      	str	r0, [r4, #12]
 8009bf0:	2104      	movs	r1, #4
 8009bf2:	6860      	ldr	r0, [r4, #4]
 8009bf4:	f7ff ff82 	bl	8009afc <std>
 8009bf8:	68a0      	ldr	r0, [r4, #8]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	2109      	movs	r1, #9
 8009bfe:	f7ff ff7d 	bl	8009afc <std>
 8009c02:	68e0      	ldr	r0, [r4, #12]
 8009c04:	2202      	movs	r2, #2
 8009c06:	2112      	movs	r1, #18
 8009c08:	f7ff ff78 	bl	8009afc <std>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	61a3      	str	r3, [r4, #24]
 8009c10:	e7d2      	b.n	8009bb8 <__sinit+0xc>
 8009c12:	bf00      	nop
 8009c14:	0800a004 	.word	0x0800a004
 8009c18:	08009b45 	.word	0x08009b45

08009c1c <__sfp>:
 8009c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1e:	4607      	mov	r7, r0
 8009c20:	f7ff ffac 	bl	8009b7c <__sfp_lock_acquire>
 8009c24:	4b1e      	ldr	r3, [pc, #120]	; (8009ca0 <__sfp+0x84>)
 8009c26:	681e      	ldr	r6, [r3, #0]
 8009c28:	69b3      	ldr	r3, [r6, #24]
 8009c2a:	b913      	cbnz	r3, 8009c32 <__sfp+0x16>
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	f7ff ffbd 	bl	8009bac <__sinit>
 8009c32:	3648      	adds	r6, #72	; 0x48
 8009c34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	d503      	bpl.n	8009c44 <__sfp+0x28>
 8009c3c:	6833      	ldr	r3, [r6, #0]
 8009c3e:	b30b      	cbz	r3, 8009c84 <__sfp+0x68>
 8009c40:	6836      	ldr	r6, [r6, #0]
 8009c42:	e7f7      	b.n	8009c34 <__sfp+0x18>
 8009c44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c48:	b9d5      	cbnz	r5, 8009c80 <__sfp+0x64>
 8009c4a:	4b16      	ldr	r3, [pc, #88]	; (8009ca4 <__sfp+0x88>)
 8009c4c:	60e3      	str	r3, [r4, #12]
 8009c4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c52:	6665      	str	r5, [r4, #100]	; 0x64
 8009c54:	f000 f847 	bl	8009ce6 <__retarget_lock_init_recursive>
 8009c58:	f7ff ff96 	bl	8009b88 <__sfp_lock_release>
 8009c5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c64:	6025      	str	r5, [r4, #0]
 8009c66:	61a5      	str	r5, [r4, #24]
 8009c68:	2208      	movs	r2, #8
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c70:	f7fd fb54 	bl	800731c <memset>
 8009c74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c80:	3468      	adds	r4, #104	; 0x68
 8009c82:	e7d9      	b.n	8009c38 <__sfp+0x1c>
 8009c84:	2104      	movs	r1, #4
 8009c86:	4638      	mov	r0, r7
 8009c88:	f7ff ff62 	bl	8009b50 <__sfmoreglue>
 8009c8c:	4604      	mov	r4, r0
 8009c8e:	6030      	str	r0, [r6, #0]
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d1d5      	bne.n	8009c40 <__sfp+0x24>
 8009c94:	f7ff ff78 	bl	8009b88 <__sfp_lock_release>
 8009c98:	230c      	movs	r3, #12
 8009c9a:	603b      	str	r3, [r7, #0]
 8009c9c:	e7ee      	b.n	8009c7c <__sfp+0x60>
 8009c9e:	bf00      	nop
 8009ca0:	0800a004 	.word	0x0800a004
 8009ca4:	ffff0001 	.word	0xffff0001

08009ca8 <_fwalk_reent>:
 8009ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cac:	4606      	mov	r6, r0
 8009cae:	4688      	mov	r8, r1
 8009cb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009cb4:	2700      	movs	r7, #0
 8009cb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cba:	f1b9 0901 	subs.w	r9, r9, #1
 8009cbe:	d505      	bpl.n	8009ccc <_fwalk_reent+0x24>
 8009cc0:	6824      	ldr	r4, [r4, #0]
 8009cc2:	2c00      	cmp	r4, #0
 8009cc4:	d1f7      	bne.n	8009cb6 <_fwalk_reent+0xe>
 8009cc6:	4638      	mov	r0, r7
 8009cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ccc:	89ab      	ldrh	r3, [r5, #12]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d907      	bls.n	8009ce2 <_fwalk_reent+0x3a>
 8009cd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	d003      	beq.n	8009ce2 <_fwalk_reent+0x3a>
 8009cda:	4629      	mov	r1, r5
 8009cdc:	4630      	mov	r0, r6
 8009cde:	47c0      	blx	r8
 8009ce0:	4307      	orrs	r7, r0
 8009ce2:	3568      	adds	r5, #104	; 0x68
 8009ce4:	e7e9      	b.n	8009cba <_fwalk_reent+0x12>

08009ce6 <__retarget_lock_init_recursive>:
 8009ce6:	4770      	bx	lr

08009ce8 <__retarget_lock_acquire_recursive>:
 8009ce8:	4770      	bx	lr

08009cea <__retarget_lock_release_recursive>:
 8009cea:	4770      	bx	lr

08009cec <__swhatbuf_r>:
 8009cec:	b570      	push	{r4, r5, r6, lr}
 8009cee:	460e      	mov	r6, r1
 8009cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf4:	2900      	cmp	r1, #0
 8009cf6:	b096      	sub	sp, #88	; 0x58
 8009cf8:	4614      	mov	r4, r2
 8009cfa:	461d      	mov	r5, r3
 8009cfc:	da08      	bge.n	8009d10 <__swhatbuf_r+0x24>
 8009cfe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	602a      	str	r2, [r5, #0]
 8009d06:	061a      	lsls	r2, r3, #24
 8009d08:	d410      	bmi.n	8009d2c <__swhatbuf_r+0x40>
 8009d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d0e:	e00e      	b.n	8009d2e <__swhatbuf_r+0x42>
 8009d10:	466a      	mov	r2, sp
 8009d12:	f000 f903 	bl	8009f1c <_fstat_r>
 8009d16:	2800      	cmp	r0, #0
 8009d18:	dbf1      	blt.n	8009cfe <__swhatbuf_r+0x12>
 8009d1a:	9a01      	ldr	r2, [sp, #4]
 8009d1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d24:	425a      	negs	r2, r3
 8009d26:	415a      	adcs	r2, r3
 8009d28:	602a      	str	r2, [r5, #0]
 8009d2a:	e7ee      	b.n	8009d0a <__swhatbuf_r+0x1e>
 8009d2c:	2340      	movs	r3, #64	; 0x40
 8009d2e:	2000      	movs	r0, #0
 8009d30:	6023      	str	r3, [r4, #0]
 8009d32:	b016      	add	sp, #88	; 0x58
 8009d34:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d38 <__smakebuf_r>:
 8009d38:	898b      	ldrh	r3, [r1, #12]
 8009d3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d3c:	079d      	lsls	r5, r3, #30
 8009d3e:	4606      	mov	r6, r0
 8009d40:	460c      	mov	r4, r1
 8009d42:	d507      	bpl.n	8009d54 <__smakebuf_r+0x1c>
 8009d44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	6123      	str	r3, [r4, #16]
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	6163      	str	r3, [r4, #20]
 8009d50:	b002      	add	sp, #8
 8009d52:	bd70      	pop	{r4, r5, r6, pc}
 8009d54:	ab01      	add	r3, sp, #4
 8009d56:	466a      	mov	r2, sp
 8009d58:	f7ff ffc8 	bl	8009cec <__swhatbuf_r>
 8009d5c:	9900      	ldr	r1, [sp, #0]
 8009d5e:	4605      	mov	r5, r0
 8009d60:	4630      	mov	r0, r6
 8009d62:	f7ff f963 	bl	800902c <_malloc_r>
 8009d66:	b948      	cbnz	r0, 8009d7c <__smakebuf_r+0x44>
 8009d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d6c:	059a      	lsls	r2, r3, #22
 8009d6e:	d4ef      	bmi.n	8009d50 <__smakebuf_r+0x18>
 8009d70:	f023 0303 	bic.w	r3, r3, #3
 8009d74:	f043 0302 	orr.w	r3, r3, #2
 8009d78:	81a3      	strh	r3, [r4, #12]
 8009d7a:	e7e3      	b.n	8009d44 <__smakebuf_r+0xc>
 8009d7c:	4b0d      	ldr	r3, [pc, #52]	; (8009db4 <__smakebuf_r+0x7c>)
 8009d7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d80:	89a3      	ldrh	r3, [r4, #12]
 8009d82:	6020      	str	r0, [r4, #0]
 8009d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d88:	81a3      	strh	r3, [r4, #12]
 8009d8a:	9b00      	ldr	r3, [sp, #0]
 8009d8c:	6163      	str	r3, [r4, #20]
 8009d8e:	9b01      	ldr	r3, [sp, #4]
 8009d90:	6120      	str	r0, [r4, #16]
 8009d92:	b15b      	cbz	r3, 8009dac <__smakebuf_r+0x74>
 8009d94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f000 f8d1 	bl	8009f40 <_isatty_r>
 8009d9e:	b128      	cbz	r0, 8009dac <__smakebuf_r+0x74>
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	f023 0303 	bic.w	r3, r3, #3
 8009da6:	f043 0301 	orr.w	r3, r3, #1
 8009daa:	81a3      	strh	r3, [r4, #12]
 8009dac:	89a0      	ldrh	r0, [r4, #12]
 8009dae:	4305      	orrs	r5, r0
 8009db0:	81a5      	strh	r5, [r4, #12]
 8009db2:	e7cd      	b.n	8009d50 <__smakebuf_r+0x18>
 8009db4:	08009b45 	.word	0x08009b45

08009db8 <_malloc_usable_size_r>:
 8009db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dbc:	1f18      	subs	r0, r3, #4
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	bfbc      	itt	lt
 8009dc2:	580b      	ldrlt	r3, [r1, r0]
 8009dc4:	18c0      	addlt	r0, r0, r3
 8009dc6:	4770      	bx	lr

08009dc8 <_raise_r>:
 8009dc8:	291f      	cmp	r1, #31
 8009dca:	b538      	push	{r3, r4, r5, lr}
 8009dcc:	4604      	mov	r4, r0
 8009dce:	460d      	mov	r5, r1
 8009dd0:	d904      	bls.n	8009ddc <_raise_r+0x14>
 8009dd2:	2316      	movs	r3, #22
 8009dd4:	6003      	str	r3, [r0, #0]
 8009dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dda:	bd38      	pop	{r3, r4, r5, pc}
 8009ddc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009dde:	b112      	cbz	r2, 8009de6 <_raise_r+0x1e>
 8009de0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009de4:	b94b      	cbnz	r3, 8009dfa <_raise_r+0x32>
 8009de6:	4620      	mov	r0, r4
 8009de8:	f000 f830 	bl	8009e4c <_getpid_r>
 8009dec:	462a      	mov	r2, r5
 8009dee:	4601      	mov	r1, r0
 8009df0:	4620      	mov	r0, r4
 8009df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009df6:	f000 b817 	b.w	8009e28 <_kill_r>
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d00a      	beq.n	8009e14 <_raise_r+0x4c>
 8009dfe:	1c59      	adds	r1, r3, #1
 8009e00:	d103      	bne.n	8009e0a <_raise_r+0x42>
 8009e02:	2316      	movs	r3, #22
 8009e04:	6003      	str	r3, [r0, #0]
 8009e06:	2001      	movs	r0, #1
 8009e08:	e7e7      	b.n	8009dda <_raise_r+0x12>
 8009e0a:	2400      	movs	r4, #0
 8009e0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e10:	4628      	mov	r0, r5
 8009e12:	4798      	blx	r3
 8009e14:	2000      	movs	r0, #0
 8009e16:	e7e0      	b.n	8009dda <_raise_r+0x12>

08009e18 <raise>:
 8009e18:	4b02      	ldr	r3, [pc, #8]	; (8009e24 <raise+0xc>)
 8009e1a:	4601      	mov	r1, r0
 8009e1c:	6818      	ldr	r0, [r3, #0]
 8009e1e:	f7ff bfd3 	b.w	8009dc8 <_raise_r>
 8009e22:	bf00      	nop
 8009e24:	24000010 	.word	0x24000010

08009e28 <_kill_r>:
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	4d07      	ldr	r5, [pc, #28]	; (8009e48 <_kill_r+0x20>)
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	4604      	mov	r4, r0
 8009e30:	4608      	mov	r0, r1
 8009e32:	4611      	mov	r1, r2
 8009e34:	602b      	str	r3, [r5, #0]
 8009e36:	f7f7 f915 	bl	8001064 <_kill>
 8009e3a:	1c43      	adds	r3, r0, #1
 8009e3c:	d102      	bne.n	8009e44 <_kill_r+0x1c>
 8009e3e:	682b      	ldr	r3, [r5, #0]
 8009e40:	b103      	cbz	r3, 8009e44 <_kill_r+0x1c>
 8009e42:	6023      	str	r3, [r4, #0]
 8009e44:	bd38      	pop	{r3, r4, r5, pc}
 8009e46:	bf00      	nop
 8009e48:	24000300 	.word	0x24000300

08009e4c <_getpid_r>:
 8009e4c:	f7f7 b902 	b.w	8001054 <_getpid>

08009e50 <__sread>:
 8009e50:	b510      	push	{r4, lr}
 8009e52:	460c      	mov	r4, r1
 8009e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e58:	f000 f894 	bl	8009f84 <_read_r>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	bfab      	itete	ge
 8009e60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e62:	89a3      	ldrhlt	r3, [r4, #12]
 8009e64:	181b      	addge	r3, r3, r0
 8009e66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e6a:	bfac      	ite	ge
 8009e6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e6e:	81a3      	strhlt	r3, [r4, #12]
 8009e70:	bd10      	pop	{r4, pc}

08009e72 <__swrite>:
 8009e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e76:	461f      	mov	r7, r3
 8009e78:	898b      	ldrh	r3, [r1, #12]
 8009e7a:	05db      	lsls	r3, r3, #23
 8009e7c:	4605      	mov	r5, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	4616      	mov	r6, r2
 8009e82:	d505      	bpl.n	8009e90 <__swrite+0x1e>
 8009e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e88:	2302      	movs	r3, #2
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f000 f868 	bl	8009f60 <_lseek_r>
 8009e90:	89a3      	ldrh	r3, [r4, #12]
 8009e92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e9a:	81a3      	strh	r3, [r4, #12]
 8009e9c:	4632      	mov	r2, r6
 8009e9e:	463b      	mov	r3, r7
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea6:	f000 b817 	b.w	8009ed8 <_write_r>

08009eaa <__sseek>:
 8009eaa:	b510      	push	{r4, lr}
 8009eac:	460c      	mov	r4, r1
 8009eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb2:	f000 f855 	bl	8009f60 <_lseek_r>
 8009eb6:	1c43      	adds	r3, r0, #1
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	bf15      	itete	ne
 8009ebc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ebe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ec2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ec6:	81a3      	strheq	r3, [r4, #12]
 8009ec8:	bf18      	it	ne
 8009eca:	81a3      	strhne	r3, [r4, #12]
 8009ecc:	bd10      	pop	{r4, pc}

08009ece <__sclose>:
 8009ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed2:	f000 b813 	b.w	8009efc <_close_r>
	...

08009ed8 <_write_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4d07      	ldr	r5, [pc, #28]	; (8009ef8 <_write_r+0x20>)
 8009edc:	4604      	mov	r4, r0
 8009ede:	4608      	mov	r0, r1
 8009ee0:	4611      	mov	r1, r2
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	602a      	str	r2, [r5, #0]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	f7f7 f8f3 	bl	80010d2 <_write>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	d102      	bne.n	8009ef6 <_write_r+0x1e>
 8009ef0:	682b      	ldr	r3, [r5, #0]
 8009ef2:	b103      	cbz	r3, 8009ef6 <_write_r+0x1e>
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	bd38      	pop	{r3, r4, r5, pc}
 8009ef8:	24000300 	.word	0x24000300

08009efc <_close_r>:
 8009efc:	b538      	push	{r3, r4, r5, lr}
 8009efe:	4d06      	ldr	r5, [pc, #24]	; (8009f18 <_close_r+0x1c>)
 8009f00:	2300      	movs	r3, #0
 8009f02:	4604      	mov	r4, r0
 8009f04:	4608      	mov	r0, r1
 8009f06:	602b      	str	r3, [r5, #0]
 8009f08:	f7f7 f8ff 	bl	800110a <_close>
 8009f0c:	1c43      	adds	r3, r0, #1
 8009f0e:	d102      	bne.n	8009f16 <_close_r+0x1a>
 8009f10:	682b      	ldr	r3, [r5, #0]
 8009f12:	b103      	cbz	r3, 8009f16 <_close_r+0x1a>
 8009f14:	6023      	str	r3, [r4, #0]
 8009f16:	bd38      	pop	{r3, r4, r5, pc}
 8009f18:	24000300 	.word	0x24000300

08009f1c <_fstat_r>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	4d07      	ldr	r5, [pc, #28]	; (8009f3c <_fstat_r+0x20>)
 8009f20:	2300      	movs	r3, #0
 8009f22:	4604      	mov	r4, r0
 8009f24:	4608      	mov	r0, r1
 8009f26:	4611      	mov	r1, r2
 8009f28:	602b      	str	r3, [r5, #0]
 8009f2a:	f7f7 f8fa 	bl	8001122 <_fstat>
 8009f2e:	1c43      	adds	r3, r0, #1
 8009f30:	d102      	bne.n	8009f38 <_fstat_r+0x1c>
 8009f32:	682b      	ldr	r3, [r5, #0]
 8009f34:	b103      	cbz	r3, 8009f38 <_fstat_r+0x1c>
 8009f36:	6023      	str	r3, [r4, #0]
 8009f38:	bd38      	pop	{r3, r4, r5, pc}
 8009f3a:	bf00      	nop
 8009f3c:	24000300 	.word	0x24000300

08009f40 <_isatty_r>:
 8009f40:	b538      	push	{r3, r4, r5, lr}
 8009f42:	4d06      	ldr	r5, [pc, #24]	; (8009f5c <_isatty_r+0x1c>)
 8009f44:	2300      	movs	r3, #0
 8009f46:	4604      	mov	r4, r0
 8009f48:	4608      	mov	r0, r1
 8009f4a:	602b      	str	r3, [r5, #0]
 8009f4c:	f7f7 f8f9 	bl	8001142 <_isatty>
 8009f50:	1c43      	adds	r3, r0, #1
 8009f52:	d102      	bne.n	8009f5a <_isatty_r+0x1a>
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	b103      	cbz	r3, 8009f5a <_isatty_r+0x1a>
 8009f58:	6023      	str	r3, [r4, #0]
 8009f5a:	bd38      	pop	{r3, r4, r5, pc}
 8009f5c:	24000300 	.word	0x24000300

08009f60 <_lseek_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4d07      	ldr	r5, [pc, #28]	; (8009f80 <_lseek_r+0x20>)
 8009f64:	4604      	mov	r4, r0
 8009f66:	4608      	mov	r0, r1
 8009f68:	4611      	mov	r1, r2
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	602a      	str	r2, [r5, #0]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	f7f7 f8f2 	bl	8001158 <_lseek>
 8009f74:	1c43      	adds	r3, r0, #1
 8009f76:	d102      	bne.n	8009f7e <_lseek_r+0x1e>
 8009f78:	682b      	ldr	r3, [r5, #0]
 8009f7a:	b103      	cbz	r3, 8009f7e <_lseek_r+0x1e>
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
 8009f80:	24000300 	.word	0x24000300

08009f84 <_read_r>:
 8009f84:	b538      	push	{r3, r4, r5, lr}
 8009f86:	4d07      	ldr	r5, [pc, #28]	; (8009fa4 <_read_r+0x20>)
 8009f88:	4604      	mov	r4, r0
 8009f8a:	4608      	mov	r0, r1
 8009f8c:	4611      	mov	r1, r2
 8009f8e:	2200      	movs	r2, #0
 8009f90:	602a      	str	r2, [r5, #0]
 8009f92:	461a      	mov	r2, r3
 8009f94:	f7f7 f880 	bl	8001098 <_read>
 8009f98:	1c43      	adds	r3, r0, #1
 8009f9a:	d102      	bne.n	8009fa2 <_read_r+0x1e>
 8009f9c:	682b      	ldr	r3, [r5, #0]
 8009f9e:	b103      	cbz	r3, 8009fa2 <_read_r+0x1e>
 8009fa0:	6023      	str	r3, [r4, #0]
 8009fa2:	bd38      	pop	{r3, r4, r5, pc}
 8009fa4:	24000300 	.word	0x24000300

08009fa8 <_init>:
 8009fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009faa:	bf00      	nop
 8009fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fae:	bc08      	pop	{r3}
 8009fb0:	469e      	mov	lr, r3
 8009fb2:	4770      	bx	lr

08009fb4 <_fini>:
 8009fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb6:	bf00      	nop
 8009fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fba:	bc08      	pop	{r3}
 8009fbc:	469e      	mov	lr, r3
 8009fbe:	4770      	bx	lr
