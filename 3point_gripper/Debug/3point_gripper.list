
3point_gripper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5e4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800b898  0800b898  0001b898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bc9c  0800bc9c  0001bc9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bca4  0800bca4  0001bca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bca8  0800bca8  0001bca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  24000000  0800bcac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000390  240001f4  0800bea0  000201f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000584  0800bea0  00020584  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020222  2**0
                  CONTENTS, READONLY
 11 .debug_info   000192c7  00000000  00000000  00020265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002bb1  00000000  00000000  0003952c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001590  00000000  00000000  0003c0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000010de  00000000  00000000  0003d670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000332dc  00000000  00000000  0003e74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a29f  00000000  00000000  00071a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001554f9  00000000  00000000  0008bcc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006d2c  00000000  00000000  001e11c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007b  00000000  00000000  001e7ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001f4 	.word	0x240001f4
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b87c 	.word	0x0800b87c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001f8 	.word	0x240001f8
 80002ec:	0800b87c 	.word	0x0800b87c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b970 	b.w	8000698 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	460d      	mov	r5, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	460f      	mov	r7, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4694      	mov	ip, r2
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0xe2>
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	b143      	cbz	r3, 80003fe <__udivmoddi4+0x2e>
 80003ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80003f0:	f1c3 0220 	rsb	r2, r3, #32
 80003f4:	409f      	lsls	r7, r3
 80003f6:	fa20 f202 	lsr.w	r2, r0, r2
 80003fa:	4317      	orrs	r7, r2
 80003fc:	409c      	lsls	r4, r3
 80003fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000402:	fa1f f58c 	uxth.w	r5, ip
 8000406:	fbb7 f1fe 	udiv	r1, r7, lr
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000410:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000414:	fb01 f005 	mul.w	r0, r1, r5
 8000418:	4290      	cmp	r0, r2
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x62>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f101 37ff 	add.w	r7, r1, #4294967295
 8000424:	f080 811c 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000428:	4290      	cmp	r0, r2
 800042a:	f240 8119 	bls.w	8000660 <__udivmoddi4+0x290>
 800042e:	3902      	subs	r1, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	b2a4      	uxth	r4, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000442:	fb00 f505 	mul.w	r5, r0, r5
 8000446:	42a5      	cmp	r5, r4
 8000448:	d90a      	bls.n	8000460 <__udivmoddi4+0x90>
 800044a:	eb1c 0404 	adds.w	r4, ip, r4
 800044e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x294>
 8000456:	42a5      	cmp	r5, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x294>
 800045c:	4464      	add	r4, ip
 800045e:	3802      	subs	r0, #2
 8000460:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	2100      	movs	r1, #0
 8000468:	b11e      	cbz	r6, 8000472 <__udivmoddi4+0xa2>
 800046a:	40dc      	lsrs	r4, r3
 800046c:	2300      	movs	r3, #0
 800046e:	e9c6 4300 	strd	r4, r3, [r6]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0xbc>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80ed 	beq.w	800065a <__udivmoddi4+0x28a>
 8000480:	2100      	movs	r1, #0
 8000482:	e9c6 0500 	strd	r0, r5, [r6]
 8000486:	4608      	mov	r0, r1
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048c:	fab3 f183 	clz	r1, r3
 8000490:	2900      	cmp	r1, #0
 8000492:	d149      	bne.n	8000528 <__udivmoddi4+0x158>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0xce>
 8000498:	4282      	cmp	r2, r0
 800049a:	f200 80f8 	bhi.w	800068e <__udivmoddi4+0x2be>
 800049e:	1a84      	subs	r4, r0, r2
 80004a0:	eb65 0203 	sbc.w	r2, r5, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	4617      	mov	r7, r2
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d0e2      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	e9c6 4700 	strd	r4, r7, [r6]
 80004b0:	e7df      	b.n	8000472 <__udivmoddi4+0xa2>
 80004b2:	b902      	cbnz	r2, 80004b6 <__udivmoddi4+0xe6>
 80004b4:	deff      	udf	#255	; 0xff
 80004b6:	fab2 f382 	clz	r3, r2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8090 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c0:	1a8a      	subs	r2, r1, r2
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2101      	movs	r1, #1
 80004cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004d0:	fb07 2015 	mls	r0, r7, r5, r2
 80004d4:	0c22      	lsrs	r2, r4, #16
 80004d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004da:	fb0e f005 	mul.w	r0, lr, r5
 80004de:	4290      	cmp	r0, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e2:	eb1c 0202 	adds.w	r2, ip, r2
 80004e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4290      	cmp	r0, r2
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2b8>
 80004f2:	4645      	mov	r5, r8
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x14e>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 32ff 	add.w	r2, r0, #4294967295
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x14c>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2c2>
 800051c:	4610      	mov	r0, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x98>
 8000528:	f1c1 0720 	rsb	r7, r1, #32
 800052c:	408b      	lsls	r3, r1
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa05 f401 	lsl.w	r4, r5, r1
 800053a:	fa20 f307 	lsr.w	r3, r0, r7
 800053e:	40fd      	lsrs	r5, r7
 8000540:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000544:	4323      	orrs	r3, r4
 8000546:	fbb5 f8f9 	udiv	r8, r5, r9
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	fb09 5518 	mls	r5, r9, r8, r5
 8000552:	0c1c      	lsrs	r4, r3, #16
 8000554:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000558:	fb08 f50e 	mul.w	r5, r8, lr
 800055c:	42a5      	cmp	r5, r4
 800055e:	fa02 f201 	lsl.w	r2, r2, r1
 8000562:	fa00 f001 	lsl.w	r0, r0, r1
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2b4>
 8000574:	42a5      	cmp	r5, r4
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2b4>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4464      	add	r4, ip
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	b29d      	uxth	r5, r3
 8000584:	fbb4 f3f9 	udiv	r3, r4, r9
 8000588:	fb09 4413 	mls	r4, r9, r3, r4
 800058c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000590:	fb03 fe0e 	mul.w	lr, r3, lr
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f103 35ff 	add.w	r5, r3, #4294967295
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2ac>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2ac>
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ae:	fba3 9502 	umull	r9, r5, r3, r2
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46ae      	mov	lr, r5
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x29c>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x298>
 80005c0:	b156      	cbz	r6, 80005d8 <__udivmoddi4+0x208>
 80005c2:	ebb0 0208 	subs.w	r2, r0, r8
 80005c6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ca:	fa04 f707 	lsl.w	r7, r4, r7
 80005ce:	40ca      	lsrs	r2, r1
 80005d0:	40cc      	lsrs	r4, r1
 80005d2:	4317      	orrs	r7, r2
 80005d4:	e9c6 7400 	strd	r7, r4, [r6]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e0:	f1c3 0120 	rsb	r1, r3, #32
 80005e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005e8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ec:	fa25 f101 	lsr.w	r1, r5, r1
 80005f0:	409d      	lsls	r5, r3
 80005f2:	432a      	orrs	r2, r5
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1510 	mls	r5, r7, r0, r1
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800060a:	fb00 f50e 	mul.w	r5, r0, lr
 800060e:	428d      	cmp	r5, r1
 8000610:	fa04 f403 	lsl.w	r4, r4, r3
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x258>
 8000616:	eb1c 0101 	adds.w	r1, ip, r1
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000620:	428d      	cmp	r5, r1
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000624:	3802      	subs	r0, #2
 8000626:	4461      	add	r1, ip
 8000628:	1b49      	subs	r1, r1, r5
 800062a:	b292      	uxth	r2, r2
 800062c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000630:	fb07 1115 	mls	r1, r7, r5, r1
 8000634:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000638:	fb05 f10e 	mul.w	r1, r5, lr
 800063c:	4291      	cmp	r1, r2
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x282>
 8000640:	eb1c 0202 	adds.w	r2, ip, r2
 8000644:	f105 38ff 	add.w	r8, r5, #4294967295
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 800064a:	4291      	cmp	r1, r2
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2a8>
 800064e:	3d02      	subs	r5, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a52      	subs	r2, r2, r1
 8000654:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0xfc>
 800065a:	4631      	mov	r1, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e708      	b.n	8000472 <__udivmoddi4+0xa2>
 8000660:	4639      	mov	r1, r7
 8000662:	e6e6      	b.n	8000432 <__udivmoddi4+0x62>
 8000664:	4610      	mov	r0, r2
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x90>
 8000668:	4548      	cmp	r0, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000674:	3b01      	subs	r3, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000678:	4645      	mov	r5, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x282>
 800067c:	462b      	mov	r3, r5
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1da>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x258>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000688:	3d02      	subs	r5, #2
 800068a:	4462      	add	r2, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x124>
 800068e:	4608      	mov	r0, r1
 8000690:	e70a      	b.n	80004a8 <__udivmoddi4+0xd8>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x14e>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <transmit_bends>:
// END NEURAL NETWORK PART


//BEGIN GRIPPER CONTROL PART
void transmit_bends()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b0c2      	sub	sp, #264	; 0x108
 80006a0:	af00      	add	r7, sp, #0
	char buffer[256];
	for(uint8_t i=0;i<6;i++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 80006a8:	e035      	b.n	8000716 <transmit_bends+0x7a>
	{
		if(i==5)
 80006aa:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80006ae:	2b05      	cmp	r3, #5
 80006b0:	d116      	bne.n	80006e0 <transmit_bends+0x44>
			HAL_UART_Transmit(&huart3, (void * ) buffer, sprintf(&buffer, "%f\n ", bends[i]), 100);
 80006b2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80006b6:	4a1e      	ldr	r2, [pc, #120]	; (8000730 <transmit_bends+0x94>)
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	4413      	add	r3, r2
 80006bc:	edd3 7a00 	vldr	s15, [r3]
 80006c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006c4:	1d38      	adds	r0, r7, #4
 80006c6:	ec53 2b17 	vmov	r2, r3, d7
 80006ca:	491a      	ldr	r1, [pc, #104]	; (8000734 <transmit_bends+0x98>)
 80006cc:	f009 f8b6 	bl	800983c <siprintf>
 80006d0:	4603      	mov	r3, r0
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	1d39      	adds	r1, r7, #4
 80006d6:	2364      	movs	r3, #100	; 0x64
 80006d8:	4817      	ldr	r0, [pc, #92]	; (8000738 <transmit_bends+0x9c>)
 80006da:	f007 f955 	bl	8007988 <HAL_UART_Transmit>
 80006de:	e015      	b.n	800070c <transmit_bends+0x70>
		else
			HAL_UART_Transmit(&huart3, (void * ) buffer, sprintf(&buffer, "%f, ", bends[i]), 100);
 80006e0:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80006e4:	4a12      	ldr	r2, [pc, #72]	; (8000730 <transmit_bends+0x94>)
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	4413      	add	r3, r2
 80006ea:	edd3 7a00 	vldr	s15, [r3]
 80006ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006f2:	1d38      	adds	r0, r7, #4
 80006f4:	ec53 2b17 	vmov	r2, r3, d7
 80006f8:	4910      	ldr	r1, [pc, #64]	; (800073c <transmit_bends+0xa0>)
 80006fa:	f009 f89f 	bl	800983c <siprintf>
 80006fe:	4603      	mov	r3, r0
 8000700:	b29a      	uxth	r2, r3
 8000702:	1d39      	adds	r1, r7, #4
 8000704:	2364      	movs	r3, #100	; 0x64
 8000706:	480c      	ldr	r0, [pc, #48]	; (8000738 <transmit_bends+0x9c>)
 8000708:	f007 f93e 	bl	8007988 <HAL_UART_Transmit>
	for(uint8_t i=0;i<6;i++)
 800070c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000710:	3301      	adds	r3, #1
 8000712:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8000716:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800071a:	2b05      	cmp	r3, #5
 800071c:	d9c5      	bls.n	80006aa <transmit_bends+0xe>
	}
	HAL_Delay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f001 fb22 	bl	8001d68 <HAL_Delay>
}
 8000724:	bf00      	nop
 8000726:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	240003e8 	.word	0x240003e8
 8000734:	0800b8e0 	.word	0x0800b8e0
 8000738:	24000358 	.word	0x24000358
 800073c:	0800b8e8 	.word	0x0800b8e8

08000740 <switchb>:

void switchb(int a,int b)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
	float aux = bends[a];
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <switchb+0x44>)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	4413      	add	r3, r2
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	60fb      	str	r3, [r7, #12]
	bends[a]=bends[b];
 8000756:	4a0b      	ldr	r2, [pc, #44]	; (8000784 <switchb+0x44>)
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	4908      	ldr	r1, [pc, #32]	; (8000784 <switchb+0x44>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	440b      	add	r3, r1
 8000768:	601a      	str	r2, [r3, #0]
	bends[b] = aux;
 800076a:	4a06      	ldr	r2, [pc, #24]	; (8000784 <switchb+0x44>)
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	601a      	str	r2, [r3, #0]
}
 8000776:	bf00      	nop
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	240003e8 	.word	0x240003e8

08000788 <read_bends>:
void read_bends(int normal)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08e      	sub	sp, #56	; 0x38
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

	memset(bends, 0, sizeof(bends));
 8000790:	2218      	movs	r2, #24
 8000792:	2100      	movs	r1, #0
 8000794:	48c2      	ldr	r0, [pc, #776]	; (8000aa0 <read_bends+0x318>)
 8000796:	f009 f8b4 	bl	8009902 <memset>

	//turn power on
	for(int it=0;it<bsnr;++it)
 800079a:	2300      	movs	r3, #0
 800079c:	637b      	str	r3, [r7, #52]	; 0x34
 800079e:	e033      	b.n	8000808 <read_bends+0x80>
	{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a6:	48bf      	ldr	r0, [pc, #764]	; (8000aa4 <read_bends+0x31c>)
 80007a8:	f002 ff62 	bl	8003670 <HAL_GPIO_WritePin>
		for(uint8_t i=0;i<6;i++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80007b2:	e022      	b.n	80007fa <read_bends+0x72>
	  {
		  HAL_ADC_Start(&hadc1);
 80007b4:	48bc      	ldr	r0, [pc, #752]	; (8000aa8 <read_bends+0x320>)
 80007b6:	f001 fe37 	bl	8002428 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1,100);
 80007ba:	2164      	movs	r1, #100	; 0x64
 80007bc:	48ba      	ldr	r0, [pc, #744]	; (8000aa8 <read_bends+0x320>)
 80007be:	f001 feed 	bl	800259c <HAL_ADC_PollForConversion>
		  bends[i] += HAL_ADC_GetValue(&hadc1);
 80007c2:	48b9      	ldr	r0, [pc, #740]	; (8000aa8 <read_bends+0x320>)
 80007c4:	f001 ffc2 	bl	800274c <HAL_ADC_GetValue>
 80007c8:	ee07 0a90 	vmov	s15, r0
 80007cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007d0:	4ab3      	ldr	r2, [pc, #716]	; (8000aa0 <read_bends+0x318>)
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	4413      	add	r3, r2
 80007d6:	ed93 7a00 	vldr	s14, [r3]
 80007da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007e6:	4aae      	ldr	r2, [pc, #696]	; (8000aa0 <read_bends+0x318>)
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4413      	add	r3, r2
 80007ec:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t i=0;i<6;i++)
 80007f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007f4:	3301      	adds	r3, #1
 80007f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80007fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007fe:	2b05      	cmp	r3, #5
 8000800:	d9d8      	bls.n	80007b4 <read_bends+0x2c>
	for(int it=0;it<bsnr;++it)
 8000802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000804:	3301      	adds	r3, #1
 8000806:	637b      	str	r3, [r7, #52]	; 0x34
 8000808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800080a:	2b95      	cmp	r3, #149	; 0x95
 800080c:	ddc8      	ble.n	80007a0 <read_bends+0x18>
	  }
	}
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000814:	48a3      	ldr	r0, [pc, #652]	; (8000aa4 <read_bends+0x31c>)
 8000816:	f002 ff2b 	bl	8003670 <HAL_GPIO_WritePin>
	for(int i=0;i<6;++i)
 800081a:	2300      	movs	r3, #0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800081e:	e0c6      	b.n	80009ae <read_bends+0x226>
	{
		//Initialise states
		float p_1=0,v_1=0;
 8000820:	f04f 0300 	mov.w	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
 8000826:	f04f 0300 	mov.w	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
		//state variables
		float p,v,residual;

		bends[i]/=bsnr;
 800082c:	4a9c      	ldr	r2, [pc, #624]	; (8000aa0 <read_bends+0x318>)
 800082e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4413      	add	r3, r2
 8000834:	ed93 7a00 	vldr	s14, [r3]
 8000838:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8000aac <read_bends+0x324>
 800083c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000840:	4a97      	ldr	r2, [pc, #604]	; (8000aa0 <read_bends+0x318>)
 8000842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4413      	add	r3, r2
 8000848:	edc3 7a00 	vstr	s15, [r3]
		bends[i] /= 65536;
 800084c:	4a94      	ldr	r2, [pc, #592]	; (8000aa0 <read_bends+0x318>)
 800084e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4413      	add	r3, r2
 8000854:	ed93 7a00 	vldr	s14, [r3]
 8000858:	eddf 6a95 	vldr	s13, [pc, #596]	; 8000ab0 <read_bends+0x328>
 800085c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000860:	4a8f      	ldr	r2, [pc, #572]	; (8000aa0 <read_bends+0x318>)
 8000862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	4413      	add	r3, r2
 8000868:	edc3 7a00 	vstr	s15, [r3]
		bends[i] = (bends[i] * Rref[i]) / (1 - bends[i]);//obtain resistances
 800086c:	4a8c      	ldr	r2, [pc, #560]	; (8000aa0 <read_bends+0x318>)
 800086e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	ed93 7a00 	vldr	s14, [r3]
 8000878:	4a8e      	ldr	r2, [pc, #568]	; (8000ab4 <read_bends+0x32c>)
 800087a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	4413      	add	r3, r2
 8000880:	edd3 7a00 	vldr	s15, [r3]
 8000884:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000888:	4a85      	ldr	r2, [pc, #532]	; (8000aa0 <read_bends+0x318>)
 800088a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	4413      	add	r3, r2
 8000890:	edd3 7a00 	vldr	s15, [r3]
 8000894:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000898:	ee37 7a67 	vsub.f32	s14, s14, s15
 800089c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008a0:	4a7f      	ldr	r2, [pc, #508]	; (8000aa0 <read_bends+0x318>)
 80008a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4413      	add	r3, r2
 80008a8:	edc3 7a00 	vstr	s15, [r3]
		//from resistances to pct change relative to recorded baseline (in 100*abs())
		bends[i] = -100*((bends[i]-baseline[i])/baseline[i]);
 80008ac:	4a7c      	ldr	r2, [pc, #496]	; (8000aa0 <read_bends+0x318>)
 80008ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	4413      	add	r3, r2
 80008b4:	ed93 7a00 	vldr	s14, [r3]
 80008b8:	4a7f      	ldr	r2, [pc, #508]	; (8000ab8 <read_bends+0x330>)
 80008ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	4413      	add	r3, r2
 80008c0:	edd3 7a00 	vldr	s15, [r3]
 80008c4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80008c8:	4a7b      	ldr	r2, [pc, #492]	; (8000ab8 <read_bends+0x330>)
 80008ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	4413      	add	r3, r2
 80008d0:	ed93 7a00 	vldr	s14, [r3]
 80008d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008d8:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8000abc <read_bends+0x334>
 80008dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008e0:	4a6f      	ldr	r2, [pc, #444]	; (8000aa0 <read_bends+0x318>)
 80008e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	edc3 7a00 	vstr	s15, [r3]
		if(!q)
 80008ec:	4b74      	ldr	r3, [pc, #464]	; (8000ac0 <read_bends+0x338>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d107      	bne.n	8000904 <read_bends+0x17c>
		{
			bends[i] = 0;
 80008f4:	4a6a      	ldr	r2, [pc, #424]	; (8000aa0 <read_bends+0x318>)
 80008f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	f04f 0200 	mov.w	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	e051      	b.n	80009a8 <read_bends+0x220>
		}
		else{
		//alpha-beta filter real time processing
		p = p_1 + (v_1*dt);
 8000904:	edd7 7a07 	vldr	s15, [r7, #28]
 8000908:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800090c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000910:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000914:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8000918:	ee27 7b05 	vmul.f64	d7, d7, d5
 800091c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000920:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000924:	edc7 7a05 	vstr	s15, [r7, #20]
		v = v_1;
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	613b      	str	r3, [r7, #16]
		residual = bends[i] - p;
 800092c:	4a5c      	ldr	r2, [pc, #368]	; (8000aa0 <read_bends+0x318>)
 800092e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	4413      	add	r3, r2
 8000934:	ed93 7a00 	vldr	s14, [r3]
 8000938:	edd7 7a05 	vldr	s15, [r7, #20]
 800093c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000940:	edc7 7a03 	vstr	s15, [r7, #12]
		p += alpha * residual;
 8000944:	edd7 7a05 	vldr	s15, [r7, #20]
 8000948:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800094c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000950:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000954:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 8000a90 <read_bends+0x308>
 8000958:	ee27 7b05 	vmul.f64	d7, d7, d5
 800095c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000960:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000964:	edc7 7a05 	vstr	s15, [r7, #20]
		v += (beta * residual) / dt;
 8000968:	edd7 7a04 	vldr	s15, [r7, #16]
 800096c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000970:	edd7 7a03 	vldr	s15, [r7, #12]
 8000974:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000978:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8000a98 <read_bends+0x310>
 800097c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000980:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8000984:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000988:	ee36 7b07 	vadd.f64	d7, d6, d7
 800098c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000990:	edc7 7a04 	vstr	s15, [r7, #16]
		p_1 = p;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	61fb      	str	r3, [r7, #28]
		v_1 = v;
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	61bb      	str	r3, [r7, #24]
		bends[i] = p;
 800099c:	4a40      	ldr	r2, [pc, #256]	; (8000aa0 <read_bends+0x318>)
 800099e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	697a      	ldr	r2, [r7, #20]
 80009a6:	601a      	str	r2, [r3, #0]
	for(int i=0;i<6;++i)
 80009a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009aa:	3301      	adds	r3, #1
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b0:	2b05      	cmp	r3, #5
 80009b2:	f77f af35 	ble.w	8000820 <read_bends+0x98>
		}
	}
	if(normal == 2)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d135      	bne.n	8000a28 <read_bends+0x2a0>
	{
		for(int i=0;i<6;++i)
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
 80009c0:	e00c      	b.n	80009dc <read_bends+0x254>
			previous_bends[i] = bends[i];
 80009c2:	4a37      	ldr	r2, [pc, #220]	; (8000aa0 <read_bends+0x318>)
 80009c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4413      	add	r3, r2
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	493d      	ldr	r1, [pc, #244]	; (8000ac4 <read_bends+0x33c>)
 80009ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	440b      	add	r3, r1
 80009d4:	601a      	str	r2, [r3, #0]
		for(int i=0;i<6;++i)
 80009d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d8:	3301      	adds	r3, #1
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
 80009dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009de:	2b05      	cmp	r3, #5
 80009e0:	ddef      	ble.n	80009c2 <read_bends+0x23a>
		read_bends(1);
 80009e2:	2001      	movs	r0, #1
 80009e4:	f7ff fed0 	bl	8000788 <read_bends>
		for(int i=0;i<6;++i)
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
 80009ec:	e016      	b.n	8000a1c <read_bends+0x294>
			bends[i] = previous_bends[i]-bends[i];
 80009ee:	4a35      	ldr	r2, [pc, #212]	; (8000ac4 <read_bends+0x33c>)
 80009f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	4413      	add	r3, r2
 80009f6:	ed93 7a00 	vldr	s14, [r3]
 80009fa:	4a29      	ldr	r2, [pc, #164]	; (8000aa0 <read_bends+0x318>)
 80009fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4413      	add	r3, r2
 8000a02:	edd3 7a00 	vldr	s15, [r3]
 8000a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a0a:	4a25      	ldr	r2, [pc, #148]	; (8000aa0 <read_bends+0x318>)
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	4413      	add	r3, r2
 8000a12:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0;i<6;++i)
 8000a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a18:	3301      	adds	r3, #1
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1e:	2b05      	cmp	r3, #5
 8000a20:	dde5      	ble.n	80009ee <read_bends+0x266>
	transmit_bends();
 8000a22:	f7ff fe3b 	bl	800069c <transmit_bends>
	return;
 8000a26:	e02e      	b.n	8000a86 <read_bends+0x2fe>
	}
	if(normal == 1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d12b      	bne.n	8000a86 <read_bends+0x2fe>
	{
		for(int i=0;i<6;++i)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
 8000a32:	e012      	b.n	8000a5a <read_bends+0x2d2>
		{
			bends[i]*=1000;
 8000a34:	4a1a      	ldr	r2, [pc, #104]	; (8000aa0 <read_bends+0x318>)
 8000a36:	6a3b      	ldr	r3, [r7, #32]
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	4413      	add	r3, r2
 8000a3c:	edd3 7a00 	vldr	s15, [r3]
 8000a40:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000ac8 <read_bends+0x340>
 8000a44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a48:	4a15      	ldr	r2, [pc, #84]	; (8000aa0 <read_bends+0x318>)
 8000a4a:	6a3b      	ldr	r3, [r7, #32]
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4413      	add	r3, r2
 8000a50:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0;i<6;++i)
 8000a54:	6a3b      	ldr	r3, [r7, #32]
 8000a56:	3301      	adds	r3, #1
 8000a58:	623b      	str	r3, [r7, #32]
 8000a5a:	6a3b      	ldr	r3, [r7, #32]
 8000a5c:	2b05      	cmp	r3, #5
 8000a5e:	dde9      	ble.n	8000a34 <read_bends+0x2ac>
		}
		switchb(5,1);//2upper,3upper,4low,4up,2low,3low
 8000a60:	2101      	movs	r1, #1
 8000a62:	2005      	movs	r0, #5
 8000a64:	f7ff fe6c 	bl	8000740 <switchb>
		switchb(2,3);//2up,3up,4up,4low,2low,3low
 8000a68:	2103      	movs	r1, #3
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	f7ff fe68 	bl	8000740 <switchb>
		switchb(3,4);
 8000a70:	2104      	movs	r1, #4
 8000a72:	2003      	movs	r0, #3
 8000a74:	f7ff fe64 	bl	8000740 <switchb>
		switchb(4,5);
 8000a78:	2105      	movs	r1, #5
 8000a7a:	2004      	movs	r0, #4
 8000a7c:	f7ff fe60 	bl	8000740 <switchb>
		transmit_bends();
 8000a80:	f7ff fe0c 	bl	800069c <transmit_bends>
		return;
 8000a84:	bf00      	nop
	}
}
 8000a86:	3738      	adds	r7, #56	; 0x38
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	f3af 8000 	nop.w
 8000a90:	9999999a 	.word	0x9999999a
 8000a94:	3fd99999 	.word	0x3fd99999
 8000a98:	47ae147b 	.word	0x47ae147b
 8000a9c:	3f847ae1 	.word	0x3f847ae1
 8000aa0:	240003e8 	.word	0x240003e8
 8000aa4:	58020400 	.word	0x58020400
 8000aa8:	24000210 	.word	0x24000210
 8000aac:	43160000 	.word	0x43160000
 8000ab0:	47800000 	.word	0x47800000
 8000ab4:	24000000 	.word	0x24000000
 8000ab8:	24000400 	.word	0x24000400
 8000abc:	c2c80000 	.word	0xc2c80000
 8000ac0:	24000018 	.word	0x24000018
 8000ac4:	24000418 	.word	0x24000418
 8000ac8:	447a0000 	.word	0x447a0000

08000acc <calibration>:
	TIM3 -> CCR1 = 85;
	TIM2 -> CCR1 = 85;
}

void calibration()
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
	memset(baseline, 0, sizeof(bends));
 8000ad2:	2218      	movs	r2, #24
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4847      	ldr	r0, [pc, #284]	; (8000bf4 <calibration+0x128>)
 8000ad8:	f008 ff13 	bl	8009902 <memset>
	HAL_Delay(1);
 8000adc:	2001      	movs	r0, #1
 8000ade:	f001 f943 	bl	8001d68 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae8:	4843      	ldr	r0, [pc, #268]	; (8000bf8 <calibration+0x12c>)
 8000aea:	f002 fdc1 	bl	8003670 <HAL_GPIO_WritePin>
	for(int it=0;it<bsnr;++it)
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	e027      	b.n	8000b44 <calibration+0x78>
	{
		for(uint8_t i=0;i<6;i++)
 8000af4:	2300      	movs	r3, #0
 8000af6:	72fb      	strb	r3, [r7, #11]
 8000af8:	e01e      	b.n	8000b38 <calibration+0x6c>
		{
		  HAL_ADC_Start(&hadc1);
 8000afa:	4840      	ldr	r0, [pc, #256]	; (8000bfc <calibration+0x130>)
 8000afc:	f001 fc94 	bl	8002428 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1,100);
 8000b00:	2164      	movs	r1, #100	; 0x64
 8000b02:	483e      	ldr	r0, [pc, #248]	; (8000bfc <calibration+0x130>)
 8000b04:	f001 fd4a 	bl	800259c <HAL_ADC_PollForConversion>
		  baseline[i] += HAL_ADC_GetValue(&hadc1);
 8000b08:	483c      	ldr	r0, [pc, #240]	; (8000bfc <calibration+0x130>)
 8000b0a:	f001 fe1f 	bl	800274c <HAL_ADC_GetValue>
 8000b0e:	ee07 0a90 	vmov	s15, r0
 8000b12:	7afb      	ldrb	r3, [r7, #11]
 8000b14:	4a37      	ldr	r2, [pc, #220]	; (8000bf4 <calibration+0x128>)
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4413      	add	r3, r2
 8000b1a:	ed93 7a00 	vldr	s14, [r3]
 8000b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b22:	7afb      	ldrb	r3, [r7, #11]
 8000b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b28:	4a32      	ldr	r2, [pc, #200]	; (8000bf4 <calibration+0x128>)
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t i=0;i<6;i++)
 8000b32:	7afb      	ldrb	r3, [r7, #11]
 8000b34:	3301      	adds	r3, #1
 8000b36:	72fb      	strb	r3, [r7, #11]
 8000b38:	7afb      	ldrb	r3, [r7, #11]
 8000b3a:	2b05      	cmp	r3, #5
 8000b3c:	d9dd      	bls.n	8000afa <calibration+0x2e>
	for(int it=0;it<bsnr;++it)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	3301      	adds	r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2b95      	cmp	r3, #149	; 0x95
 8000b48:	ddd4      	ble.n	8000af4 <calibration+0x28>
		}
	}
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b50:	4829      	ldr	r0, [pc, #164]	; (8000bf8 <calibration+0x12c>)
 8000b52:	f002 fd8d 	bl	8003670 <HAL_GPIO_WritePin>
	for(int i=0;i<6;++i)
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	e042      	b.n	8000be2 <calibration+0x116>
	{
		baseline[i]/=bsnr;
 8000b5c:	4a25      	ldr	r2, [pc, #148]	; (8000bf4 <calibration+0x128>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	4413      	add	r3, r2
 8000b64:	ed93 7a00 	vldr	s14, [r3]
 8000b68:	eddf 6a25 	vldr	s13, [pc, #148]	; 8000c00 <calibration+0x134>
 8000b6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b70:	4a20      	ldr	r2, [pc, #128]	; (8000bf4 <calibration+0x128>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	edc3 7a00 	vstr	s15, [r3]
		baseline[i] /= 65536;
 8000b7c:	4a1d      	ldr	r2, [pc, #116]	; (8000bf4 <calibration+0x128>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	ed93 7a00 	vldr	s14, [r3]
 8000b88:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000c04 <calibration+0x138>
 8000b8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b90:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <calibration+0x128>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	edc3 7a00 	vstr	s15, [r3]
		baseline[i] = (baseline[i] * Rref[i]) / (1-baseline[i]);
 8000b9c:	4a15      	ldr	r2, [pc, #84]	; (8000bf4 <calibration+0x128>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	ed93 7a00 	vldr	s14, [r3]
 8000ba8:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <calibration+0x13c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	4413      	add	r3, r2
 8000bb0:	edd3 7a00 	vldr	s15, [r3]
 8000bb4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000bb8:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <calibration+0x128>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	4413      	add	r3, r2
 8000bc0:	edd3 7a00 	vldr	s15, [r3]
 8000bc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bd0:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <calibration+0x128>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0;i<6;++i)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3301      	adds	r3, #1
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b05      	cmp	r3, #5
 8000be6:	ddb9      	ble.n	8000b5c <calibration+0x90>
	}
	//transmit_bends();
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	24000400 	.word	0x24000400
 8000bf8:	58020400 	.word	0x58020400
 8000bfc:	24000210 	.word	0x24000210
 8000c00:	43160000 	.word	0x43160000
 8000c04:	47800000 	.word	0x47800000
 8000c08:	24000000 	.word	0x24000000

08000c0c <main>:

int main(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  HAL_Init();
 8000c12:	f001 f817 	bl	8001c44 <HAL_Init>
  SystemClock_Config();
 8000c16:	f000 f845 	bl	8000ca4 <SystemClock_Config>
  MX_GPIO_Init();
 8000c1a:	f000 fb2b 	bl	8001274 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c1e:	f000 fad5 	bl	80011cc <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000c22:	f000 fb1f 	bl	8001264 <MX_USB_OTG_HS_USB_Init>
  MX_TIM4_Init();
 8000c26:	f000 fa59 	bl	80010dc <MX_TIM4_Init>
  MX_TIM3_Init();
 8000c2a:	f000 f9fb 	bl	8001024 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000c2e:	f000 f981 	bl	8000f34 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000c32:	f000 f8b1 	bl	8000d98 <MX_ADC1_Init>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000c36:	2100      	movs	r1, #0
 8000c38:	4814      	ldr	r0, [pc, #80]	; (8000c8c <main+0x80>)
 8000c3a:	f005 fe79 	bl	8006930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4813      	ldr	r0, [pc, #76]	; (8000c90 <main+0x84>)
 8000c42:	f005 fe75 	bl	8006930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000c46:	2100      	movs	r1, #0
 8000c48:	4812      	ldr	r0, [pc, #72]	; (8000c94 <main+0x88>)
 8000c4a:	f005 fe71 	bl	8006930 <HAL_TIM_PWM_Start>
  TIM4 -> CCR1 = 85;TIM2 -> CCR1 = 85;TIM3 -> CCR1 = 85;
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <main+0x8c>)
 8000c50:	2255      	movs	r2, #85	; 0x55
 8000c52:	635a      	str	r2, [r3, #52]	; 0x34
 8000c54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c58:	2255      	movs	r2, #85	; 0x55
 8000c5a:	635a      	str	r2, [r3, #52]	; 0x34
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <main+0x90>)
 8000c5e:	2255      	movs	r2, #85	; 0x55
 8000c60:	635a      	str	r2, [r3, #52]	; 0x34
  calibration();
 8000c62:	f7ff ff33 	bl	8000acc <calibration>
/*  init_architecture();
  train();*/
  int cali=0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c70:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <main+0x94>)
 8000c72:	f002 fcfd 	bl	8003670 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000c76:	2001      	movs	r0, #1
 8000c78:	f001 f876 	bl	8001d68 <HAL_Delay>
//   	 else
//   	 {
//   		 release_grip();
//   		 q=0;
//   	 }
 	 read_bends(1);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff fd83 	bl	8000788 <read_bends>
 	 HAL_Delay(10);
 8000c82:	200a      	movs	r0, #10
 8000c84:	f001 f870 	bl	8001d68 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_RESET);
 8000c88:	e7ef      	b.n	8000c6a <main+0x5e>
 8000c8a:	bf00      	nop
 8000c8c:	24000274 	.word	0x24000274
 8000c90:	240002c0 	.word	0x240002c0
 8000c94:	2400030c 	.word	0x2400030c
 8000c98:	40000800 	.word	0x40000800
 8000c9c:	40000400 	.word	0x40000400
 8000ca0:	58020400 	.word	0x58020400

08000ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b09c      	sub	sp, #112	; 0x70
 8000ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	224c      	movs	r2, #76	; 0x4c
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f008 fe25 	bl	8009902 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2220      	movs	r2, #32
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f008 fe1f 	bl	8009902 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000cc4:	2004      	movs	r0, #4
 8000cc6:	f002 fced 	bl	80036a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b30      	ldr	r3, [pc, #192]	; (8000d90 <SystemClock_Config+0xec>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	4a2f      	ldr	r2, [pc, #188]	; (8000d90 <SystemClock_Config+0xec>)
 8000cd4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cd8:	6193      	str	r3, [r2, #24]
 8000cda:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <SystemClock_Config+0xec>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce6:	bf00      	nop
 8000ce8:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <SystemClock_Config+0xec>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cf4:	d1f8      	bne.n	8000ce8 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000cf6:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <SystemClock_Config+0xf0>)
 8000cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfa:	f023 0303 	bic.w	r3, r3, #3
 8000cfe:	4a25      	ldr	r2, [pc, #148]	; (8000d94 <SystemClock_Config+0xf0>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000d06:	2321      	movs	r3, #33	; 0x21
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d0a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d10:	2301      	movs	r3, #1
 8000d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d14:	2302      	movs	r3, #2
 8000d16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000d20:	2310      	movs	r3, #16
 8000d22:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d30:	230c      	movs	r3, #12
 8000d32:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d40:	4618      	mov	r0, r3
 8000d42:	f002 fd09 	bl	8003758 <HAL_RCC_OscConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000d4c:	f000 fbc6 	bl	80014dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d50:	233f      	movs	r3, #63	; 0x3f
 8000d52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d54:	2303      	movs	r3, #3
 8000d56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8000d5c:	2309      	movs	r3, #9
 8000d5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d60:	2340      	movs	r3, #64	; 0x40
 8000d62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d64:	2340      	movs	r3, #64	; 0x40
 8000d66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f003 f8f2 	bl	8003f60 <HAL_RCC_ClockConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000d82:	f000 fbab 	bl	80014dc <Error_Handler>
  }
}
 8000d86:	bf00      	nop
 8000d88:	3770      	adds	r7, #112	; 0x70
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	58024800 	.word	0x58024800
 8000d94:	58024400 	.word	0x58024400

08000d98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	463b      	mov	r3, r7
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
 8000db8:	615a      	str	r2, [r3, #20]
 8000dba:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dbc:	4b55      	ldr	r3, [pc, #340]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000dbe:	4a56      	ldr	r2, [pc, #344]	; (8000f18 <MX_ADC1_Init+0x180>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dc2:	4b54      	ldr	r3, [pc, #336]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000dc8:	4b52      	ldr	r3, [pc, #328]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dce:	4b51      	ldr	r3, [pc, #324]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd4:	4b4f      	ldr	r3, [pc, #316]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000dd6:	2204      	movs	r2, #4
 8000dd8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dda:	4b4e      	ldr	r3, [pc, #312]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000de0:	4b4c      	ldr	r3, [pc, #304]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 6;
 8000de6:	4b4b      	ldr	r3, [pc, #300]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000de8:	2206      	movs	r2, #6
 8000dea:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000dec:	4b49      	ldr	r3, [pc, #292]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000df2:	4b48      	ldr	r3, [pc, #288]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df8:	4b46      	ldr	r3, [pc, #280]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dfe:	4b45      	ldr	r3, [pc, #276]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e04:	4b43      	ldr	r3, [pc, #268]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e0a:	4b42      	ldr	r3, [pc, #264]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e10:	4b40      	ldr	r3, [pc, #256]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e16:	4b3f      	ldr	r3, [pc, #252]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e1e:	483d      	ldr	r0, [pc, #244]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000e20:	f001 f9a8 	bl	8002174 <HAL_ADC_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000e2a:	f000 fb57 	bl	80014dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	4836      	ldr	r0, [pc, #216]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000e3a:	f002 f8e9 	bl	8003010 <HAL_ADCEx_MultiModeConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000e44:	f000 fb4a 	bl	80014dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e48:	4b34      	ldr	r3, [pc, #208]	; (8000f1c <MX_ADC1_Init+0x184>)
 8000e4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e4c:	2306      	movs	r3, #6
 8000e4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e54:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e58:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e66:	463b      	mov	r3, r7
 8000e68:	4619      	mov	r1, r3
 8000e6a:	482a      	ldr	r0, [pc, #168]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000e6c:	f001 fc7c 	bl	8002768 <HAL_ADC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000e76:	f000 fb31 	bl	80014dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e7a:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <MX_ADC1_Init+0x188>)
 8000e7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e7e:	230c      	movs	r3, #12
 8000e80:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e82:	463b      	mov	r3, r7
 8000e84:	4619      	mov	r1, r3
 8000e86:	4823      	ldr	r0, [pc, #140]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000e88:	f001 fc6e 	bl	8002768 <HAL_ADC_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000e92:	f000 fb23 	bl	80014dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e96:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <MX_ADC1_Init+0x18c>)
 8000e98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e9a:	2312      	movs	r3, #18
 8000e9c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	481c      	ldr	r0, [pc, #112]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000ea4:	f001 fc60 	bl	8002768 <HAL_ADC_ConfigChannel>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000eae:	f000 fb15 	bl	80014dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <MX_ADC1_Init+0x190>)
 8000eb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000eb6:	2318      	movs	r3, #24
 8000eb8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4815      	ldr	r0, [pc, #84]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000ec0:	f001 fc52 	bl	8002768 <HAL_ADC_ConfigChannel>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000eca:	f000 fb07 	bl	80014dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <MX_ADC1_Init+0x194>)
 8000ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4619      	mov	r1, r3
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000ede:	f001 fc43 	bl	8002768 <HAL_ADC_ConfigChannel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000ee8:	f000 faf8 	bl	80014dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <MX_ADC1_Init+0x198>)
 8000eee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000ef0:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000ef4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4806      	ldr	r0, [pc, #24]	; (8000f14 <MX_ADC1_Init+0x17c>)
 8000efc:	f001 fc34 	bl	8002768 <HAL_ADC_ConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 8000f06:	f000 fae9 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	3728      	adds	r7, #40	; 0x28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	24000210 	.word	0x24000210
 8000f18:	40022000 	.word	0x40022000
 8000f1c:	08600004 	.word	0x08600004
 8000f20:	0c900008 	.word	0x0c900008
 8000f24:	2e300800 	.word	0x2e300800
 8000f28:	1d500080 	.word	0x1d500080
 8000f2c:	21800100 	.word	0x21800100
 8000f30:	2a000400 	.word	0x2a000400

08000f34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08e      	sub	sp, #56	; 0x38
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f54:	463b      	mov	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]
 8000f62:	615a      	str	r2, [r3, #20]
 8000f64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f66:	4b2e      	ldr	r3, [pc, #184]	; (8001020 <MX_TIM2_Init+0xec>)
 8000f68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320-1;
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <MX_TIM2_Init+0xec>)
 8000f70:	f240 123f 	movw	r2, #319	; 0x13f
 8000f74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f76:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <MX_TIM2_Init+0xec>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000f7c:	4b28      	ldr	r3, [pc, #160]	; (8001020 <MX_TIM2_Init+0xec>)
 8000f7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f84:	4b26      	ldr	r3, [pc, #152]	; (8001020 <MX_TIM2_Init+0xec>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <MX_TIM2_Init+0xec>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f90:	4823      	ldr	r0, [pc, #140]	; (8001020 <MX_TIM2_Init+0xec>)
 8000f92:	f005 fc1f 	bl	80067d4 <HAL_TIM_Base_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000f9c:	f000 fa9e 	bl	80014dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000faa:	4619      	mov	r1, r3
 8000fac:	481c      	ldr	r0, [pc, #112]	; (8001020 <MX_TIM2_Init+0xec>)
 8000fae:	f005 fee1 	bl	8006d74 <HAL_TIM_ConfigClockSource>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000fb8:	f000 fa90 	bl	80014dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fbc:	4818      	ldr	r0, [pc, #96]	; (8001020 <MX_TIM2_Init+0xec>)
 8000fbe:	f005 fc60 	bl	8006882 <HAL_TIM_PWM_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000fc8:	f000 fa88 	bl	80014dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4811      	ldr	r0, [pc, #68]	; (8001020 <MX_TIM2_Init+0xec>)
 8000fdc:	f006 fbf6 	bl	80077cc <HAL_TIMEx_MasterConfigSynchronization>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000fe6:	f000 fa79 	bl	80014dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fea:	2360      	movs	r3, #96	; 0x60
 8000fec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000fee:	2332      	movs	r3, #50	; 0x32
 8000ff0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	4619      	mov	r1, r3
 8001000:	4807      	ldr	r0, [pc, #28]	; (8001020 <MX_TIM2_Init+0xec>)
 8001002:	f005 fda3 	bl	8006b4c <HAL_TIM_PWM_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800100c:	f000 fa66 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <MX_TIM2_Init+0xec>)
 8001012:	f000 fb8f 	bl	8001734 <HAL_TIM_MspPostInit>

}
 8001016:	bf00      	nop
 8001018:	3738      	adds	r7, #56	; 0x38
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	24000274 	.word	0x24000274

08001024 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001036:	463b      	mov	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
 8001044:	615a      	str	r2, [r3, #20]
 8001046:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <MX_TIM3_Init+0xb0>)
 800104a:	4a23      	ldr	r2, [pc, #140]	; (80010d8 <MX_TIM3_Init+0xb4>)
 800104c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 320-1;
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <MX_TIM3_Init+0xb0>)
 8001050:	f240 123f 	movw	r2, #319	; 0x13f
 8001054:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <MX_TIM3_Init+0xb0>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <MX_TIM3_Init+0xb0>)
 800105e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001062:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <MX_TIM3_Init+0xb0>)
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_TIM3_Init+0xb0>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001070:	4818      	ldr	r0, [pc, #96]	; (80010d4 <MX_TIM3_Init+0xb0>)
 8001072:	f005 fc06 	bl	8006882 <HAL_TIM_PWM_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 800107c:	f000 fa2e 	bl	80014dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4619      	mov	r1, r3
 800108e:	4811      	ldr	r0, [pc, #68]	; (80010d4 <MX_TIM3_Init+0xb0>)
 8001090:	f006 fb9c 	bl	80077cc <HAL_TIMEx_MasterConfigSynchronization>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800109a:	f000 fa1f 	bl	80014dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800109e:	2360      	movs	r3, #96	; 0x60
 80010a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80010a2:	2332      	movs	r3, #50	; 0x32
 80010a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	2200      	movs	r2, #0
 80010b2:	4619      	mov	r1, r3
 80010b4:	4807      	ldr	r0, [pc, #28]	; (80010d4 <MX_TIM3_Init+0xb0>)
 80010b6:	f005 fd49 	bl	8006b4c <HAL_TIM_PWM_ConfigChannel>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80010c0:	f000 fa0c 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010c4:	4803      	ldr	r0, [pc, #12]	; (80010d4 <MX_TIM3_Init+0xb0>)
 80010c6:	f000 fb35 	bl	8001734 <HAL_TIM_MspPostInit>

}
 80010ca:	bf00      	nop
 80010cc:	3728      	adds	r7, #40	; 0x28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	240002c0 	.word	0x240002c0
 80010d8:	40000400 	.word	0x40000400

080010dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08e      	sub	sp, #56	; 0x38
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fc:	463b      	mov	r3, r7
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]
 800110a:	615a      	str	r2, [r3, #20]
 800110c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800110e:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <MX_TIM4_Init+0xe8>)
 8001110:	4a2d      	ldr	r2, [pc, #180]	; (80011c8 <MX_TIM4_Init+0xec>)
 8001112:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 320-1;
 8001114:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <MX_TIM4_Init+0xe8>)
 8001116:	f240 123f 	movw	r2, #319	; 0x13f
 800111a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111c:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <MX_TIM4_Init+0xe8>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001122:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <MX_TIM4_Init+0xe8>)
 8001124:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001128:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112a:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <MX_TIM4_Init+0xe8>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001130:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <MX_TIM4_Init+0xe8>)
 8001132:	2200      	movs	r2, #0
 8001134:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001136:	4823      	ldr	r0, [pc, #140]	; (80011c4 <MX_TIM4_Init+0xe8>)
 8001138:	f005 fb4c 	bl	80067d4 <HAL_TIM_Base_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8001142:	f000 f9cb 	bl	80014dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800114c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001150:	4619      	mov	r1, r3
 8001152:	481c      	ldr	r0, [pc, #112]	; (80011c4 <MX_TIM4_Init+0xe8>)
 8001154:	f005 fe0e 	bl	8006d74 <HAL_TIM_ConfigClockSource>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800115e:	f000 f9bd 	bl	80014dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001162:	4818      	ldr	r0, [pc, #96]	; (80011c4 <MX_TIM4_Init+0xe8>)
 8001164:	f005 fb8d 	bl	8006882 <HAL_TIM_PWM_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800116e:	f000 f9b5 	bl	80014dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	4619      	mov	r1, r3
 8001180:	4810      	ldr	r0, [pc, #64]	; (80011c4 <MX_TIM4_Init+0xe8>)
 8001182:	f006 fb23 	bl	80077cc <HAL_TIMEx_MasterConfigSynchronization>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800118c:	f000 f9a6 	bl	80014dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001190:	2360      	movs	r3, #96	; 0x60
 8001192:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8001194:	2332      	movs	r3, #50	; 0x32
 8001196:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a0:	463b      	mov	r3, r7
 80011a2:	2200      	movs	r2, #0
 80011a4:	4619      	mov	r1, r3
 80011a6:	4807      	ldr	r0, [pc, #28]	; (80011c4 <MX_TIM4_Init+0xe8>)
 80011a8:	f005 fcd0 	bl	8006b4c <HAL_TIM_PWM_ConfigChannel>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80011b2:	f000 f993 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011b6:	4803      	ldr	r0, [pc, #12]	; (80011c4 <MX_TIM4_Init+0xe8>)
 80011b8:	f000 fabc 	bl	8001734 <HAL_TIM_MspPostInit>

}
 80011bc:	bf00      	nop
 80011be:	3738      	adds	r7, #56	; 0x38
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2400030c 	.word	0x2400030c
 80011c8:	40000800 	.word	0x40000800

080011cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011d0:	4b22      	ldr	r3, [pc, #136]	; (800125c <MX_USART3_UART_Init+0x90>)
 80011d2:	4a23      	ldr	r2, [pc, #140]	; (8001260 <MX_USART3_UART_Init+0x94>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011d6:	4b21      	ldr	r3, [pc, #132]	; (800125c <MX_USART3_UART_Init+0x90>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <MX_USART3_UART_Init+0x90>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <MX_USART3_UART_Init+0x90>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b1c      	ldr	r3, [pc, #112]	; (800125c <MX_USART3_UART_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	; (800125c <MX_USART3_UART_Init+0x90>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <MX_USART3_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <MX_USART3_UART_Init+0x90>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_USART3_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_USART3_UART_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <MX_USART3_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001214:	4811      	ldr	r0, [pc, #68]	; (800125c <MX_USART3_UART_Init+0x90>)
 8001216:	f006 fb67 	bl	80078e8 <HAL_UART_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001220:	f000 f95c 	bl	80014dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001224:	2100      	movs	r1, #0
 8001226:	480d      	ldr	r0, [pc, #52]	; (800125c <MX_USART3_UART_Init+0x90>)
 8001228:	f007 fc9e 	bl	8008b68 <HAL_UARTEx_SetTxFifoThreshold>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001232:	f000 f953 	bl	80014dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001236:	2100      	movs	r1, #0
 8001238:	4808      	ldr	r0, [pc, #32]	; (800125c <MX_USART3_UART_Init+0x90>)
 800123a:	f007 fcd3 	bl	8008be4 <HAL_UARTEx_SetRxFifoThreshold>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001244:	f000 f94a 	bl	80014dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <MX_USART3_UART_Init+0x90>)
 800124a:	f007 fc54 	bl	8008af6 <HAL_UARTEx_DisableFifoMode>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001254:	f000 f942 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	24000358 	.word	0x24000358
 8001260:	40004800 	.word	0x40004800

08001264 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08e      	sub	sp, #56	; 0x38
 8001278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	4b8d      	ldr	r3, [pc, #564]	; (80014c0 <MX_GPIO_Init+0x24c>)
 800128c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001290:	4a8b      	ldr	r2, [pc, #556]	; (80014c0 <MX_GPIO_Init+0x24c>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800129a:	4b89      	ldr	r3, [pc, #548]	; (80014c0 <MX_GPIO_Init+0x24c>)
 800129c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	623b      	str	r3, [r7, #32]
 80012a6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012a8:	4b85      	ldr	r3, [pc, #532]	; (80014c0 <MX_GPIO_Init+0x24c>)
 80012aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012ae:	4a84      	ldr	r2, [pc, #528]	; (80014c0 <MX_GPIO_Init+0x24c>)
 80012b0:	f043 0320 	orr.w	r3, r3, #32
 80012b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012b8:	4b81      	ldr	r3, [pc, #516]	; (80014c0 <MX_GPIO_Init+0x24c>)
 80012ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012be:	f003 0320 	and.w	r3, r3, #32
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c6:	4b7e      	ldr	r3, [pc, #504]	; (80014c0 <MX_GPIO_Init+0x24c>)
 80012c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012cc:	4a7c      	ldr	r2, [pc, #496]	; (80014c0 <MX_GPIO_Init+0x24c>)
 80012ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012d6:	4b7a      	ldr	r3, [pc, #488]	; (80014c0 <MX_GPIO_Init+0x24c>)
 80012d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e0:	61bb      	str	r3, [r7, #24]
 80012e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	4b76      	ldr	r3, [pc, #472]	; (80014c0 <MX_GPIO_Init+0x24c>)
 80012e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012ea:	4a75      	ldr	r2, [pc, #468]	; (80014c0 <MX_GPIO_Init+0x24c>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012f4:	4b72      	ldr	r3, [pc, #456]	; (80014c0 <MX_GPIO_Init+0x24c>)
 80012f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	4b6f      	ldr	r3, [pc, #444]	; (80014c0 <MX_GPIO_Init+0x24c>)
 8001304:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001308:	4a6d      	ldr	r2, [pc, #436]	; (80014c0 <MX_GPIO_Init+0x24c>)
 800130a:	f043 0302 	orr.w	r3, r3, #2
 800130e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001312:	4b6b      	ldr	r3, [pc, #428]	; (80014c0 <MX_GPIO_Init+0x24c>)
 8001314:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001320:	4b67      	ldr	r3, [pc, #412]	; (80014c0 <MX_GPIO_Init+0x24c>)
 8001322:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001326:	4a66      	ldr	r2, [pc, #408]	; (80014c0 <MX_GPIO_Init+0x24c>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001330:	4b63      	ldr	r3, [pc, #396]	; (80014c0 <MX_GPIO_Init+0x24c>)
 8001332:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800133e:	4b60      	ldr	r3, [pc, #384]	; (80014c0 <MX_GPIO_Init+0x24c>)
 8001340:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001344:	4a5e      	ldr	r2, [pc, #376]	; (80014c0 <MX_GPIO_Init+0x24c>)
 8001346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800134a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800134e:	4b5c      	ldr	r3, [pc, #368]	; (80014c0 <MX_GPIO_Init+0x24c>)
 8001350:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800135c:	4b58      	ldr	r3, [pc, #352]	; (80014c0 <MX_GPIO_Init+0x24c>)
 800135e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001362:	4a57      	ldr	r2, [pc, #348]	; (80014c0 <MX_GPIO_Init+0x24c>)
 8001364:	f043 0310 	orr.w	r3, r3, #16
 8001368:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800136c:	4b54      	ldr	r3, [pc, #336]	; (80014c0 <MX_GPIO_Init+0x24c>)
 800136e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001380:	4850      	ldr	r0, [pc, #320]	; (80014c4 <MX_GPIO_Init+0x250>)
 8001382:	f002 f975 	bl	8003670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_11|LD3_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f644 0101 	movw	r1, #18433	; 0x4801
 800138c:	484e      	ldr	r0, [pc, #312]	; (80014c8 <MX_GPIO_Init+0x254>)
 800138e:	f002 f96f 	bl	8003670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2102      	movs	r1, #2
 8001396:	484d      	ldr	r0, [pc, #308]	; (80014cc <MX_GPIO_Init+0x258>)
 8001398:	f002 f96a 	bl	8003670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800139c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ae:	4619      	mov	r1, r3
 80013b0:	4847      	ldr	r0, [pc, #284]	; (80014d0 <MX_GPIO_Init+0x25c>)
 80013b2:	f001 ffad 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80013b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013bc:	2301      	movs	r3, #1
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013cc:	4619      	mov	r1, r3
 80013ce:	483d      	ldr	r0, [pc, #244]	; (80014c4 <MX_GPIO_Init+0x250>)
 80013d0:	f001 ff9e 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80013d4:	f244 0301 	movw	r3, #16385	; 0x4001
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ea:	4619      	mov	r1, r3
 80013ec:	4836      	ldr	r0, [pc, #216]	; (80014c8 <MX_GPIO_Init+0x254>)
 80013ee:	f001 ff8f 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013fc:	2302      	movs	r3, #2
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001408:	4619      	mov	r1, r3
 800140a:	482f      	ldr	r0, [pc, #188]	; (80014c8 <MX_GPIO_Init+0x254>)
 800140c:	f001 ff80 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001414:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001422:	4619      	mov	r1, r3
 8001424:	482b      	ldr	r0, [pc, #172]	; (80014d4 <MX_GPIO_Init+0x260>)
 8001426:	f001 ff73 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800142a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001430:	2300      	movs	r3, #0
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143c:	4619      	mov	r1, r3
 800143e:	4826      	ldr	r0, [pc, #152]	; (80014d8 <MX_GPIO_Init+0x264>)
 8001440:	f001 ff66 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001456:	230a      	movs	r3, #10
 8001458:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145e:	4619      	mov	r1, r3
 8001460:	481d      	ldr	r0, [pc, #116]	; (80014d8 <MX_GPIO_Init+0x264>)
 8001462:	f001 ff55 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001466:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147c:	4619      	mov	r1, r3
 800147e:	4816      	ldr	r0, [pc, #88]	; (80014d8 <MX_GPIO_Init+0x264>)
 8001480:	f001 ff46 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001484:	2301      	movs	r3, #1
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001488:	2300      	movs	r3, #0
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800148c:	2302      	movs	r3, #2
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	4619      	mov	r1, r3
 8001496:	480d      	ldr	r0, [pc, #52]	; (80014cc <MX_GPIO_Init+0x258>)
 8001498:	f001 ff3a 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800149c:	2302      	movs	r3, #2
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b0:	4619      	mov	r1, r3
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <MX_GPIO_Init+0x258>)
 80014b4:	f001 ff2c 	bl	8003310 <HAL_GPIO_Init>

}
 80014b8:	bf00      	nop
 80014ba:	3738      	adds	r7, #56	; 0x38
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	58024400 	.word	0x58024400
 80014c4:	58021400 	.word	0x58021400
 80014c8:	58020400 	.word	0x58020400
 80014cc:	58021000 	.word	0x58021000
 80014d0:	58020800 	.word	0x58020800
 80014d4:	58021800 	.word	0x58021800
 80014d8:	58020000 	.word	0x58020000

080014dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e0:	b672      	cpsid	i
}
 80014e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <Error_Handler+0x8>
	...

080014e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_MspInit+0x30>)
 80014f0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80014f4:	4a08      	ldr	r2, [pc, #32]	; (8001518 <HAL_MspInit+0x30>)
 80014f6:	f043 0302 	orr.w	r3, r3, #2
 80014fa:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_MspInit+0x30>)
 8001500:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	58024400 	.word	0x58024400

0800151c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b0ba      	sub	sp, #232	; 0xe8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	22b8      	movs	r2, #184	; 0xb8
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f008 f9e0 	bl	8009902 <memset>
  if(hadc->Instance==ADC1)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a49      	ldr	r2, [pc, #292]	; (800166c <HAL_ADC_MspInit+0x150>)
 8001548:	4293      	cmp	r3, r2
 800154a:	f040 808a 	bne.w	8001662 <HAL_ADC_MspInit+0x146>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800154e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001552:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001554:	2301      	movs	r3, #1
 8001556:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001558:	2310      	movs	r3, #16
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 800155c:	2304      	movs	r3, #4
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001560:	2302      	movs	r3, #2
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001564:	2302      	movs	r3, #2
 8001566:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001568:	23c0      	movs	r3, #192	; 0xc0
 800156a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800156c:	2300      	movs	r3, #0
 800156e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001574:	2300      	movs	r3, #0
 8001576:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	4618      	mov	r0, r3
 8001580:	f003 f87a 	bl	8004678 <HAL_RCCEx_PeriphCLKConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 800158a:	f7ff ffa7 	bl	80014dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800158e:	4b38      	ldr	r3, [pc, #224]	; (8001670 <HAL_ADC_MspInit+0x154>)
 8001590:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001594:	4a36      	ldr	r2, [pc, #216]	; (8001670 <HAL_ADC_MspInit+0x154>)
 8001596:	f043 0320 	orr.w	r3, r3, #32
 800159a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800159e:	4b34      	ldr	r3, [pc, #208]	; (8001670 <HAL_ADC_MspInit+0x154>)
 80015a0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80015a4:	f003 0320 	and.w	r3, r3, #32
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	4b30      	ldr	r3, [pc, #192]	; (8001670 <HAL_ADC_MspInit+0x154>)
 80015ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015b2:	4a2f      	ldr	r2, [pc, #188]	; (8001670 <HAL_ADC_MspInit+0x154>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015bc:	4b2c      	ldr	r3, [pc, #176]	; (8001670 <HAL_ADC_MspInit+0x154>)
 80015be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4b29      	ldr	r3, [pc, #164]	; (8001670 <HAL_ADC_MspInit+0x154>)
 80015cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015d0:	4a27      	ldr	r2, [pc, #156]	; (8001670 <HAL_ADC_MspInit+0x154>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <HAL_ADC_MspInit+0x154>)
 80015dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015e8:	4b21      	ldr	r3, [pc, #132]	; (8001670 <HAL_ADC_MspInit+0x154>)
 80015ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015ee:	4a20      	ldr	r2, [pc, #128]	; (8001670 <HAL_ADC_MspInit+0x154>)
 80015f0:	f043 0320 	orr.w	r3, r3, #32
 80015f4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <HAL_ADC_MspInit+0x154>)
 80015fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015fe:	f003 0320 	and.w	r3, r3, #32
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INP7
    PC5     ------> ADC1_INP8
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8001606:	2323      	movs	r3, #35	; 0x23
 8001608:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160c:	2303      	movs	r3, #3
 800160e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001618:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800161c:	4619      	mov	r1, r3
 800161e:	4815      	ldr	r0, [pc, #84]	; (8001674 <HAL_ADC_MspInit+0x158>)
 8001620:	f001 fe76 	bl	8003310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001624:	23c0      	movs	r3, #192	; 0xc0
 8001626:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800162a:	2303      	movs	r3, #3
 800162c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800163a:	4619      	mov	r1, r3
 800163c:	480e      	ldr	r0, [pc, #56]	; (8001678 <HAL_ADC_MspInit+0x15c>)
 800163e:	f001 fe67 	bl	8003310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001642:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164a:	2303      	movs	r3, #3
 800164c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001656:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800165a:	4619      	mov	r1, r3
 800165c:	4807      	ldr	r0, [pc, #28]	; (800167c <HAL_ADC_MspInit+0x160>)
 800165e:	f001 fe57 	bl	8003310 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001662:	bf00      	nop
 8001664:	37e8      	adds	r7, #232	; 0xe8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40022000 	.word	0x40022000
 8001670:	58024400 	.word	0x58024400
 8001674:	58020800 	.word	0x58020800
 8001678:	58020000 	.word	0x58020000
 800167c:	58021400 	.word	0x58021400

08001680 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001690:	d10f      	bne.n	80016b2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_TIM_Base_MspInit+0x68>)
 8001694:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001698:	4a13      	ldr	r2, [pc, #76]	; (80016e8 <HAL_TIM_Base_MspInit+0x68>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_TIM_Base_MspInit+0x68>)
 80016a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80016b0:	e013      	b.n	80016da <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM4)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <HAL_TIM_Base_MspInit+0x6c>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d10e      	bne.n	80016da <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_TIM_Base_MspInit+0x68>)
 80016be:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80016c2:	4a09      	ldr	r2, [pc, #36]	; (80016e8 <HAL_TIM_Base_MspInit+0x68>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_TIM_Base_MspInit+0x68>)
 80016ce:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	58024400 	.word	0x58024400
 80016ec:	40000800 	.word	0x40000800

080016f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0b      	ldr	r2, [pc, #44]	; (800172c <HAL_TIM_PWM_MspInit+0x3c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d10e      	bne.n	8001720 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_TIM_PWM_MspInit+0x40>)
 8001704:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001708:	4a09      	ldr	r2, [pc, #36]	; (8001730 <HAL_TIM_PWM_MspInit+0x40>)
 800170a:	f043 0302 	orr.w	r3, r3, #2
 800170e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <HAL_TIM_PWM_MspInit+0x40>)
 8001714:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40000400 	.word	0x40000400
 8001730:	58024400 	.word	0x58024400

08001734 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	; 0x28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001754:	d11f      	bne.n	8001796 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	4b37      	ldr	r3, [pc, #220]	; (8001834 <HAL_TIM_MspPostInit+0x100>)
 8001758:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800175c:	4a35      	ldr	r2, [pc, #212]	; (8001834 <HAL_TIM_MspPostInit+0x100>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001766:	4b33      	ldr	r3, [pc, #204]	; (8001834 <HAL_TIM_MspPostInit+0x100>)
 8001768:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001774:	2301      	movs	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001784:	2301      	movs	r3, #1
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	482a      	ldr	r0, [pc, #168]	; (8001838 <HAL_TIM_MspPostInit+0x104>)
 8001790:	f001 fdbe 	bl	8003310 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001794:	e049      	b.n	800182a <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM3)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a28      	ldr	r2, [pc, #160]	; (800183c <HAL_TIM_MspPostInit+0x108>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d11f      	bne.n	80017e0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a0:	4b24      	ldr	r3, [pc, #144]	; (8001834 <HAL_TIM_MspPostInit+0x100>)
 80017a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017a6:	4a23      	ldr	r2, [pc, #140]	; (8001834 <HAL_TIM_MspPostInit+0x100>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_TIM_MspPostInit+0x100>)
 80017b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017be:	2340      	movs	r3, #64	; 0x40
 80017c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017ce:	2302      	movs	r3, #2
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	4819      	ldr	r0, [pc, #100]	; (8001840 <HAL_TIM_MspPostInit+0x10c>)
 80017da:	f001 fd99 	bl	8003310 <HAL_GPIO_Init>
}
 80017de:	e024      	b.n	800182a <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM4)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a17      	ldr	r2, [pc, #92]	; (8001844 <HAL_TIM_MspPostInit+0x110>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d11f      	bne.n	800182a <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_TIM_MspPostInit+0x100>)
 80017ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017f0:	4a10      	ldr	r2, [pc, #64]	; (8001834 <HAL_TIM_MspPostInit+0x100>)
 80017f2:	f043 0308 	orr.w	r3, r3, #8
 80017f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_TIM_MspPostInit+0x100>)
 80017fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800181a:	2302      	movs	r3, #2
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	4808      	ldr	r0, [pc, #32]	; (8001848 <HAL_TIM_MspPostInit+0x114>)
 8001826:	f001 fd73 	bl	8003310 <HAL_GPIO_Init>
}
 800182a:	bf00      	nop
 800182c:	3728      	adds	r7, #40	; 0x28
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	58024400 	.word	0x58024400
 8001838:	58020000 	.word	0x58020000
 800183c:	40000400 	.word	0x40000400
 8001840:	58020800 	.word	0x58020800
 8001844:	40000800 	.word	0x40000800
 8001848:	58020c00 	.word	0x58020c00

0800184c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b0b8      	sub	sp, #224	; 0xe0
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	22b8      	movs	r2, #184	; 0xb8
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f008 f848 	bl	8009902 <memset>
  if(huart->Instance==USART3)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a25      	ldr	r2, [pc, #148]	; (800190c <HAL_UART_MspInit+0xc0>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d142      	bne.n	8001902 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800187c:	2302      	movs	r3, #2
 800187e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4618      	mov	r0, r3
 800188c:	f002 fef4 	bl	8004678 <HAL_RCCEx_PeriphCLKConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001896:	f7ff fe21 	bl	80014dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800189a:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <HAL_UART_MspInit+0xc4>)
 800189c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80018a0:	4a1b      	ldr	r2, [pc, #108]	; (8001910 <HAL_UART_MspInit+0xc4>)
 80018a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_UART_MspInit+0xc4>)
 80018ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80018b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_UART_MspInit+0xc4>)
 80018ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018be:	4a14      	ldr	r2, [pc, #80]	; (8001910 <HAL_UART_MspInit+0xc4>)
 80018c0:	f043 0308 	orr.w	r3, r3, #8
 80018c4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_UART_MspInit+0xc4>)
 80018ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80018d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018f0:	2307      	movs	r3, #7
 80018f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <HAL_UART_MspInit+0xc8>)
 80018fe:	f001 fd07 	bl	8003310 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001902:	bf00      	nop
 8001904:	37e0      	adds	r7, #224	; 0xe0
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40004800 	.word	0x40004800
 8001910:	58024400 	.word	0x58024400
 8001914:	58020c00 	.word	0x58020c00

08001918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800191c:	e7fe      	b.n	800191c <NMI_Handler+0x4>

0800191e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <MemManage_Handler+0x4>

0800192a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <UsageFault_Handler+0x4>

08001936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001964:	f000 f9e0 	bl	8001d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}

0800196c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
	return 1;
 8001970:	2301      	movs	r3, #1
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_kill>:

int _kill(int pid, int sig)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001986:	f008 f81f 	bl	80099c8 <__errno>
 800198a:	4603      	mov	r3, r0
 800198c:	2216      	movs	r2, #22
 800198e:	601a      	str	r2, [r3, #0]
	return -1;
 8001990:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <_exit>:

void _exit (int status)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ffe7 	bl	800197c <_kill>
	while (1) {}		/* Make sure we hang here */
 80019ae:	e7fe      	b.n	80019ae <_exit+0x12>

080019b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	e00a      	b.n	80019d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019c2:	f3af 8000 	nop.w
 80019c6:	4601      	mov	r1, r0
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	60ba      	str	r2, [r7, #8]
 80019ce:	b2ca      	uxtb	r2, r1
 80019d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3301      	adds	r3, #1
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	dbf0      	blt.n	80019c2 <_read+0x12>
	}

return len;
 80019e0:	687b      	ldr	r3, [r7, #4]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	e009      	b.n	8001a10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	60ba      	str	r2, [r7, #8]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	dbf1      	blt.n	80019fc <_write+0x12>
	}
	return len;
 8001a18:	687b      	ldr	r3, [r7, #4]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_close>:

int _close(int file)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
	return -1;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a4a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <_isatty>:

int _isatty(int file)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
	return 1;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a94:	4a14      	ldr	r2, [pc, #80]	; (8001ae8 <_sbrk+0x5c>)
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <_sbrk+0x60>)
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <_sbrk+0x64>)
 8001aaa:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <_sbrk+0x68>)
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d207      	bcs.n	8001acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001abc:	f007 ff84 	bl	80099c8 <__errno>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	e009      	b.n	8001ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <_sbrk+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <_sbrk+0x64>)
 8001adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	24100000 	.word	0x24100000
 8001aec:	00000400 	.word	0x00000400
 8001af0:	24000430 	.word	0x24000430
 8001af4:	24000588 	.word	0x24000588

08001af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001afc:	4b34      	ldr	r3, [pc, #208]	; (8001bd0 <SystemInit+0xd8>)
 8001afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b02:	4a33      	ldr	r2, [pc, #204]	; (8001bd0 <SystemInit+0xd8>)
 8001b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b0c:	4b31      	ldr	r3, [pc, #196]	; (8001bd4 <SystemInit+0xdc>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 030f 	and.w	r3, r3, #15
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d807      	bhi.n	8001b28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b18:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <SystemInit+0xdc>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f023 030f 	bic.w	r3, r3, #15
 8001b20:	4a2c      	ldr	r2, [pc, #176]	; (8001bd4 <SystemInit+0xdc>)
 8001b22:	f043 0303 	orr.w	r3, r3, #3
 8001b26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b28:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <SystemInit+0xe0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a2a      	ldr	r2, [pc, #168]	; (8001bd8 <SystemInit+0xe0>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b34:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <SystemInit+0xe0>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b3a:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <SystemInit+0xe0>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4926      	ldr	r1, [pc, #152]	; (8001bd8 <SystemInit+0xe0>)
 8001b40:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <SystemInit+0xe4>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b46:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <SystemInit+0xdc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <SystemInit+0xdc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 030f 	bic.w	r3, r3, #15
 8001b5a:	4a1e      	ldr	r2, [pc, #120]	; (8001bd4 <SystemInit+0xdc>)
 8001b5c:	f043 0303 	orr.w	r3, r3, #3
 8001b60:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001b62:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <SystemInit+0xe0>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <SystemInit+0xe0>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <SystemInit+0xe0>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <SystemInit+0xe0>)
 8001b76:	4a1a      	ldr	r2, [pc, #104]	; (8001be0 <SystemInit+0xe8>)
 8001b78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <SystemInit+0xe0>)
 8001b7c:	4a19      	ldr	r2, [pc, #100]	; (8001be4 <SystemInit+0xec>)
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <SystemInit+0xe0>)
 8001b82:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <SystemInit+0xf0>)
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <SystemInit+0xe0>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <SystemInit+0xe0>)
 8001b8e:	4a16      	ldr	r2, [pc, #88]	; (8001be8 <SystemInit+0xf0>)
 8001b90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <SystemInit+0xe0>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <SystemInit+0xe0>)
 8001b9a:	4a13      	ldr	r2, [pc, #76]	; (8001be8 <SystemInit+0xf0>)
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <SystemInit+0xe0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <SystemInit+0xe0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0b      	ldr	r2, [pc, #44]	; (8001bd8 <SystemInit+0xe0>)
 8001baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <SystemInit+0xe0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <SystemInit+0xf4>)
 8001bb8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001bbc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bbe:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <SystemInit+0xd8>)
 8001bc0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bc4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00
 8001bd4:	52002000 	.word	0x52002000
 8001bd8:	58024400 	.word	0x58024400
 8001bdc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001be0:	02020200 	.word	0x02020200
 8001be4:	01ff0000 	.word	0x01ff0000
 8001be8:	01010280 	.word	0x01010280
 8001bec:	52004000 	.word	0x52004000

08001bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c28 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bf4:	f7ff ff80 	bl	8001af8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bf8:	480c      	ldr	r0, [pc, #48]	; (8001c2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bfa:	490d      	ldr	r1, [pc, #52]	; (8001c30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c10:	4c0a      	ldr	r4, [pc, #40]	; (8001c3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c1e:	f007 fed9 	bl	80099d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c22:	f7fe fff3 	bl	8000c0c <main>
  bx  lr
 8001c26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c28:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001c2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c30:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 8001c34:	0800bcac 	.word	0x0800bcac
  ldr r2, =_sbss
 8001c38:	240001f4 	.word	0x240001f4
  ldr r4, =_ebss
 8001c3c:	24000584 	.word	0x24000584

08001c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c40:	e7fe      	b.n	8001c40 <ADC_IRQHandler>
	...

08001c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c4a:	2003      	movs	r0, #3
 8001c4c:	f001 fb2e 	bl	80032ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001c50:	f002 fb3c 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_Init+0x68>)
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	0a1b      	lsrs	r3, r3, #8
 8001c5c:	f003 030f 	and.w	r3, r3, #15
 8001c60:	4913      	ldr	r1, [pc, #76]	; (8001cb0 <HAL_Init+0x6c>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <HAL_Init+0x68>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <HAL_Init+0x6c>)
 8001c78:	5cd3      	ldrb	r3, [r2, r3]
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
 8001c84:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <HAL_Init+0x70>)
 8001c86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c88:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <HAL_Init+0x74>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f000 f814 	bl	8001cbc <HAL_InitTick>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e002      	b.n	8001ca4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c9e:	f7ff fc23 	bl	80014e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	58024400 	.word	0x58024400
 8001cb0:	0800b8f0 	.word	0x0800b8f0
 8001cb4:	24000020 	.word	0x24000020
 8001cb8:	2400001c 	.word	0x2400001c

08001cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cc4:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_InitTick+0x60>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e021      	b.n	8001d14 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <HAL_InitTick+0x64>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_InitTick+0x60>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f001 fb05 	bl	80032f6 <HAL_SYSTICK_Config>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00e      	b.n	8001d14 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b0f      	cmp	r3, #15
 8001cfa:	d80a      	bhi.n	8001d12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f001 fadd 	bl	80032c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d08:	4a06      	ldr	r2, [pc, #24]	; (8001d24 <HAL_InitTick+0x68>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e000      	b.n	8001d14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	24000028 	.word	0x24000028
 8001d20:	2400001c 	.word	0x2400001c
 8001d24:	24000024 	.word	0x24000024

08001d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_IncTick+0x20>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_IncTick+0x24>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_IncTick+0x24>)
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	24000028 	.word	0x24000028
 8001d4c:	24000434 	.word	0x24000434

08001d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return uwTick;
 8001d54:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <HAL_GetTick+0x14>)
 8001d56:	681b      	ldr	r3, [r3, #0]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	24000434 	.word	0x24000434

08001d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7ff ffee 	bl	8001d50 <HAL_GetTick>
 8001d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d80:	d005      	beq.n	8001d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_Delay+0x44>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d8e:	bf00      	nop
 8001d90:	f7ff ffde 	bl	8001d50 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d8f7      	bhi.n	8001d90 <HAL_Delay+0x28>
  {
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	24000028 	.word	0x24000028

08001db0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	609a      	str	r2, [r3, #8]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3360      	adds	r3, #96	; 0x60
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	430b      	orrs	r3, r1
 8001e46:	431a      	orrs	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	371c      	adds	r7, #28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f003 031f 	and.w	r3, r3, #31
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	611a      	str	r2, [r3, #16]
}
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b087      	sub	sp, #28
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3360      	adds	r3, #96	; 0x60
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	601a      	str	r2, [r3, #0]
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	371c      	adds	r7, #28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b087      	sub	sp, #28
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	3330      	adds	r3, #48	; 0x30
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	4413      	add	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	211f      	movs	r1, #31
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	401a      	ands	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	0e9b      	lsrs	r3, r3, #26
 8001f1e:	f003 011f 	and.w	r1, r3, #31
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f32:	bf00      	nop
 8001f34:	371c      	adds	r7, #28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b087      	sub	sp, #28
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3314      	adds	r3, #20
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	0e5b      	lsrs	r3, r3, #25
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	4413      	add	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	0d1b      	lsrs	r3, r3, #20
 8001f66:	f003 031f 	and.w	r3, r3, #31
 8001f6a:	2107      	movs	r1, #7
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	401a      	ands	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	0d1b      	lsrs	r3, r3, #20
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	431a      	orrs	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f88:	bf00      	nop
 8001f8a:	371c      	adds	r7, #28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fac:	43db      	mvns	r3, r3
 8001fae:	401a      	ands	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f003 0318 	and.w	r3, r3, #24
 8001fb6:	4908      	ldr	r1, [pc, #32]	; (8001fd8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fb8:	40d9      	lsrs	r1, r3
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	400b      	ands	r3, r1
 8001fbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	000fffff 	.word	0x000fffff

08001fdc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 031f 	and.w	r3, r3, #31
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002022:	4013      	ands	r3, r2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6093      	str	r3, [r2, #8]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	5fffffc0 	.word	0x5fffffc0

08002038 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800204c:	d101      	bne.n	8002052 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <LL_ADC_EnableInternalRegulator+0x24>)
 800206e:	4013      	ands	r3, r2
 8002070:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	6fffffc0 	.word	0x6fffffc0

08002088 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002098:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800209c:	d101      	bne.n	80020a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <LL_ADC_Enable+0x24>)
 80020be:	4013      	ands	r3, r2
 80020c0:	f043 0201 	orr.w	r2, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	7fffffc0 	.word	0x7fffffc0

080020d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <LL_ADC_IsEnabled+0x18>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <LL_ADC_IsEnabled+0x1a>
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <LL_ADC_REG_StartConversion+0x24>)
 800210e:	4013      	ands	r3, r2
 8002110:	f043 0204 	orr.w	r2, r3, #4
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	7fffffc0 	.word	0x7fffffc0

08002128 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b04      	cmp	r3, #4
 800213a:	d101      	bne.n	8002140 <LL_ADC_REG_IsConversionOngoing+0x18>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b08      	cmp	r3, #8
 8002160:	d101      	bne.n	8002166 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002180:	2300      	movs	r3, #0
 8002182:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e138      	b.n	8002400 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002198:	2b00      	cmp	r3, #0
 800219a:	d109      	bne.n	80021b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff f9bd 	bl	800151c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff3f 	bl	8002038 <LL_ADC_IsDeepPowerDownEnabled>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff25 	bl	8002014 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff ff5a 	bl	8002088 <LL_ADC_IsInternalRegulatorEnabled>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d114      	bne.n	8002204 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff3e 	bl	8002060 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021e4:	4b88      	ldr	r3, [pc, #544]	; (8002408 <HAL_ADC_Init+0x294>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	099b      	lsrs	r3, r3, #6
 80021ea:	4a88      	ldr	r2, [pc, #544]	; (800240c <HAL_ADC_Init+0x298>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	099b      	lsrs	r3, r3, #6
 80021f2:	3301      	adds	r3, #1
 80021f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021f6:	e002      	b.n	80021fe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f9      	bne.n	80021f8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff3d 	bl	8002088 <LL_ADC_IsInternalRegulatorEnabled>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10d      	bne.n	8002230 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002218:	f043 0210 	orr.w	r2, r3, #16
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002224:	f043 0201 	orr.w	r2, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff77 	bl	8002128 <LL_ADC_REG_IsConversionOngoing>
 800223a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2b00      	cmp	r3, #0
 8002246:	f040 80d2 	bne.w	80023ee <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b00      	cmp	r3, #0
 800224e:	f040 80ce 	bne.w	80023ee <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800225a:	f043 0202 	orr.w	r2, r3, #2
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff36 	bl	80020d8 <LL_ADC_IsEnabled>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d110      	bne.n	8002294 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002272:	4867      	ldr	r0, [pc, #412]	; (8002410 <HAL_ADC_Init+0x29c>)
 8002274:	f7ff ff30 	bl	80020d8 <LL_ADC_IsEnabled>
 8002278:	4604      	mov	r4, r0
 800227a:	4866      	ldr	r0, [pc, #408]	; (8002414 <HAL_ADC_Init+0x2a0>)
 800227c:	f7ff ff2c 	bl	80020d8 <LL_ADC_IsEnabled>
 8002280:	4603      	mov	r3, r0
 8002282:	4323      	orrs	r3, r4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d105      	bne.n	8002294 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4619      	mov	r1, r3
 800228e:	4862      	ldr	r0, [pc, #392]	; (8002418 <HAL_ADC_Init+0x2a4>)
 8002290:	f7ff fd8e 	bl	8001db0 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	7d5b      	ldrb	r3, [r3, #21]
 8002298:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800229e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80022a4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7f1b      	ldrb	r3, [r3, #28]
 80022aa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	7f1b      	ldrb	r3, [r3, #28]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d106      	bne.n	80022c6 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	3b01      	subs	r3, #1
 80022be:	045b      	lsls	r3, r3, #17
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d009      	beq.n	80022e2 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	4b4c      	ldr	r3, [pc, #304]	; (800241c <HAL_ADC_Init+0x2a8>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	69b9      	ldr	r1, [r7, #24]
 80022f2:	430b      	orrs	r3, r1
 80022f4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ff14 	bl	8002128 <LL_ADC_REG_IsConversionOngoing>
 8002300:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ff21 	bl	800214e <LL_ADC_INJ_IsConversionOngoing>
 800230c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d14a      	bne.n	80023aa <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d147      	bne.n	80023aa <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	7d1b      	ldrb	r3, [r3, #20]
 800231e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	4b3c      	ldr	r3, [pc, #240]	; (8002420 <HAL_ADC_Init+0x2ac>)
 8002330:	4013      	ands	r3, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	69b9      	ldr	r1, [r7, #24]
 8002338:	430b      	orrs	r3, r1
 800233a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002342:	2b01      	cmp	r3, #1
 8002344:	d11b      	bne.n	800237e <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	4b34      	ldr	r3, [pc, #208]	; (8002424 <HAL_ADC_Init+0x2b0>)
 8002354:	4013      	ands	r3, r2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800235a:	3a01      	subs	r2, #1
 800235c:	0411      	lsls	r1, r2, #16
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002362:	4311      	orrs	r1, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002368:	4311      	orrs	r1, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800236e:	430a      	orrs	r2, r1
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0201 	orr.w	r2, r2, #1
 800237a:	611a      	str	r2, [r3, #16]
 800237c:	e007      	b.n	800238e <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0201 	bic.w	r2, r2, #1
 800238c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 fd41 	bl	8002e2c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d10c      	bne.n	80023cc <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	f023 010f 	bic.w	r1, r3, #15
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	1e5a      	subs	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
 80023ca:	e007      	b.n	80023dc <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 020f 	bic.w	r2, r2, #15
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e0:	f023 0303 	bic.w	r3, r3, #3
 80023e4:	f043 0201 	orr.w	r2, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	655a      	str	r2, [r3, #84]	; 0x54
 80023ec:	e007      	b.n	80023fe <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f2:	f043 0210 	orr.w	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3724      	adds	r7, #36	; 0x24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd90      	pop	{r4, r7, pc}
 8002408:	2400001c 	.word	0x2400001c
 800240c:	053e2d63 	.word	0x053e2d63
 8002410:	40022000 	.word	0x40022000
 8002414:	40022100 	.word	0x40022100
 8002418:	40022300 	.word	0x40022300
 800241c:	fff0c003 	.word	0xfff0c003
 8002420:	ffffbffc 	.word	0xffffbffc
 8002424:	fc00f81e 	.word	0xfc00f81e

08002428 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002430:	4856      	ldr	r0, [pc, #344]	; (800258c <HAL_ADC_Start+0x164>)
 8002432:	f7ff fdd3 	bl	8001fdc <LL_ADC_GetMultimode>
 8002436:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fe73 	bl	8002128 <LL_ADC_REG_IsConversionOngoing>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	f040 809a 	bne.w	800257e <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_ADC_Start+0x30>
 8002454:	2302      	movs	r3, #2
 8002456:	e095      	b.n	8002584 <HAL_ADC_Start+0x15c>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fc67 	bl	8002d34 <ADC_Enable>
 8002466:	4603      	mov	r3, r0
 8002468:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800246a:	7dfb      	ldrb	r3, [r7, #23]
 800246c:	2b00      	cmp	r3, #0
 800246e:	f040 8081 	bne.w	8002574 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002476:	4b46      	ldr	r3, [pc, #280]	; (8002590 <HAL_ADC_Start+0x168>)
 8002478:	4013      	ands	r3, r2
 800247a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a43      	ldr	r2, [pc, #268]	; (8002594 <HAL_ADC_Start+0x16c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d002      	beq.n	8002492 <HAL_ADC_Start+0x6a>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	e000      	b.n	8002494 <HAL_ADC_Start+0x6c>
 8002492:	4b41      	ldr	r3, [pc, #260]	; (8002598 <HAL_ADC_Start+0x170>)
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	4293      	cmp	r3, r2
 800249a:	d002      	beq.n	80024a2 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d105      	bne.n	80024ae <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ba:	d106      	bne.n	80024ca <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c0:	f023 0206 	bic.w	r2, r3, #6
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	659a      	str	r2, [r3, #88]	; 0x58
 80024c8:	e002      	b.n	80024d0 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	221c      	movs	r2, #28
 80024d6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a2b      	ldr	r2, [pc, #172]	; (8002594 <HAL_ADC_Start+0x16c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d002      	beq.n	80024f0 <HAL_ADC_Start+0xc8>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	e000      	b.n	80024f2 <HAL_ADC_Start+0xca>
 80024f0:	4b29      	ldr	r3, [pc, #164]	; (8002598 <HAL_ADC_Start+0x170>)
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d008      	beq.n	800250c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	2b05      	cmp	r3, #5
 8002504:	d002      	beq.n	800250c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b09      	cmp	r3, #9
 800250a:	d114      	bne.n	8002536 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d007      	beq.n	800252a <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002522:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fde6 	bl	8002100 <LL_ADC_REG_StartConversion>
 8002534:	e025      	b.n	8002582 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a13      	ldr	r2, [pc, #76]	; (8002594 <HAL_ADC_Start+0x16c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d002      	beq.n	8002552 <HAL_ADC_Start+0x12a>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	e000      	b.n	8002554 <HAL_ADC_Start+0x12c>
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_ADC_Start+0x170>)
 8002554:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00f      	beq.n	8002582 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002566:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800256a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
 8002572:	e006      	b.n	8002582 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800257c:	e001      	b.n	8002582 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800257e:	2302      	movs	r3, #2
 8002580:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002582:	7dfb      	ldrb	r3, [r7, #23]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40022300 	.word	0x40022300
 8002590:	fffff0fe 	.word	0xfffff0fe
 8002594:	40022100 	.word	0x40022100
 8002598:	40022000 	.word	0x40022000

0800259c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025a6:	4866      	ldr	r0, [pc, #408]	; (8002740 <HAL_ADC_PollForConversion+0x1a4>)
 80025a8:	f7ff fd18 	bl	8001fdc <LL_ADC_GetMultimode>
 80025ac:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d102      	bne.n	80025bc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80025b6:	2308      	movs	r3, #8
 80025b8:	61fb      	str	r3, [r7, #28]
 80025ba:	e02a      	b.n	8002612 <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2b05      	cmp	r3, #5
 80025c6:	d002      	beq.n	80025ce <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2b09      	cmp	r3, #9
 80025cc:	d111      	bne.n	80025f2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e0:	f043 0220 	orr.w	r2, r3, #32
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0a4      	b.n	8002736 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80025ec:	2304      	movs	r3, #4
 80025ee:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80025f0:	e00f      	b.n	8002612 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80025f2:	4853      	ldr	r0, [pc, #332]	; (8002740 <HAL_ADC_PollForConversion+0x1a4>)
 80025f4:	f7ff fd00 	bl	8001ff8 <LL_ADC_GetMultiDMATransfer>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	f043 0220 	orr.w	r2, r3, #32
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e093      	b.n	8002736 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800260e:	2304      	movs	r3, #4
 8002610:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002612:	f7ff fb9d 	bl	8001d50 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002618:	e021      	b.n	800265e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d01d      	beq.n	800265e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002622:	f7ff fb95 	bl	8001d50 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d302      	bcc.n	8002638 <HAL_ADC_PollForConversion+0x9c>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d112      	bne.n	800265e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	4013      	ands	r3, r2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10b      	bne.n	800265e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264a:	f043 0204 	orr.w	r2, r3, #4
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e06b      	b.n	8002736 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0d6      	beq.n	800261a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002670:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fc1f 	bl	8001ec0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d01c      	beq.n	80026c2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7d5b      	ldrb	r3, [r3, #21]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d118      	bne.n	80026c2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b08      	cmp	r3, #8
 800269c:	d111      	bne.n	80026c2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d105      	bne.n	80026c2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ba:	f043 0201 	orr.w	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a1f      	ldr	r2, [pc, #124]	; (8002744 <HAL_ADC_PollForConversion+0x1a8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d002      	beq.n	80026d2 <HAL_ADC_PollForConversion+0x136>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	e000      	b.n	80026d4 <HAL_ADC_PollForConversion+0x138>
 80026d2:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <HAL_ADC_PollForConversion+0x1ac>)
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	4293      	cmp	r3, r2
 80026da:	d008      	beq.n	80026ee <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d002      	beq.n	80026ee <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	2b09      	cmp	r3, #9
 80026ec:	d104      	bne.n	80026f8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	61bb      	str	r3, [r7, #24]
 80026f6:	e00c      	b.n	8002712 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a11      	ldr	r2, [pc, #68]	; (8002744 <HAL_ADC_PollForConversion+0x1a8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d002      	beq.n	8002708 <HAL_ADC_PollForConversion+0x16c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	e000      	b.n	800270a <HAL_ADC_PollForConversion+0x16e>
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <HAL_ADC_PollForConversion+0x1ac>)
 800270a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	2b08      	cmp	r3, #8
 8002716:	d104      	bne.n	8002722 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2208      	movs	r2, #8
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e008      	b.n	8002734 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d103      	bne.n	8002734 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	220c      	movs	r2, #12
 8002732:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3720      	adds	r7, #32
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40022300 	.word	0x40022300
 8002744:	40022100 	.word	0x40022100
 8002748:	40022000 	.word	0x40022000

0800274c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b0a1      	sub	sp, #132	; 0x84
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4a9a      	ldr	r2, [pc, #616]	; (80029ec <HAL_ADC_ConfigChannel+0x284>)
 8002782:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x2a>
 800278e:	2302      	movs	r3, #2
 8002790:	e2bc      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x5a4>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fcc2 	bl	8002128 <LL_ADC_REG_IsConversionOngoing>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f040 82a1 	bne.w	8002cee <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d108      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x62>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	0e9b      	lsrs	r3, r3, #26
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	2201      	movs	r2, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	e016      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x90>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027d2:	fa93 f3a3 	rbit	r3, r3
 80027d6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027da:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80027e2:	2320      	movs	r3, #32
 80027e4:	e003      	b.n	80027ee <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80027e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027e8:	fab3 f383 	clz	r3, r3
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	2201      	movs	r2, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	69d1      	ldr	r1, [r2, #28]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	430b      	orrs	r3, r1
 8002804:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6859      	ldr	r1, [r3, #4]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	f7ff fb67 	bl	8001ee6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fc83 	bl	8002128 <LL_ADC_REG_IsConversionOngoing>
 8002822:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fc90 	bl	800214e <LL_ADC_INJ_IsConversionOngoing>
 800282e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002832:	2b00      	cmp	r3, #0
 8002834:	f040 80a0 	bne.w	8002978 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800283a:	2b00      	cmp	r3, #0
 800283c:	f040 809c 	bne.w	8002978 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	6819      	ldr	r1, [r3, #0]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	461a      	mov	r2, r3
 800284e:	f7ff fb76 	bl	8001f3e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10b      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x110>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	089b      	lsrs	r3, r3, #2
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	e00a      	b.n	800288e <HAL_ADC_ConfigChannel+0x126>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	2b04      	cmp	r3, #4
 8002896:	d027      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	6919      	ldr	r1, [r3, #16]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028a6:	f7ff fab7 	bl	8001e18 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6919      	ldr	r1, [r3, #16]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	7e5b      	ldrb	r3, [r3, #25]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d102      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x158>
 80028ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80028be:	e000      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x15a>
 80028c0:	2300      	movs	r3, #0
 80028c2:	461a      	mov	r2, r3
 80028c4:	f7ff fae1 	bl	8001e8a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6919      	ldr	r1, [r3, #16]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	7e1b      	ldrb	r3, [r3, #24]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d102      	bne.n	80028de <HAL_ADC_ConfigChannel+0x176>
 80028d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028dc:	e000      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x178>
 80028de:	2300      	movs	r3, #0
 80028e0:	461a      	mov	r2, r3
 80028e2:	f7ff fab9 	bl	8001e58 <LL_ADC_SetDataRightShift>
 80028e6:	e047      	b.n	8002978 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	069b      	lsls	r3, r3, #26
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d107      	bne.n	800290c <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800290a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002912:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	069b      	lsls	r3, r3, #26
 800291c:	429a      	cmp	r2, r3
 800291e:	d107      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800292e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	069b      	lsls	r3, r3, #26
 8002940:	429a      	cmp	r2, r3
 8002942:	d107      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002952:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800295a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	069b      	lsls	r3, r3, #26
 8002964:	429a      	cmp	r2, r3
 8002966:	d107      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002976:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fbab 	bl	80020d8 <LL_ADC_IsEnabled>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	f040 81bb 	bne.w	8002d00 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	6819      	ldr	r1, [r3, #0]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	461a      	mov	r2, r3
 8002998:	f7ff fafc 	bl	8001f94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4a12      	ldr	r2, [pc, #72]	; (80029ec <HAL_ADC_ConfigChannel+0x284>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	f040 8130 	bne.w	8002c08 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10b      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x268>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	0e9b      	lsrs	r3, r3, #26
 80029be:	3301      	adds	r3, #1
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	2b09      	cmp	r3, #9
 80029c6:	bf94      	ite	ls
 80029c8:	2301      	movls	r3, #1
 80029ca:	2300      	movhi	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	e01b      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x2a0>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80029de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80029e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d103      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 80029e8:	2320      	movs	r3, #32
 80029ea:	e005      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x290>
 80029ec:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 80029f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	3301      	adds	r3, #1
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	2b09      	cmp	r3, #9
 8002a00:	bf94      	ite	ls
 8002a02:	2301      	movls	r3, #1
 8002a04:	2300      	movhi	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d079      	beq.n	8002b00 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d107      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x2c0>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0e9b      	lsrs	r3, r3, #26
 8002a1e:	3301      	adds	r3, #1
 8002a20:	069b      	lsls	r3, r3, #26
 8002a22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a26:	e015      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x2ec>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a38:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002a40:	2320      	movs	r3, #32
 8002a42:	e003      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	069b      	lsls	r3, r3, #26
 8002a50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x30c>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	3301      	adds	r3, #1
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	e017      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x33c>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a84:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002a8c:	2320      	movs	r3, #32
 8002a8e:	e003      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f003 031f 	and.w	r3, r3, #31
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa4:	ea42 0103 	orr.w	r1, r2, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10a      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x362>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	0e9b      	lsrs	r3, r3, #26
 8002aba:	3301      	adds	r3, #1
 8002abc:	f003 021f 	and.w	r2, r3, #31
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	051b      	lsls	r3, r3, #20
 8002ac8:	e018      	b.n	8002afc <HAL_ADC_ConfigChannel+0x394>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002ae2:	2320      	movs	r3, #32
 8002ae4:	e003      	b.n	8002aee <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae8:	fab3 f383 	clz	r3, r3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	3301      	adds	r3, #1
 8002af0:	f003 021f 	and.w	r2, r3, #31
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002afc:	430b      	orrs	r3, r1
 8002afe:	e07e      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d107      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x3b4>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	0e9b      	lsrs	r3, r3, #26
 8002b12:	3301      	adds	r3, #1
 8002b14:	069b      	lsls	r3, r3, #26
 8002b16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b1a:	e015      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x3e0>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002b34:	2320      	movs	r3, #32
 8002b36:	e003      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	3301      	adds	r3, #1
 8002b42:	069b      	lsls	r3, r3, #26
 8002b44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d109      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x400>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0e9b      	lsrs	r3, r3, #26
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	2101      	movs	r1, #1
 8002b62:	fa01 f303 	lsl.w	r3, r1, r3
 8002b66:	e017      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x430>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	61bb      	str	r3, [r7, #24]
  return result;
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002b80:	2320      	movs	r3, #32
 8002b82:	e003      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	f003 031f 	and.w	r3, r3, #31
 8002b92:	2101      	movs	r1, #1
 8002b94:	fa01 f303 	lsl.w	r3, r1, r3
 8002b98:	ea42 0103 	orr.w	r1, r2, r3
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10d      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x45c>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	0e9b      	lsrs	r3, r3, #26
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f003 021f 	and.w	r2, r3, #31
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4413      	add	r3, r2
 8002bba:	3b1e      	subs	r3, #30
 8002bbc:	051b      	lsls	r3, r3, #20
 8002bbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	e01b      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x494>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	60fb      	str	r3, [r7, #12]
  return result;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002bdc:	2320      	movs	r3, #32
 8002bde:	e003      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	3301      	adds	r3, #1
 8002bea:	f003 021f 	and.w	r2, r3, #31
 8002bee:	4613      	mov	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3b1e      	subs	r3, #30
 8002bf6:	051b      	lsls	r3, r3, #20
 8002bf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	6892      	ldr	r2, [r2, #8]
 8002c02:	4619      	mov	r1, r3
 8002c04:	f7ff f99b 	bl	8001f3e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	da77      	bge.n	8002d00 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c10:	4840      	ldr	r0, [pc, #256]	; (8002d14 <HAL_ADC_ConfigChannel+0x5ac>)
 8002c12:	f7ff f8f3 	bl	8001dfc <LL_ADC_GetCommonPathInternalCh>
 8002c16:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c18:	483f      	ldr	r0, [pc, #252]	; (8002d18 <HAL_ADC_ConfigChannel+0x5b0>)
 8002c1a:	f7ff fa5d 	bl	80020d8 <LL_ADC_IsEnabled>
 8002c1e:	4604      	mov	r4, r0
 8002c20:	483e      	ldr	r0, [pc, #248]	; (8002d1c <HAL_ADC_ConfigChannel+0x5b4>)
 8002c22:	f7ff fa59 	bl	80020d8 <LL_ADC_IsEnabled>
 8002c26:	4603      	mov	r3, r0
 8002c28:	4323      	orrs	r3, r4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d155      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a3b      	ldr	r2, [pc, #236]	; (8002d20 <HAL_ADC_ConfigChannel+0x5b8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d122      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x516>
 8002c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d11d      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a35      	ldr	r2, [pc, #212]	; (8002d1c <HAL_ADC_ConfigChannel+0x5b4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d159      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c52:	4619      	mov	r1, r3
 8002c54:	482f      	ldr	r0, [pc, #188]	; (8002d14 <HAL_ADC_ConfigChannel+0x5ac>)
 8002c56:	f7ff f8be 	bl	8001dd6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c5a:	4b32      	ldr	r3, [pc, #200]	; (8002d24 <HAL_ADC_ConfigChannel+0x5bc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	099b      	lsrs	r3, r3, #6
 8002c60:	4a31      	ldr	r2, [pc, #196]	; (8002d28 <HAL_ADC_ConfigChannel+0x5c0>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	099b      	lsrs	r3, r3, #6
 8002c68:	3301      	adds	r3, #1
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002c6e:	e002      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f9      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c7c:	e040      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a2a      	ldr	r2, [pc, #168]	; (8002d2c <HAL_ADC_ConfigChannel+0x5c4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d111      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x544>
 8002c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10c      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a21      	ldr	r2, [pc, #132]	; (8002d1c <HAL_ADC_ConfigChannel+0x5b4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d131      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	481b      	ldr	r0, [pc, #108]	; (8002d14 <HAL_ADC_ConfigChannel+0x5ac>)
 8002ca6:	f7ff f896 	bl	8001dd6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002caa:	e029      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1f      	ldr	r2, [pc, #124]	; (8002d30 <HAL_ADC_ConfigChannel+0x5c8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d124      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x598>
 8002cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d11f      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a15      	ldr	r2, [pc, #84]	; (8002d1c <HAL_ADC_ConfigChannel+0x5b4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d11a      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ccc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4810      	ldr	r0, [pc, #64]	; (8002d14 <HAL_ADC_ConfigChannel+0x5ac>)
 8002cd4:	f7ff f87f 	bl	8001dd6 <LL_ADC_SetCommonPathInternalCh>
 8002cd8:	e012      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	f043 0220 	orr.w	r2, r3, #32
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002cec:	e008      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf2:	f043 0220 	orr.w	r2, r3, #32
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d08:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3784      	adds	r7, #132	; 0x84
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd90      	pop	{r4, r7, pc}
 8002d14:	40022300 	.word	0x40022300
 8002d18:	40022000 	.word	0x40022000
 8002d1c:	40022100 	.word	0x40022100
 8002d20:	cb840000 	.word	0xcb840000
 8002d24:	2400001c 	.word	0x2400001c
 8002d28:	053e2d63 	.word	0x053e2d63
 8002d2c:	bac04000 	.word	0xbac04000
 8002d30:	cfb80000 	.word	0xcfb80000

08002d34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff f9c9 	bl	80020d8 <LL_ADC_IsEnabled>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d161      	bne.n	8002e10 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	4b32      	ldr	r3, [pc, #200]	; (8002e1c <ADC_Enable+0xe8>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00d      	beq.n	8002d76 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5e:	f043 0210 	orr.w	r2, r3, #16
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6a:	f043 0201 	orr.w	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e04d      	b.n	8002e12 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff f998 	bl	80020b0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d80:	f7fe ffe6 	bl	8001d50 <HAL_GetTick>
 8002d84:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d86:	4826      	ldr	r0, [pc, #152]	; (8002e20 <ADC_Enable+0xec>)
 8002d88:	f7ff f928 	bl	8001fdc <LL_ADC_GetMultimode>
 8002d8c:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a24      	ldr	r2, [pc, #144]	; (8002e24 <ADC_Enable+0xf0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d002      	beq.n	8002d9e <ADC_Enable+0x6a>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	e000      	b.n	8002da0 <ADC_Enable+0x6c>
 8002d9e:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <ADC_Enable+0xf4>)
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d02c      	beq.n	8002e02 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d130      	bne.n	8002e10 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dae:	e028      	b.n	8002e02 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff f98f 	bl	80020d8 <LL_ADC_IsEnabled>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d104      	bne.n	8002dca <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff f973 	bl	80020b0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dca:	f7fe ffc1 	bl	8001d50 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d914      	bls.n	8002e02 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d00d      	beq.n	8002e02 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	f043 0210 	orr.w	r2, r3, #16
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df6:	f043 0201 	orr.w	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e007      	b.n	8002e12 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d1cf      	bne.n	8002db0 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	8000003f 	.word	0x8000003f
 8002e20:	40022300 	.word	0x40022300
 8002e24:	40022100 	.word	0x40022100
 8002e28:	40022000 	.word	0x40022000

08002e2c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002e34:	4b5f      	ldr	r3, [pc, #380]	; (8002fb4 <ADC_ConfigureBoostMode+0x188>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01c      	beq.n	8002e7a <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002e40:	f001 fbbe 	bl	80045c0 <HAL_RCC_GetHCLKFreq>
 8002e44:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e4e:	d010      	beq.n	8002e72 <ADC_ConfigureBoostMode+0x46>
 8002e50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e54:	d871      	bhi.n	8002f3a <ADC_ConfigureBoostMode+0x10e>
 8002e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5a:	d002      	beq.n	8002e62 <ADC_ConfigureBoostMode+0x36>
 8002e5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e60:	d16b      	bne.n	8002f3a <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	0c1b      	lsrs	r3, r3, #16
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6e:	60fb      	str	r3, [r7, #12]
        break;
 8002e70:	e066      	b.n	8002f40 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	089b      	lsrs	r3, r3, #2
 8002e76:	60fb      	str	r3, [r7, #12]
        break;
 8002e78:	e062      	b.n	8002f40 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002e7a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e7e:	f002 fb07 	bl	8005490 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e82:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e8c:	d051      	beq.n	8002f32 <ADC_ConfigureBoostMode+0x106>
 8002e8e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e92:	d854      	bhi.n	8002f3e <ADC_ConfigureBoostMode+0x112>
 8002e94:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e98:	d047      	beq.n	8002f2a <ADC_ConfigureBoostMode+0xfe>
 8002e9a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e9e:	d84e      	bhi.n	8002f3e <ADC_ConfigureBoostMode+0x112>
 8002ea0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002ea4:	d03d      	beq.n	8002f22 <ADC_ConfigureBoostMode+0xf6>
 8002ea6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002eaa:	d848      	bhi.n	8002f3e <ADC_ConfigureBoostMode+0x112>
 8002eac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eb0:	d033      	beq.n	8002f1a <ADC_ConfigureBoostMode+0xee>
 8002eb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eb6:	d842      	bhi.n	8002f3e <ADC_ConfigureBoostMode+0x112>
 8002eb8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002ebc:	d029      	beq.n	8002f12 <ADC_ConfigureBoostMode+0xe6>
 8002ebe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002ec2:	d83c      	bhi.n	8002f3e <ADC_ConfigureBoostMode+0x112>
 8002ec4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002ec8:	d01a      	beq.n	8002f00 <ADC_ConfigureBoostMode+0xd4>
 8002eca:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002ece:	d836      	bhi.n	8002f3e <ADC_ConfigureBoostMode+0x112>
 8002ed0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002ed4:	d014      	beq.n	8002f00 <ADC_ConfigureBoostMode+0xd4>
 8002ed6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002eda:	d830      	bhi.n	8002f3e <ADC_ConfigureBoostMode+0x112>
 8002edc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ee0:	d00e      	beq.n	8002f00 <ADC_ConfigureBoostMode+0xd4>
 8002ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ee6:	d82a      	bhi.n	8002f3e <ADC_ConfigureBoostMode+0x112>
 8002ee8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002eec:	d008      	beq.n	8002f00 <ADC_ConfigureBoostMode+0xd4>
 8002eee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ef2:	d824      	bhi.n	8002f3e <ADC_ConfigureBoostMode+0x112>
 8002ef4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ef8:	d002      	beq.n	8002f00 <ADC_ConfigureBoostMode+0xd4>
 8002efa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002efe:	d11e      	bne.n	8002f3e <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	0c9b      	lsrs	r3, r3, #18
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0e:	60fb      	str	r3, [r7, #12]
        break;
 8002f10:	e016      	b.n	8002f40 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	60fb      	str	r3, [r7, #12]
        break;
 8002f18:	e012      	b.n	8002f40 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	60fb      	str	r3, [r7, #12]
        break;
 8002f20:	e00e      	b.n	8002f40 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	60fb      	str	r3, [r7, #12]
        break;
 8002f28:	e00a      	b.n	8002f40 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	09db      	lsrs	r3, r3, #7
 8002f2e:	60fb      	str	r3, [r7, #12]
        break;
 8002f30:	e006      	b.n	8002f40 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	0a1b      	lsrs	r3, r3, #8
 8002f36:	60fb      	str	r3, [r7, #12]
        break;
 8002f38:	e002      	b.n	8002f40 <ADC_ConfigureBoostMode+0x114>
        break;
 8002f3a:	bf00      	nop
 8002f3c:	e000      	b.n	8002f40 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8002f3e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	085b      	lsrs	r3, r3, #1
 8002f44:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4a1b      	ldr	r2, [pc, #108]	; (8002fb8 <ADC_ConfigureBoostMode+0x18c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d808      	bhi.n	8002f60 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f5c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002f5e:	e025      	b.n	8002fac <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4a16      	ldr	r2, [pc, #88]	; (8002fbc <ADC_ConfigureBoostMode+0x190>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d80a      	bhi.n	8002f7e <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f7a:	609a      	str	r2, [r3, #8]
}
 8002f7c:	e016      	b.n	8002fac <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4a0f      	ldr	r2, [pc, #60]	; (8002fc0 <ADC_ConfigureBoostMode+0x194>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d80a      	bhi.n	8002f9c <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f98:	609a      	str	r2, [r3, #8]
}
 8002f9a:	e007      	b.n	8002fac <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002faa:	609a      	str	r2, [r3, #8]
}
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40022300 	.word	0x40022300
 8002fb8:	005f5e10 	.word	0x005f5e10
 8002fbc:	00bebc20 	.word	0x00bebc20
 8002fc0:	017d7840 	.word	0x017d7840

08002fc4 <LL_ADC_IsEnabled>:
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <LL_ADC_IsEnabled+0x18>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <LL_ADC_IsEnabled+0x1a>
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <LL_ADC_REG_IsConversionOngoing>:
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d101      	bne.n	8003002 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003010:	b590      	push	{r4, r7, lr}
 8003012:	b09f      	sub	sp, #124	; 0x7c
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800302a:	2302      	movs	r3, #2
 800302c:	e080      	b.n	8003130 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003036:	2300      	movs	r3, #0
 8003038:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800303a:	2300      	movs	r3, #0
 800303c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a3d      	ldr	r2, [pc, #244]	; (8003138 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d102      	bne.n	800304e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003048:	4b3c      	ldr	r3, [pc, #240]	; (800313c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	e001      	b.n	8003052 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10b      	bne.n	8003070 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	f043 0220 	orr.w	r2, r3, #32
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e05f      	b.n	8003130 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff ffb9 	bl	8002fea <LL_ADC_REG_IsConversionOngoing>
 8003078:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff ffb3 	bl	8002fea <LL_ADC_REG_IsConversionOngoing>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d141      	bne.n	800310e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800308a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800308c:	2b00      	cmp	r3, #0
 800308e:	d13e      	bne.n	800310e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003090:	4b2b      	ldr	r3, [pc, #172]	; (8003140 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003092:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d020      	beq.n	80030de <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800309c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ac:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ae:	4822      	ldr	r0, [pc, #136]	; (8003138 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80030b0:	f7ff ff88 	bl	8002fc4 <LL_ADC_IsEnabled>
 80030b4:	4604      	mov	r4, r0
 80030b6:	4821      	ldr	r0, [pc, #132]	; (800313c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80030b8:	f7ff ff84 	bl	8002fc4 <LL_ADC_IsEnabled>
 80030bc:	4603      	mov	r3, r0
 80030be:	4323      	orrs	r3, r4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d12e      	bne.n	8003122 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	4b1e      	ldr	r3, [pc, #120]	; (8003144 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	6811      	ldr	r1, [r2, #0]
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	6892      	ldr	r2, [r2, #8]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	431a      	orrs	r2, r3
 80030d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030da:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030dc:	e021      	b.n	8003122 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80030de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ea:	4813      	ldr	r0, [pc, #76]	; (8003138 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80030ec:	f7ff ff6a 	bl	8002fc4 <LL_ADC_IsEnabled>
 80030f0:	4604      	mov	r4, r0
 80030f2:	4812      	ldr	r0, [pc, #72]	; (800313c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80030f4:	f7ff ff66 	bl	8002fc4 <LL_ADC_IsEnabled>
 80030f8:	4603      	mov	r3, r0
 80030fa:	4323      	orrs	r3, r4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d110      	bne.n	8003122 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003106:	4013      	ands	r3, r2
 8003108:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800310a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800310c:	e009      	b.n	8003122 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003112:	f043 0220 	orr.w	r2, r3, #32
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003120:	e000      	b.n	8003124 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003122:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800312c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003130:	4618      	mov	r0, r3
 8003132:	377c      	adds	r7, #124	; 0x7c
 8003134:	46bd      	mov	sp, r7
 8003136:	bd90      	pop	{r4, r7, pc}
 8003138:	40022000 	.word	0x40022000
 800313c:	40022100 	.word	0x40022100
 8003140:	40022300 	.word	0x40022300
 8003144:	fffff0e0 	.word	0xfffff0e0

08003148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003158:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <__NVIC_SetPriorityGrouping+0x40>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003164:	4013      	ands	r3, r2
 8003166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <__NVIC_SetPriorityGrouping+0x44>)
 8003172:	4313      	orrs	r3, r2
 8003174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003176:	4a04      	ldr	r2, [pc, #16]	; (8003188 <__NVIC_SetPriorityGrouping+0x40>)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	60d3      	str	r3, [r2, #12]
}
 800317c:	bf00      	nop
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	e000ed00 	.word	0xe000ed00
 800318c:	05fa0000 	.word	0x05fa0000

08003190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003194:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	0a1b      	lsrs	r3, r3, #8
 800319a:	f003 0307 	and.w	r3, r3, #7
}
 800319e:	4618      	mov	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	6039      	str	r1, [r7, #0]
 80031b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	db0a      	blt.n	80031d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	490c      	ldr	r1, [pc, #48]	; (80031f8 <__NVIC_SetPriority+0x4c>)
 80031c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031ca:	0112      	lsls	r2, r2, #4
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	440b      	add	r3, r1
 80031d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d4:	e00a      	b.n	80031ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	4908      	ldr	r1, [pc, #32]	; (80031fc <__NVIC_SetPriority+0x50>)
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	3b04      	subs	r3, #4
 80031e4:	0112      	lsls	r2, r2, #4
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	440b      	add	r3, r1
 80031ea:	761a      	strb	r2, [r3, #24]
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000e100 	.word	0xe000e100
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003200:	b480      	push	{r7}
 8003202:	b089      	sub	sp, #36	; 0x24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f1c3 0307 	rsb	r3, r3, #7
 800321a:	2b04      	cmp	r3, #4
 800321c:	bf28      	it	cs
 800321e:	2304      	movcs	r3, #4
 8003220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3304      	adds	r3, #4
 8003226:	2b06      	cmp	r3, #6
 8003228:	d902      	bls.n	8003230 <NVIC_EncodePriority+0x30>
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3b03      	subs	r3, #3
 800322e:	e000      	b.n	8003232 <NVIC_EncodePriority+0x32>
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003234:	f04f 32ff 	mov.w	r2, #4294967295
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43da      	mvns	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	401a      	ands	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003248:	f04f 31ff 	mov.w	r1, #4294967295
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	43d9      	mvns	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	4313      	orrs	r3, r2
         );
}
 800325a:	4618      	mov	r0, r3
 800325c:	3724      	adds	r7, #36	; 0x24
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003278:	d301      	bcc.n	800327e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800327a:	2301      	movs	r3, #1
 800327c:	e00f      	b.n	800329e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800327e:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <SysTick_Config+0x40>)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3b01      	subs	r3, #1
 8003284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003286:	210f      	movs	r1, #15
 8003288:	f04f 30ff 	mov.w	r0, #4294967295
 800328c:	f7ff ff8e 	bl	80031ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <SysTick_Config+0x40>)
 8003292:	2200      	movs	r2, #0
 8003294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003296:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <SysTick_Config+0x40>)
 8003298:	2207      	movs	r2, #7
 800329a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	e000e010 	.word	0xe000e010

080032ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff ff47 	bl	8003148 <__NVIC_SetPriorityGrouping>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b086      	sub	sp, #24
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	4603      	mov	r3, r0
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032d0:	f7ff ff5e 	bl	8003190 <__NVIC_GetPriorityGrouping>
 80032d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	6978      	ldr	r0, [r7, #20]
 80032dc:	f7ff ff90 	bl	8003200 <NVIC_EncodePriority>
 80032e0:	4602      	mov	r2, r0
 80032e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff5f 	bl	80031ac <__NVIC_SetPriority>
}
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff ffb2 	bl	8003268 <SysTick_Config>
 8003304:	4603      	mov	r3, r0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003310:	b480      	push	{r7}
 8003312:	b089      	sub	sp, #36	; 0x24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800331e:	4b89      	ldr	r3, [pc, #548]	; (8003544 <HAL_GPIO_Init+0x234>)
 8003320:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003322:	e194      	b.n	800364e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	2101      	movs	r1, #1
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	fa01 f303 	lsl.w	r3, r1, r3
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 8186 	beq.w	8003648 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	2b01      	cmp	r3, #1
 8003346:	d005      	beq.n	8003354 <HAL_GPIO_Init+0x44>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d130      	bne.n	80033b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	2203      	movs	r2, #3
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800338a:	2201      	movs	r2, #1
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4013      	ands	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	091b      	lsrs	r3, r3, #4
 80033a0:	f003 0201 	and.w	r2, r3, #1
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d017      	beq.n	80033f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	2203      	movs	r2, #3
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4013      	ands	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d123      	bne.n	8003446 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	08da      	lsrs	r2, r3, #3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3208      	adds	r2, #8
 8003406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	220f      	movs	r2, #15
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4013      	ands	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	691a      	ldr	r2, [r3, #16]
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	08da      	lsrs	r2, r3, #3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3208      	adds	r2, #8
 8003440:	69b9      	ldr	r1, [r7, #24]
 8003442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	2203      	movs	r2, #3
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 0203 	and.w	r2, r3, #3
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80e0 	beq.w	8003648 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003488:	4b2f      	ldr	r3, [pc, #188]	; (8003548 <HAL_GPIO_Init+0x238>)
 800348a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800348e:	4a2e      	ldr	r2, [pc, #184]	; (8003548 <HAL_GPIO_Init+0x238>)
 8003490:	f043 0302 	orr.w	r3, r3, #2
 8003494:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_GPIO_Init+0x238>)
 800349a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034a6:	4a29      	ldr	r2, [pc, #164]	; (800354c <HAL_GPIO_Init+0x23c>)
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	089b      	lsrs	r3, r3, #2
 80034ac:	3302      	adds	r3, #2
 80034ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	220f      	movs	r2, #15
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a20      	ldr	r2, [pc, #128]	; (8003550 <HAL_GPIO_Init+0x240>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d052      	beq.n	8003578 <HAL_GPIO_Init+0x268>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a1f      	ldr	r2, [pc, #124]	; (8003554 <HAL_GPIO_Init+0x244>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d031      	beq.n	800353e <HAL_GPIO_Init+0x22e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a1e      	ldr	r2, [pc, #120]	; (8003558 <HAL_GPIO_Init+0x248>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d02b      	beq.n	800353a <HAL_GPIO_Init+0x22a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a1d      	ldr	r2, [pc, #116]	; (800355c <HAL_GPIO_Init+0x24c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d025      	beq.n	8003536 <HAL_GPIO_Init+0x226>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a1c      	ldr	r2, [pc, #112]	; (8003560 <HAL_GPIO_Init+0x250>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d01f      	beq.n	8003532 <HAL_GPIO_Init+0x222>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a1b      	ldr	r2, [pc, #108]	; (8003564 <HAL_GPIO_Init+0x254>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d019      	beq.n	800352e <HAL_GPIO_Init+0x21e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a1a      	ldr	r2, [pc, #104]	; (8003568 <HAL_GPIO_Init+0x258>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d013      	beq.n	800352a <HAL_GPIO_Init+0x21a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a19      	ldr	r2, [pc, #100]	; (800356c <HAL_GPIO_Init+0x25c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00d      	beq.n	8003526 <HAL_GPIO_Init+0x216>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a18      	ldr	r2, [pc, #96]	; (8003570 <HAL_GPIO_Init+0x260>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d007      	beq.n	8003522 <HAL_GPIO_Init+0x212>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a17      	ldr	r2, [pc, #92]	; (8003574 <HAL_GPIO_Init+0x264>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d101      	bne.n	800351e <HAL_GPIO_Init+0x20e>
 800351a:	2309      	movs	r3, #9
 800351c:	e02d      	b.n	800357a <HAL_GPIO_Init+0x26a>
 800351e:	230a      	movs	r3, #10
 8003520:	e02b      	b.n	800357a <HAL_GPIO_Init+0x26a>
 8003522:	2308      	movs	r3, #8
 8003524:	e029      	b.n	800357a <HAL_GPIO_Init+0x26a>
 8003526:	2307      	movs	r3, #7
 8003528:	e027      	b.n	800357a <HAL_GPIO_Init+0x26a>
 800352a:	2306      	movs	r3, #6
 800352c:	e025      	b.n	800357a <HAL_GPIO_Init+0x26a>
 800352e:	2305      	movs	r3, #5
 8003530:	e023      	b.n	800357a <HAL_GPIO_Init+0x26a>
 8003532:	2304      	movs	r3, #4
 8003534:	e021      	b.n	800357a <HAL_GPIO_Init+0x26a>
 8003536:	2303      	movs	r3, #3
 8003538:	e01f      	b.n	800357a <HAL_GPIO_Init+0x26a>
 800353a:	2302      	movs	r3, #2
 800353c:	e01d      	b.n	800357a <HAL_GPIO_Init+0x26a>
 800353e:	2301      	movs	r3, #1
 8003540:	e01b      	b.n	800357a <HAL_GPIO_Init+0x26a>
 8003542:	bf00      	nop
 8003544:	58000080 	.word	0x58000080
 8003548:	58024400 	.word	0x58024400
 800354c:	58000400 	.word	0x58000400
 8003550:	58020000 	.word	0x58020000
 8003554:	58020400 	.word	0x58020400
 8003558:	58020800 	.word	0x58020800
 800355c:	58020c00 	.word	0x58020c00
 8003560:	58021000 	.word	0x58021000
 8003564:	58021400 	.word	0x58021400
 8003568:	58021800 	.word	0x58021800
 800356c:	58021c00 	.word	0x58021c00
 8003570:	58022000 	.word	0x58022000
 8003574:	58022400 	.word	0x58022400
 8003578:	2300      	movs	r3, #0
 800357a:	69fa      	ldr	r2, [r7, #28]
 800357c:	f002 0203 	and.w	r2, r2, #3
 8003580:	0092      	lsls	r2, r2, #2
 8003582:	4093      	lsls	r3, r2
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800358a:	4938      	ldr	r1, [pc, #224]	; (800366c <HAL_GPIO_Init+0x35c>)
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	089b      	lsrs	r3, r3, #2
 8003590:	3302      	adds	r3, #2
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4013      	ands	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80035be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80035c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	43db      	mvns	r3, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4013      	ands	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80035ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	43db      	mvns	r3, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	3301      	adds	r3, #1
 800364c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	f47f ae63 	bne.w	8003324 <HAL_GPIO_Init+0x14>
  }
}
 800365e:	bf00      	nop
 8003660:	bf00      	nop
 8003662:	3724      	adds	r7, #36	; 0x24
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	58000400 	.word	0x58000400

08003670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	807b      	strh	r3, [r7, #2]
 800367c:	4613      	mov	r3, r2
 800367e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003680:	787b      	ldrb	r3, [r7, #1]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003686:	887a      	ldrh	r2, [r7, #2]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800368c:	e003      	b.n	8003696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800368e:	887b      	ldrh	r3, [r7, #2]
 8003690:	041a      	lsls	r2, r3, #16
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	619a      	str	r2, [r3, #24]
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
	...

080036a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80036ac:	4b29      	ldr	r3, [pc, #164]	; (8003754 <HAL_PWREx_ConfigSupply+0xb0>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	2b06      	cmp	r3, #6
 80036b6:	d00a      	beq.n	80036ce <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80036b8:	4b26      	ldr	r3, [pc, #152]	; (8003754 <HAL_PWREx_ConfigSupply+0xb0>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d001      	beq.n	80036ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e040      	b.n	800374c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e03e      	b.n	800374c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80036ce:	4b21      	ldr	r3, [pc, #132]	; (8003754 <HAL_PWREx_ConfigSupply+0xb0>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80036d6:	491f      	ldr	r1, [pc, #124]	; (8003754 <HAL_PWREx_ConfigSupply+0xb0>)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80036de:	f7fe fb37 	bl	8001d50 <HAL_GetTick>
 80036e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036e4:	e009      	b.n	80036fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80036e6:	f7fe fb33 	bl	8001d50 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036f4:	d901      	bls.n	80036fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e028      	b.n	800374c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036fa:	4b16      	ldr	r3, [pc, #88]	; (8003754 <HAL_PWREx_ConfigSupply+0xb0>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003706:	d1ee      	bne.n	80036e6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b1e      	cmp	r3, #30
 800370c:	d008      	beq.n	8003720 <HAL_PWREx_ConfigSupply+0x7c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b2e      	cmp	r3, #46	; 0x2e
 8003712:	d005      	beq.n	8003720 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b1d      	cmp	r3, #29
 8003718:	d002      	beq.n	8003720 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b2d      	cmp	r3, #45	; 0x2d
 800371e:	d114      	bne.n	800374a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003720:	f7fe fb16 	bl	8001d50 <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003726:	e009      	b.n	800373c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003728:	f7fe fb12 	bl	8001d50 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003736:	d901      	bls.n	800373c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e007      	b.n	800374c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_PWREx_ConfigSupply+0xb0>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003748:	d1ee      	bne.n	8003728 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	58024800 	.word	0x58024800

08003758 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08c      	sub	sp, #48	; 0x30
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e3f4      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 80b3 	beq.w	80038de <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003778:	4b95      	ldr	r3, [pc, #596]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003780:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003782:	4b93      	ldr	r3, [pc, #588]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 8003784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003786:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378a:	2b10      	cmp	r3, #16
 800378c:	d007      	beq.n	800379e <HAL_RCC_OscConfig+0x46>
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	2b18      	cmp	r3, #24
 8003792:	d112      	bne.n	80037ba <HAL_RCC_OscConfig+0x62>
 8003794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d10d      	bne.n	80037ba <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800379e:	4b8c      	ldr	r3, [pc, #560]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 8098 	beq.w	80038dc <HAL_RCC_OscConfig+0x184>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f040 8093 	bne.w	80038dc <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e3cc      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c2:	d106      	bne.n	80037d2 <HAL_RCC_OscConfig+0x7a>
 80037c4:	4b82      	ldr	r3, [pc, #520]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a81      	ldr	r2, [pc, #516]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 80037ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	e058      	b.n	8003884 <HAL_RCC_OscConfig+0x12c>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d112      	bne.n	8003800 <HAL_RCC_OscConfig+0xa8>
 80037da:	4b7d      	ldr	r3, [pc, #500]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a7c      	ldr	r2, [pc, #496]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 80037e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	4b7a      	ldr	r3, [pc, #488]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a79      	ldr	r2, [pc, #484]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 80037ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	4b77      	ldr	r3, [pc, #476]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a76      	ldr	r2, [pc, #472]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 80037f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e041      	b.n	8003884 <HAL_RCC_OscConfig+0x12c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003808:	d112      	bne.n	8003830 <HAL_RCC_OscConfig+0xd8>
 800380a:	4b71      	ldr	r3, [pc, #452]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a70      	ldr	r2, [pc, #448]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 8003810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	4b6e      	ldr	r3, [pc, #440]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a6d      	ldr	r2, [pc, #436]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 800381c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	4b6b      	ldr	r3, [pc, #428]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a6a      	ldr	r2, [pc, #424]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 8003828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	e029      	b.n	8003884 <HAL_RCC_OscConfig+0x12c>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003838:	d112      	bne.n	8003860 <HAL_RCC_OscConfig+0x108>
 800383a:	4b65      	ldr	r3, [pc, #404]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a64      	ldr	r2, [pc, #400]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 8003840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	4b62      	ldr	r3, [pc, #392]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a61      	ldr	r2, [pc, #388]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 800384c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	4b5f      	ldr	r3, [pc, #380]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a5e      	ldr	r2, [pc, #376]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e011      	b.n	8003884 <HAL_RCC_OscConfig+0x12c>
 8003860:	4b5b      	ldr	r3, [pc, #364]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a5a      	ldr	r2, [pc, #360]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 8003866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	4b58      	ldr	r3, [pc, #352]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a57      	ldr	r2, [pc, #348]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 8003872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	4b55      	ldr	r3, [pc, #340]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a54      	ldr	r2, [pc, #336]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 800387e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d013      	beq.n	80038b4 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fe fa60 	bl	8001d50 <HAL_GetTick>
 8003890:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003894:	f7fe fa5c 	bl	8001d50 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b64      	cmp	r3, #100	; 0x64
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e356      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038a6:	4b4a      	ldr	r3, [pc, #296]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x13c>
 80038b2:	e014      	b.n	80038de <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fe fa4c 	bl	8001d50 <HAL_GetTick>
 80038b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038bc:	f7fe fa48 	bl	8001d50 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b64      	cmp	r3, #100	; 0x64
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e342      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038ce:	4b40      	ldr	r3, [pc, #256]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x164>
 80038da:	e000      	b.n	80038de <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 808d 	beq.w	8003a06 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ec:	4b38      	ldr	r3, [pc, #224]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038f6:	4b36      	ldr	r3, [pc, #216]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 80038f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d007      	beq.n	8003912 <HAL_RCC_OscConfig+0x1ba>
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	2b18      	cmp	r3, #24
 8003906:	d137      	bne.n	8003978 <HAL_RCC_OscConfig+0x220>
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d132      	bne.n	8003978 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003912:	4b2f      	ldr	r3, [pc, #188]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <HAL_RCC_OscConfig+0x1d2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e314      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800392a:	4b29      	ldr	r3, [pc, #164]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 0219 	bic.w	r2, r3, #25
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	4926      	ldr	r1, [pc, #152]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800393c:	f7fe fa08 	bl	8001d50 <HAL_GetTick>
 8003940:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003944:	f7fe fa04 	bl	8001d50 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e2fe      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003956:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0f0      	beq.n	8003944 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003962:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	061b      	lsls	r3, r3, #24
 8003970:	4917      	ldr	r1, [pc, #92]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 8003972:	4313      	orrs	r3, r2
 8003974:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003976:	e046      	b.n	8003a06 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d029      	beq.n	80039d4 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003980:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f023 0219 	bic.w	r2, r3, #25
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4910      	ldr	r1, [pc, #64]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003992:	f7fe f9dd 	bl	8001d50 <HAL_GetTick>
 8003996:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800399a:	f7fe f9d9 	bl	8001d50 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e2d3      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039ac:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f0      	beq.n	800399a <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	061b      	lsls	r3, r3, #24
 80039c6:	4902      	ldr	r1, [pc, #8]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]
 80039cc:	e01b      	b.n	8003a06 <HAL_RCC_OscConfig+0x2ae>
 80039ce:	bf00      	nop
 80039d0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039d4:	4b97      	ldr	r3, [pc, #604]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a96      	ldr	r2, [pc, #600]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 80039da:	f023 0301 	bic.w	r3, r3, #1
 80039de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7fe f9b6 	bl	8001d50 <HAL_GetTick>
 80039e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e8:	f7fe f9b2 	bl	8001d50 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e2ac      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039fa:	4b8e      	ldr	r3, [pc, #568]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0310 	and.w	r3, r3, #16
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d06a      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a12:	4b88      	ldr	r3, [pc, #544]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a1a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a1c:	4b85      	ldr	r3, [pc, #532]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d007      	beq.n	8003a38 <HAL_RCC_OscConfig+0x2e0>
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2b18      	cmp	r3, #24
 8003a2c:	d11b      	bne.n	8003a66 <HAL_RCC_OscConfig+0x30e>
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d116      	bne.n	8003a66 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a38:	4b7e      	ldr	r3, [pc, #504]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_OscConfig+0x2f8>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	2b80      	cmp	r3, #128	; 0x80
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e281      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a50:	4b78      	ldr	r3, [pc, #480]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	061b      	lsls	r3, r3, #24
 8003a5e:	4975      	ldr	r1, [pc, #468]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a64:	e040      	b.n	8003ae8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d023      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a6e:	4b71      	ldr	r3, [pc, #452]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a70      	ldr	r2, [pc, #448]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7a:	f7fe f969 	bl	8001d50 <HAL_GetTick>
 8003a7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a82:	f7fe f965 	bl	8001d50 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e25f      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a94:	4b67      	ldr	r3, [pc, #412]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003aa0:	4b64      	ldr	r3, [pc, #400]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	061b      	lsls	r3, r3, #24
 8003aae:	4961      	ldr	r1, [pc, #388]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60cb      	str	r3, [r1, #12]
 8003ab4:	e018      	b.n	8003ae8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ab6:	4b5f      	ldr	r3, [pc, #380]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a5e      	ldr	r2, [pc, #376]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac2:	f7fe f945 	bl	8001d50 <HAL_GetTick>
 8003ac6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003aca:	f7fe f941 	bl	8001d50 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e23b      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003adc:	4b55      	ldr	r3, [pc, #340]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1f0      	bne.n	8003aca <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d036      	beq.n	8003b62 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d019      	beq.n	8003b30 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003afc:	4b4d      	ldr	r3, [pc, #308]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b00:	4a4c      	ldr	r2, [pc, #304]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b08:	f7fe f922 	bl	8001d50 <HAL_GetTick>
 8003b0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b10:	f7fe f91e 	bl	8001d50 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e218      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b22:	4b44      	ldr	r3, [pc, #272]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x3b8>
 8003b2e:	e018      	b.n	8003b62 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b30:	4b40      	ldr	r3, [pc, #256]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b34:	4a3f      	ldr	r2, [pc, #252]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7fe f908 	bl	8001d50 <HAL_GetTick>
 8003b40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b44:	f7fe f904 	bl	8001d50 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e1fe      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b56:	4b37      	ldr	r3, [pc, #220]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d036      	beq.n	8003bdc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d019      	beq.n	8003baa <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b76:	4b2f      	ldr	r3, [pc, #188]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a2e      	ldr	r2, [pc, #184]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003b7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b82:	f7fe f8e5 	bl	8001d50 <HAL_GetTick>
 8003b86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b8a:	f7fe f8e1 	bl	8001d50 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e1db      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b9c:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x432>
 8003ba8:	e018      	b.n	8003bdc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003baa:	4b22      	ldr	r3, [pc, #136]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a21      	ldr	r2, [pc, #132]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003bb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bb4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003bb6:	f7fe f8cb 	bl	8001d50 <HAL_GetTick>
 8003bba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003bbe:	f7fe f8c7 	bl	8001d50 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e1c1      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bd0:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1f0      	bne.n	8003bbe <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80af 	beq.w	8003d48 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bea:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <HAL_RCC_OscConfig+0x4e0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a12      	ldr	r2, [pc, #72]	; (8003c38 <HAL_RCC_OscConfig+0x4e0>)
 8003bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bf6:	f7fe f8ab 	bl	8001d50 <HAL_GetTick>
 8003bfa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003bfe:	f7fe f8a7 	bl	8001d50 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b64      	cmp	r3, #100	; 0x64
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e1a1      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c10:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_RCC_OscConfig+0x4e0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d10b      	bne.n	8003c3c <HAL_RCC_OscConfig+0x4e4>
 8003c24:	4b03      	ldr	r3, [pc, #12]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c28:	4a02      	ldr	r2, [pc, #8]	; (8003c34 <HAL_RCC_OscConfig+0x4dc>)
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c30:	e05b      	b.n	8003cea <HAL_RCC_OscConfig+0x592>
 8003c32:	bf00      	nop
 8003c34:	58024400 	.word	0x58024400
 8003c38:	58024800 	.word	0x58024800
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d112      	bne.n	8003c6a <HAL_RCC_OscConfig+0x512>
 8003c44:	4b9d      	ldr	r3, [pc, #628]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	4a9c      	ldr	r2, [pc, #624]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003c4a:	f023 0301 	bic.w	r3, r3, #1
 8003c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c50:	4b9a      	ldr	r3, [pc, #616]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c54:	4a99      	ldr	r2, [pc, #612]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5c:	4b97      	ldr	r3, [pc, #604]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c60:	4a96      	ldr	r2, [pc, #600]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003c62:	f023 0304 	bic.w	r3, r3, #4
 8003c66:	6713      	str	r3, [r2, #112]	; 0x70
 8003c68:	e03f      	b.n	8003cea <HAL_RCC_OscConfig+0x592>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b05      	cmp	r3, #5
 8003c70:	d112      	bne.n	8003c98 <HAL_RCC_OscConfig+0x540>
 8003c72:	4b92      	ldr	r3, [pc, #584]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c76:	4a91      	ldr	r2, [pc, #580]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003c78:	f043 0304 	orr.w	r3, r3, #4
 8003c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7e:	4b8f      	ldr	r3, [pc, #572]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	4a8e      	ldr	r2, [pc, #568]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003c84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c88:	6713      	str	r3, [r2, #112]	; 0x70
 8003c8a:	4b8c      	ldr	r3, [pc, #560]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	4a8b      	ldr	r2, [pc, #556]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	6713      	str	r3, [r2, #112]	; 0x70
 8003c96:	e028      	b.n	8003cea <HAL_RCC_OscConfig+0x592>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b85      	cmp	r3, #133	; 0x85
 8003c9e:	d112      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x56e>
 8003ca0:	4b86      	ldr	r3, [pc, #536]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca4:	4a85      	ldr	r2, [pc, #532]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003ca6:	f043 0304 	orr.w	r3, r3, #4
 8003caa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cac:	4b83      	ldr	r3, [pc, #524]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	4a82      	ldr	r2, [pc, #520]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb8:	4b80      	ldr	r3, [pc, #512]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbc:	4a7f      	ldr	r2, [pc, #508]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc4:	e011      	b.n	8003cea <HAL_RCC_OscConfig+0x592>
 8003cc6:	4b7d      	ldr	r3, [pc, #500]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	4a7c      	ldr	r2, [pc, #496]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003ccc:	f023 0301 	bic.w	r3, r3, #1
 8003cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd2:	4b7a      	ldr	r3, [pc, #488]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	4a79      	ldr	r2, [pc, #484]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003cd8:	f023 0304 	bic.w	r3, r3, #4
 8003cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cde:	4b77      	ldr	r3, [pc, #476]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	4a76      	ldr	r2, [pc, #472]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d015      	beq.n	8003d1e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf2:	f7fe f82d 	bl	8001d50 <HAL_GetTick>
 8003cf6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cf8:	e00a      	b.n	8003d10 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cfa:	f7fe f829 	bl	8001d50 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e121      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d10:	4b6a      	ldr	r3, [pc, #424]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ee      	beq.n	8003cfa <HAL_RCC_OscConfig+0x5a2>
 8003d1c:	e014      	b.n	8003d48 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1e:	f7fe f817 	bl	8001d50 <HAL_GetTick>
 8003d22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d24:	e00a      	b.n	8003d3c <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d26:	f7fe f813 	bl	8001d50 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e10b      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d3c:	4b5f      	ldr	r3, [pc, #380]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1ee      	bne.n	8003d26 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8100 	beq.w	8003f52 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d52:	4b5a      	ldr	r3, [pc, #360]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d5a:	2b18      	cmp	r3, #24
 8003d5c:	f000 80bb 	beq.w	8003ed6 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	f040 8095 	bne.w	8003e94 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6a:	4b54      	ldr	r3, [pc, #336]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a53      	ldr	r2, [pc, #332]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003d70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d76:	f7fd ffeb 	bl	8001d50 <HAL_GetTick>
 8003d7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d7e:	f7fd ffe7 	bl	8001d50 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e0e1      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d90:	4b4a      	ldr	r3, [pc, #296]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f0      	bne.n	8003d7e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d9c:	4b47      	ldr	r3, [pc, #284]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003d9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003da0:	4b47      	ldr	r3, [pc, #284]	; (8003ec0 <HAL_RCC_OscConfig+0x768>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003dac:	0112      	lsls	r2, r2, #4
 8003dae:	430a      	orrs	r2, r1
 8003db0:	4942      	ldr	r1, [pc, #264]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	628b      	str	r3, [r1, #40]	; 0x28
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	025b      	lsls	r3, r3, #9
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	041b      	lsls	r3, r3, #16
 8003dd4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dde:	3b01      	subs	r3, #1
 8003de0:	061b      	lsls	r3, r3, #24
 8003de2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003de6:	4935      	ldr	r1, [pc, #212]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003dec:	4b33      	ldr	r3, [pc, #204]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	4a32      	ldr	r2, [pc, #200]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003df2:	f023 0301 	bic.w	r3, r3, #1
 8003df6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003df8:	4b30      	ldr	r3, [pc, #192]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dfc:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <HAL_RCC_OscConfig+0x76c>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e04:	00d2      	lsls	r2, r2, #3
 8003e06:	492d      	ldr	r1, [pc, #180]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e0c:	4b2b      	ldr	r3, [pc, #172]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	f023 020c 	bic.w	r2, r3, #12
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	4928      	ldr	r1, [pc, #160]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003e1e:	4b27      	ldr	r3, [pc, #156]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	f023 0202 	bic.w	r2, r3, #2
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	4924      	ldr	r1, [pc, #144]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e30:	4b22      	ldr	r3, [pc, #136]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	4a21      	ldr	r2, [pc, #132]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e3c:	4b1f      	ldr	r3, [pc, #124]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	4a1e      	ldr	r2, [pc, #120]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e48:	4b1c      	ldr	r3, [pc, #112]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	4a1b      	ldr	r2, [pc, #108]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003e4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003e54:	4b19      	ldr	r3, [pc, #100]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	4a18      	ldr	r2, [pc, #96]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e60:	4b16      	ldr	r3, [pc, #88]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a15      	ldr	r2, [pc, #84]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7fd ff70 	bl	8001d50 <HAL_GetTick>
 8003e70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e74:	f7fd ff6c 	bl	8001d50 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e066      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e86:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0x71c>
 8003e92:	e05e      	b.n	8003f52 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e94:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a08      	ldr	r2, [pc, #32]	; (8003ebc <HAL_RCC_OscConfig+0x764>)
 8003e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fd ff56 	bl	8001d50 <HAL_GetTick>
 8003ea4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ea6:	e00f      	b.n	8003ec8 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea8:	f7fd ff52 	bl	8001d50 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d908      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e04c      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
 8003eba:	bf00      	nop
 8003ebc:	58024400 	.word	0x58024400
 8003ec0:	fffffc0c 	.word	0xfffffc0c
 8003ec4:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ec8:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <HAL_RCC_OscConfig+0x804>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1e9      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x750>
 8003ed4:	e03d      	b.n	8003f52 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ed6:	4b21      	ldr	r3, [pc, #132]	; (8003f5c <HAL_RCC_OscConfig+0x804>)
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eda:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003edc:	4b1f      	ldr	r3, [pc, #124]	; (8003f5c <HAL_RCC_OscConfig+0x804>)
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d031      	beq.n	8003f4e <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f003 0203 	and.w	r2, r3, #3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d12a      	bne.n	8003f4e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	091b      	lsrs	r3, r3, #4
 8003efc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d122      	bne.n	8003f4e <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d11a      	bne.n	8003f4e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	0a5b      	lsrs	r3, r3, #9
 8003f1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f24:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d111      	bne.n	8003f4e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	0c1b      	lsrs	r3, r3, #16
 8003f2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d108      	bne.n	8003f4e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	0e1b      	lsrs	r3, r3, #24
 8003f40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f48:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d001      	beq.n	8003f52 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3730      	adds	r7, #48	; 0x30
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	58024400 	.word	0x58024400

08003f60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e19c      	b.n	80042ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f74:	4b8a      	ldr	r3, [pc, #552]	; (80041a0 <HAL_RCC_ClockConfig+0x240>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 030f 	and.w	r3, r3, #15
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d910      	bls.n	8003fa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f82:	4b87      	ldr	r3, [pc, #540]	; (80041a0 <HAL_RCC_ClockConfig+0x240>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 020f 	bic.w	r2, r3, #15
 8003f8a:	4985      	ldr	r1, [pc, #532]	; (80041a0 <HAL_RCC_ClockConfig+0x240>)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f92:	4b83      	ldr	r3, [pc, #524]	; (80041a0 <HAL_RCC_ClockConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e184      	b.n	80042ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d010      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	4b7b      	ldr	r3, [pc, #492]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d908      	bls.n	8003fd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fc0:	4b78      	ldr	r3, [pc, #480]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	4975      	ldr	r1, [pc, #468]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d010      	beq.n	8004000 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	4b70      	ldr	r3, [pc, #448]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d908      	bls.n	8004000 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003fee:	4b6d      	ldr	r3, [pc, #436]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	496a      	ldr	r1, [pc, #424]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b00      	cmp	r3, #0
 800400a:	d010      	beq.n	800402e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699a      	ldr	r2, [r3, #24]
 8004010:	4b64      	ldr	r3, [pc, #400]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004018:	429a      	cmp	r2, r3
 800401a:	d908      	bls.n	800402e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800401c:	4b61      	ldr	r3, [pc, #388]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	495e      	ldr	r1, [pc, #376]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 800402a:	4313      	orrs	r3, r2
 800402c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d010      	beq.n	800405c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69da      	ldr	r2, [r3, #28]
 800403e:	4b59      	ldr	r3, [pc, #356]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004046:	429a      	cmp	r2, r3
 8004048:	d908      	bls.n	800405c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800404a:	4b56      	ldr	r3, [pc, #344]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	4953      	ldr	r1, [pc, #332]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 8004058:	4313      	orrs	r3, r2
 800405a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d010      	beq.n	800408a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	4b4d      	ldr	r3, [pc, #308]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	f003 030f 	and.w	r3, r3, #15
 8004074:	429a      	cmp	r2, r3
 8004076:	d908      	bls.n	800408a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004078:	4b4a      	ldr	r3, [pc, #296]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	f023 020f 	bic.w	r2, r3, #15
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4947      	ldr	r1, [pc, #284]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 8004086:	4313      	orrs	r3, r2
 8004088:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d055      	beq.n	8004142 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004096:	4b43      	ldr	r3, [pc, #268]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	4940      	ldr	r1, [pc, #256]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d107      	bne.n	80040c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040b0:	4b3c      	ldr	r3, [pc, #240]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d121      	bne.n	8004100 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0f6      	b.n	80042ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d107      	bne.n	80040d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040c8:	4b36      	ldr	r3, [pc, #216]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d115      	bne.n	8004100 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0ea      	b.n	80042ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d107      	bne.n	80040f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040e0:	4b30      	ldr	r3, [pc, #192]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d109      	bne.n	8004100 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0de      	b.n	80042ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040f0:	4b2c      	ldr	r3, [pc, #176]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e0d6      	b.n	80042ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004100:	4b28      	ldr	r3, [pc, #160]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f023 0207 	bic.w	r2, r3, #7
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	4925      	ldr	r1, [pc, #148]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 800410e:	4313      	orrs	r3, r2
 8004110:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004112:	f7fd fe1d 	bl	8001d50 <HAL_GetTick>
 8004116:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004118:	e00a      	b.n	8004130 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800411a:	f7fd fe19 	bl	8001d50 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	f241 3288 	movw	r2, #5000	; 0x1388
 8004128:	4293      	cmp	r3, r2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e0be      	b.n	80042ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004130:	4b1c      	ldr	r3, [pc, #112]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	429a      	cmp	r2, r3
 8004140:	d1eb      	bne.n	800411a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d010      	beq.n	8004170 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	4b14      	ldr	r3, [pc, #80]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	429a      	cmp	r2, r3
 800415c:	d208      	bcs.n	8004170 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800415e:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f023 020f 	bic.w	r2, r3, #15
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	490e      	ldr	r1, [pc, #56]	; (80041a4 <HAL_RCC_ClockConfig+0x244>)
 800416c:	4313      	orrs	r3, r2
 800416e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <HAL_RCC_ClockConfig+0x240>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d214      	bcs.n	80041a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417e:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <HAL_RCC_ClockConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 020f 	bic.w	r2, r3, #15
 8004186:	4906      	ldr	r1, [pc, #24]	; (80041a0 <HAL_RCC_ClockConfig+0x240>)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	4313      	orrs	r3, r2
 800418c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b04      	ldr	r3, [pc, #16]	; (80041a0 <HAL_RCC_ClockConfig+0x240>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e086      	b.n	80042ae <HAL_RCC_ClockConfig+0x34e>
 80041a0:	52002000 	.word	0x52002000
 80041a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d010      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	4b3f      	ldr	r3, [pc, #252]	; (80042b8 <HAL_RCC_ClockConfig+0x358>)
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d208      	bcs.n	80041d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041c4:	4b3c      	ldr	r3, [pc, #240]	; (80042b8 <HAL_RCC_ClockConfig+0x358>)
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	4939      	ldr	r1, [pc, #228]	; (80042b8 <HAL_RCC_ClockConfig+0x358>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d010      	beq.n	8004204 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695a      	ldr	r2, [r3, #20]
 80041e6:	4b34      	ldr	r3, [pc, #208]	; (80042b8 <HAL_RCC_ClockConfig+0x358>)
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d208      	bcs.n	8004204 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041f2:	4b31      	ldr	r3, [pc, #196]	; (80042b8 <HAL_RCC_ClockConfig+0x358>)
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	492e      	ldr	r1, [pc, #184]	; (80042b8 <HAL_RCC_ClockConfig+0x358>)
 8004200:	4313      	orrs	r3, r2
 8004202:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0310 	and.w	r3, r3, #16
 800420c:	2b00      	cmp	r3, #0
 800420e:	d010      	beq.n	8004232 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699a      	ldr	r2, [r3, #24]
 8004214:	4b28      	ldr	r3, [pc, #160]	; (80042b8 <HAL_RCC_ClockConfig+0x358>)
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800421c:	429a      	cmp	r2, r3
 800421e:	d208      	bcs.n	8004232 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004220:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <HAL_RCC_ClockConfig+0x358>)
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	4922      	ldr	r1, [pc, #136]	; (80042b8 <HAL_RCC_ClockConfig+0x358>)
 800422e:	4313      	orrs	r3, r2
 8004230:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	2b00      	cmp	r3, #0
 800423c:	d010      	beq.n	8004260 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69da      	ldr	r2, [r3, #28]
 8004242:	4b1d      	ldr	r3, [pc, #116]	; (80042b8 <HAL_RCC_ClockConfig+0x358>)
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800424a:	429a      	cmp	r2, r3
 800424c:	d208      	bcs.n	8004260 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800424e:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <HAL_RCC_ClockConfig+0x358>)
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	4917      	ldr	r1, [pc, #92]	; (80042b8 <HAL_RCC_ClockConfig+0x358>)
 800425c:	4313      	orrs	r3, r2
 800425e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004260:	f000 f834 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 8004264:	4602      	mov	r2, r0
 8004266:	4b14      	ldr	r3, [pc, #80]	; (80042b8 <HAL_RCC_ClockConfig+0x358>)
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	0a1b      	lsrs	r3, r3, #8
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	4912      	ldr	r1, [pc, #72]	; (80042bc <HAL_RCC_ClockConfig+0x35c>)
 8004272:	5ccb      	ldrb	r3, [r1, r3]
 8004274:	f003 031f 	and.w	r3, r3, #31
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
 800427c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800427e:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <HAL_RCC_ClockConfig+0x358>)
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	4a0d      	ldr	r2, [pc, #52]	; (80042bc <HAL_RCC_ClockConfig+0x35c>)
 8004288:	5cd3      	ldrb	r3, [r2, r3]
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	fa22 f303 	lsr.w	r3, r2, r3
 8004294:	4a0a      	ldr	r2, [pc, #40]	; (80042c0 <HAL_RCC_ClockConfig+0x360>)
 8004296:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004298:	4a0a      	ldr	r2, [pc, #40]	; (80042c4 <HAL_RCC_ClockConfig+0x364>)
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800429e:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <HAL_RCC_ClockConfig+0x368>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fd fd0a 	bl	8001cbc <HAL_InitTick>
 80042a8:	4603      	mov	r3, r0
 80042aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	58024400 	.word	0x58024400
 80042bc:	0800b8f0 	.word	0x0800b8f0
 80042c0:	24000020 	.word	0x24000020
 80042c4:	2400001c 	.word	0x2400001c
 80042c8:	24000024 	.word	0x24000024

080042cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b089      	sub	sp, #36	; 0x24
 80042d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042d2:	4bb3      	ldr	r3, [pc, #716]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042da:	2b18      	cmp	r3, #24
 80042dc:	f200 8155 	bhi.w	800458a <HAL_RCC_GetSysClockFreq+0x2be>
 80042e0:	a201      	add	r2, pc, #4	; (adr r2, 80042e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80042e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e6:	bf00      	nop
 80042e8:	0800434d 	.word	0x0800434d
 80042ec:	0800458b 	.word	0x0800458b
 80042f0:	0800458b 	.word	0x0800458b
 80042f4:	0800458b 	.word	0x0800458b
 80042f8:	0800458b 	.word	0x0800458b
 80042fc:	0800458b 	.word	0x0800458b
 8004300:	0800458b 	.word	0x0800458b
 8004304:	0800458b 	.word	0x0800458b
 8004308:	08004373 	.word	0x08004373
 800430c:	0800458b 	.word	0x0800458b
 8004310:	0800458b 	.word	0x0800458b
 8004314:	0800458b 	.word	0x0800458b
 8004318:	0800458b 	.word	0x0800458b
 800431c:	0800458b 	.word	0x0800458b
 8004320:	0800458b 	.word	0x0800458b
 8004324:	0800458b 	.word	0x0800458b
 8004328:	08004379 	.word	0x08004379
 800432c:	0800458b 	.word	0x0800458b
 8004330:	0800458b 	.word	0x0800458b
 8004334:	0800458b 	.word	0x0800458b
 8004338:	0800458b 	.word	0x0800458b
 800433c:	0800458b 	.word	0x0800458b
 8004340:	0800458b 	.word	0x0800458b
 8004344:	0800458b 	.word	0x0800458b
 8004348:	0800437f 	.word	0x0800437f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800434c:	4b94      	ldr	r3, [pc, #592]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b00      	cmp	r3, #0
 8004356:	d009      	beq.n	800436c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004358:	4b91      	ldr	r3, [pc, #580]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	08db      	lsrs	r3, r3, #3
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	4a90      	ldr	r2, [pc, #576]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004364:	fa22 f303 	lsr.w	r3, r2, r3
 8004368:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800436a:	e111      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800436c:	4b8d      	ldr	r3, [pc, #564]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800436e:	61bb      	str	r3, [r7, #24]
    break;
 8004370:	e10e      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004372:	4b8d      	ldr	r3, [pc, #564]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004374:	61bb      	str	r3, [r7, #24]
    break;
 8004376:	e10b      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004378:	4b8c      	ldr	r3, [pc, #560]	; (80045ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800437a:	61bb      	str	r3, [r7, #24]
    break;
 800437c:	e108      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800437e:	4b88      	ldr	r3, [pc, #544]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004388:	4b85      	ldr	r3, [pc, #532]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004392:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004394:	4b82      	ldr	r3, [pc, #520]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800439e:	4b80      	ldr	r3, [pc, #512]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a2:	08db      	lsrs	r3, r3, #3
 80043a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	fb02 f303 	mul.w	r3, r2, r3
 80043ae:	ee07 3a90 	vmov	s15, r3
 80043b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80e1 	beq.w	8004584 <HAL_RCC_GetSysClockFreq+0x2b8>
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	f000 8083 	beq.w	80044d0 <HAL_RCC_GetSysClockFreq+0x204>
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	f200 80a1 	bhi.w	8004514 <HAL_RCC_GetSysClockFreq+0x248>
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_RCC_GetSysClockFreq+0x114>
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d056      	beq.n	800448c <HAL_RCC_GetSysClockFreq+0x1c0>
 80043de:	e099      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043e0:	4b6f      	ldr	r3, [pc, #444]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d02d      	beq.n	8004448 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043ec:	4b6c      	ldr	r3, [pc, #432]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	08db      	lsrs	r3, r3, #3
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	4a6b      	ldr	r2, [pc, #428]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043f8:	fa22 f303 	lsr.w	r3, r2, r3
 80043fc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	ee07 3a90 	vmov	s15, r3
 8004404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004416:	4b62      	ldr	r3, [pc, #392]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004426:	ed97 6a02 	vldr	s12, [r7, #8]
 800442a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80045b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800442e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800443a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800443e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004442:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004446:	e087      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004452:	eddf 6a58 	vldr	s13, [pc, #352]	; 80045b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800445a:	4b51      	ldr	r3, [pc, #324]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800446a:	ed97 6a02 	vldr	s12, [r7, #8]
 800446e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80045b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800447a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800447e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800448a:	e065      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	ee07 3a90 	vmov	s15, r3
 8004492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004496:	eddf 6a48 	vldr	s13, [pc, #288]	; 80045b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800449a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800449e:	4b40      	ldr	r3, [pc, #256]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a6:	ee07 3a90 	vmov	s15, r3
 80044aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80044b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80045b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044ce:	e043      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044da:	eddf 6a38 	vldr	s13, [pc, #224]	; 80045bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80044de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044e2:	4b2f      	ldr	r3, [pc, #188]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ea:	ee07 3a90 	vmov	s15, r3
 80044ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80044f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80045b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800450a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800450e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004512:	e021      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80045b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004526:	4b1e      	ldr	r3, [pc, #120]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004536:	ed97 6a02 	vldr	s12, [r7, #8]
 800453a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80045b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800453e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800454a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800454e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004552:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004556:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004558:	4b11      	ldr	r3, [pc, #68]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455c:	0a5b      	lsrs	r3, r3, #9
 800455e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004562:	3301      	adds	r3, #1
 8004564:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	ee07 3a90 	vmov	s15, r3
 800456c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004570:	edd7 6a07 	vldr	s13, [r7, #28]
 8004574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800457c:	ee17 3a90 	vmov	r3, s15
 8004580:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004582:	e005      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]
    break;
 8004588:	e002      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800458a:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800458c:	61bb      	str	r3, [r7, #24]
    break;
 800458e:	bf00      	nop
  }

  return sysclockfreq;
 8004590:	69bb      	ldr	r3, [r7, #24]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3724      	adds	r7, #36	; 0x24
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	58024400 	.word	0x58024400
 80045a4:	03d09000 	.word	0x03d09000
 80045a8:	003d0900 	.word	0x003d0900
 80045ac:	007a1200 	.word	0x007a1200
 80045b0:	46000000 	.word	0x46000000
 80045b4:	4c742400 	.word	0x4c742400
 80045b8:	4a742400 	.word	0x4a742400
 80045bc:	4af42400 	.word	0x4af42400

080045c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80045c6:	f7ff fe81 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 80045ca:	4602      	mov	r2, r0
 80045cc:	4b10      	ldr	r3, [pc, #64]	; (8004610 <HAL_RCC_GetHCLKFreq+0x50>)
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	0a1b      	lsrs	r3, r3, #8
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	490f      	ldr	r1, [pc, #60]	; (8004614 <HAL_RCC_GetHCLKFreq+0x54>)
 80045d8:	5ccb      	ldrb	r3, [r1, r3]
 80045da:	f003 031f 	and.w	r3, r3, #31
 80045de:	fa22 f303 	lsr.w	r3, r2, r3
 80045e2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80045e4:	4b0a      	ldr	r3, [pc, #40]	; (8004610 <HAL_RCC_GetHCLKFreq+0x50>)
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	f003 030f 	and.w	r3, r3, #15
 80045ec:	4a09      	ldr	r2, [pc, #36]	; (8004614 <HAL_RCC_GetHCLKFreq+0x54>)
 80045ee:	5cd3      	ldrb	r3, [r2, r3]
 80045f0:	f003 031f 	and.w	r3, r3, #31
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	fa22 f303 	lsr.w	r3, r2, r3
 80045fa:	4a07      	ldr	r2, [pc, #28]	; (8004618 <HAL_RCC_GetHCLKFreq+0x58>)
 80045fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045fe:	4a07      	ldr	r2, [pc, #28]	; (800461c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004604:	4b04      	ldr	r3, [pc, #16]	; (8004618 <HAL_RCC_GetHCLKFreq+0x58>)
 8004606:	681b      	ldr	r3, [r3, #0]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	58024400 	.word	0x58024400
 8004614:	0800b8f0 	.word	0x0800b8f0
 8004618:	24000020 	.word	0x24000020
 800461c:	2400001c 	.word	0x2400001c

08004620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004624:	f7ff ffcc 	bl	80045c0 <HAL_RCC_GetHCLKFreq>
 8004628:	4602      	mov	r2, r0
 800462a:	4b06      	ldr	r3, [pc, #24]	; (8004644 <HAL_RCC_GetPCLK1Freq+0x24>)
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	091b      	lsrs	r3, r3, #4
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	4904      	ldr	r1, [pc, #16]	; (8004648 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004636:	5ccb      	ldrb	r3, [r1, r3]
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004640:	4618      	mov	r0, r3
 8004642:	bd80      	pop	{r7, pc}
 8004644:	58024400 	.word	0x58024400
 8004648:	0800b8f0 	.word	0x0800b8f0

0800464c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004650:	f7ff ffb6 	bl	80045c0 <HAL_RCC_GetHCLKFreq>
 8004654:	4602      	mov	r2, r0
 8004656:	4b06      	ldr	r3, [pc, #24]	; (8004670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	0a1b      	lsrs	r3, r3, #8
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	4904      	ldr	r1, [pc, #16]	; (8004674 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004662:	5ccb      	ldrb	r3, [r1, r3]
 8004664:	f003 031f 	and.w	r3, r3, #31
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800466c:	4618      	mov	r0, r3
 800466e:	bd80      	pop	{r7, pc}
 8004670:	58024400 	.word	0x58024400
 8004674:	0800b8f0 	.word	0x0800b8f0

08004678 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004680:	2300      	movs	r3, #0
 8004682:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004684:	2300      	movs	r3, #0
 8004686:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d03f      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004698:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800469c:	d02a      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800469e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046a2:	d824      	bhi.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046a8:	d018      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046ae:	d81e      	bhi.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80046b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b8:	d007      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80046ba:	e018      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046bc:	4b9f      	ldr	r3, [pc, #636]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	4a9e      	ldr	r2, [pc, #632]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80046c8:	e015      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3304      	adds	r3, #4
 80046ce:	2102      	movs	r1, #2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f001 ff1b 	bl	800650c <RCCEx_PLL2_Config>
 80046d6:	4603      	mov	r3, r0
 80046d8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80046da:	e00c      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3324      	adds	r3, #36	; 0x24
 80046e0:	2102      	movs	r1, #2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f001 ffc4 	bl	8006670 <RCCEx_PLL3_Config>
 80046e8:	4603      	mov	r3, r0
 80046ea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80046ec:	e003      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	75fb      	strb	r3, [r7, #23]
      break;
 80046f2:	e000      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80046f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046f6:	7dfb      	ldrb	r3, [r7, #23]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d109      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80046fc:	4b8f      	ldr	r3, [pc, #572]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004700:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004708:	498c      	ldr	r1, [pc, #560]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800470a:	4313      	orrs	r3, r2
 800470c:	650b      	str	r3, [r1, #80]	; 0x50
 800470e:	e001      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004710:	7dfb      	ldrb	r3, [r7, #23]
 8004712:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471c:	2b00      	cmp	r3, #0
 800471e:	d03d      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004724:	2b04      	cmp	r3, #4
 8004726:	d826      	bhi.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004728:	a201      	add	r2, pc, #4	; (adr r2, 8004730 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800472a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472e:	bf00      	nop
 8004730:	08004745 	.word	0x08004745
 8004734:	08004753 	.word	0x08004753
 8004738:	08004765 	.word	0x08004765
 800473c:	0800477d 	.word	0x0800477d
 8004740:	0800477d 	.word	0x0800477d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004744:	4b7d      	ldr	r3, [pc, #500]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	4a7c      	ldr	r2, [pc, #496]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800474a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800474e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004750:	e015      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3304      	adds	r3, #4
 8004756:	2100      	movs	r1, #0
 8004758:	4618      	mov	r0, r3
 800475a:	f001 fed7 	bl	800650c <RCCEx_PLL2_Config>
 800475e:	4603      	mov	r3, r0
 8004760:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004762:	e00c      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3324      	adds	r3, #36	; 0x24
 8004768:	2100      	movs	r1, #0
 800476a:	4618      	mov	r0, r3
 800476c:	f001 ff80 	bl	8006670 <RCCEx_PLL3_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004774:	e003      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	75fb      	strb	r3, [r7, #23]
      break;
 800477a:	e000      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800477c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800477e:	7dfb      	ldrb	r3, [r7, #23]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d109      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004784:	4b6d      	ldr	r3, [pc, #436]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004788:	f023 0207 	bic.w	r2, r3, #7
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004790:	496a      	ldr	r1, [pc, #424]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004792:	4313      	orrs	r3, r2
 8004794:	650b      	str	r3, [r1, #80]	; 0x50
 8004796:	e001      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004798:	7dfb      	ldrb	r3, [r7, #23]
 800479a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d04a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80047b0:	d031      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80047b2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80047b6:	d82b      	bhi.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80047b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047bc:	d02d      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80047be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c2:	d825      	bhi.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80047c4:	2bc0      	cmp	r3, #192	; 0xc0
 80047c6:	d02a      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80047c8:	2bc0      	cmp	r3, #192	; 0xc0
 80047ca:	d821      	bhi.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80047cc:	2b80      	cmp	r3, #128	; 0x80
 80047ce:	d016      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x186>
 80047d0:	2b80      	cmp	r3, #128	; 0x80
 80047d2:	d81d      	bhi.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x166>
 80047d8:	2b40      	cmp	r3, #64	; 0x40
 80047da:	d007      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x174>
 80047dc:	e018      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047de:	4b57      	ldr	r3, [pc, #348]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	4a56      	ldr	r2, [pc, #344]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80047ea:	e019      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3304      	adds	r3, #4
 80047f0:	2100      	movs	r1, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f001 fe8a 	bl	800650c <RCCEx_PLL2_Config>
 80047f8:	4603      	mov	r3, r0
 80047fa:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80047fc:	e010      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3324      	adds	r3, #36	; 0x24
 8004802:	2100      	movs	r1, #0
 8004804:	4618      	mov	r0, r3
 8004806:	f001 ff33 	bl	8006670 <RCCEx_PLL3_Config>
 800480a:	4603      	mov	r3, r0
 800480c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800480e:	e007      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	75fb      	strb	r3, [r7, #23]
      break;
 8004814:	e004      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004816:	bf00      	nop
 8004818:	e002      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800481a:	bf00      	nop
 800481c:	e000      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800481e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004820:	7dfb      	ldrb	r3, [r7, #23]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004826:	4b45      	ldr	r3, [pc, #276]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004832:	4942      	ldr	r1, [pc, #264]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004834:	4313      	orrs	r3, r2
 8004836:	650b      	str	r3, [r1, #80]	; 0x50
 8004838:	e001      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483a:	7dfb      	ldrb	r3, [r7, #23]
 800483c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004846:	2b00      	cmp	r3, #0
 8004848:	d04f      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004852:	d036      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004854:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004858:	d830      	bhi.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x244>
 800485a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800485e:	d032      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004864:	d82a      	bhi.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004866:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800486a:	d02e      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x252>
 800486c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004870:	d824      	bhi.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004876:	d018      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x232>
 8004878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487c:	d81e      	bhi.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x244>
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004886:	d007      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004888:	e018      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800488a:	4b2c      	ldr	r3, [pc, #176]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	4a2b      	ldr	r2, [pc, #172]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004894:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004896:	e019      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3304      	adds	r3, #4
 800489c:	2100      	movs	r1, #0
 800489e:	4618      	mov	r0, r3
 80048a0:	f001 fe34 	bl	800650c <RCCEx_PLL2_Config>
 80048a4:	4603      	mov	r3, r0
 80048a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80048a8:	e010      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3324      	adds	r3, #36	; 0x24
 80048ae:	2100      	movs	r1, #0
 80048b0:	4618      	mov	r0, r3
 80048b2:	f001 fedd 	bl	8006670 <RCCEx_PLL3_Config>
 80048b6:	4603      	mov	r3, r0
 80048b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80048ba:	e007      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	75fb      	strb	r3, [r7, #23]
      break;
 80048c0:	e004      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80048c2:	bf00      	nop
 80048c4:	e002      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80048c6:	bf00      	nop
 80048c8:	e000      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80048ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048cc:	7dfb      	ldrb	r3, [r7, #23]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d109      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80048d2:	4b1a      	ldr	r3, [pc, #104]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d6:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048de:	4917      	ldr	r1, [pc, #92]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	650b      	str	r3, [r1, #80]	; 0x50
 80048e4:	e001      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
 80048e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d034      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048fa:	2b30      	cmp	r3, #48	; 0x30
 80048fc:	d01c      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80048fe:	2b30      	cmp	r3, #48	; 0x30
 8004900:	d817      	bhi.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004902:	2b20      	cmp	r3, #32
 8004904:	d00c      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004906:	2b20      	cmp	r3, #32
 8004908:	d813      	bhi.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d018      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800490e:	2b10      	cmp	r3, #16
 8004910:	d10f      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004912:	4b0a      	ldr	r3, [pc, #40]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	4a09      	ldr	r2, [pc, #36]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800491c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800491e:	e010      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3304      	adds	r3, #4
 8004924:	2102      	movs	r1, #2
 8004926:	4618      	mov	r0, r3
 8004928:	f001 fdf0 	bl	800650c <RCCEx_PLL2_Config>
 800492c:	4603      	mov	r3, r0
 800492e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004930:	e007      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	75fb      	strb	r3, [r7, #23]
      break;
 8004936:	e004      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8004938:	bf00      	nop
 800493a:	e002      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800493c:	58024400 	.word	0x58024400
      break;
 8004940:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004942:	7dfb      	ldrb	r3, [r7, #23]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d109      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004948:	4b9b      	ldr	r3, [pc, #620]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800494a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004954:	4998      	ldr	r1, [pc, #608]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004956:	4313      	orrs	r3, r2
 8004958:	64cb      	str	r3, [r1, #76]	; 0x4c
 800495a:	e001      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495c:	7dfb      	ldrb	r3, [r7, #23]
 800495e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d047      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004970:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004974:	d030      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004976:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800497a:	d82a      	bhi.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800497c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004980:	d02c      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x364>
 8004982:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004986:	d824      	bhi.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800498c:	d018      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800498e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004992:	d81e      	bhi.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800499c:	d007      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x336>
 800499e:	e018      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049a0:	4b85      	ldr	r3, [pc, #532]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	4a84      	ldr	r2, [pc, #528]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80049a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049ac:	e017      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3304      	adds	r3, #4
 80049b2:	2100      	movs	r1, #0
 80049b4:	4618      	mov	r0, r3
 80049b6:	f001 fda9 	bl	800650c <RCCEx_PLL2_Config>
 80049ba:	4603      	mov	r3, r0
 80049bc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049be:	e00e      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3324      	adds	r3, #36	; 0x24
 80049c4:	2100      	movs	r1, #0
 80049c6:	4618      	mov	r0, r3
 80049c8:	f001 fe52 	bl	8006670 <RCCEx_PLL3_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049d0:	e005      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	75fb      	strb	r3, [r7, #23]
      break;
 80049d6:	e002      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80049d8:	bf00      	nop
 80049da:	e000      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80049dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049de:	7dfb      	ldrb	r3, [r7, #23]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d109      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80049e4:	4b74      	ldr	r3, [pc, #464]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80049e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f0:	4971      	ldr	r1, [pc, #452]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	650b      	str	r3, [r1, #80]	; 0x50
 80049f6:	e001      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f8:	7dfb      	ldrb	r3, [r7, #23]
 80049fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d049      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a10:	d02e      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004a12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a16:	d828      	bhi.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004a18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a1c:	d02a      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004a1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a22:	d822      	bhi.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004a24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a28:	d026      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004a2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a2e:	d81c      	bhi.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004a30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a34:	d010      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004a36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a3a:	d816      	bhi.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01d      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a44:	d111      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f001 fd5d 	bl	800650c <RCCEx_PLL2_Config>
 8004a52:	4603      	mov	r3, r0
 8004a54:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a56:	e012      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3324      	adds	r3, #36	; 0x24
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f001 fe06 	bl	8006670 <RCCEx_PLL3_Config>
 8004a64:	4603      	mov	r3, r0
 8004a66:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a68:	e009      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a6e:	e006      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004a70:	bf00      	nop
 8004a72:	e004      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004a74:	bf00      	nop
 8004a76:	e002      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004a78:	bf00      	nop
 8004a7a:	e000      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a7e:	7dfb      	ldrb	r3, [r7, #23]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a84:	4b4c      	ldr	r3, [pc, #304]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a88:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a90:	4949      	ldr	r1, [pc, #292]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	650b      	str	r3, [r1, #80]	; 0x50
 8004a96:	e001      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
 8004a9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d053      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004aae:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004ab2:	d034      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004ab4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004ab8:	d82e      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004abe:	d030      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ac4:	d828      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aca:	d02c      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad0:	d822      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004ad2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ad6:	d028      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004ad8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004adc:	d81c      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae2:	d010      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae8:	d816      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d01f      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004af2:	d111      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3304      	adds	r3, #4
 8004af8:	2101      	movs	r1, #1
 8004afa:	4618      	mov	r0, r3
 8004afc:	f001 fd06 	bl	800650c <RCCEx_PLL2_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b04:	e014      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3324      	adds	r3, #36	; 0x24
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f001 fdaf 	bl	8006670 <RCCEx_PLL3_Config>
 8004b12:	4603      	mov	r3, r0
 8004b14:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b16:	e00b      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b1c:	e008      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004b1e:	bf00      	nop
 8004b20:	e006      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004b22:	bf00      	nop
 8004b24:	e004      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004b26:	bf00      	nop
 8004b28:	e002      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e000      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004b2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10a      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b36:	4b20      	ldr	r3, [pc, #128]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b44:	491c      	ldr	r1, [pc, #112]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	658b      	str	r3, [r1, #88]	; 0x58
 8004b4a:	e001      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
 8004b4e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d031      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b64:	d00e      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b6a:	d814      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d015      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004b70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b74:	d10f      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b76:	4b10      	ldr	r3, [pc, #64]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	4a0f      	ldr	r2, [pc, #60]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b82:	e00c      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3304      	adds	r3, #4
 8004b88:	2101      	movs	r1, #1
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f001 fcbe 	bl	800650c <RCCEx_PLL2_Config>
 8004b90:	4603      	mov	r3, r0
 8004b92:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b94:	e003      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	75fb      	strb	r3, [r7, #23]
      break;
 8004b9a:	e000      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8004b9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10b      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb0:	4901      	ldr	r1, [pc, #4]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	650b      	str	r3, [r1, #80]	; 0x50
 8004bb6:	e003      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8004bb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bbc:	7dfb      	ldrb	r3, [r7, #23]
 8004bbe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d032      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d81b      	bhi.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004bd4:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bda:	bf00      	nop
 8004bdc:	08004c13 	.word	0x08004c13
 8004be0:	08004bed 	.word	0x08004bed
 8004be4:	08004bfb 	.word	0x08004bfb
 8004be8:	08004c13 	.word	0x08004c13
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bec:	4bb2      	ldr	r3, [pc, #712]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	4ab1      	ldr	r2, [pc, #708]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004bf8:	e00c      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	2102      	movs	r1, #2
 8004c00:	4618      	mov	r0, r3
 8004c02:	f001 fc83 	bl	800650c <RCCEx_PLL2_Config>
 8004c06:	4603      	mov	r3, r0
 8004c08:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004c0a:	e003      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c10:	e000      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004c12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d109      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004c1a:	4ba7      	ldr	r3, [pc, #668]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1e:	f023 0203 	bic.w	r2, r3, #3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	49a4      	ldr	r1, [pc, #656]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c2c:	e001      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
 8004c30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 8086 	beq.w	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c40:	4b9e      	ldr	r3, [pc, #632]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a9d      	ldr	r2, [pc, #628]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c4c:	f7fd f880 	bl	8001d50 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c52:	e009      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c54:	f7fd f87c 	bl	8001d50 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	; 0x64
 8004c60:	d902      	bls.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	75fb      	strb	r3, [r7, #23]
        break;
 8004c66:	e005      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c68:	4b94      	ldr	r3, [pc, #592]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0ef      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004c74:	7dfb      	ldrb	r3, [r7, #23]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d166      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004c7a:	4b8f      	ldr	r3, [pc, #572]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c84:	4053      	eors	r3, r2
 8004c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d013      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c8e:	4b8a      	ldr	r3, [pc, #552]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c96:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c98:	4b87      	ldr	r3, [pc, #540]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9c:	4a86      	ldr	r2, [pc, #536]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ca4:	4b84      	ldr	r3, [pc, #528]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca8:	4a83      	ldr	r2, [pc, #524]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004cb0:	4a81      	ldr	r2, [pc, #516]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc0:	d115      	bne.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc2:	f7fd f845 	bl	8001d50 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cc8:	e00b      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cca:	f7fd f841 	bl	8001d50 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d902      	bls.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	75fb      	strb	r3, [r7, #23]
            break;
 8004ce0:	e005      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ce2:	4b75      	ldr	r3, [pc, #468]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0ed      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d126      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d02:	d10d      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8004d04:	4b6c      	ldr	r3, [pc, #432]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d12:	0919      	lsrs	r1, r3, #4
 8004d14:	4b6a      	ldr	r3, [pc, #424]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004d16:	400b      	ands	r3, r1
 8004d18:	4967      	ldr	r1, [pc, #412]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	610b      	str	r3, [r1, #16]
 8004d1e:	e005      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8004d20:	4b65      	ldr	r3, [pc, #404]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	4a64      	ldr	r2, [pc, #400]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d2a:	6113      	str	r3, [r2, #16]
 8004d2c:	4b62      	ldr	r3, [pc, #392]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d3a:	495f      	ldr	r1, [pc, #380]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	670b      	str	r3, [r1, #112]	; 0x70
 8004d40:	e004      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d42:	7dfb      	ldrb	r3, [r7, #23]
 8004d44:	75bb      	strb	r3, [r7, #22]
 8004d46:	e001      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d07f      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d5e:	2b28      	cmp	r3, #40	; 0x28
 8004d60:	d866      	bhi.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8004d62:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8004d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d68:	08004e37 	.word	0x08004e37
 8004d6c:	08004e31 	.word	0x08004e31
 8004d70:	08004e31 	.word	0x08004e31
 8004d74:	08004e31 	.word	0x08004e31
 8004d78:	08004e31 	.word	0x08004e31
 8004d7c:	08004e31 	.word	0x08004e31
 8004d80:	08004e31 	.word	0x08004e31
 8004d84:	08004e31 	.word	0x08004e31
 8004d88:	08004e0d 	.word	0x08004e0d
 8004d8c:	08004e31 	.word	0x08004e31
 8004d90:	08004e31 	.word	0x08004e31
 8004d94:	08004e31 	.word	0x08004e31
 8004d98:	08004e31 	.word	0x08004e31
 8004d9c:	08004e31 	.word	0x08004e31
 8004da0:	08004e31 	.word	0x08004e31
 8004da4:	08004e31 	.word	0x08004e31
 8004da8:	08004e1f 	.word	0x08004e1f
 8004dac:	08004e31 	.word	0x08004e31
 8004db0:	08004e31 	.word	0x08004e31
 8004db4:	08004e31 	.word	0x08004e31
 8004db8:	08004e31 	.word	0x08004e31
 8004dbc:	08004e31 	.word	0x08004e31
 8004dc0:	08004e31 	.word	0x08004e31
 8004dc4:	08004e31 	.word	0x08004e31
 8004dc8:	08004e37 	.word	0x08004e37
 8004dcc:	08004e31 	.word	0x08004e31
 8004dd0:	08004e31 	.word	0x08004e31
 8004dd4:	08004e31 	.word	0x08004e31
 8004dd8:	08004e31 	.word	0x08004e31
 8004ddc:	08004e31 	.word	0x08004e31
 8004de0:	08004e31 	.word	0x08004e31
 8004de4:	08004e31 	.word	0x08004e31
 8004de8:	08004e37 	.word	0x08004e37
 8004dec:	08004e31 	.word	0x08004e31
 8004df0:	08004e31 	.word	0x08004e31
 8004df4:	08004e31 	.word	0x08004e31
 8004df8:	08004e31 	.word	0x08004e31
 8004dfc:	08004e31 	.word	0x08004e31
 8004e00:	08004e31 	.word	0x08004e31
 8004e04:	08004e31 	.word	0x08004e31
 8004e08:	08004e37 	.word	0x08004e37
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	2101      	movs	r1, #1
 8004e12:	4618      	mov	r0, r3
 8004e14:	f001 fb7a 	bl	800650c <RCCEx_PLL2_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e1c:	e00c      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3324      	adds	r3, #36	; 0x24
 8004e22:	2101      	movs	r1, #1
 8004e24:	4618      	mov	r0, r3
 8004e26:	f001 fc23 	bl	8006670 <RCCEx_PLL3_Config>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e2e:	e003      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	75fb      	strb	r3, [r7, #23]
      break;
 8004e34:	e000      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8004e36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e38:	7dfb      	ldrb	r3, [r7, #23]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10a      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e3e:	4b1e      	ldr	r3, [pc, #120]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e42:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e4c:	491a      	ldr	r1, [pc, #104]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	654b      	str	r3, [r1, #84]	; 0x54
 8004e52:	e001      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e54:	7dfb      	ldrb	r3, [r7, #23]
 8004e56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d03f      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e68:	2b05      	cmp	r3, #5
 8004e6a:	d821      	bhi.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8004e6c:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004ec5 	.word	0x08004ec5
 8004e78:	08004e8d 	.word	0x08004e8d
 8004e7c:	08004e9f 	.word	0x08004e9f
 8004e80:	08004ec5 	.word	0x08004ec5
 8004e84:	08004ec5 	.word	0x08004ec5
 8004e88:	08004ec5 	.word	0x08004ec5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	2101      	movs	r1, #1
 8004e92:	4618      	mov	r0, r3
 8004e94:	f001 fb3a 	bl	800650c <RCCEx_PLL2_Config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e9c:	e013      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3324      	adds	r3, #36	; 0x24
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f001 fbe3 	bl	8006670 <RCCEx_PLL3_Config>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004eae:	e00a      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8004eb4:	e007      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8004eb6:	bf00      	nop
 8004eb8:	58024400 	.word	0x58024400
 8004ebc:	58024800 	.word	0x58024800
 8004ec0:	00ffffcf 	.word	0x00ffffcf
      break;
 8004ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec6:	7dfb      	ldrb	r3, [r7, #23]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d109      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ecc:	4b9f      	ldr	r3, [pc, #636]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed0:	f023 0207 	bic.w	r2, r3, #7
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed8:	499c      	ldr	r1, [pc, #624]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	654b      	str	r3, [r1, #84]	; 0x54
 8004ede:	e001      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee0:	7dfb      	ldrb	r3, [r7, #23]
 8004ee2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d039      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ef6:	2b05      	cmp	r3, #5
 8004ef8:	d820      	bhi.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f43 	.word	0x08004f43
 8004f04:	08004f19 	.word	0x08004f19
 8004f08:	08004f2b 	.word	0x08004f2b
 8004f0c:	08004f43 	.word	0x08004f43
 8004f10:	08004f43 	.word	0x08004f43
 8004f14:	08004f43 	.word	0x08004f43
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f001 faf4 	bl	800650c <RCCEx_PLL2_Config>
 8004f24:	4603      	mov	r3, r0
 8004f26:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f28:	e00c      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3324      	adds	r3, #36	; 0x24
 8004f2e:	2101      	movs	r1, #1
 8004f30:	4618      	mov	r0, r3
 8004f32:	f001 fb9d 	bl	8006670 <RCCEx_PLL3_Config>
 8004f36:	4603      	mov	r3, r0
 8004f38:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f3a:	e003      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f40:	e000      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8004f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f44:	7dfb      	ldrb	r3, [r7, #23]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10a      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f4a:	4b80      	ldr	r3, [pc, #512]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4e:	f023 0207 	bic.w	r2, r3, #7
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f58:	497c      	ldr	r1, [pc, #496]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	658b      	str	r3, [r1, #88]	; 0x58
 8004f5e:	e001      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f60:	7dfb      	ldrb	r3, [r7, #23]
 8004f62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d04b      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f7a:	d02e      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f80:	d828      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f86:	d02a      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8c:	d822      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004f8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f92:	d026      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004f94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f98:	d81c      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f9e:	d010      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8004fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa4:	d816      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01d      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004faa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fae:	d111      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f001 faa8 	bl	800650c <RCCEx_PLL2_Config>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004fc0:	e012      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3324      	adds	r3, #36	; 0x24
 8004fc6:	2102      	movs	r1, #2
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f001 fb51 	bl	8006670 <RCCEx_PLL3_Config>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004fd2:	e009      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fd8:	e006      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004fda:	bf00      	nop
 8004fdc:	e004      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004fde:	bf00      	nop
 8004fe0:	e002      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004fe2:	bf00      	nop
 8004fe4:	e000      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10a      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fee:	4b57      	ldr	r3, [pc, #348]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ffc:	4953      	ldr	r1, [pc, #332]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	654b      	str	r3, [r1, #84]	; 0x54
 8005002:	e001      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005004:	7dfb      	ldrb	r3, [r7, #23]
 8005006:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d04b      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800501a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800501e:	d02e      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8005020:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005024:	d828      	bhi.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502a:	d02a      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800502c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005030:	d822      	bhi.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005032:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005036:	d026      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005038:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800503c:	d81c      	bhi.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800503e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005042:	d010      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005048:	d816      	bhi.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800504a:	2b00      	cmp	r3, #0
 800504c:	d01d      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800504e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005052:	d111      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3304      	adds	r3, #4
 8005058:	2100      	movs	r1, #0
 800505a:	4618      	mov	r0, r3
 800505c:	f001 fa56 	bl	800650c <RCCEx_PLL2_Config>
 8005060:	4603      	mov	r3, r0
 8005062:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005064:	e012      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	3324      	adds	r3, #36	; 0x24
 800506a:	2102      	movs	r1, #2
 800506c:	4618      	mov	r0, r3
 800506e:	f001 faff 	bl	8006670 <RCCEx_PLL3_Config>
 8005072:	4603      	mov	r3, r0
 8005074:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005076:	e009      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	75fb      	strb	r3, [r7, #23]
      break;
 800507c:	e006      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800507e:	bf00      	nop
 8005080:	e004      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005082:	bf00      	nop
 8005084:	e002      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005086:	bf00      	nop
 8005088:	e000      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800508a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800508c:	7dfb      	ldrb	r3, [r7, #23]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10a      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005092:	4b2e      	ldr	r3, [pc, #184]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005096:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050a0:	492a      	ldr	r1, [pc, #168]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	658b      	str	r3, [r1, #88]	; 0x58
 80050a6:	e001      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a8:	7dfb      	ldrb	r3, [r7, #23]
 80050aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d04d      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050c2:	d02e      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80050c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050c8:	d828      	bhi.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80050ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ce:	d02a      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80050d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d4:	d822      	bhi.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80050d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050da:	d026      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80050dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050e0:	d81c      	bhi.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80050e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050e6:	d010      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80050e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050ec:	d816      	bhi.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d01d      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80050f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f6:	d111      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3304      	adds	r3, #4
 80050fc:	2100      	movs	r1, #0
 80050fe:	4618      	mov	r0, r3
 8005100:	f001 fa04 	bl	800650c <RCCEx_PLL2_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005108:	e012      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3324      	adds	r3, #36	; 0x24
 800510e:	2102      	movs	r1, #2
 8005110:	4618      	mov	r0, r3
 8005112:	f001 faad 	bl	8006670 <RCCEx_PLL3_Config>
 8005116:	4603      	mov	r3, r0
 8005118:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800511a:	e009      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	75fb      	strb	r3, [r7, #23]
      break;
 8005120:	e006      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005122:	bf00      	nop
 8005124:	e004      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005126:	bf00      	nop
 8005128:	e002      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800512a:	bf00      	nop
 800512c:	e000      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800512e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005130:	7dfb      	ldrb	r3, [r7, #23]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10c      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005144:	4901      	ldr	r1, [pc, #4]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005146:	4313      	orrs	r3, r2
 8005148:	658b      	str	r3, [r1, #88]	; 0x58
 800514a:	e003      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800514c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005150:	7dfb      	ldrb	r3, [r7, #23]
 8005152:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01a      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516a:	d10a      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3324      	adds	r3, #36	; 0x24
 8005170:	2102      	movs	r1, #2
 8005172:	4618      	mov	r0, r3
 8005174:	f001 fa7c 	bl	8006670 <RCCEx_PLL3_Config>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005182:	4b8c      	ldr	r3, [pc, #560]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005186:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005190:	4988      	ldr	r1, [pc, #544]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005192:	4313      	orrs	r3, r2
 8005194:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0310 	and.w	r3, r3, #16
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d01a      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ac:	d10a      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3324      	adds	r3, #36	; 0x24
 80051b2:	2102      	movs	r1, #2
 80051b4:	4618      	mov	r0, r3
 80051b6:	f001 fa5b 	bl	8006670 <RCCEx_PLL3_Config>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051c4:	4b7b      	ldr	r3, [pc, #492]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80051c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051d2:	4978      	ldr	r1, [pc, #480]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d034      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80051ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ee:	d01d      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80051f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051f4:	d817      	bhi.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80051fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fe:	d009      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005200:	e011      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3304      	adds	r3, #4
 8005206:	2100      	movs	r1, #0
 8005208:	4618      	mov	r0, r3
 800520a:	f001 f97f 	bl	800650c <RCCEx_PLL2_Config>
 800520e:	4603      	mov	r3, r0
 8005210:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005212:	e00c      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3324      	adds	r3, #36	; 0x24
 8005218:	2102      	movs	r1, #2
 800521a:	4618      	mov	r0, r3
 800521c:	f001 fa28 	bl	8006670 <RCCEx_PLL3_Config>
 8005220:	4603      	mov	r3, r0
 8005222:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005224:	e003      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	75fb      	strb	r3, [r7, #23]
      break;
 800522a:	e000      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 800522c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800522e:	7dfb      	ldrb	r3, [r7, #23]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10a      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005234:	4b5f      	ldr	r3, [pc, #380]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005238:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005242:	495c      	ldr	r1, [pc, #368]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005244:	4313      	orrs	r3, r2
 8005246:	658b      	str	r3, [r1, #88]	; 0x58
 8005248:	e001      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524a:	7dfb      	ldrb	r3, [r7, #23]
 800524c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d033      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005260:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005264:	d01c      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005266:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800526a:	d816      	bhi.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800526c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005270:	d003      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8005272:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005276:	d007      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005278:	e00f      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800527a:	4b4e      	ldr	r3, [pc, #312]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527e:	4a4d      	ldr	r2, [pc, #308]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005284:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005286:	e00c      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3324      	adds	r3, #36	; 0x24
 800528c:	2101      	movs	r1, #1
 800528e:	4618      	mov	r0, r3
 8005290:	f001 f9ee 	bl	8006670 <RCCEx_PLL3_Config>
 8005294:	4603      	mov	r3, r0
 8005296:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005298:	e003      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	75fb      	strb	r3, [r7, #23]
      break;
 800529e:	e000      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80052a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052a8:	4b42      	ldr	r3, [pc, #264]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80052aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b6:	493f      	ldr	r1, [pc, #252]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	654b      	str	r3, [r1, #84]	; 0x54
 80052bc:	e001      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052be:	7dfb      	ldrb	r3, [r7, #23]
 80052c0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d029      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80052d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052da:	d007      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80052dc:	e00f      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052de:	4b35      	ldr	r3, [pc, #212]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	4a34      	ldr	r2, [pc, #208]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80052e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80052ea:	e00b      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	2102      	movs	r1, #2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f001 f90a 	bl	800650c <RCCEx_PLL2_Config>
 80052f8:	4603      	mov	r3, r0
 80052fa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80052fc:	e002      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	75fb      	strb	r3, [r7, #23]
      break;
 8005302:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005304:	7dfb      	ldrb	r3, [r7, #23]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d109      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800530a:	4b2a      	ldr	r3, [pc, #168]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800530c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005316:	4927      	ldr	r1, [pc, #156]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005318:	4313      	orrs	r3, r2
 800531a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800531c:	e001      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531e:	7dfb      	ldrb	r3, [r7, #23]
 8005320:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3324      	adds	r3, #36	; 0x24
 8005332:	2102      	movs	r1, #2
 8005334:	4618      	mov	r0, r3
 8005336:	f001 f99b 	bl	8006670 <RCCEx_PLL3_Config>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d035      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800535a:	d017      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800535c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005360:	d811      	bhi.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005366:	d013      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8005368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800536c:	d80b      	bhi.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800536e:	2b00      	cmp	r3, #0
 8005370:	d010      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8005372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005376:	d106      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005378:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	4a0d      	ldr	r2, [pc, #52]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800537e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005382:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005384:	e007      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	75fb      	strb	r3, [r7, #23]
      break;
 800538a:	e004      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800538c:	bf00      	nop
 800538e:	e002      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005390:	bf00      	nop
 8005392:	e000      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005396:	7dfb      	ldrb	r3, [r7, #23]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10d      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800539c:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800539e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053aa:	4902      	ldr	r1, [pc, #8]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	654b      	str	r3, [r1, #84]	; 0x54
 80053b0:	e004      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80053b2:	bf00      	nop
 80053b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
 80053ba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d008      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053c8:	4b30      	ldr	r3, [pc, #192]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80053ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053d4:	492d      	ldr	r1, [pc, #180]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d008      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053e6:	4b29      	ldr	r3, [pc, #164]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80053e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f2:	4926      	ldr	r1, [pc, #152]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005400:	2b00      	cmp	r3, #0
 8005402:	d008      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005404:	4b21      	ldr	r3, [pc, #132]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005408:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005410:	491e      	ldr	r1, [pc, #120]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005412:	4313      	orrs	r3, r2
 8005414:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00d      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005422:	4b1a      	ldr	r3, [pc, #104]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	4a19      	ldr	r2, [pc, #100]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005428:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800542c:	6113      	str	r3, [r2, #16]
 800542e:	4b17      	ldr	r3, [pc, #92]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005438:	4914      	ldr	r1, [pc, #80]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800543a:	4313      	orrs	r3, r2
 800543c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	da08      	bge.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005446:	4b11      	ldr	r3, [pc, #68]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800544a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005452:	490e      	ldr	r1, [pc, #56]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005454:	4313      	orrs	r3, r2
 8005456:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d009      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005464:	4b09      	ldr	r3, [pc, #36]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005468:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005472:	4906      	ldr	r1, [pc, #24]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005474:	4313      	orrs	r3, r2
 8005476:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005478:	7dbb      	ldrb	r3, [r7, #22]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	e000      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	58024400 	.word	0x58024400

08005490 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b090      	sub	sp, #64	; 0x40
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800549e:	f040 8089 	bne.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80054a2:	4b91      	ldr	r3, [pc, #580]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80054a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80054ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d87d      	bhi.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80054b2:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	080054cd 	.word	0x080054cd
 80054bc:	080054f1 	.word	0x080054f1
 80054c0:	08005515 	.word	0x08005515
 80054c4:	080055a9 	.word	0x080055a9
 80054c8:	08005539 	.word	0x08005539
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054cc:	4b86      	ldr	r3, [pc, #536]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054d8:	d107      	bne.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fec2 	bl	8006268 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054e8:	e3f4      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80054ea:	2300      	movs	r3, #0
 80054ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054ee:	e3f1      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054f0:	4b7d      	ldr	r3, [pc, #500]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054fc:	d107      	bne.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054fe:	f107 0318 	add.w	r3, r7, #24
 8005502:	4618      	mov	r0, r3
 8005504:	f000 fc08 	bl	8005d18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800550c:	e3e2      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800550e:	2300      	movs	r3, #0
 8005510:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005512:	e3df      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005514:	4b74      	ldr	r3, [pc, #464]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800551c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005520:	d107      	bne.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005522:	f107 030c 	add.w	r3, r7, #12
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fd4a 	bl	8005fc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005530:	e3d0      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005532:	2300      	movs	r3, #0
 8005534:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005536:	e3cd      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005538:	4b6b      	ldr	r3, [pc, #428]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800553a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005540:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005542:	4b69      	ldr	r3, [pc, #420]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b04      	cmp	r3, #4
 800554c:	d10c      	bne.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800554e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005550:	2b00      	cmp	r3, #0
 8005552:	d109      	bne.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005554:	4b64      	ldr	r3, [pc, #400]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	08db      	lsrs	r3, r3, #3
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	4a63      	ldr	r2, [pc, #396]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005560:	fa22 f303 	lsr.w	r3, r2, r3
 8005564:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005566:	e01e      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005568:	4b5f      	ldr	r3, [pc, #380]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005574:	d106      	bne.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005578:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800557c:	d102      	bne.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800557e:	4b5c      	ldr	r3, [pc, #368]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005582:	e010      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005584:	4b58      	ldr	r3, [pc, #352]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005590:	d106      	bne.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005598:	d102      	bne.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800559a:	4b56      	ldr	r3, [pc, #344]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800559c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800559e:	e002      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80055a0:	2300      	movs	r3, #0
 80055a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80055a4:	e396      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80055a6:	e395      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80055a8:	4b53      	ldr	r3, [pc, #332]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80055aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055ac:	e392      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055b2:	e38f      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ba:	f040 809f 	bne.w	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80055be:	4b4a      	ldr	r3, [pc, #296]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80055c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80055c6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ce:	d04d      	beq.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d6:	f200 8084 	bhi.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	2bc0      	cmp	r3, #192	; 0xc0
 80055de:	d07d      	beq.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	2bc0      	cmp	r3, #192	; 0xc0
 80055e4:	d87d      	bhi.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	2b80      	cmp	r3, #128	; 0x80
 80055ea:	d02d      	beq.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	2b80      	cmp	r3, #128	; 0x80
 80055f0:	d877      	bhi.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	2b40      	cmp	r3, #64	; 0x40
 80055fc:	d012      	beq.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80055fe:	e070      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005600:	4b39      	ldr	r3, [pc, #228]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005608:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800560c:	d107      	bne.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800560e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fe28 	bl	8006268 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800561c:	e35a      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800561e:	2300      	movs	r3, #0
 8005620:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005622:	e357      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005624:	4b30      	ldr	r3, [pc, #192]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800562c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005630:	d107      	bne.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005632:	f107 0318 	add.w	r3, r7, #24
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fb6e 	bl	8005d18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005640:	e348      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005642:	2300      	movs	r3, #0
 8005644:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005646:	e345      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005648:	4b27      	ldr	r3, [pc, #156]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005654:	d107      	bne.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005656:	f107 030c 	add.w	r3, r7, #12
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fcb0 	bl	8005fc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005664:	e336      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005666:	2300      	movs	r3, #0
 8005668:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800566a:	e333      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800566c:	4b1e      	ldr	r3, [pc, #120]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800566e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005670:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005674:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005676:	4b1c      	ldr	r3, [pc, #112]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0304 	and.w	r3, r3, #4
 800567e:	2b04      	cmp	r3, #4
 8005680:	d10c      	bne.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8005682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005684:	2b00      	cmp	r3, #0
 8005686:	d109      	bne.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005688:	4b17      	ldr	r3, [pc, #92]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	08db      	lsrs	r3, r3, #3
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	4a16      	ldr	r2, [pc, #88]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
 8005698:	63fb      	str	r3, [r7, #60]	; 0x3c
 800569a:	e01e      	b.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800569c:	4b12      	ldr	r3, [pc, #72]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a8:	d106      	bne.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80056aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056b0:	d102      	bne.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80056b2:	4b0f      	ldr	r3, [pc, #60]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80056b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056b6:	e010      	b.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056b8:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056c4:	d106      	bne.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80056c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056cc:	d102      	bne.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80056ce:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80056d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056d2:	e002      	b.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80056d4:	2300      	movs	r3, #0
 80056d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80056d8:	e2fc      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80056da:	e2fb      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80056dc:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80056de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056e0:	e2f8      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80056e2:	2300      	movs	r3, #0
 80056e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056e6:	e2f5      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80056e8:	58024400 	.word	0x58024400
 80056ec:	03d09000 	.word	0x03d09000
 80056f0:	003d0900 	.word	0x003d0900
 80056f4:	007a1200 	.word	0x007a1200
 80056f8:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005702:	f040 809c 	bne.w	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8005706:	4b9d      	ldr	r3, [pc, #628]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800570a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800570e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005716:	d054      	beq.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800571e:	f200 808b 	bhi.w	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8005722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005724:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005728:	f000 8083 	beq.w	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005732:	f200 8081 	bhi.w	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800573c:	d02f      	beq.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005744:	d878      	bhi.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	2b00      	cmp	r3, #0
 800574a:	d004      	beq.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005752:	d012      	beq.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005754:	e070      	b.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005756:	4b89      	ldr	r3, [pc, #548]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800575e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005762:	d107      	bne.n	8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fd7d 	bl	8006268 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005770:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005772:	e2af      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005774:	2300      	movs	r3, #0
 8005776:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005778:	e2ac      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800577a:	4b80      	ldr	r3, [pc, #512]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005786:	d107      	bne.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005788:	f107 0318 	add.w	r3, r7, #24
 800578c:	4618      	mov	r0, r3
 800578e:	f000 fac3 	bl	8005d18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005796:	e29d      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005798:	2300      	movs	r3, #0
 800579a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800579c:	e29a      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800579e:	4b77      	ldr	r3, [pc, #476]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057aa:	d107      	bne.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057ac:	f107 030c 	add.w	r3, r7, #12
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fc05 	bl	8005fc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057ba:	e28b      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057c0:	e288      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80057c2:	4b6e      	ldr	r3, [pc, #440]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80057c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057ca:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057cc:	4b6b      	ldr	r3, [pc, #428]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d10c      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 80057d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d109      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057de:	4b67      	ldr	r3, [pc, #412]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	08db      	lsrs	r3, r3, #3
 80057e4:	f003 0303 	and.w	r3, r3, #3
 80057e8:	4a65      	ldr	r2, [pc, #404]	; (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 80057ea:	fa22 f303 	lsr.w	r3, r2, r3
 80057ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f0:	e01e      	b.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057f2:	4b62      	ldr	r3, [pc, #392]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057fe:	d106      	bne.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8005800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005802:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005806:	d102      	bne.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005808:	4b5e      	ldr	r3, [pc, #376]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800580a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800580c:	e010      	b.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800580e:	4b5b      	ldr	r3, [pc, #364]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005816:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800581a:	d106      	bne.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800581c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005822:	d102      	bne.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005824:	4b58      	ldr	r3, [pc, #352]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8005826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005828:	e002      	b.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800582a:	2300      	movs	r3, #0
 800582c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 800582e:	e251      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005830:	e250      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005832:	4b56      	ldr	r3, [pc, #344]	; (800598c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8005834:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005836:	e24d      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8005838:	2300      	movs	r3, #0
 800583a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800583c:	e24a      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005844:	f040 80a7 	bne.w	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005848:	4b4c      	ldr	r3, [pc, #304]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800584a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800584c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005850:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005854:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005858:	d055      	beq.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800585a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005860:	f200 8096 	bhi.w	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8005864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005866:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800586a:	f000 8084 	beq.w	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 800586e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005870:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005874:	f200 808c 	bhi.w	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8005878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800587e:	d030      	beq.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005886:	f200 8083 	bhi.w	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 800588a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588c:	2b00      	cmp	r3, #0
 800588e:	d004      	beq.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8005890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005896:	d012      	beq.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8005898:	e07a      	b.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800589a:	4b38      	ldr	r3, [pc, #224]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058a6:	d107      	bne.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 fcdb 	bl	8006268 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058b6:	e20d      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058bc:	e20a      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058be:	4b2f      	ldr	r3, [pc, #188]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058ca:	d107      	bne.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058cc:	f107 0318 	add.w	r3, r7, #24
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fa21 	bl	8005d18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058da:	e1fb      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80058dc:	2300      	movs	r3, #0
 80058de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058e0:	e1f8      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058e2:	4b26      	ldr	r3, [pc, #152]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ee:	d107      	bne.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058f0:	f107 030c 	add.w	r3, r7, #12
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fb63 	bl	8005fc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058fe:	e1e9      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005900:	2300      	movs	r3, #0
 8005902:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005904:	e1e6      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005906:	4b1d      	ldr	r3, [pc, #116]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800590e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005910:	4b1a      	ldr	r3, [pc, #104]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b04      	cmp	r3, #4
 800591a:	d10c      	bne.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 800591c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591e:	2b00      	cmp	r3, #0
 8005920:	d109      	bne.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005922:	4b16      	ldr	r3, [pc, #88]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	08db      	lsrs	r3, r3, #3
 8005928:	f003 0303 	and.w	r3, r3, #3
 800592c:	4a14      	ldr	r2, [pc, #80]	; (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 800592e:	fa22 f303 	lsr.w	r3, r2, r3
 8005932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005934:	e01e      	b.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005936:	4b11      	ldr	r3, [pc, #68]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005942:	d106      	bne.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8005944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800594a:	d102      	bne.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800594c:	4b0d      	ldr	r3, [pc, #52]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800594e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005950:	e010      	b.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005952:	4b0a      	ldr	r3, [pc, #40]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800595e:	d106      	bne.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8005960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005962:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005966:	d102      	bne.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005968:	4b07      	ldr	r3, [pc, #28]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 800596a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800596c:	e002      	b.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800596e:	2300      	movs	r3, #0
 8005970:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005972:	e1af      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005974:	e1ae      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005976:	4b05      	ldr	r3, [pc, #20]	; (800598c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8005978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800597a:	e1ab      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800597c:	58024400 	.word	0x58024400
 8005980:	03d09000 	.word	0x03d09000
 8005984:	003d0900 	.word	0x003d0900
 8005988:	007a1200 	.word	0x007a1200
 800598c:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8005990:	2300      	movs	r3, #0
 8005992:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005994:	e19e      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800599c:	d173      	bne.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800599e:	4b9d      	ldr	r3, [pc, #628]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80059a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059a6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059ae:	d02f      	beq.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80059b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059b6:	d863      	bhi.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80059b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d004      	beq.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c4:	d012      	beq.n	80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 80059c6:	e05b      	b.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059c8:	4b92      	ldr	r3, [pc, #584]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059d4:	d107      	bne.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059d6:	f107 0318 	add.w	r3, r7, #24
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 f99c 	bl	8005d18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059e4:	e176      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059ea:	e173      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059ec:	4b89      	ldr	r3, [pc, #548]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059f8:	d107      	bne.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059fa:	f107 030c 	add.w	r3, r7, #12
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fade 	bl	8005fc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a08:	e164      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a0e:	e161      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005a10:	4b80      	ldr	r3, [pc, #512]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a18:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a1a:	4b7e      	ldr	r3, [pc, #504]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0304 	and.w	r3, r3, #4
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d10c      	bne.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8005a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d109      	bne.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a2c:	4b79      	ldr	r3, [pc, #484]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	08db      	lsrs	r3, r3, #3
 8005a32:	f003 0303 	and.w	r3, r3, #3
 8005a36:	4a78      	ldr	r2, [pc, #480]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005a38:	fa22 f303 	lsr.w	r3, r2, r3
 8005a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a3e:	e01e      	b.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a40:	4b74      	ldr	r3, [pc, #464]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a4c:	d106      	bne.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a54:	d102      	bne.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005a56:	4b71      	ldr	r3, [pc, #452]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a5a:	e010      	b.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a5c:	4b6d      	ldr	r3, [pc, #436]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a68:	d106      	bne.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8005a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a70:	d102      	bne.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005a72:	4b6b      	ldr	r3, [pc, #428]	; (8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a76:	e002      	b.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005a7c:	e12a      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005a7e:	e129      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8005a80:	2300      	movs	r3, #0
 8005a82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a84:	e126      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a8c:	d133      	bne.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005a8e:	4b61      	ldr	r3, [pc, #388]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a96:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d004      	beq.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa4:	d012      	beq.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005aa6:	e023      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005aa8:	4b5a      	ldr	r3, [pc, #360]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ab4:	d107      	bne.n	8005ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fbd4 	bl	8006268 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ac4:	e106      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005aca:	e103      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005acc:	4b51      	ldr	r3, [pc, #324]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ad8:	d107      	bne.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ada:	f107 0318 	add.w	r3, r7, #24
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 f91a 	bl	8005d18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ae8:	e0f4      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005aea:	2300      	movs	r3, #0
 8005aec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005aee:	e0f1      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005af4:	e0ee      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005afc:	f040 809b 	bne.w	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005b00:	4b44      	ldr	r3, [pc, #272]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b04:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005b08:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005b10:	f000 808b 	beq.w	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005b1a:	f200 8089 	bhi.w	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b24:	d06c      	beq.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8005b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b2c:	f200 8080 	bhi.w	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b36:	d056      	beq.n	8005be6 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8005b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3e:	d877      	bhi.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b46:	d03b      	beq.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8005b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b4e:	d86f      	bhi.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b56:	d021      	beq.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b5e:	d867      	bhi.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d004      	beq.n	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b6c:	d004      	beq.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8005b6e:	e05f      	b.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005b70:	f000 f8bc 	bl	8005cec <HAL_RCCEx_GetD3PCLK1Freq>
 8005b74:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005b76:	e0ad      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b78:	4b26      	ldr	r3, [pc, #152]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b84:	d107      	bne.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b86:	f107 0318 	add.w	r3, r7, #24
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 f8c4 	bl	8005d18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b94:	e09e      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005b96:	2300      	movs	r3, #0
 8005b98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b9a:	e09b      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b9c:	4b1d      	ldr	r3, [pc, #116]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ba8:	d107      	bne.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005baa:	f107 030c 	add.w	r3, r7, #12
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fa06 	bl	8005fc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005bb8:	e08c      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bbe:	e089      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bc0:	4b14      	ldr	r3, [pc, #80]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	d109      	bne.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bcc:	4b11      	ldr	r3, [pc, #68]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	08db      	lsrs	r3, r3, #3
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	4a10      	ldr	r2, [pc, #64]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005bde:	e079      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005be4:	e076      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005be6:	4b0b      	ldr	r3, [pc, #44]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bf2:	d102      	bne.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8005bf4:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005bf8:	e06c      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bfe:	e069      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c00:	4b04      	ldr	r3, [pc, #16]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c0c:	d10a      	bne.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 8005c0e:	4b04      	ldr	r3, [pc, #16]	; (8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005c10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005c12:	e05f      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005c14:	58024400 	.word	0x58024400
 8005c18:	03d09000 	.word	0x03d09000
 8005c1c:	003d0900 	.word	0x003d0900
 8005c20:	007a1200 	.word	0x007a1200
          frequency = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c28:	e054      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c2a:	4b2d      	ldr	r3, [pc, #180]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c2e:	e051      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005c30:	2300      	movs	r3, #0
 8005c32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c34:	e04e      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c3c:	d148      	bne.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005c3e:	4b29      	ldr	r3, [pc, #164]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c46:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c4e:	d02a      	beq.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c56:	d838      	bhi.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d004      	beq.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c64:	d00d      	beq.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005c66:	e030      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c68:	4b1e      	ldr	r3, [pc, #120]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c74:	d102      	bne.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 8005c76:	4b1c      	ldr	r3, [pc, #112]	; (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005c78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005c7a:	e02b      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c80:	e028      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c82:	4b18      	ldr	r3, [pc, #96]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c8e:	d107      	bne.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 fae7 	bl	8006268 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005c9e:	e019      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ca4:	e016      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ca6:	4b0f      	ldr	r3, [pc, #60]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cb2:	d107      	bne.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cb4:	f107 0318 	add.w	r3, r7, #24
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 f82d 	bl	8005d18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005cc2:	e007      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cc8:	e004      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cce:	e001      	b.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3740      	adds	r7, #64	; 0x40
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	00bb8000 	.word	0x00bb8000
 8005ce4:	58024400 	.word	0x58024400
 8005ce8:	007a1200 	.word	0x007a1200

08005cec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005cf0:	f7fe fc66 	bl	80045c0 <HAL_RCC_GetHCLKFreq>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	4b06      	ldr	r3, [pc, #24]	; (8005d10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	091b      	lsrs	r3, r3, #4
 8005cfc:	f003 0307 	and.w	r3, r3, #7
 8005d00:	4904      	ldr	r1, [pc, #16]	; (8005d14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005d02:	5ccb      	ldrb	r3, [r1, r3]
 8005d04:	f003 031f 	and.w	r3, r3, #31
 8005d08:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	58024400 	.word	0x58024400
 8005d14:	0800b8f0 	.word	0x0800b8f0

08005d18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b089      	sub	sp, #36	; 0x24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d20:	4ba1      	ldr	r3, [pc, #644]	; (8005fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d24:	f003 0303 	and.w	r3, r3, #3
 8005d28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005d2a:	4b9f      	ldr	r3, [pc, #636]	; (8005fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2e:	0b1b      	lsrs	r3, r3, #12
 8005d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005d36:	4b9c      	ldr	r3, [pc, #624]	; (8005fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3a:	091b      	lsrs	r3, r3, #4
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005d42:	4b99      	ldr	r3, [pc, #612]	; (8005fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d46:	08db      	lsrs	r3, r3, #3
 8005d48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	fb02 f303 	mul.w	r3, r2, r3
 8005d52:	ee07 3a90 	vmov	s15, r3
 8005d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 8111 	beq.w	8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	f000 8083 	beq.w	8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	f200 80a1 	bhi.w	8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d056      	beq.n	8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005d82:	e099      	b.n	8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d84:	4b88      	ldr	r3, [pc, #544]	; (8005fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0320 	and.w	r3, r3, #32
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d02d      	beq.n	8005dec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d90:	4b85      	ldr	r3, [pc, #532]	; (8005fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	08db      	lsrs	r3, r3, #3
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	4a84      	ldr	r2, [pc, #528]	; (8005fac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005da0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	ee07 3a90 	vmov	s15, r3
 8005da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	ee07 3a90 	vmov	s15, r3
 8005db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dba:	4b7b      	ldr	r3, [pc, #492]	; (8005fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dc2:	ee07 3a90 	vmov	s15, r3
 8005dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dce:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005dea:	e087      	b.n	8005efc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	ee07 3a90 	vmov	s15, r3
 8005df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dfe:	4b6a      	ldr	r3, [pc, #424]	; (8005fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e06:	ee07 3a90 	vmov	s15, r3
 8005e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e12:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e2e:	e065      	b.n	8005efc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	ee07 3a90 	vmov	s15, r3
 8005e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e42:	4b59      	ldr	r3, [pc, #356]	; (8005fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e4a:	ee07 3a90 	vmov	s15, r3
 8005e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e56:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e72:	e043      	b.n	8005efc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005fbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e86:	4b48      	ldr	r3, [pc, #288]	; (8005fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e8e:	ee07 3a90 	vmov	s15, r3
 8005e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005eb6:	e021      	b.n	8005efc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	ee07 3a90 	vmov	s15, r3
 8005ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eca:	4b37      	ldr	r3, [pc, #220]	; (8005fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ede:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005efa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005efc:	4b2a      	ldr	r3, [pc, #168]	; (8005fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f00:	0a5b      	lsrs	r3, r3, #9
 8005f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f06:	ee07 3a90 	vmov	s15, r3
 8005f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f16:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f22:	ee17 2a90 	vmov	r2, s15
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005f2a:	4b1f      	ldr	r3, [pc, #124]	; (8005fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	0c1b      	lsrs	r3, r3, #16
 8005f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f34:	ee07 3a90 	vmov	s15, r3
 8005f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f44:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f50:	ee17 2a90 	vmov	r2, s15
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005f58:	4b13      	ldr	r3, [pc, #76]	; (8005fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	0e1b      	lsrs	r3, r3, #24
 8005f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f62:	ee07 3a90 	vmov	s15, r3
 8005f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f72:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f7e:	ee17 2a90 	vmov	r2, s15
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f86:	e008      	b.n	8005f9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	609a      	str	r2, [r3, #8]
}
 8005f9a:	bf00      	nop
 8005f9c:	3724      	adds	r7, #36	; 0x24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	58024400 	.word	0x58024400
 8005fac:	03d09000 	.word	0x03d09000
 8005fb0:	46000000 	.word	0x46000000
 8005fb4:	4c742400 	.word	0x4c742400
 8005fb8:	4a742400 	.word	0x4a742400
 8005fbc:	4af42400 	.word	0x4af42400

08005fc0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b089      	sub	sp, #36	; 0x24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fc8:	4ba1      	ldr	r3, [pc, #644]	; (8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fcc:	f003 0303 	and.w	r3, r3, #3
 8005fd0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005fd2:	4b9f      	ldr	r3, [pc, #636]	; (8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd6:	0d1b      	lsrs	r3, r3, #20
 8005fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fdc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005fde:	4b9c      	ldr	r3, [pc, #624]	; (8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	0a1b      	lsrs	r3, r3, #8
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005fea:	4b99      	ldr	r3, [pc, #612]	; (8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fee:	08db      	lsrs	r3, r3, #3
 8005ff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	fb02 f303 	mul.w	r3, r2, r3
 8005ffa:	ee07 3a90 	vmov	s15, r3
 8005ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006002:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 8111 	beq.w	8006230 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b02      	cmp	r3, #2
 8006012:	f000 8083 	beq.w	800611c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	2b02      	cmp	r3, #2
 800601a:	f200 80a1 	bhi.w	8006160 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d003      	beq.n	800602c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d056      	beq.n	80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800602a:	e099      	b.n	8006160 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800602c:	4b88      	ldr	r3, [pc, #544]	; (8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b00      	cmp	r3, #0
 8006036:	d02d      	beq.n	8006094 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006038:	4b85      	ldr	r3, [pc, #532]	; (8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	08db      	lsrs	r3, r3, #3
 800603e:	f003 0303 	and.w	r3, r3, #3
 8006042:	4a84      	ldr	r2, [pc, #528]	; (8006254 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006044:	fa22 f303 	lsr.w	r3, r2, r3
 8006048:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	ee07 3a90 	vmov	s15, r3
 8006050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006062:	4b7b      	ldr	r3, [pc, #492]	; (8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800606a:	ee07 3a90 	vmov	s15, r3
 800606e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006072:	ed97 6a03 	vldr	s12, [r7, #12]
 8006076:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800607a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800607e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800608a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006092:	e087      	b.n	80061a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	ee07 3a90 	vmov	s15, r3
 800609a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800625c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80060a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060a6:	4b6a      	ldr	r3, [pc, #424]	; (8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ae:	ee07 3a90 	vmov	s15, r3
 80060b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060d6:	e065      	b.n	80061a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006260 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80060e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ea:	4b59      	ldr	r3, [pc, #356]	; (8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80060fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800610a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800610e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006116:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800611a:	e043      	b.n	80061a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006126:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006264 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800612a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800612e:	4b48      	ldr	r3, [pc, #288]	; (8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006142:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800614a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800614e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800615a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800615e:	e021      	b.n	80061a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006260 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800616e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006172:	4b37      	ldr	r3, [pc, #220]	; (8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006182:	ed97 6a03 	vldr	s12, [r7, #12]
 8006186:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800618a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800618e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800619a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800619e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80061a4:	4b2a      	ldr	r3, [pc, #168]	; (8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a8:	0a5b      	lsrs	r3, r3, #9
 80061aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ae:	ee07 3a90 	vmov	s15, r3
 80061b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061be:	edd7 6a07 	vldr	s13, [r7, #28]
 80061c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061ca:	ee17 2a90 	vmov	r2, s15
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80061d2:	4b1f      	ldr	r3, [pc, #124]	; (8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	0c1b      	lsrs	r3, r3, #16
 80061d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061dc:	ee07 3a90 	vmov	s15, r3
 80061e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80061f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061f8:	ee17 2a90 	vmov	r2, s15
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006200:	4b13      	ldr	r3, [pc, #76]	; (8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	0e1b      	lsrs	r3, r3, #24
 8006206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800620a:	ee07 3a90 	vmov	s15, r3
 800620e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800621a:	edd7 6a07 	vldr	s13, [r7, #28]
 800621e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006226:	ee17 2a90 	vmov	r2, s15
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800622e:	e008      	b.n	8006242 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	609a      	str	r2, [r3, #8]
}
 8006242:	bf00      	nop
 8006244:	3724      	adds	r7, #36	; 0x24
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	58024400 	.word	0x58024400
 8006254:	03d09000 	.word	0x03d09000
 8006258:	46000000 	.word	0x46000000
 800625c:	4c742400 	.word	0x4c742400
 8006260:	4a742400 	.word	0x4a742400
 8006264:	4af42400 	.word	0x4af42400

08006268 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006268:	b480      	push	{r7}
 800626a:	b089      	sub	sp, #36	; 0x24
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006270:	4ba0      	ldr	r3, [pc, #640]	; (80064f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006274:	f003 0303 	and.w	r3, r3, #3
 8006278:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800627a:	4b9e      	ldr	r3, [pc, #632]	; (80064f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800627c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627e:	091b      	lsrs	r3, r3, #4
 8006280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006284:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006286:	4b9b      	ldr	r3, [pc, #620]	; (80064f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006290:	4b98      	ldr	r3, [pc, #608]	; (80064f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006294:	08db      	lsrs	r3, r3, #3
 8006296:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	fb02 f303 	mul.w	r3, r2, r3
 80062a0:	ee07 3a90 	vmov	s15, r3
 80062a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 8111 	beq.w	80064d6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	f000 8083 	beq.w	80063c2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	f200 80a1 	bhi.w	8006406 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d056      	beq.n	800637e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80062d0:	e099      	b.n	8006406 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062d2:	4b88      	ldr	r3, [pc, #544]	; (80064f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d02d      	beq.n	800633a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80062de:	4b85      	ldr	r3, [pc, #532]	; (80064f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	08db      	lsrs	r3, r3, #3
 80062e4:	f003 0303 	and.w	r3, r3, #3
 80062e8:	4a83      	ldr	r2, [pc, #524]	; (80064f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80062ea:	fa22 f303 	lsr.w	r3, r2, r3
 80062ee:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	ee07 3a90 	vmov	s15, r3
 80062f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	ee07 3a90 	vmov	s15, r3
 8006300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006304:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006308:	4b7a      	ldr	r3, [pc, #488]	; (80064f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800630a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006310:	ee07 3a90 	vmov	s15, r3
 8006314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006318:	ed97 6a03 	vldr	s12, [r7, #12]
 800631c:	eddf 5a77 	vldr	s11, [pc, #476]	; 80064fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006320:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006324:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006328:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800632c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006334:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006338:	e087      	b.n	800644a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	ee07 3a90 	vmov	s15, r3
 8006340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006344:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800634c:	4b69      	ldr	r3, [pc, #420]	; (80064f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800634e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006354:	ee07 3a90 	vmov	s15, r3
 8006358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800635c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006360:	eddf 5a66 	vldr	s11, [pc, #408]	; 80064fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006364:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006368:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800636c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006370:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006378:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800637c:	e065      	b.n	800644a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	ee07 3a90 	vmov	s15, r3
 8006384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006388:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006504 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800638c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006390:	4b58      	ldr	r3, [pc, #352]	; (80064f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006398:	ee07 3a90 	vmov	s15, r3
 800639c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80063a4:	eddf 5a55 	vldr	s11, [pc, #340]	; 80064fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80063a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063c0:	e043      	b.n	800644a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	ee07 3a90 	vmov	s15, r3
 80063c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063cc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006508 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80063d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063d4:	4b47      	ldr	r3, [pc, #284]	; (80064f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063dc:	ee07 3a90 	vmov	s15, r3
 80063e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80063e8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80064fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80063ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006400:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006404:	e021      	b.n	800644a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	ee07 3a90 	vmov	s15, r3
 800640c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006410:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006418:	4b36      	ldr	r3, [pc, #216]	; (80064f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800641a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006420:	ee07 3a90 	vmov	s15, r3
 8006424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006428:	ed97 6a03 	vldr	s12, [r7, #12]
 800642c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80064fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006430:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006438:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800643c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006444:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006448:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800644a:	4b2a      	ldr	r3, [pc, #168]	; (80064f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800644c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644e:	0a5b      	lsrs	r3, r3, #9
 8006450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006454:	ee07 3a90 	vmov	s15, r3
 8006458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800645c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006460:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006464:	edd7 6a07 	vldr	s13, [r7, #28]
 8006468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800646c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006470:	ee17 2a90 	vmov	r2, s15
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006478:	4b1e      	ldr	r3, [pc, #120]	; (80064f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800647a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647c:	0c1b      	lsrs	r3, r3, #16
 800647e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006482:	ee07 3a90 	vmov	s15, r3
 8006486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800648e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006492:	edd7 6a07 	vldr	s13, [r7, #28]
 8006496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800649a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800649e:	ee17 2a90 	vmov	r2, s15
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80064a6:	4b13      	ldr	r3, [pc, #76]	; (80064f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064aa:	0e1b      	lsrs	r3, r3, #24
 80064ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064b0:	ee07 3a90 	vmov	s15, r3
 80064b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80064c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064cc:	ee17 2a90 	vmov	r2, s15
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80064d4:	e008      	b.n	80064e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	609a      	str	r2, [r3, #8]
}
 80064e8:	bf00      	nop
 80064ea:	3724      	adds	r7, #36	; 0x24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	58024400 	.word	0x58024400
 80064f8:	03d09000 	.word	0x03d09000
 80064fc:	46000000 	.word	0x46000000
 8006500:	4c742400 	.word	0x4c742400
 8006504:	4a742400 	.word	0x4a742400
 8006508:	4af42400 	.word	0x4af42400

0800650c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800651a:	4b53      	ldr	r3, [pc, #332]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651e:	f003 0303 	and.w	r3, r3, #3
 8006522:	2b03      	cmp	r3, #3
 8006524:	d101      	bne.n	800652a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e099      	b.n	800665e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800652a:	4b4f      	ldr	r3, [pc, #316]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a4e      	ldr	r2, [pc, #312]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 8006530:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006536:	f7fb fc0b 	bl	8001d50 <HAL_GetTick>
 800653a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800653c:	e008      	b.n	8006550 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800653e:	f7fb fc07 	bl	8001d50 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	2b02      	cmp	r3, #2
 800654a:	d901      	bls.n	8006550 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e086      	b.n	800665e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006550:	4b45      	ldr	r3, [pc, #276]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1f0      	bne.n	800653e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800655c:	4b42      	ldr	r3, [pc, #264]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 800655e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006560:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	031b      	lsls	r3, r3, #12
 800656a:	493f      	ldr	r1, [pc, #252]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 800656c:	4313      	orrs	r3, r2
 800656e:	628b      	str	r3, [r1, #40]	; 0x28
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	3b01      	subs	r3, #1
 8006576:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	3b01      	subs	r3, #1
 8006580:	025b      	lsls	r3, r3, #9
 8006582:	b29b      	uxth	r3, r3
 8006584:	431a      	orrs	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	3b01      	subs	r3, #1
 800658c:	041b      	lsls	r3, r3, #16
 800658e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	3b01      	subs	r3, #1
 800659a:	061b      	lsls	r3, r3, #24
 800659c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80065a0:	4931      	ldr	r1, [pc, #196]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80065a6:	4b30      	ldr	r3, [pc, #192]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	492d      	ldr	r1, [pc, #180]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80065b8:	4b2b      	ldr	r3, [pc, #172]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065bc:	f023 0220 	bic.w	r2, r3, #32
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	4928      	ldr	r1, [pc, #160]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80065ca:	4b27      	ldr	r3, [pc, #156]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ce:	4a26      	ldr	r2, [pc, #152]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065d0:	f023 0310 	bic.w	r3, r3, #16
 80065d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80065d6:	4b24      	ldr	r3, [pc, #144]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065da:	4b24      	ldr	r3, [pc, #144]	; (800666c <RCCEx_PLL2_Config+0x160>)
 80065dc:	4013      	ands	r3, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	69d2      	ldr	r2, [r2, #28]
 80065e2:	00d2      	lsls	r2, r2, #3
 80065e4:	4920      	ldr	r1, [pc, #128]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80065ea:	4b1f      	ldr	r3, [pc, #124]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ee:	4a1e      	ldr	r2, [pc, #120]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065f0:	f043 0310 	orr.w	r3, r3, #16
 80065f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d106      	bne.n	800660a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80065fc:	4b1a      	ldr	r3, [pc, #104]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	4a19      	ldr	r2, [pc, #100]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 8006602:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006606:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006608:	e00f      	b.n	800662a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d106      	bne.n	800661e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006610:	4b15      	ldr	r3, [pc, #84]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	4a14      	ldr	r2, [pc, #80]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 8006616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800661a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800661c:	e005      	b.n	800662a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800661e:	4b12      	ldr	r3, [pc, #72]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 8006620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006622:	4a11      	ldr	r2, [pc, #68]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 8006624:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006628:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800662a:	4b0f      	ldr	r3, [pc, #60]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a0e      	ldr	r2, [pc, #56]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 8006630:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006636:	f7fb fb8b 	bl	8001d50 <HAL_GetTick>
 800663a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800663c:	e008      	b.n	8006650 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800663e:	f7fb fb87 	bl	8001d50 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d901      	bls.n	8006650 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e006      	b.n	800665e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006650:	4b05      	ldr	r3, [pc, #20]	; (8006668 <RCCEx_PLL2_Config+0x15c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0f0      	beq.n	800663e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800665c:	7bfb      	ldrb	r3, [r7, #15]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	58024400 	.word	0x58024400
 800666c:	ffff0007 	.word	0xffff0007

08006670 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800667e:	4b53      	ldr	r3, [pc, #332]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006682:	f003 0303 	and.w	r3, r3, #3
 8006686:	2b03      	cmp	r3, #3
 8006688:	d101      	bne.n	800668e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e099      	b.n	80067c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800668e:	4b4f      	ldr	r3, [pc, #316]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a4e      	ldr	r2, [pc, #312]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006698:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800669a:	f7fb fb59 	bl	8001d50 <HAL_GetTick>
 800669e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066a0:	e008      	b.n	80066b4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80066a2:	f7fb fb55 	bl	8001d50 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d901      	bls.n	80066b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e086      	b.n	80067c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066b4:	4b45      	ldr	r3, [pc, #276]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1f0      	bne.n	80066a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80066c0:	4b42      	ldr	r3, [pc, #264]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 80066c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	051b      	lsls	r3, r3, #20
 80066ce:	493f      	ldr	r1, [pc, #252]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	628b      	str	r3, [r1, #40]	; 0x28
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	3b01      	subs	r3, #1
 80066da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	025b      	lsls	r3, r3, #9
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	431a      	orrs	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	041b      	lsls	r3, r3, #16
 80066f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066f6:	431a      	orrs	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	061b      	lsls	r3, r3, #24
 8006700:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006704:	4931      	ldr	r1, [pc, #196]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006706:	4313      	orrs	r3, r2
 8006708:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800670a:	4b30      	ldr	r3, [pc, #192]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 800670c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	492d      	ldr	r1, [pc, #180]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006718:	4313      	orrs	r3, r2
 800671a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800671c:	4b2b      	ldr	r3, [pc, #172]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 800671e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006720:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	4928      	ldr	r1, [pc, #160]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 800672a:	4313      	orrs	r3, r2
 800672c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800672e:	4b27      	ldr	r3, [pc, #156]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006732:	4a26      	ldr	r2, [pc, #152]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006738:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800673a:	4b24      	ldr	r3, [pc, #144]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 800673c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800673e:	4b24      	ldr	r3, [pc, #144]	; (80067d0 <RCCEx_PLL3_Config+0x160>)
 8006740:	4013      	ands	r3, r2
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	69d2      	ldr	r2, [r2, #28]
 8006746:	00d2      	lsls	r2, r2, #3
 8006748:	4920      	ldr	r1, [pc, #128]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 800674a:	4313      	orrs	r3, r2
 800674c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800674e:	4b1f      	ldr	r3, [pc, #124]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006752:	4a1e      	ldr	r2, [pc, #120]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006758:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d106      	bne.n	800676e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006760:	4b1a      	ldr	r3, [pc, #104]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	4a19      	ldr	r2, [pc, #100]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006766:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800676a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800676c:	e00f      	b.n	800678e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d106      	bne.n	8006782 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006774:	4b15      	ldr	r3, [pc, #84]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006778:	4a14      	ldr	r2, [pc, #80]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 800677a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800677e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006780:	e005      	b.n	800678e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006782:	4b12      	ldr	r3, [pc, #72]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006786:	4a11      	ldr	r2, [pc, #68]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006788:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800678c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800678e:	4b0f      	ldr	r3, [pc, #60]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a0e      	ldr	r2, [pc, #56]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 8006794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006798:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800679a:	f7fb fad9 	bl	8001d50 <HAL_GetTick>
 800679e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067a0:	e008      	b.n	80067b4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80067a2:	f7fb fad5 	bl	8001d50 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d901      	bls.n	80067b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e006      	b.n	80067c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067b4:	4b05      	ldr	r3, [pc, #20]	; (80067cc <RCCEx_PLL3_Config+0x15c>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0f0      	beq.n	80067a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	58024400 	.word	0x58024400
 80067d0:	ffff0007 	.word	0xffff0007

080067d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e049      	b.n	800687a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d106      	bne.n	8006800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7fa ff40 	bl	8001680 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3304      	adds	r3, #4
 8006810:	4619      	mov	r1, r3
 8006812:	4610      	mov	r0, r2
 8006814:	f000 fba6 	bl	8006f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b082      	sub	sp, #8
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e049      	b.n	8006928 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	d106      	bne.n	80068ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7fa ff21 	bl	80016f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2202      	movs	r2, #2
 80068b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	3304      	adds	r3, #4
 80068be:	4619      	mov	r1, r3
 80068c0:	4610      	mov	r0, r2
 80068c2:	f000 fb4f 	bl	8006f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d109      	bne.n	8006954 <HAL_TIM_PWM_Start+0x24>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b01      	cmp	r3, #1
 800694a:	bf14      	ite	ne
 800694c:	2301      	movne	r3, #1
 800694e:	2300      	moveq	r3, #0
 8006950:	b2db      	uxtb	r3, r3
 8006952:	e03c      	b.n	80069ce <HAL_TIM_PWM_Start+0x9e>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2b04      	cmp	r3, #4
 8006958:	d109      	bne.n	800696e <HAL_TIM_PWM_Start+0x3e>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b01      	cmp	r3, #1
 8006964:	bf14      	ite	ne
 8006966:	2301      	movne	r3, #1
 8006968:	2300      	moveq	r3, #0
 800696a:	b2db      	uxtb	r3, r3
 800696c:	e02f      	b.n	80069ce <HAL_TIM_PWM_Start+0x9e>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b08      	cmp	r3, #8
 8006972:	d109      	bne.n	8006988 <HAL_TIM_PWM_Start+0x58>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2b01      	cmp	r3, #1
 800697e:	bf14      	ite	ne
 8006980:	2301      	movne	r3, #1
 8006982:	2300      	moveq	r3, #0
 8006984:	b2db      	uxtb	r3, r3
 8006986:	e022      	b.n	80069ce <HAL_TIM_PWM_Start+0x9e>
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2b0c      	cmp	r3, #12
 800698c:	d109      	bne.n	80069a2 <HAL_TIM_PWM_Start+0x72>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b01      	cmp	r3, #1
 8006998:	bf14      	ite	ne
 800699a:	2301      	movne	r3, #1
 800699c:	2300      	moveq	r3, #0
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	e015      	b.n	80069ce <HAL_TIM_PWM_Start+0x9e>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b10      	cmp	r3, #16
 80069a6:	d109      	bne.n	80069bc <HAL_TIM_PWM_Start+0x8c>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	bf14      	ite	ne
 80069b4:	2301      	movne	r3, #1
 80069b6:	2300      	moveq	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	e008      	b.n	80069ce <HAL_TIM_PWM_Start+0x9e>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	bf14      	ite	ne
 80069c8:	2301      	movne	r3, #1
 80069ca:	2300      	moveq	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e0a1      	b.n	8006b1a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d104      	bne.n	80069e6 <HAL_TIM_PWM_Start+0xb6>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069e4:	e023      	b.n	8006a2e <HAL_TIM_PWM_Start+0xfe>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	d104      	bne.n	80069f6 <HAL_TIM_PWM_Start+0xc6>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069f4:	e01b      	b.n	8006a2e <HAL_TIM_PWM_Start+0xfe>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d104      	bne.n	8006a06 <HAL_TIM_PWM_Start+0xd6>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a04:	e013      	b.n	8006a2e <HAL_TIM_PWM_Start+0xfe>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b0c      	cmp	r3, #12
 8006a0a:	d104      	bne.n	8006a16 <HAL_TIM_PWM_Start+0xe6>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a14:	e00b      	b.n	8006a2e <HAL_TIM_PWM_Start+0xfe>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b10      	cmp	r3, #16
 8006a1a:	d104      	bne.n	8006a26 <HAL_TIM_PWM_Start+0xf6>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a24:	e003      	b.n	8006a2e <HAL_TIM_PWM_Start+0xfe>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2202      	movs	r2, #2
 8006a2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2201      	movs	r2, #1
 8006a34:	6839      	ldr	r1, [r7, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fea2 	bl	8007780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a38      	ldr	r2, [pc, #224]	; (8006b24 <HAL_TIM_PWM_Start+0x1f4>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d013      	beq.n	8006a6e <HAL_TIM_PWM_Start+0x13e>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a37      	ldr	r2, [pc, #220]	; (8006b28 <HAL_TIM_PWM_Start+0x1f8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00e      	beq.n	8006a6e <HAL_TIM_PWM_Start+0x13e>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a35      	ldr	r2, [pc, #212]	; (8006b2c <HAL_TIM_PWM_Start+0x1fc>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d009      	beq.n	8006a6e <HAL_TIM_PWM_Start+0x13e>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a34      	ldr	r2, [pc, #208]	; (8006b30 <HAL_TIM_PWM_Start+0x200>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d004      	beq.n	8006a6e <HAL_TIM_PWM_Start+0x13e>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a32      	ldr	r2, [pc, #200]	; (8006b34 <HAL_TIM_PWM_Start+0x204>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d101      	bne.n	8006a72 <HAL_TIM_PWM_Start+0x142>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e000      	b.n	8006a74 <HAL_TIM_PWM_Start+0x144>
 8006a72:	2300      	movs	r3, #0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d007      	beq.n	8006a88 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a86:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a25      	ldr	r2, [pc, #148]	; (8006b24 <HAL_TIM_PWM_Start+0x1f4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d022      	beq.n	8006ad8 <HAL_TIM_PWM_Start+0x1a8>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a9a:	d01d      	beq.n	8006ad8 <HAL_TIM_PWM_Start+0x1a8>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a25      	ldr	r2, [pc, #148]	; (8006b38 <HAL_TIM_PWM_Start+0x208>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d018      	beq.n	8006ad8 <HAL_TIM_PWM_Start+0x1a8>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a24      	ldr	r2, [pc, #144]	; (8006b3c <HAL_TIM_PWM_Start+0x20c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d013      	beq.n	8006ad8 <HAL_TIM_PWM_Start+0x1a8>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a22      	ldr	r2, [pc, #136]	; (8006b40 <HAL_TIM_PWM_Start+0x210>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d00e      	beq.n	8006ad8 <HAL_TIM_PWM_Start+0x1a8>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a1a      	ldr	r2, [pc, #104]	; (8006b28 <HAL_TIM_PWM_Start+0x1f8>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d009      	beq.n	8006ad8 <HAL_TIM_PWM_Start+0x1a8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a1e      	ldr	r2, [pc, #120]	; (8006b44 <HAL_TIM_PWM_Start+0x214>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d004      	beq.n	8006ad8 <HAL_TIM_PWM_Start+0x1a8>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a16      	ldr	r2, [pc, #88]	; (8006b2c <HAL_TIM_PWM_Start+0x1fc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d115      	bne.n	8006b04 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689a      	ldr	r2, [r3, #8]
 8006ade:	4b1a      	ldr	r3, [pc, #104]	; (8006b48 <HAL_TIM_PWM_Start+0x218>)
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2b06      	cmp	r3, #6
 8006ae8:	d015      	beq.n	8006b16 <HAL_TIM_PWM_Start+0x1e6>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006af0:	d011      	beq.n	8006b16 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f042 0201 	orr.w	r2, r2, #1
 8006b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b02:	e008      	b.n	8006b16 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0201 	orr.w	r2, r2, #1
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	e000      	b.n	8006b18 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	40010000 	.word	0x40010000
 8006b28:	40010400 	.word	0x40010400
 8006b2c:	40014000 	.word	0x40014000
 8006b30:	40014400 	.word	0x40014400
 8006b34:	40014800 	.word	0x40014800
 8006b38:	40000400 	.word	0x40000400
 8006b3c:	40000800 	.word	0x40000800
 8006b40:	40000c00 	.word	0x40000c00
 8006b44:	40001800 	.word	0x40001800
 8006b48:	00010007 	.word	0x00010007

08006b4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d101      	bne.n	8006b6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b66:	2302      	movs	r3, #2
 8006b68:	e0ff      	b.n	8006d6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b14      	cmp	r3, #20
 8006b76:	f200 80f0 	bhi.w	8006d5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b7a:	a201      	add	r2, pc, #4	; (adr r2, 8006b80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b80:	08006bd5 	.word	0x08006bd5
 8006b84:	08006d5b 	.word	0x08006d5b
 8006b88:	08006d5b 	.word	0x08006d5b
 8006b8c:	08006d5b 	.word	0x08006d5b
 8006b90:	08006c15 	.word	0x08006c15
 8006b94:	08006d5b 	.word	0x08006d5b
 8006b98:	08006d5b 	.word	0x08006d5b
 8006b9c:	08006d5b 	.word	0x08006d5b
 8006ba0:	08006c57 	.word	0x08006c57
 8006ba4:	08006d5b 	.word	0x08006d5b
 8006ba8:	08006d5b 	.word	0x08006d5b
 8006bac:	08006d5b 	.word	0x08006d5b
 8006bb0:	08006c97 	.word	0x08006c97
 8006bb4:	08006d5b 	.word	0x08006d5b
 8006bb8:	08006d5b 	.word	0x08006d5b
 8006bbc:	08006d5b 	.word	0x08006d5b
 8006bc0:	08006cd9 	.word	0x08006cd9
 8006bc4:	08006d5b 	.word	0x08006d5b
 8006bc8:	08006d5b 	.word	0x08006d5b
 8006bcc:	08006d5b 	.word	0x08006d5b
 8006bd0:	08006d19 	.word	0x08006d19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68b9      	ldr	r1, [r7, #8]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fa5c 	bl	8007098 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699a      	ldr	r2, [r3, #24]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0208 	orr.w	r2, r2, #8
 8006bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 0204 	bic.w	r2, r2, #4
 8006bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6999      	ldr	r1, [r3, #24]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	691a      	ldr	r2, [r3, #16]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	619a      	str	r2, [r3, #24]
      break;
 8006c12:	e0a5      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68b9      	ldr	r1, [r7, #8]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 facc 	bl	80071b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699a      	ldr	r2, [r3, #24]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6999      	ldr	r1, [r3, #24]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	021a      	lsls	r2, r3, #8
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	619a      	str	r2, [r3, #24]
      break;
 8006c54:	e084      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68b9      	ldr	r1, [r7, #8]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 fb35 	bl	80072cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69da      	ldr	r2, [r3, #28]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f042 0208 	orr.w	r2, r2, #8
 8006c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69da      	ldr	r2, [r3, #28]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0204 	bic.w	r2, r2, #4
 8006c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69d9      	ldr	r1, [r3, #28]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	691a      	ldr	r2, [r3, #16]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	61da      	str	r2, [r3, #28]
      break;
 8006c94:	e064      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68b9      	ldr	r1, [r7, #8]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 fb9d 	bl	80073dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69da      	ldr	r2, [r3, #28]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69d9      	ldr	r1, [r3, #28]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	021a      	lsls	r2, r3, #8
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	61da      	str	r2, [r3, #28]
      break;
 8006cd6:	e043      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68b9      	ldr	r1, [r7, #8]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fbe6 	bl	80074b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0208 	orr.w	r2, r2, #8
 8006cf2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0204 	bic.w	r2, r2, #4
 8006d02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	691a      	ldr	r2, [r3, #16]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d16:	e023      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68b9      	ldr	r1, [r7, #8]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 fc2a 	bl	8007578 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	021a      	lsls	r2, r3, #8
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d58:	e002      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop

08006d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d101      	bne.n	8006d90 <HAL_TIM_ConfigClockSource+0x1c>
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	e0dc      	b.n	8006f4a <HAL_TIM_ConfigClockSource+0x1d6>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	4b6a      	ldr	r3, [pc, #424]	; (8006f54 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006dac:	4013      	ands	r3, r2
 8006dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006db6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a64      	ldr	r2, [pc, #400]	; (8006f58 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	f000 80a9 	beq.w	8006f1e <HAL_TIM_ConfigClockSource+0x1aa>
 8006dcc:	4a62      	ldr	r2, [pc, #392]	; (8006f58 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	f200 80ae 	bhi.w	8006f30 <HAL_TIM_ConfigClockSource+0x1bc>
 8006dd4:	4a61      	ldr	r2, [pc, #388]	; (8006f5c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	f000 80a1 	beq.w	8006f1e <HAL_TIM_ConfigClockSource+0x1aa>
 8006ddc:	4a5f      	ldr	r2, [pc, #380]	; (8006f5c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	f200 80a6 	bhi.w	8006f30 <HAL_TIM_ConfigClockSource+0x1bc>
 8006de4:	4a5e      	ldr	r2, [pc, #376]	; (8006f60 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	f000 8099 	beq.w	8006f1e <HAL_TIM_ConfigClockSource+0x1aa>
 8006dec:	4a5c      	ldr	r2, [pc, #368]	; (8006f60 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	f200 809e 	bhi.w	8006f30 <HAL_TIM_ConfigClockSource+0x1bc>
 8006df4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006df8:	f000 8091 	beq.w	8006f1e <HAL_TIM_ConfigClockSource+0x1aa>
 8006dfc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006e00:	f200 8096 	bhi.w	8006f30 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e08:	f000 8089 	beq.w	8006f1e <HAL_TIM_ConfigClockSource+0x1aa>
 8006e0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e10:	f200 808e 	bhi.w	8006f30 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e18:	d03e      	beq.n	8006e98 <HAL_TIM_ConfigClockSource+0x124>
 8006e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e1e:	f200 8087 	bhi.w	8006f30 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e26:	f000 8086 	beq.w	8006f36 <HAL_TIM_ConfigClockSource+0x1c2>
 8006e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e2e:	d87f      	bhi.n	8006f30 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e30:	2b70      	cmp	r3, #112	; 0x70
 8006e32:	d01a      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0xf6>
 8006e34:	2b70      	cmp	r3, #112	; 0x70
 8006e36:	d87b      	bhi.n	8006f30 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e38:	2b60      	cmp	r3, #96	; 0x60
 8006e3a:	d050      	beq.n	8006ede <HAL_TIM_ConfigClockSource+0x16a>
 8006e3c:	2b60      	cmp	r3, #96	; 0x60
 8006e3e:	d877      	bhi.n	8006f30 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e40:	2b50      	cmp	r3, #80	; 0x50
 8006e42:	d03c      	beq.n	8006ebe <HAL_TIM_ConfigClockSource+0x14a>
 8006e44:	2b50      	cmp	r3, #80	; 0x50
 8006e46:	d873      	bhi.n	8006f30 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e48:	2b40      	cmp	r3, #64	; 0x40
 8006e4a:	d058      	beq.n	8006efe <HAL_TIM_ConfigClockSource+0x18a>
 8006e4c:	2b40      	cmp	r3, #64	; 0x40
 8006e4e:	d86f      	bhi.n	8006f30 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e50:	2b30      	cmp	r3, #48	; 0x30
 8006e52:	d064      	beq.n	8006f1e <HAL_TIM_ConfigClockSource+0x1aa>
 8006e54:	2b30      	cmp	r3, #48	; 0x30
 8006e56:	d86b      	bhi.n	8006f30 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	d060      	beq.n	8006f1e <HAL_TIM_ConfigClockSource+0x1aa>
 8006e5c:	2b20      	cmp	r3, #32
 8006e5e:	d867      	bhi.n	8006f30 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d05c      	beq.n	8006f1e <HAL_TIM_ConfigClockSource+0x1aa>
 8006e64:	2b10      	cmp	r3, #16
 8006e66:	d05a      	beq.n	8006f1e <HAL_TIM_ConfigClockSource+0x1aa>
 8006e68:	e062      	b.n	8006f30 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6818      	ldr	r0, [r3, #0]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	6899      	ldr	r1, [r3, #8]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f000 fc61 	bl	8007740 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	609a      	str	r2, [r3, #8]
      break;
 8006e96:	e04f      	b.n	8006f38 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6818      	ldr	r0, [r3, #0]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	6899      	ldr	r1, [r3, #8]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	685a      	ldr	r2, [r3, #4]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f000 fc4a 	bl	8007740 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689a      	ldr	r2, [r3, #8]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006eba:	609a      	str	r2, [r3, #8]
      break;
 8006ebc:	e03c      	b.n	8006f38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6818      	ldr	r0, [r3, #0]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	6859      	ldr	r1, [r3, #4]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f000 fbba 	bl	8007644 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2150      	movs	r1, #80	; 0x50
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 fc14 	bl	8007704 <TIM_ITRx_SetConfig>
      break;
 8006edc:	e02c      	b.n	8006f38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6818      	ldr	r0, [r3, #0]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	6859      	ldr	r1, [r3, #4]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	461a      	mov	r2, r3
 8006eec:	f000 fbd9 	bl	80076a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2160      	movs	r1, #96	; 0x60
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 fc04 	bl	8007704 <TIM_ITRx_SetConfig>
      break;
 8006efc:	e01c      	b.n	8006f38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6818      	ldr	r0, [r3, #0]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	6859      	ldr	r1, [r3, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f000 fb9a 	bl	8007644 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2140      	movs	r1, #64	; 0x40
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 fbf4 	bl	8007704 <TIM_ITRx_SetConfig>
      break;
 8006f1c:	e00c      	b.n	8006f38 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4619      	mov	r1, r3
 8006f28:	4610      	mov	r0, r2
 8006f2a:	f000 fbeb 	bl	8007704 <TIM_ITRx_SetConfig>
      break;
 8006f2e:	e003      	b.n	8006f38 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	73fb      	strb	r3, [r7, #15]
      break;
 8006f34:	e000      	b.n	8006f38 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006f36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	ffceff88 	.word	0xffceff88
 8006f58:	00100040 	.word	0x00100040
 8006f5c:	00100030 	.word	0x00100030
 8006f60:	00100020 	.word	0x00100020

08006f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a40      	ldr	r2, [pc, #256]	; (8007078 <TIM_Base_SetConfig+0x114>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d013      	beq.n	8006fa4 <TIM_Base_SetConfig+0x40>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f82:	d00f      	beq.n	8006fa4 <TIM_Base_SetConfig+0x40>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a3d      	ldr	r2, [pc, #244]	; (800707c <TIM_Base_SetConfig+0x118>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d00b      	beq.n	8006fa4 <TIM_Base_SetConfig+0x40>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a3c      	ldr	r2, [pc, #240]	; (8007080 <TIM_Base_SetConfig+0x11c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d007      	beq.n	8006fa4 <TIM_Base_SetConfig+0x40>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a3b      	ldr	r2, [pc, #236]	; (8007084 <TIM_Base_SetConfig+0x120>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d003      	beq.n	8006fa4 <TIM_Base_SetConfig+0x40>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a3a      	ldr	r2, [pc, #232]	; (8007088 <TIM_Base_SetConfig+0x124>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d108      	bne.n	8006fb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a2f      	ldr	r2, [pc, #188]	; (8007078 <TIM_Base_SetConfig+0x114>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d01f      	beq.n	8006ffe <TIM_Base_SetConfig+0x9a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc4:	d01b      	beq.n	8006ffe <TIM_Base_SetConfig+0x9a>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a2c      	ldr	r2, [pc, #176]	; (800707c <TIM_Base_SetConfig+0x118>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d017      	beq.n	8006ffe <TIM_Base_SetConfig+0x9a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a2b      	ldr	r2, [pc, #172]	; (8007080 <TIM_Base_SetConfig+0x11c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d013      	beq.n	8006ffe <TIM_Base_SetConfig+0x9a>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a2a      	ldr	r2, [pc, #168]	; (8007084 <TIM_Base_SetConfig+0x120>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d00f      	beq.n	8006ffe <TIM_Base_SetConfig+0x9a>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a29      	ldr	r2, [pc, #164]	; (8007088 <TIM_Base_SetConfig+0x124>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d00b      	beq.n	8006ffe <TIM_Base_SetConfig+0x9a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a28      	ldr	r2, [pc, #160]	; (800708c <TIM_Base_SetConfig+0x128>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d007      	beq.n	8006ffe <TIM_Base_SetConfig+0x9a>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a27      	ldr	r2, [pc, #156]	; (8007090 <TIM_Base_SetConfig+0x12c>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d003      	beq.n	8006ffe <TIM_Base_SetConfig+0x9a>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a26      	ldr	r2, [pc, #152]	; (8007094 <TIM_Base_SetConfig+0x130>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d108      	bne.n	8007010 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	4313      	orrs	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	4313      	orrs	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a10      	ldr	r2, [pc, #64]	; (8007078 <TIM_Base_SetConfig+0x114>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00f      	beq.n	800705c <TIM_Base_SetConfig+0xf8>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a12      	ldr	r2, [pc, #72]	; (8007088 <TIM_Base_SetConfig+0x124>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d00b      	beq.n	800705c <TIM_Base_SetConfig+0xf8>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a11      	ldr	r2, [pc, #68]	; (800708c <TIM_Base_SetConfig+0x128>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d007      	beq.n	800705c <TIM_Base_SetConfig+0xf8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a10      	ldr	r2, [pc, #64]	; (8007090 <TIM_Base_SetConfig+0x12c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d003      	beq.n	800705c <TIM_Base_SetConfig+0xf8>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a0f      	ldr	r2, [pc, #60]	; (8007094 <TIM_Base_SetConfig+0x130>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d103      	bne.n	8007064 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	691a      	ldr	r2, [r3, #16]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	615a      	str	r2, [r3, #20]
}
 800706a:	bf00      	nop
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	40010000 	.word	0x40010000
 800707c:	40000400 	.word	0x40000400
 8007080:	40000800 	.word	0x40000800
 8007084:	40000c00 	.word	0x40000c00
 8007088:	40010400 	.word	0x40010400
 800708c:	40014000 	.word	0x40014000
 8007090:	40014400 	.word	0x40014400
 8007094:	40014800 	.word	0x40014800

08007098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007098:	b480      	push	{r7}
 800709a:	b087      	sub	sp, #28
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	f023 0201 	bic.w	r2, r3, #1
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	4b37      	ldr	r3, [pc, #220]	; (80071a0 <TIM_OC1_SetConfig+0x108>)
 80070c4:	4013      	ands	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0303 	bic.w	r3, r3, #3
 80070ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f023 0302 	bic.w	r3, r3, #2
 80070e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a2d      	ldr	r2, [pc, #180]	; (80071a4 <TIM_OC1_SetConfig+0x10c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d00f      	beq.n	8007114 <TIM_OC1_SetConfig+0x7c>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a2c      	ldr	r2, [pc, #176]	; (80071a8 <TIM_OC1_SetConfig+0x110>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d00b      	beq.n	8007114 <TIM_OC1_SetConfig+0x7c>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a2b      	ldr	r2, [pc, #172]	; (80071ac <TIM_OC1_SetConfig+0x114>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d007      	beq.n	8007114 <TIM_OC1_SetConfig+0x7c>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a2a      	ldr	r2, [pc, #168]	; (80071b0 <TIM_OC1_SetConfig+0x118>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d003      	beq.n	8007114 <TIM_OC1_SetConfig+0x7c>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a29      	ldr	r2, [pc, #164]	; (80071b4 <TIM_OC1_SetConfig+0x11c>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d10c      	bne.n	800712e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f023 0308 	bic.w	r3, r3, #8
 800711a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	4313      	orrs	r3, r2
 8007124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f023 0304 	bic.w	r3, r3, #4
 800712c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a1c      	ldr	r2, [pc, #112]	; (80071a4 <TIM_OC1_SetConfig+0x10c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d00f      	beq.n	8007156 <TIM_OC1_SetConfig+0xbe>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a1b      	ldr	r2, [pc, #108]	; (80071a8 <TIM_OC1_SetConfig+0x110>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d00b      	beq.n	8007156 <TIM_OC1_SetConfig+0xbe>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a1a      	ldr	r2, [pc, #104]	; (80071ac <TIM_OC1_SetConfig+0x114>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d007      	beq.n	8007156 <TIM_OC1_SetConfig+0xbe>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a19      	ldr	r2, [pc, #100]	; (80071b0 <TIM_OC1_SetConfig+0x118>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d003      	beq.n	8007156 <TIM_OC1_SetConfig+0xbe>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a18      	ldr	r2, [pc, #96]	; (80071b4 <TIM_OC1_SetConfig+0x11c>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d111      	bne.n	800717a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800715c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	4313      	orrs	r3, r2
 800716e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	4313      	orrs	r3, r2
 8007178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	621a      	str	r2, [r3, #32]
}
 8007194:	bf00      	nop
 8007196:	371c      	adds	r7, #28
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	fffeff8f 	.word	0xfffeff8f
 80071a4:	40010000 	.word	0x40010000
 80071a8:	40010400 	.word	0x40010400
 80071ac:	40014000 	.word	0x40014000
 80071b0:	40014400 	.word	0x40014400
 80071b4:	40014800 	.word	0x40014800

080071b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	f023 0210 	bic.w	r2, r3, #16
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4b34      	ldr	r3, [pc, #208]	; (80072b4 <TIM_OC2_SetConfig+0xfc>)
 80071e4:	4013      	ands	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	021b      	lsls	r3, r3, #8
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f023 0320 	bic.w	r3, r3, #32
 8007202:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	011b      	lsls	r3, r3, #4
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	4313      	orrs	r3, r2
 800720e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a29      	ldr	r2, [pc, #164]	; (80072b8 <TIM_OC2_SetConfig+0x100>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d003      	beq.n	8007220 <TIM_OC2_SetConfig+0x68>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a28      	ldr	r2, [pc, #160]	; (80072bc <TIM_OC2_SetConfig+0x104>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d10d      	bne.n	800723c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	011b      	lsls	r3, r3, #4
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	4313      	orrs	r3, r2
 8007232:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800723a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a1e      	ldr	r2, [pc, #120]	; (80072b8 <TIM_OC2_SetConfig+0x100>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d00f      	beq.n	8007264 <TIM_OC2_SetConfig+0xac>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a1d      	ldr	r2, [pc, #116]	; (80072bc <TIM_OC2_SetConfig+0x104>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d00b      	beq.n	8007264 <TIM_OC2_SetConfig+0xac>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a1c      	ldr	r2, [pc, #112]	; (80072c0 <TIM_OC2_SetConfig+0x108>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d007      	beq.n	8007264 <TIM_OC2_SetConfig+0xac>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a1b      	ldr	r2, [pc, #108]	; (80072c4 <TIM_OC2_SetConfig+0x10c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d003      	beq.n	8007264 <TIM_OC2_SetConfig+0xac>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a1a      	ldr	r2, [pc, #104]	; (80072c8 <TIM_OC2_SetConfig+0x110>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d113      	bne.n	800728c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800726a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007272:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	4313      	orrs	r3, r2
 800727e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	4313      	orrs	r3, r2
 800728a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	621a      	str	r2, [r3, #32]
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	feff8fff 	.word	0xfeff8fff
 80072b8:	40010000 	.word	0x40010000
 80072bc:	40010400 	.word	0x40010400
 80072c0:	40014000 	.word	0x40014000
 80072c4:	40014400 	.word	0x40014400
 80072c8:	40014800 	.word	0x40014800

080072cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	4b33      	ldr	r3, [pc, #204]	; (80073c4 <TIM_OC3_SetConfig+0xf8>)
 80072f8:	4013      	ands	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 0303 	bic.w	r3, r3, #3
 8007302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	4313      	orrs	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	021b      	lsls	r3, r3, #8
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	4313      	orrs	r3, r2
 8007320:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a28      	ldr	r2, [pc, #160]	; (80073c8 <TIM_OC3_SetConfig+0xfc>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d003      	beq.n	8007332 <TIM_OC3_SetConfig+0x66>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a27      	ldr	r2, [pc, #156]	; (80073cc <TIM_OC3_SetConfig+0x100>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d10d      	bne.n	800734e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	021b      	lsls	r3, r3, #8
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	4313      	orrs	r3, r2
 8007344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800734c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a1d      	ldr	r2, [pc, #116]	; (80073c8 <TIM_OC3_SetConfig+0xfc>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d00f      	beq.n	8007376 <TIM_OC3_SetConfig+0xaa>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a1c      	ldr	r2, [pc, #112]	; (80073cc <TIM_OC3_SetConfig+0x100>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d00b      	beq.n	8007376 <TIM_OC3_SetConfig+0xaa>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a1b      	ldr	r2, [pc, #108]	; (80073d0 <TIM_OC3_SetConfig+0x104>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d007      	beq.n	8007376 <TIM_OC3_SetConfig+0xaa>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a1a      	ldr	r2, [pc, #104]	; (80073d4 <TIM_OC3_SetConfig+0x108>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d003      	beq.n	8007376 <TIM_OC3_SetConfig+0xaa>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a19      	ldr	r2, [pc, #100]	; (80073d8 <TIM_OC3_SetConfig+0x10c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d113      	bne.n	800739e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800737c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007384:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	011b      	lsls	r3, r3, #4
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	4313      	orrs	r3, r2
 8007390:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	011b      	lsls	r3, r3, #4
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	4313      	orrs	r3, r2
 800739c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	621a      	str	r2, [r3, #32]
}
 80073b8:	bf00      	nop
 80073ba:	371c      	adds	r7, #28
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	fffeff8f 	.word	0xfffeff8f
 80073c8:	40010000 	.word	0x40010000
 80073cc:	40010400 	.word	0x40010400
 80073d0:	40014000 	.word	0x40014000
 80073d4:	40014400 	.word	0x40014400
 80073d8:	40014800 	.word	0x40014800

080073dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	4b24      	ldr	r3, [pc, #144]	; (8007498 <TIM_OC4_SetConfig+0xbc>)
 8007408:	4013      	ands	r3, r2
 800740a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	021b      	lsls	r3, r3, #8
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	4313      	orrs	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007426:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	031b      	lsls	r3, r3, #12
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	4313      	orrs	r3, r2
 8007432:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a19      	ldr	r2, [pc, #100]	; (800749c <TIM_OC4_SetConfig+0xc0>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d00f      	beq.n	800745c <TIM_OC4_SetConfig+0x80>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a18      	ldr	r2, [pc, #96]	; (80074a0 <TIM_OC4_SetConfig+0xc4>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d00b      	beq.n	800745c <TIM_OC4_SetConfig+0x80>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a17      	ldr	r2, [pc, #92]	; (80074a4 <TIM_OC4_SetConfig+0xc8>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d007      	beq.n	800745c <TIM_OC4_SetConfig+0x80>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a16      	ldr	r2, [pc, #88]	; (80074a8 <TIM_OC4_SetConfig+0xcc>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d003      	beq.n	800745c <TIM_OC4_SetConfig+0x80>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a15      	ldr	r2, [pc, #84]	; (80074ac <TIM_OC4_SetConfig+0xd0>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d109      	bne.n	8007470 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007462:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	019b      	lsls	r3, r3, #6
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	4313      	orrs	r3, r2
 800746e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	621a      	str	r2, [r3, #32]
}
 800748a:	bf00      	nop
 800748c:	371c      	adds	r7, #28
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	feff8fff 	.word	0xfeff8fff
 800749c:	40010000 	.word	0x40010000
 80074a0:	40010400 	.word	0x40010400
 80074a4:	40014000 	.word	0x40014000
 80074a8:	40014400 	.word	0x40014400
 80074ac:	40014800 	.word	0x40014800

080074b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	4b21      	ldr	r3, [pc, #132]	; (8007560 <TIM_OC5_SetConfig+0xb0>)
 80074dc:	4013      	ands	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80074f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	041b      	lsls	r3, r3, #16
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a18      	ldr	r2, [pc, #96]	; (8007564 <TIM_OC5_SetConfig+0xb4>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d00f      	beq.n	8007526 <TIM_OC5_SetConfig+0x76>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a17      	ldr	r2, [pc, #92]	; (8007568 <TIM_OC5_SetConfig+0xb8>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d00b      	beq.n	8007526 <TIM_OC5_SetConfig+0x76>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a16      	ldr	r2, [pc, #88]	; (800756c <TIM_OC5_SetConfig+0xbc>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d007      	beq.n	8007526 <TIM_OC5_SetConfig+0x76>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a15      	ldr	r2, [pc, #84]	; (8007570 <TIM_OC5_SetConfig+0xc0>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d003      	beq.n	8007526 <TIM_OC5_SetConfig+0x76>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a14      	ldr	r2, [pc, #80]	; (8007574 <TIM_OC5_SetConfig+0xc4>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d109      	bne.n	800753a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800752c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	021b      	lsls	r3, r3, #8
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	4313      	orrs	r3, r2
 8007538:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	685a      	ldr	r2, [r3, #4]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	621a      	str	r2, [r3, #32]
}
 8007554:	bf00      	nop
 8007556:	371c      	adds	r7, #28
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	fffeff8f 	.word	0xfffeff8f
 8007564:	40010000 	.word	0x40010000
 8007568:	40010400 	.word	0x40010400
 800756c:	40014000 	.word	0x40014000
 8007570:	40014400 	.word	0x40014400
 8007574:	40014800 	.word	0x40014800

08007578 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007578:	b480      	push	{r7}
 800757a:	b087      	sub	sp, #28
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	4b22      	ldr	r3, [pc, #136]	; (800762c <TIM_OC6_SetConfig+0xb4>)
 80075a4:	4013      	ands	r3, r2
 80075a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	021b      	lsls	r3, r3, #8
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	051b      	lsls	r3, r3, #20
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a19      	ldr	r2, [pc, #100]	; (8007630 <TIM_OC6_SetConfig+0xb8>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d00f      	beq.n	80075f0 <TIM_OC6_SetConfig+0x78>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a18      	ldr	r2, [pc, #96]	; (8007634 <TIM_OC6_SetConfig+0xbc>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d00b      	beq.n	80075f0 <TIM_OC6_SetConfig+0x78>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a17      	ldr	r2, [pc, #92]	; (8007638 <TIM_OC6_SetConfig+0xc0>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d007      	beq.n	80075f0 <TIM_OC6_SetConfig+0x78>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a16      	ldr	r2, [pc, #88]	; (800763c <TIM_OC6_SetConfig+0xc4>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d003      	beq.n	80075f0 <TIM_OC6_SetConfig+0x78>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a15      	ldr	r2, [pc, #84]	; (8007640 <TIM_OC6_SetConfig+0xc8>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d109      	bne.n	8007604 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	029b      	lsls	r3, r3, #10
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	4313      	orrs	r3, r2
 8007602:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	621a      	str	r2, [r3, #32]
}
 800761e:	bf00      	nop
 8007620:	371c      	adds	r7, #28
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	feff8fff 	.word	0xfeff8fff
 8007630:	40010000 	.word	0x40010000
 8007634:	40010400 	.word	0x40010400
 8007638:	40014000 	.word	0x40014000
 800763c:	40014400 	.word	0x40014400
 8007640:	40014800 	.word	0x40014800

08007644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007644:	b480      	push	{r7}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	f023 0201 	bic.w	r2, r3, #1
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800766e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	011b      	lsls	r3, r3, #4
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	4313      	orrs	r3, r2
 8007678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f023 030a 	bic.w	r3, r3, #10
 8007680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	4313      	orrs	r3, r2
 8007688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	621a      	str	r2, [r3, #32]
}
 8007696:	bf00      	nop
 8007698:	371c      	adds	r7, #28
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b087      	sub	sp, #28
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	60f8      	str	r0, [r7, #12]
 80076aa:	60b9      	str	r1, [r7, #8]
 80076ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	f023 0210 	bic.w	r2, r3, #16
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	031b      	lsls	r3, r3, #12
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	011b      	lsls	r3, r3, #4
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	621a      	str	r2, [r3, #32]
}
 80076f6:	bf00      	nop
 80076f8:	371c      	adds	r7, #28
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
	...

08007704 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4b09      	ldr	r3, [pc, #36]	; (800773c <TIM_ITRx_SetConfig+0x38>)
 8007718:	4013      	ands	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	4313      	orrs	r3, r2
 8007722:	f043 0307 	orr.w	r3, r3, #7
 8007726:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	609a      	str	r2, [r3, #8]
}
 800772e:	bf00      	nop
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	ffcfff8f 	.word	0xffcfff8f

08007740 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
 800774c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800775a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	021a      	lsls	r2, r3, #8
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	431a      	orrs	r2, r3
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	4313      	orrs	r3, r2
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	4313      	orrs	r3, r2
 800776c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	609a      	str	r2, [r3, #8]
}
 8007774:	bf00      	nop
 8007776:	371c      	adds	r7, #28
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f003 031f 	and.w	r3, r3, #31
 8007792:	2201      	movs	r2, #1
 8007794:	fa02 f303 	lsl.w	r3, r2, r3
 8007798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6a1a      	ldr	r2, [r3, #32]
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	43db      	mvns	r3, r3
 80077a2:	401a      	ands	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6a1a      	ldr	r2, [r3, #32]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	f003 031f 	and.w	r3, r3, #31
 80077b2:	6879      	ldr	r1, [r7, #4]
 80077b4:	fa01 f303 	lsl.w	r3, r1, r3
 80077b8:	431a      	orrs	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	621a      	str	r2, [r3, #32]
}
 80077be:	bf00      	nop
 80077c0:	371c      	adds	r7, #28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
	...

080077cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d101      	bne.n	80077e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077e0:	2302      	movs	r3, #2
 80077e2:	e06d      	b.n	80078c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a30      	ldr	r2, [pc, #192]	; (80078cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d004      	beq.n	8007818 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a2f      	ldr	r2, [pc, #188]	; (80078d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d108      	bne.n	800782a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800781e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	4313      	orrs	r3, r2
 8007828:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007830:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	4313      	orrs	r3, r2
 800783a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a20      	ldr	r2, [pc, #128]	; (80078cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d022      	beq.n	8007894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007856:	d01d      	beq.n	8007894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a1d      	ldr	r2, [pc, #116]	; (80078d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d018      	beq.n	8007894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a1c      	ldr	r2, [pc, #112]	; (80078d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d013      	beq.n	8007894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a1a      	ldr	r2, [pc, #104]	; (80078dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d00e      	beq.n	8007894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a15      	ldr	r2, [pc, #84]	; (80078d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d009      	beq.n	8007894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a16      	ldr	r2, [pc, #88]	; (80078e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d004      	beq.n	8007894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a15      	ldr	r2, [pc, #84]	; (80078e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d10c      	bne.n	80078ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800789a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	40010000 	.word	0x40010000
 80078d0:	40010400 	.word	0x40010400
 80078d4:	40000400 	.word	0x40000400
 80078d8:	40000800 	.word	0x40000800
 80078dc:	40000c00 	.word	0x40000c00
 80078e0:	40001800 	.word	0x40001800
 80078e4:	40014000 	.word	0x40014000

080078e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e042      	b.n	8007980 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007900:	2b00      	cmp	r3, #0
 8007902:	d106      	bne.n	8007912 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7f9 ff9d 	bl	800184c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2224      	movs	r2, #36	; 0x24
 8007916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 0201 	bic.w	r2, r2, #1
 8007928:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f8c2 	bl	8007ab4 <UART_SetConfig>
 8007930:	4603      	mov	r3, r0
 8007932:	2b01      	cmp	r3, #1
 8007934:	d101      	bne.n	800793a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e022      	b.n	8007980 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793e:	2b00      	cmp	r3, #0
 8007940:	d002      	beq.n	8007948 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 ff22 	bl	800878c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007956:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689a      	ldr	r2, [r3, #8]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007966:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f042 0201 	orr.w	r2, r2, #1
 8007976:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 ffa9 	bl	80088d0 <UART_CheckIdleState>
 800797e:	4603      	mov	r3, r0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08a      	sub	sp, #40	; 0x28
 800798c:	af02      	add	r7, sp, #8
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	603b      	str	r3, [r7, #0]
 8007994:	4613      	mov	r3, r2
 8007996:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800799e:	2b20      	cmp	r3, #32
 80079a0:	f040 8083 	bne.w	8007aaa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <HAL_UART_Transmit+0x28>
 80079aa:	88fb      	ldrh	r3, [r7, #6]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d101      	bne.n	80079b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e07b      	b.n	8007aac <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d101      	bne.n	80079c2 <HAL_UART_Transmit+0x3a>
 80079be:	2302      	movs	r3, #2
 80079c0:	e074      	b.n	8007aac <HAL_UART_Transmit+0x124>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2221      	movs	r2, #33	; 0x21
 80079d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079da:	f7fa f9b9 	bl	8001d50 <HAL_GetTick>
 80079de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	88fa      	ldrh	r2, [r7, #6]
 80079e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	88fa      	ldrh	r2, [r7, #6]
 80079ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079f8:	d108      	bne.n	8007a0c <HAL_UART_Transmit+0x84>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d104      	bne.n	8007a0c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007a02:	2300      	movs	r3, #0
 8007a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	61bb      	str	r3, [r7, #24]
 8007a0a:	e003      	b.n	8007a14 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a10:	2300      	movs	r3, #0
 8007a12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007a1c:	e02c      	b.n	8007a78 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2200      	movs	r2, #0
 8007a26:	2180      	movs	r1, #128	; 0x80
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 ff9c 	bl	8008966 <UART_WaitOnFlagUntilTimeout>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d001      	beq.n	8007a38 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e039      	b.n	8007aac <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10b      	bne.n	8007a56 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	461a      	mov	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	3302      	adds	r3, #2
 8007a52:	61bb      	str	r3, [r7, #24]
 8007a54:	e007      	b.n	8007a66 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	781a      	ldrb	r2, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	3301      	adds	r3, #1
 8007a64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1cc      	bne.n	8007a1e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	2140      	movs	r1, #64	; 0x40
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 ff69 	bl	8008966 <UART_WaitOnFlagUntilTimeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e006      	b.n	8007aac <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	e000      	b.n	8007aac <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007aaa:	2302      	movs	r3, #2
  }
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3720      	adds	r7, #32
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ab8:	b092      	sub	sp, #72	; 0x48
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	431a      	orrs	r2, r3
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	431a      	orrs	r2, r3
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	4bbe      	ldr	r3, [pc, #760]	; (8007ddc <UART_SetConfig+0x328>)
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	6812      	ldr	r2, [r2, #0]
 8007aea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007aec:	430b      	orrs	r3, r1
 8007aee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4ab3      	ldr	r2, [pc, #716]	; (8007de0 <UART_SetConfig+0x32c>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d004      	beq.n	8007b20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689a      	ldr	r2, [r3, #8]
 8007b26:	4baf      	ldr	r3, [pc, #700]	; (8007de4 <UART_SetConfig+0x330>)
 8007b28:	4013      	ands	r3, r2
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	6812      	ldr	r2, [r2, #0]
 8007b2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b30:	430b      	orrs	r3, r1
 8007b32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3a:	f023 010f 	bic.w	r1, r3, #15
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4aa6      	ldr	r2, [pc, #664]	; (8007de8 <UART_SetConfig+0x334>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d177      	bne.n	8007c44 <UART_SetConfig+0x190>
 8007b54:	4ba5      	ldr	r3, [pc, #660]	; (8007dec <UART_SetConfig+0x338>)
 8007b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b5c:	2b28      	cmp	r3, #40	; 0x28
 8007b5e:	d86d      	bhi.n	8007c3c <UART_SetConfig+0x188>
 8007b60:	a201      	add	r2, pc, #4	; (adr r2, 8007b68 <UART_SetConfig+0xb4>)
 8007b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b66:	bf00      	nop
 8007b68:	08007c0d 	.word	0x08007c0d
 8007b6c:	08007c3d 	.word	0x08007c3d
 8007b70:	08007c3d 	.word	0x08007c3d
 8007b74:	08007c3d 	.word	0x08007c3d
 8007b78:	08007c3d 	.word	0x08007c3d
 8007b7c:	08007c3d 	.word	0x08007c3d
 8007b80:	08007c3d 	.word	0x08007c3d
 8007b84:	08007c3d 	.word	0x08007c3d
 8007b88:	08007c15 	.word	0x08007c15
 8007b8c:	08007c3d 	.word	0x08007c3d
 8007b90:	08007c3d 	.word	0x08007c3d
 8007b94:	08007c3d 	.word	0x08007c3d
 8007b98:	08007c3d 	.word	0x08007c3d
 8007b9c:	08007c3d 	.word	0x08007c3d
 8007ba0:	08007c3d 	.word	0x08007c3d
 8007ba4:	08007c3d 	.word	0x08007c3d
 8007ba8:	08007c1d 	.word	0x08007c1d
 8007bac:	08007c3d 	.word	0x08007c3d
 8007bb0:	08007c3d 	.word	0x08007c3d
 8007bb4:	08007c3d 	.word	0x08007c3d
 8007bb8:	08007c3d 	.word	0x08007c3d
 8007bbc:	08007c3d 	.word	0x08007c3d
 8007bc0:	08007c3d 	.word	0x08007c3d
 8007bc4:	08007c3d 	.word	0x08007c3d
 8007bc8:	08007c25 	.word	0x08007c25
 8007bcc:	08007c3d 	.word	0x08007c3d
 8007bd0:	08007c3d 	.word	0x08007c3d
 8007bd4:	08007c3d 	.word	0x08007c3d
 8007bd8:	08007c3d 	.word	0x08007c3d
 8007bdc:	08007c3d 	.word	0x08007c3d
 8007be0:	08007c3d 	.word	0x08007c3d
 8007be4:	08007c3d 	.word	0x08007c3d
 8007be8:	08007c2d 	.word	0x08007c2d
 8007bec:	08007c3d 	.word	0x08007c3d
 8007bf0:	08007c3d 	.word	0x08007c3d
 8007bf4:	08007c3d 	.word	0x08007c3d
 8007bf8:	08007c3d 	.word	0x08007c3d
 8007bfc:	08007c3d 	.word	0x08007c3d
 8007c00:	08007c3d 	.word	0x08007c3d
 8007c04:	08007c3d 	.word	0x08007c3d
 8007c08:	08007c35 	.word	0x08007c35
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c12:	e326      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007c14:	2304      	movs	r3, #4
 8007c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c1a:	e322      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007c1c:	2308      	movs	r3, #8
 8007c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c22:	e31e      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007c24:	2310      	movs	r3, #16
 8007c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c2a:	e31a      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007c2c:	2320      	movs	r3, #32
 8007c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c32:	e316      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007c34:	2340      	movs	r3, #64	; 0x40
 8007c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c3a:	e312      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007c3c:	2380      	movs	r3, #128	; 0x80
 8007c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c42:	e30e      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a69      	ldr	r2, [pc, #420]	; (8007df0 <UART_SetConfig+0x33c>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d130      	bne.n	8007cb0 <UART_SetConfig+0x1fc>
 8007c4e:	4b67      	ldr	r3, [pc, #412]	; (8007dec <UART_SetConfig+0x338>)
 8007c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c52:	f003 0307 	and.w	r3, r3, #7
 8007c56:	2b05      	cmp	r3, #5
 8007c58:	d826      	bhi.n	8007ca8 <UART_SetConfig+0x1f4>
 8007c5a:	a201      	add	r2, pc, #4	; (adr r2, 8007c60 <UART_SetConfig+0x1ac>)
 8007c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c60:	08007c79 	.word	0x08007c79
 8007c64:	08007c81 	.word	0x08007c81
 8007c68:	08007c89 	.word	0x08007c89
 8007c6c:	08007c91 	.word	0x08007c91
 8007c70:	08007c99 	.word	0x08007c99
 8007c74:	08007ca1 	.word	0x08007ca1
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c7e:	e2f0      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007c80:	2304      	movs	r3, #4
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c86:	e2ec      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007c88:	2308      	movs	r3, #8
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c8e:	e2e8      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007c90:	2310      	movs	r3, #16
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c96:	e2e4      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007c98:	2320      	movs	r3, #32
 8007c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c9e:	e2e0      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007ca0:	2340      	movs	r3, #64	; 0x40
 8007ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ca6:	e2dc      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007ca8:	2380      	movs	r3, #128	; 0x80
 8007caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cae:	e2d8      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a4f      	ldr	r2, [pc, #316]	; (8007df4 <UART_SetConfig+0x340>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d130      	bne.n	8007d1c <UART_SetConfig+0x268>
 8007cba:	4b4c      	ldr	r3, [pc, #304]	; (8007dec <UART_SetConfig+0x338>)
 8007cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cbe:	f003 0307 	and.w	r3, r3, #7
 8007cc2:	2b05      	cmp	r3, #5
 8007cc4:	d826      	bhi.n	8007d14 <UART_SetConfig+0x260>
 8007cc6:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <UART_SetConfig+0x218>)
 8007cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ccc:	08007ce5 	.word	0x08007ce5
 8007cd0:	08007ced 	.word	0x08007ced
 8007cd4:	08007cf5 	.word	0x08007cf5
 8007cd8:	08007cfd 	.word	0x08007cfd
 8007cdc:	08007d05 	.word	0x08007d05
 8007ce0:	08007d0d 	.word	0x08007d0d
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cea:	e2ba      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007cec:	2304      	movs	r3, #4
 8007cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cf2:	e2b6      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007cf4:	2308      	movs	r3, #8
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cfa:	e2b2      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007cfc:	2310      	movs	r3, #16
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d02:	e2ae      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007d04:	2320      	movs	r3, #32
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d0a:	e2aa      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007d0c:	2340      	movs	r3, #64	; 0x40
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d12:	e2a6      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007d14:	2380      	movs	r3, #128	; 0x80
 8007d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d1a:	e2a2      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a35      	ldr	r2, [pc, #212]	; (8007df8 <UART_SetConfig+0x344>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d130      	bne.n	8007d88 <UART_SetConfig+0x2d4>
 8007d26:	4b31      	ldr	r3, [pc, #196]	; (8007dec <UART_SetConfig+0x338>)
 8007d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	2b05      	cmp	r3, #5
 8007d30:	d826      	bhi.n	8007d80 <UART_SetConfig+0x2cc>
 8007d32:	a201      	add	r2, pc, #4	; (adr r2, 8007d38 <UART_SetConfig+0x284>)
 8007d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d38:	08007d51 	.word	0x08007d51
 8007d3c:	08007d59 	.word	0x08007d59
 8007d40:	08007d61 	.word	0x08007d61
 8007d44:	08007d69 	.word	0x08007d69
 8007d48:	08007d71 	.word	0x08007d71
 8007d4c:	08007d79 	.word	0x08007d79
 8007d50:	2300      	movs	r3, #0
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d56:	e284      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007d58:	2304      	movs	r3, #4
 8007d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d5e:	e280      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007d60:	2308      	movs	r3, #8
 8007d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d66:	e27c      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007d68:	2310      	movs	r3, #16
 8007d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d6e:	e278      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007d70:	2320      	movs	r3, #32
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d76:	e274      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007d78:	2340      	movs	r3, #64	; 0x40
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d7e:	e270      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007d80:	2380      	movs	r3, #128	; 0x80
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d86:	e26c      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a1b      	ldr	r2, [pc, #108]	; (8007dfc <UART_SetConfig+0x348>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d142      	bne.n	8007e18 <UART_SetConfig+0x364>
 8007d92:	4b16      	ldr	r3, [pc, #88]	; (8007dec <UART_SetConfig+0x338>)
 8007d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d96:	f003 0307 	and.w	r3, r3, #7
 8007d9a:	2b05      	cmp	r3, #5
 8007d9c:	d838      	bhi.n	8007e10 <UART_SetConfig+0x35c>
 8007d9e:	a201      	add	r2, pc, #4	; (adr r2, 8007da4 <UART_SetConfig+0x2f0>)
 8007da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da4:	08007dbd 	.word	0x08007dbd
 8007da8:	08007dc5 	.word	0x08007dc5
 8007dac:	08007dcd 	.word	0x08007dcd
 8007db0:	08007dd5 	.word	0x08007dd5
 8007db4:	08007e01 	.word	0x08007e01
 8007db8:	08007e09 	.word	0x08007e09
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dc2:	e24e      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007dc4:	2304      	movs	r3, #4
 8007dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dca:	e24a      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007dcc:	2308      	movs	r3, #8
 8007dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dd2:	e246      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007dd4:	2310      	movs	r3, #16
 8007dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dda:	e242      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007ddc:	cfff69f3 	.word	0xcfff69f3
 8007de0:	58000c00 	.word	0x58000c00
 8007de4:	11fff4ff 	.word	0x11fff4ff
 8007de8:	40011000 	.word	0x40011000
 8007dec:	58024400 	.word	0x58024400
 8007df0:	40004400 	.word	0x40004400
 8007df4:	40004800 	.word	0x40004800
 8007df8:	40004c00 	.word	0x40004c00
 8007dfc:	40005000 	.word	0x40005000
 8007e00:	2320      	movs	r3, #32
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e06:	e22c      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007e08:	2340      	movs	r3, #64	; 0x40
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0e:	e228      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007e10:	2380      	movs	r3, #128	; 0x80
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e16:	e224      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4ab1      	ldr	r2, [pc, #708]	; (80080e4 <UART_SetConfig+0x630>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d176      	bne.n	8007f10 <UART_SetConfig+0x45c>
 8007e22:	4bb1      	ldr	r3, [pc, #708]	; (80080e8 <UART_SetConfig+0x634>)
 8007e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e2a:	2b28      	cmp	r3, #40	; 0x28
 8007e2c:	d86c      	bhi.n	8007f08 <UART_SetConfig+0x454>
 8007e2e:	a201      	add	r2, pc, #4	; (adr r2, 8007e34 <UART_SetConfig+0x380>)
 8007e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e34:	08007ed9 	.word	0x08007ed9
 8007e38:	08007f09 	.word	0x08007f09
 8007e3c:	08007f09 	.word	0x08007f09
 8007e40:	08007f09 	.word	0x08007f09
 8007e44:	08007f09 	.word	0x08007f09
 8007e48:	08007f09 	.word	0x08007f09
 8007e4c:	08007f09 	.word	0x08007f09
 8007e50:	08007f09 	.word	0x08007f09
 8007e54:	08007ee1 	.word	0x08007ee1
 8007e58:	08007f09 	.word	0x08007f09
 8007e5c:	08007f09 	.word	0x08007f09
 8007e60:	08007f09 	.word	0x08007f09
 8007e64:	08007f09 	.word	0x08007f09
 8007e68:	08007f09 	.word	0x08007f09
 8007e6c:	08007f09 	.word	0x08007f09
 8007e70:	08007f09 	.word	0x08007f09
 8007e74:	08007ee9 	.word	0x08007ee9
 8007e78:	08007f09 	.word	0x08007f09
 8007e7c:	08007f09 	.word	0x08007f09
 8007e80:	08007f09 	.word	0x08007f09
 8007e84:	08007f09 	.word	0x08007f09
 8007e88:	08007f09 	.word	0x08007f09
 8007e8c:	08007f09 	.word	0x08007f09
 8007e90:	08007f09 	.word	0x08007f09
 8007e94:	08007ef1 	.word	0x08007ef1
 8007e98:	08007f09 	.word	0x08007f09
 8007e9c:	08007f09 	.word	0x08007f09
 8007ea0:	08007f09 	.word	0x08007f09
 8007ea4:	08007f09 	.word	0x08007f09
 8007ea8:	08007f09 	.word	0x08007f09
 8007eac:	08007f09 	.word	0x08007f09
 8007eb0:	08007f09 	.word	0x08007f09
 8007eb4:	08007ef9 	.word	0x08007ef9
 8007eb8:	08007f09 	.word	0x08007f09
 8007ebc:	08007f09 	.word	0x08007f09
 8007ec0:	08007f09 	.word	0x08007f09
 8007ec4:	08007f09 	.word	0x08007f09
 8007ec8:	08007f09 	.word	0x08007f09
 8007ecc:	08007f09 	.word	0x08007f09
 8007ed0:	08007f09 	.word	0x08007f09
 8007ed4:	08007f01 	.word	0x08007f01
 8007ed8:	2301      	movs	r3, #1
 8007eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ede:	e1c0      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007ee0:	2304      	movs	r3, #4
 8007ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ee6:	e1bc      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007ee8:	2308      	movs	r3, #8
 8007eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eee:	e1b8      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007ef0:	2310      	movs	r3, #16
 8007ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ef6:	e1b4      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007ef8:	2320      	movs	r3, #32
 8007efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007efe:	e1b0      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007f00:	2340      	movs	r3, #64	; 0x40
 8007f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f06:	e1ac      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007f08:	2380      	movs	r3, #128	; 0x80
 8007f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f0e:	e1a8      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a75      	ldr	r2, [pc, #468]	; (80080ec <UART_SetConfig+0x638>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d130      	bne.n	8007f7c <UART_SetConfig+0x4c8>
 8007f1a:	4b73      	ldr	r3, [pc, #460]	; (80080e8 <UART_SetConfig+0x634>)
 8007f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1e:	f003 0307 	and.w	r3, r3, #7
 8007f22:	2b05      	cmp	r3, #5
 8007f24:	d826      	bhi.n	8007f74 <UART_SetConfig+0x4c0>
 8007f26:	a201      	add	r2, pc, #4	; (adr r2, 8007f2c <UART_SetConfig+0x478>)
 8007f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2c:	08007f45 	.word	0x08007f45
 8007f30:	08007f4d 	.word	0x08007f4d
 8007f34:	08007f55 	.word	0x08007f55
 8007f38:	08007f5d 	.word	0x08007f5d
 8007f3c:	08007f65 	.word	0x08007f65
 8007f40:	08007f6d 	.word	0x08007f6d
 8007f44:	2300      	movs	r3, #0
 8007f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f4a:	e18a      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007f4c:	2304      	movs	r3, #4
 8007f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f52:	e186      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007f54:	2308      	movs	r3, #8
 8007f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f5a:	e182      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007f5c:	2310      	movs	r3, #16
 8007f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f62:	e17e      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007f64:	2320      	movs	r3, #32
 8007f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f6a:	e17a      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007f6c:	2340      	movs	r3, #64	; 0x40
 8007f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f72:	e176      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007f74:	2380      	movs	r3, #128	; 0x80
 8007f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f7a:	e172      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a5b      	ldr	r2, [pc, #364]	; (80080f0 <UART_SetConfig+0x63c>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d130      	bne.n	8007fe8 <UART_SetConfig+0x534>
 8007f86:	4b58      	ldr	r3, [pc, #352]	; (80080e8 <UART_SetConfig+0x634>)
 8007f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f8a:	f003 0307 	and.w	r3, r3, #7
 8007f8e:	2b05      	cmp	r3, #5
 8007f90:	d826      	bhi.n	8007fe0 <UART_SetConfig+0x52c>
 8007f92:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <UART_SetConfig+0x4e4>)
 8007f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f98:	08007fb1 	.word	0x08007fb1
 8007f9c:	08007fb9 	.word	0x08007fb9
 8007fa0:	08007fc1 	.word	0x08007fc1
 8007fa4:	08007fc9 	.word	0x08007fc9
 8007fa8:	08007fd1 	.word	0x08007fd1
 8007fac:	08007fd9 	.word	0x08007fd9
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fb6:	e154      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007fb8:	2304      	movs	r3, #4
 8007fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fbe:	e150      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007fc0:	2308      	movs	r3, #8
 8007fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fc6:	e14c      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007fc8:	2310      	movs	r3, #16
 8007fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fce:	e148      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007fd0:	2320      	movs	r3, #32
 8007fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fd6:	e144      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007fd8:	2340      	movs	r3, #64	; 0x40
 8007fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fde:	e140      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007fe0:	2380      	movs	r3, #128	; 0x80
 8007fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fe6:	e13c      	b.n	8008262 <UART_SetConfig+0x7ae>
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a41      	ldr	r2, [pc, #260]	; (80080f4 <UART_SetConfig+0x640>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	f040 8082 	bne.w	80080f8 <UART_SetConfig+0x644>
 8007ff4:	4b3c      	ldr	r3, [pc, #240]	; (80080e8 <UART_SetConfig+0x634>)
 8007ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ffc:	2b28      	cmp	r3, #40	; 0x28
 8007ffe:	d86d      	bhi.n	80080dc <UART_SetConfig+0x628>
 8008000:	a201      	add	r2, pc, #4	; (adr r2, 8008008 <UART_SetConfig+0x554>)
 8008002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008006:	bf00      	nop
 8008008:	080080ad 	.word	0x080080ad
 800800c:	080080dd 	.word	0x080080dd
 8008010:	080080dd 	.word	0x080080dd
 8008014:	080080dd 	.word	0x080080dd
 8008018:	080080dd 	.word	0x080080dd
 800801c:	080080dd 	.word	0x080080dd
 8008020:	080080dd 	.word	0x080080dd
 8008024:	080080dd 	.word	0x080080dd
 8008028:	080080b5 	.word	0x080080b5
 800802c:	080080dd 	.word	0x080080dd
 8008030:	080080dd 	.word	0x080080dd
 8008034:	080080dd 	.word	0x080080dd
 8008038:	080080dd 	.word	0x080080dd
 800803c:	080080dd 	.word	0x080080dd
 8008040:	080080dd 	.word	0x080080dd
 8008044:	080080dd 	.word	0x080080dd
 8008048:	080080bd 	.word	0x080080bd
 800804c:	080080dd 	.word	0x080080dd
 8008050:	080080dd 	.word	0x080080dd
 8008054:	080080dd 	.word	0x080080dd
 8008058:	080080dd 	.word	0x080080dd
 800805c:	080080dd 	.word	0x080080dd
 8008060:	080080dd 	.word	0x080080dd
 8008064:	080080dd 	.word	0x080080dd
 8008068:	080080c5 	.word	0x080080c5
 800806c:	080080dd 	.word	0x080080dd
 8008070:	080080dd 	.word	0x080080dd
 8008074:	080080dd 	.word	0x080080dd
 8008078:	080080dd 	.word	0x080080dd
 800807c:	080080dd 	.word	0x080080dd
 8008080:	080080dd 	.word	0x080080dd
 8008084:	080080dd 	.word	0x080080dd
 8008088:	080080cd 	.word	0x080080cd
 800808c:	080080dd 	.word	0x080080dd
 8008090:	080080dd 	.word	0x080080dd
 8008094:	080080dd 	.word	0x080080dd
 8008098:	080080dd 	.word	0x080080dd
 800809c:	080080dd 	.word	0x080080dd
 80080a0:	080080dd 	.word	0x080080dd
 80080a4:	080080dd 	.word	0x080080dd
 80080a8:	080080d5 	.word	0x080080d5
 80080ac:	2301      	movs	r3, #1
 80080ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080b2:	e0d6      	b.n	8008262 <UART_SetConfig+0x7ae>
 80080b4:	2304      	movs	r3, #4
 80080b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ba:	e0d2      	b.n	8008262 <UART_SetConfig+0x7ae>
 80080bc:	2308      	movs	r3, #8
 80080be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080c2:	e0ce      	b.n	8008262 <UART_SetConfig+0x7ae>
 80080c4:	2310      	movs	r3, #16
 80080c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ca:	e0ca      	b.n	8008262 <UART_SetConfig+0x7ae>
 80080cc:	2320      	movs	r3, #32
 80080ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080d2:	e0c6      	b.n	8008262 <UART_SetConfig+0x7ae>
 80080d4:	2340      	movs	r3, #64	; 0x40
 80080d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080da:	e0c2      	b.n	8008262 <UART_SetConfig+0x7ae>
 80080dc:	2380      	movs	r3, #128	; 0x80
 80080de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e2:	e0be      	b.n	8008262 <UART_SetConfig+0x7ae>
 80080e4:	40011400 	.word	0x40011400
 80080e8:	58024400 	.word	0x58024400
 80080ec:	40007800 	.word	0x40007800
 80080f0:	40007c00 	.word	0x40007c00
 80080f4:	40011800 	.word	0x40011800
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4aad      	ldr	r2, [pc, #692]	; (80083b4 <UART_SetConfig+0x900>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d176      	bne.n	80081f0 <UART_SetConfig+0x73c>
 8008102:	4bad      	ldr	r3, [pc, #692]	; (80083b8 <UART_SetConfig+0x904>)
 8008104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800810a:	2b28      	cmp	r3, #40	; 0x28
 800810c:	d86c      	bhi.n	80081e8 <UART_SetConfig+0x734>
 800810e:	a201      	add	r2, pc, #4	; (adr r2, 8008114 <UART_SetConfig+0x660>)
 8008110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008114:	080081b9 	.word	0x080081b9
 8008118:	080081e9 	.word	0x080081e9
 800811c:	080081e9 	.word	0x080081e9
 8008120:	080081e9 	.word	0x080081e9
 8008124:	080081e9 	.word	0x080081e9
 8008128:	080081e9 	.word	0x080081e9
 800812c:	080081e9 	.word	0x080081e9
 8008130:	080081e9 	.word	0x080081e9
 8008134:	080081c1 	.word	0x080081c1
 8008138:	080081e9 	.word	0x080081e9
 800813c:	080081e9 	.word	0x080081e9
 8008140:	080081e9 	.word	0x080081e9
 8008144:	080081e9 	.word	0x080081e9
 8008148:	080081e9 	.word	0x080081e9
 800814c:	080081e9 	.word	0x080081e9
 8008150:	080081e9 	.word	0x080081e9
 8008154:	080081c9 	.word	0x080081c9
 8008158:	080081e9 	.word	0x080081e9
 800815c:	080081e9 	.word	0x080081e9
 8008160:	080081e9 	.word	0x080081e9
 8008164:	080081e9 	.word	0x080081e9
 8008168:	080081e9 	.word	0x080081e9
 800816c:	080081e9 	.word	0x080081e9
 8008170:	080081e9 	.word	0x080081e9
 8008174:	080081d1 	.word	0x080081d1
 8008178:	080081e9 	.word	0x080081e9
 800817c:	080081e9 	.word	0x080081e9
 8008180:	080081e9 	.word	0x080081e9
 8008184:	080081e9 	.word	0x080081e9
 8008188:	080081e9 	.word	0x080081e9
 800818c:	080081e9 	.word	0x080081e9
 8008190:	080081e9 	.word	0x080081e9
 8008194:	080081d9 	.word	0x080081d9
 8008198:	080081e9 	.word	0x080081e9
 800819c:	080081e9 	.word	0x080081e9
 80081a0:	080081e9 	.word	0x080081e9
 80081a4:	080081e9 	.word	0x080081e9
 80081a8:	080081e9 	.word	0x080081e9
 80081ac:	080081e9 	.word	0x080081e9
 80081b0:	080081e9 	.word	0x080081e9
 80081b4:	080081e1 	.word	0x080081e1
 80081b8:	2301      	movs	r3, #1
 80081ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081be:	e050      	b.n	8008262 <UART_SetConfig+0x7ae>
 80081c0:	2304      	movs	r3, #4
 80081c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081c6:	e04c      	b.n	8008262 <UART_SetConfig+0x7ae>
 80081c8:	2308      	movs	r3, #8
 80081ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ce:	e048      	b.n	8008262 <UART_SetConfig+0x7ae>
 80081d0:	2310      	movs	r3, #16
 80081d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081d6:	e044      	b.n	8008262 <UART_SetConfig+0x7ae>
 80081d8:	2320      	movs	r3, #32
 80081da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081de:	e040      	b.n	8008262 <UART_SetConfig+0x7ae>
 80081e0:	2340      	movs	r3, #64	; 0x40
 80081e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081e6:	e03c      	b.n	8008262 <UART_SetConfig+0x7ae>
 80081e8:	2380      	movs	r3, #128	; 0x80
 80081ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ee:	e038      	b.n	8008262 <UART_SetConfig+0x7ae>
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a71      	ldr	r2, [pc, #452]	; (80083bc <UART_SetConfig+0x908>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d130      	bne.n	800825c <UART_SetConfig+0x7a8>
 80081fa:	4b6f      	ldr	r3, [pc, #444]	; (80083b8 <UART_SetConfig+0x904>)
 80081fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081fe:	f003 0307 	and.w	r3, r3, #7
 8008202:	2b05      	cmp	r3, #5
 8008204:	d826      	bhi.n	8008254 <UART_SetConfig+0x7a0>
 8008206:	a201      	add	r2, pc, #4	; (adr r2, 800820c <UART_SetConfig+0x758>)
 8008208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820c:	08008225 	.word	0x08008225
 8008210:	0800822d 	.word	0x0800822d
 8008214:	08008235 	.word	0x08008235
 8008218:	0800823d 	.word	0x0800823d
 800821c:	08008245 	.word	0x08008245
 8008220:	0800824d 	.word	0x0800824d
 8008224:	2302      	movs	r3, #2
 8008226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800822a:	e01a      	b.n	8008262 <UART_SetConfig+0x7ae>
 800822c:	2304      	movs	r3, #4
 800822e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008232:	e016      	b.n	8008262 <UART_SetConfig+0x7ae>
 8008234:	2308      	movs	r3, #8
 8008236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800823a:	e012      	b.n	8008262 <UART_SetConfig+0x7ae>
 800823c:	2310      	movs	r3, #16
 800823e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008242:	e00e      	b.n	8008262 <UART_SetConfig+0x7ae>
 8008244:	2320      	movs	r3, #32
 8008246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800824a:	e00a      	b.n	8008262 <UART_SetConfig+0x7ae>
 800824c:	2340      	movs	r3, #64	; 0x40
 800824e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008252:	e006      	b.n	8008262 <UART_SetConfig+0x7ae>
 8008254:	2380      	movs	r3, #128	; 0x80
 8008256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800825a:	e002      	b.n	8008262 <UART_SetConfig+0x7ae>
 800825c:	2380      	movs	r3, #128	; 0x80
 800825e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a55      	ldr	r2, [pc, #340]	; (80083bc <UART_SetConfig+0x908>)
 8008268:	4293      	cmp	r3, r2
 800826a:	f040 80f8 	bne.w	800845e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800826e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008272:	2b20      	cmp	r3, #32
 8008274:	dc46      	bgt.n	8008304 <UART_SetConfig+0x850>
 8008276:	2b02      	cmp	r3, #2
 8008278:	db75      	blt.n	8008366 <UART_SetConfig+0x8b2>
 800827a:	3b02      	subs	r3, #2
 800827c:	2b1e      	cmp	r3, #30
 800827e:	d872      	bhi.n	8008366 <UART_SetConfig+0x8b2>
 8008280:	a201      	add	r2, pc, #4	; (adr r2, 8008288 <UART_SetConfig+0x7d4>)
 8008282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008286:	bf00      	nop
 8008288:	0800830b 	.word	0x0800830b
 800828c:	08008367 	.word	0x08008367
 8008290:	08008313 	.word	0x08008313
 8008294:	08008367 	.word	0x08008367
 8008298:	08008367 	.word	0x08008367
 800829c:	08008367 	.word	0x08008367
 80082a0:	08008323 	.word	0x08008323
 80082a4:	08008367 	.word	0x08008367
 80082a8:	08008367 	.word	0x08008367
 80082ac:	08008367 	.word	0x08008367
 80082b0:	08008367 	.word	0x08008367
 80082b4:	08008367 	.word	0x08008367
 80082b8:	08008367 	.word	0x08008367
 80082bc:	08008367 	.word	0x08008367
 80082c0:	08008333 	.word	0x08008333
 80082c4:	08008367 	.word	0x08008367
 80082c8:	08008367 	.word	0x08008367
 80082cc:	08008367 	.word	0x08008367
 80082d0:	08008367 	.word	0x08008367
 80082d4:	08008367 	.word	0x08008367
 80082d8:	08008367 	.word	0x08008367
 80082dc:	08008367 	.word	0x08008367
 80082e0:	08008367 	.word	0x08008367
 80082e4:	08008367 	.word	0x08008367
 80082e8:	08008367 	.word	0x08008367
 80082ec:	08008367 	.word	0x08008367
 80082f0:	08008367 	.word	0x08008367
 80082f4:	08008367 	.word	0x08008367
 80082f8:	08008367 	.word	0x08008367
 80082fc:	08008367 	.word	0x08008367
 8008300:	08008359 	.word	0x08008359
 8008304:	2b40      	cmp	r3, #64	; 0x40
 8008306:	d02a      	beq.n	800835e <UART_SetConfig+0x8aa>
 8008308:	e02d      	b.n	8008366 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800830a:	f7fd fcef 	bl	8005cec <HAL_RCCEx_GetD3PCLK1Freq>
 800830e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008310:	e02f      	b.n	8008372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008316:	4618      	mov	r0, r3
 8008318:	f7fd fcfe 	bl	8005d18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800831c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008320:	e027      	b.n	8008372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008322:	f107 0318 	add.w	r3, r7, #24
 8008326:	4618      	mov	r0, r3
 8008328:	f7fd fe4a 	bl	8005fc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008330:	e01f      	b.n	8008372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008332:	4b21      	ldr	r3, [pc, #132]	; (80083b8 <UART_SetConfig+0x904>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 0320 	and.w	r3, r3, #32
 800833a:	2b00      	cmp	r3, #0
 800833c:	d009      	beq.n	8008352 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800833e:	4b1e      	ldr	r3, [pc, #120]	; (80083b8 <UART_SetConfig+0x904>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	08db      	lsrs	r3, r3, #3
 8008344:	f003 0303 	and.w	r3, r3, #3
 8008348:	4a1d      	ldr	r2, [pc, #116]	; (80083c0 <UART_SetConfig+0x90c>)
 800834a:	fa22 f303 	lsr.w	r3, r2, r3
 800834e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008350:	e00f      	b.n	8008372 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008352:	4b1b      	ldr	r3, [pc, #108]	; (80083c0 <UART_SetConfig+0x90c>)
 8008354:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008356:	e00c      	b.n	8008372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008358:	4b1a      	ldr	r3, [pc, #104]	; (80083c4 <UART_SetConfig+0x910>)
 800835a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800835c:	e009      	b.n	8008372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800835e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008364:	e005      	b.n	8008372 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008366:	2300      	movs	r3, #0
 8008368:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008370:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 81ee 	beq.w	8008756 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837e:	4a12      	ldr	r2, [pc, #72]	; (80083c8 <UART_SetConfig+0x914>)
 8008380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008384:	461a      	mov	r2, r3
 8008386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008388:	fbb3 f3f2 	udiv	r3, r3, r2
 800838c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	4613      	mov	r3, r2
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	4413      	add	r3, r2
 8008398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800839a:	429a      	cmp	r2, r3
 800839c:	d305      	bcc.n	80083aa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d910      	bls.n	80083cc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80083b0:	e1d1      	b.n	8008756 <UART_SetConfig+0xca2>
 80083b2:	bf00      	nop
 80083b4:	40011c00 	.word	0x40011c00
 80083b8:	58024400 	.word	0x58024400
 80083bc:	58000c00 	.word	0x58000c00
 80083c0:	03d09000 	.word	0x03d09000
 80083c4:	003d0900 	.word	0x003d0900
 80083c8:	0800b900 	.word	0x0800b900
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ce:	2200      	movs	r2, #0
 80083d0:	60bb      	str	r3, [r7, #8]
 80083d2:	60fa      	str	r2, [r7, #12]
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d8:	4ac0      	ldr	r2, [pc, #768]	; (80086dc <UART_SetConfig+0xc28>)
 80083da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083de:	b29b      	uxth	r3, r3
 80083e0:	2200      	movs	r2, #0
 80083e2:	603b      	str	r3, [r7, #0]
 80083e4:	607a      	str	r2, [r7, #4]
 80083e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083ee:	f7f7 ffd7 	bl	80003a0 <__aeabi_uldivmod>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	4610      	mov	r0, r2
 80083f8:	4619      	mov	r1, r3
 80083fa:	f04f 0200 	mov.w	r2, #0
 80083fe:	f04f 0300 	mov.w	r3, #0
 8008402:	020b      	lsls	r3, r1, #8
 8008404:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008408:	0202      	lsls	r2, r0, #8
 800840a:	6979      	ldr	r1, [r7, #20]
 800840c:	6849      	ldr	r1, [r1, #4]
 800840e:	0849      	lsrs	r1, r1, #1
 8008410:	2000      	movs	r0, #0
 8008412:	460c      	mov	r4, r1
 8008414:	4605      	mov	r5, r0
 8008416:	eb12 0804 	adds.w	r8, r2, r4
 800841a:	eb43 0905 	adc.w	r9, r3, r5
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	469a      	mov	sl, r3
 8008426:	4693      	mov	fp, r2
 8008428:	4652      	mov	r2, sl
 800842a:	465b      	mov	r3, fp
 800842c:	4640      	mov	r0, r8
 800842e:	4649      	mov	r1, r9
 8008430:	f7f7 ffb6 	bl	80003a0 <__aeabi_uldivmod>
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	4613      	mov	r3, r2
 800843a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800843c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008442:	d308      	bcc.n	8008456 <UART_SetConfig+0x9a2>
 8008444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800844a:	d204      	bcs.n	8008456 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008452:	60da      	str	r2, [r3, #12]
 8008454:	e17f      	b.n	8008756 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800845c:	e17b      	b.n	8008756 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008466:	f040 80bd 	bne.w	80085e4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800846a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800846e:	2b20      	cmp	r3, #32
 8008470:	dc48      	bgt.n	8008504 <UART_SetConfig+0xa50>
 8008472:	2b00      	cmp	r3, #0
 8008474:	db7b      	blt.n	800856e <UART_SetConfig+0xaba>
 8008476:	2b20      	cmp	r3, #32
 8008478:	d879      	bhi.n	800856e <UART_SetConfig+0xaba>
 800847a:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <UART_SetConfig+0x9cc>)
 800847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008480:	0800850b 	.word	0x0800850b
 8008484:	08008513 	.word	0x08008513
 8008488:	0800856f 	.word	0x0800856f
 800848c:	0800856f 	.word	0x0800856f
 8008490:	0800851b 	.word	0x0800851b
 8008494:	0800856f 	.word	0x0800856f
 8008498:	0800856f 	.word	0x0800856f
 800849c:	0800856f 	.word	0x0800856f
 80084a0:	0800852b 	.word	0x0800852b
 80084a4:	0800856f 	.word	0x0800856f
 80084a8:	0800856f 	.word	0x0800856f
 80084ac:	0800856f 	.word	0x0800856f
 80084b0:	0800856f 	.word	0x0800856f
 80084b4:	0800856f 	.word	0x0800856f
 80084b8:	0800856f 	.word	0x0800856f
 80084bc:	0800856f 	.word	0x0800856f
 80084c0:	0800853b 	.word	0x0800853b
 80084c4:	0800856f 	.word	0x0800856f
 80084c8:	0800856f 	.word	0x0800856f
 80084cc:	0800856f 	.word	0x0800856f
 80084d0:	0800856f 	.word	0x0800856f
 80084d4:	0800856f 	.word	0x0800856f
 80084d8:	0800856f 	.word	0x0800856f
 80084dc:	0800856f 	.word	0x0800856f
 80084e0:	0800856f 	.word	0x0800856f
 80084e4:	0800856f 	.word	0x0800856f
 80084e8:	0800856f 	.word	0x0800856f
 80084ec:	0800856f 	.word	0x0800856f
 80084f0:	0800856f 	.word	0x0800856f
 80084f4:	0800856f 	.word	0x0800856f
 80084f8:	0800856f 	.word	0x0800856f
 80084fc:	0800856f 	.word	0x0800856f
 8008500:	08008561 	.word	0x08008561
 8008504:	2b40      	cmp	r3, #64	; 0x40
 8008506:	d02e      	beq.n	8008566 <UART_SetConfig+0xab2>
 8008508:	e031      	b.n	800856e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800850a:	f7fc f889 	bl	8004620 <HAL_RCC_GetPCLK1Freq>
 800850e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008510:	e033      	b.n	800857a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008512:	f7fc f89b 	bl	800464c <HAL_RCC_GetPCLK2Freq>
 8008516:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008518:	e02f      	b.n	800857a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800851a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800851e:	4618      	mov	r0, r3
 8008520:	f7fd fbfa 	bl	8005d18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008528:	e027      	b.n	800857a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800852a:	f107 0318 	add.w	r3, r7, #24
 800852e:	4618      	mov	r0, r3
 8008530:	f7fd fd46 	bl	8005fc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008538:	e01f      	b.n	800857a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800853a:	4b69      	ldr	r3, [pc, #420]	; (80086e0 <UART_SetConfig+0xc2c>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0320 	and.w	r3, r3, #32
 8008542:	2b00      	cmp	r3, #0
 8008544:	d009      	beq.n	800855a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008546:	4b66      	ldr	r3, [pc, #408]	; (80086e0 <UART_SetConfig+0xc2c>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	08db      	lsrs	r3, r3, #3
 800854c:	f003 0303 	and.w	r3, r3, #3
 8008550:	4a64      	ldr	r2, [pc, #400]	; (80086e4 <UART_SetConfig+0xc30>)
 8008552:	fa22 f303 	lsr.w	r3, r2, r3
 8008556:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008558:	e00f      	b.n	800857a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800855a:	4b62      	ldr	r3, [pc, #392]	; (80086e4 <UART_SetConfig+0xc30>)
 800855c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800855e:	e00c      	b.n	800857a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008560:	4b61      	ldr	r3, [pc, #388]	; (80086e8 <UART_SetConfig+0xc34>)
 8008562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008564:	e009      	b.n	800857a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800856a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800856c:	e005      	b.n	800857a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800856e:	2300      	movs	r3, #0
 8008570:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008578:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800857a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 80ea 	beq.w	8008756 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008586:	4a55      	ldr	r2, [pc, #340]	; (80086dc <UART_SetConfig+0xc28>)
 8008588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800858c:	461a      	mov	r2, r3
 800858e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008590:	fbb3 f3f2 	udiv	r3, r3, r2
 8008594:	005a      	lsls	r2, r3, #1
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	085b      	lsrs	r3, r3, #1
 800859c:	441a      	add	r2, r3
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	2b0f      	cmp	r3, #15
 80085ac:	d916      	bls.n	80085dc <UART_SetConfig+0xb28>
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085b4:	d212      	bcs.n	80085dc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	f023 030f 	bic.w	r3, r3, #15
 80085be:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c2:	085b      	lsrs	r3, r3, #1
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	f003 0307 	and.w	r3, r3, #7
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80085ce:	4313      	orrs	r3, r2
 80085d0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80085d8:	60da      	str	r2, [r3, #12]
 80085da:	e0bc      	b.n	8008756 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80085e2:	e0b8      	b.n	8008756 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085e4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80085e8:	2b20      	cmp	r3, #32
 80085ea:	dc4b      	bgt.n	8008684 <UART_SetConfig+0xbd0>
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f2c0 8087 	blt.w	8008700 <UART_SetConfig+0xc4c>
 80085f2:	2b20      	cmp	r3, #32
 80085f4:	f200 8084 	bhi.w	8008700 <UART_SetConfig+0xc4c>
 80085f8:	a201      	add	r2, pc, #4	; (adr r2, 8008600 <UART_SetConfig+0xb4c>)
 80085fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fe:	bf00      	nop
 8008600:	0800868b 	.word	0x0800868b
 8008604:	08008693 	.word	0x08008693
 8008608:	08008701 	.word	0x08008701
 800860c:	08008701 	.word	0x08008701
 8008610:	0800869b 	.word	0x0800869b
 8008614:	08008701 	.word	0x08008701
 8008618:	08008701 	.word	0x08008701
 800861c:	08008701 	.word	0x08008701
 8008620:	080086ab 	.word	0x080086ab
 8008624:	08008701 	.word	0x08008701
 8008628:	08008701 	.word	0x08008701
 800862c:	08008701 	.word	0x08008701
 8008630:	08008701 	.word	0x08008701
 8008634:	08008701 	.word	0x08008701
 8008638:	08008701 	.word	0x08008701
 800863c:	08008701 	.word	0x08008701
 8008640:	080086bb 	.word	0x080086bb
 8008644:	08008701 	.word	0x08008701
 8008648:	08008701 	.word	0x08008701
 800864c:	08008701 	.word	0x08008701
 8008650:	08008701 	.word	0x08008701
 8008654:	08008701 	.word	0x08008701
 8008658:	08008701 	.word	0x08008701
 800865c:	08008701 	.word	0x08008701
 8008660:	08008701 	.word	0x08008701
 8008664:	08008701 	.word	0x08008701
 8008668:	08008701 	.word	0x08008701
 800866c:	08008701 	.word	0x08008701
 8008670:	08008701 	.word	0x08008701
 8008674:	08008701 	.word	0x08008701
 8008678:	08008701 	.word	0x08008701
 800867c:	08008701 	.word	0x08008701
 8008680:	080086f3 	.word	0x080086f3
 8008684:	2b40      	cmp	r3, #64	; 0x40
 8008686:	d037      	beq.n	80086f8 <UART_SetConfig+0xc44>
 8008688:	e03a      	b.n	8008700 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800868a:	f7fb ffc9 	bl	8004620 <HAL_RCC_GetPCLK1Freq>
 800868e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008690:	e03c      	b.n	800870c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008692:	f7fb ffdb 	bl	800464c <HAL_RCC_GetPCLK2Freq>
 8008696:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008698:	e038      	b.n	800870c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800869a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fd fb3a 	bl	8005d18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086a8:	e030      	b.n	800870c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086aa:	f107 0318 	add.w	r3, r7, #24
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fd fc86 	bl	8005fc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086b8:	e028      	b.n	800870c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086ba:	4b09      	ldr	r3, [pc, #36]	; (80086e0 <UART_SetConfig+0xc2c>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 0320 	and.w	r3, r3, #32
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d012      	beq.n	80086ec <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80086c6:	4b06      	ldr	r3, [pc, #24]	; (80086e0 <UART_SetConfig+0xc2c>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	08db      	lsrs	r3, r3, #3
 80086cc:	f003 0303 	and.w	r3, r3, #3
 80086d0:	4a04      	ldr	r2, [pc, #16]	; (80086e4 <UART_SetConfig+0xc30>)
 80086d2:	fa22 f303 	lsr.w	r3, r2, r3
 80086d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086d8:	e018      	b.n	800870c <UART_SetConfig+0xc58>
 80086da:	bf00      	nop
 80086dc:	0800b900 	.word	0x0800b900
 80086e0:	58024400 	.word	0x58024400
 80086e4:	03d09000 	.word	0x03d09000
 80086e8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80086ec:	4b24      	ldr	r3, [pc, #144]	; (8008780 <UART_SetConfig+0xccc>)
 80086ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086f0:	e00c      	b.n	800870c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086f2:	4b24      	ldr	r3, [pc, #144]	; (8008784 <UART_SetConfig+0xcd0>)
 80086f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086f6:	e009      	b.n	800870c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086fe:	e005      	b.n	800870c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008700:	2300      	movs	r3, #0
 8008702:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800870a:	bf00      	nop
    }

    if (pclk != 0U)
 800870c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870e:	2b00      	cmp	r3, #0
 8008710:	d021      	beq.n	8008756 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008716:	4a1c      	ldr	r2, [pc, #112]	; (8008788 <UART_SetConfig+0xcd4>)
 8008718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800871c:	461a      	mov	r2, r3
 800871e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008720:	fbb3 f2f2 	udiv	r2, r3, r2
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	085b      	lsrs	r3, r3, #1
 800872a:	441a      	add	r2, r3
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	fbb2 f3f3 	udiv	r3, r2, r3
 8008734:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008738:	2b0f      	cmp	r3, #15
 800873a:	d909      	bls.n	8008750 <UART_SetConfig+0xc9c>
 800873c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008742:	d205      	bcs.n	8008750 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008746:	b29a      	uxth	r2, r3
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	60da      	str	r2, [r3, #12]
 800874e:	e002      	b.n	8008756 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	2201      	movs	r2, #1
 800875a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	2201      	movs	r2, #1
 8008762:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2200      	movs	r2, #0
 800876a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	2200      	movs	r2, #0
 8008770:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008772:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008776:	4618      	mov	r0, r3
 8008778:	3748      	adds	r7, #72	; 0x48
 800877a:	46bd      	mov	sp, r7
 800877c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008780:	03d09000 	.word	0x03d09000
 8008784:	003d0900 	.word	0x003d0900
 8008788:	0800b900 	.word	0x0800b900

0800878c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008798:	f003 0301 	and.w	r3, r3, #1
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00a      	beq.n	80087b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ba:	f003 0302 	and.w	r3, r3, #2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00a      	beq.n	80087d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	430a      	orrs	r2, r1
 80087d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087dc:	f003 0304 	and.w	r3, r3, #4
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00a      	beq.n	80087fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	430a      	orrs	r2, r1
 80087f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fe:	f003 0308 	and.w	r3, r3, #8
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00a      	beq.n	800881c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	430a      	orrs	r2, r1
 800881a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008820:	f003 0310 	and.w	r3, r3, #16
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00a      	beq.n	800883e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008842:	f003 0320 	and.w	r3, r3, #32
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00a      	beq.n	8008860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	430a      	orrs	r2, r1
 800885e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008868:	2b00      	cmp	r3, #0
 800886a:	d01a      	beq.n	80088a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	430a      	orrs	r2, r1
 8008880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800888a:	d10a      	bne.n	80088a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	430a      	orrs	r2, r1
 80088a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00a      	beq.n	80088c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	430a      	orrs	r2, r1
 80088c2:	605a      	str	r2, [r3, #4]
  }
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af02      	add	r7, sp, #8
 80088d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088e0:	f7f9 fa36 	bl	8001d50 <HAL_GetTick>
 80088e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0308 	and.w	r3, r3, #8
 80088f0:	2b08      	cmp	r3, #8
 80088f2:	d10e      	bne.n	8008912 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f82f 	bl	8008966 <UART_WaitOnFlagUntilTimeout>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d001      	beq.n	8008912 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e025      	b.n	800895e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0304 	and.w	r3, r3, #4
 800891c:	2b04      	cmp	r3, #4
 800891e:	d10e      	bne.n	800893e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008920:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f819 	bl	8008966 <UART_WaitOnFlagUntilTimeout>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d001      	beq.n	800893e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	e00f      	b.n	800895e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2220      	movs	r2, #32
 8008942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2220      	movs	r2, #32
 800894a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b09c      	sub	sp, #112	; 0x70
 800896a:	af00      	add	r7, sp, #0
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	603b      	str	r3, [r7, #0]
 8008972:	4613      	mov	r3, r2
 8008974:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008976:	e0a9      	b.n	8008acc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800897a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897e:	f000 80a5 	beq.w	8008acc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008982:	f7f9 f9e5 	bl	8001d50 <HAL_GetTick>
 8008986:	4602      	mov	r2, r0
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800898e:	429a      	cmp	r2, r3
 8008990:	d302      	bcc.n	8008998 <UART_WaitOnFlagUntilTimeout+0x32>
 8008992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008994:	2b00      	cmp	r3, #0
 8008996:	d140      	bne.n	8008a1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089a0:	e853 3f00 	ldrex	r3, [r3]
 80089a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80089a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089ac:	667b      	str	r3, [r7, #100]	; 0x64
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	461a      	mov	r2, r3
 80089b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089b8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80089be:	e841 2300 	strex	r3, r2, [r1]
 80089c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80089c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1e6      	bne.n	8008998 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	3308      	adds	r3, #8
 80089d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089d4:	e853 3f00 	ldrex	r3, [r3]
 80089d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089dc:	f023 0301 	bic.w	r3, r3, #1
 80089e0:	663b      	str	r3, [r7, #96]	; 0x60
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	3308      	adds	r3, #8
 80089e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80089ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80089ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089f2:	e841 2300 	strex	r3, r2, [r1]
 80089f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80089f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1e5      	bne.n	80089ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2220      	movs	r2, #32
 8008a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e069      	b.n	8008aee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0304 	and.w	r3, r3, #4
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d051      	beq.n	8008acc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a36:	d149      	bne.n	8008acc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4a:	e853 3f00 	ldrex	r3, [r3]
 8008a4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a60:	637b      	str	r3, [r7, #52]	; 0x34
 8008a62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a68:	e841 2300 	strex	r3, r2, [r1]
 8008a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1e6      	bne.n	8008a42 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3308      	adds	r3, #8
 8008a7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	e853 3f00 	ldrex	r3, [r3]
 8008a82:	613b      	str	r3, [r7, #16]
   return(result);
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	f023 0301 	bic.w	r3, r3, #1
 8008a8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	3308      	adds	r3, #8
 8008a92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a94:	623a      	str	r2, [r7, #32]
 8008a96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a98:	69f9      	ldr	r1, [r7, #28]
 8008a9a:	6a3a      	ldr	r2, [r7, #32]
 8008a9c:	e841 2300 	strex	r3, r2, [r1]
 8008aa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1e5      	bne.n	8008a74 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2220      	movs	r2, #32
 8008abc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e010      	b.n	8008aee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	69da      	ldr	r2, [r3, #28]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	bf0c      	ite	eq
 8008adc:	2301      	moveq	r3, #1
 8008ade:	2300      	movne	r3, #0
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	79fb      	ldrb	r3, [r7, #7]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	f43f af46 	beq.w	8008978 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3770      	adds	r7, #112	; 0x70
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008af6:	b480      	push	{r7}
 8008af8:	b085      	sub	sp, #20
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d101      	bne.n	8008b0c <HAL_UARTEx_DisableFifoMode+0x16>
 8008b08:	2302      	movs	r3, #2
 8008b0a:	e027      	b.n	8008b5c <HAL_UARTEx_DisableFifoMode+0x66>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2224      	movs	r2, #36	; 0x24
 8008b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f022 0201 	bic.w	r2, r2, #1
 8008b32:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2220      	movs	r2, #32
 8008b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3714      	adds	r7, #20
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d101      	bne.n	8008b80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	e02d      	b.n	8008bdc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2224      	movs	r2, #36	; 0x24
 8008b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f022 0201 	bic.w	r2, r2, #1
 8008ba6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	683a      	ldr	r2, [r7, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f84f 	bl	8008c60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d101      	bne.n	8008bfc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008bf8:	2302      	movs	r3, #2
 8008bfa:	e02d      	b.n	8008c58 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2224      	movs	r2, #36	; 0x24
 8008c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f022 0201 	bic.w	r2, r2, #1
 8008c22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	430a      	orrs	r2, r1
 8008c36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f811 	bl	8008c60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2220      	movs	r2, #32
 8008c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d108      	bne.n	8008c82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c80:	e031      	b.n	8008ce6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c82:	2310      	movs	r3, #16
 8008c84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c86:	2310      	movs	r3, #16
 8008c88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	0e5b      	lsrs	r3, r3, #25
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	f003 0307 	and.w	r3, r3, #7
 8008c98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	0f5b      	lsrs	r3, r3, #29
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	f003 0307 	and.w	r3, r3, #7
 8008ca8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008caa:	7bbb      	ldrb	r3, [r7, #14]
 8008cac:	7b3a      	ldrb	r2, [r7, #12]
 8008cae:	4911      	ldr	r1, [pc, #68]	; (8008cf4 <UARTEx_SetNbDataToProcess+0x94>)
 8008cb0:	5c8a      	ldrb	r2, [r1, r2]
 8008cb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008cb6:	7b3a      	ldrb	r2, [r7, #12]
 8008cb8:	490f      	ldr	r1, [pc, #60]	; (8008cf8 <UARTEx_SetNbDataToProcess+0x98>)
 8008cba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cc8:	7bfb      	ldrb	r3, [r7, #15]
 8008cca:	7b7a      	ldrb	r2, [r7, #13]
 8008ccc:	4909      	ldr	r1, [pc, #36]	; (8008cf4 <UARTEx_SetNbDataToProcess+0x94>)
 8008cce:	5c8a      	ldrb	r2, [r1, r2]
 8008cd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008cd4:	7b7a      	ldrb	r2, [r7, #13]
 8008cd6:	4908      	ldr	r1, [pc, #32]	; (8008cf8 <UARTEx_SetNbDataToProcess+0x98>)
 8008cd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cda:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008ce6:	bf00      	nop
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	0800b918 	.word	0x0800b918
 8008cf8:	0800b920 	.word	0x0800b920

08008cfc <malloc>:
 8008cfc:	4b02      	ldr	r3, [pc, #8]	; (8008d08 <malloc+0xc>)
 8008cfe:	4601      	mov	r1, r0
 8008d00:	6818      	ldr	r0, [r3, #0]
 8008d02:	f000 b823 	b.w	8008d4c <_malloc_r>
 8008d06:	bf00      	nop
 8008d08:	24000084 	.word	0x24000084

08008d0c <sbrk_aligned>:
 8008d0c:	b570      	push	{r4, r5, r6, lr}
 8008d0e:	4e0e      	ldr	r6, [pc, #56]	; (8008d48 <sbrk_aligned+0x3c>)
 8008d10:	460c      	mov	r4, r1
 8008d12:	6831      	ldr	r1, [r6, #0]
 8008d14:	4605      	mov	r5, r0
 8008d16:	b911      	cbnz	r1, 8008d1e <sbrk_aligned+0x12>
 8008d18:	f000 fe34 	bl	8009984 <_sbrk_r>
 8008d1c:	6030      	str	r0, [r6, #0]
 8008d1e:	4621      	mov	r1, r4
 8008d20:	4628      	mov	r0, r5
 8008d22:	f000 fe2f 	bl	8009984 <_sbrk_r>
 8008d26:	1c43      	adds	r3, r0, #1
 8008d28:	d00a      	beq.n	8008d40 <sbrk_aligned+0x34>
 8008d2a:	1cc4      	adds	r4, r0, #3
 8008d2c:	f024 0403 	bic.w	r4, r4, #3
 8008d30:	42a0      	cmp	r0, r4
 8008d32:	d007      	beq.n	8008d44 <sbrk_aligned+0x38>
 8008d34:	1a21      	subs	r1, r4, r0
 8008d36:	4628      	mov	r0, r5
 8008d38:	f000 fe24 	bl	8009984 <_sbrk_r>
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	d101      	bne.n	8008d44 <sbrk_aligned+0x38>
 8008d40:	f04f 34ff 	mov.w	r4, #4294967295
 8008d44:	4620      	mov	r0, r4
 8008d46:	bd70      	pop	{r4, r5, r6, pc}
 8008d48:	2400043c 	.word	0x2400043c

08008d4c <_malloc_r>:
 8008d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d50:	1ccd      	adds	r5, r1, #3
 8008d52:	f025 0503 	bic.w	r5, r5, #3
 8008d56:	3508      	adds	r5, #8
 8008d58:	2d0c      	cmp	r5, #12
 8008d5a:	bf38      	it	cc
 8008d5c:	250c      	movcc	r5, #12
 8008d5e:	2d00      	cmp	r5, #0
 8008d60:	4607      	mov	r7, r0
 8008d62:	db01      	blt.n	8008d68 <_malloc_r+0x1c>
 8008d64:	42a9      	cmp	r1, r5
 8008d66:	d905      	bls.n	8008d74 <_malloc_r+0x28>
 8008d68:	230c      	movs	r3, #12
 8008d6a:	603b      	str	r3, [r7, #0]
 8008d6c:	2600      	movs	r6, #0
 8008d6e:	4630      	mov	r0, r6
 8008d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008e48 <_malloc_r+0xfc>
 8008d78:	f000 f868 	bl	8008e4c <__malloc_lock>
 8008d7c:	f8d8 3000 	ldr.w	r3, [r8]
 8008d80:	461c      	mov	r4, r3
 8008d82:	bb5c      	cbnz	r4, 8008ddc <_malloc_r+0x90>
 8008d84:	4629      	mov	r1, r5
 8008d86:	4638      	mov	r0, r7
 8008d88:	f7ff ffc0 	bl	8008d0c <sbrk_aligned>
 8008d8c:	1c43      	adds	r3, r0, #1
 8008d8e:	4604      	mov	r4, r0
 8008d90:	d155      	bne.n	8008e3e <_malloc_r+0xf2>
 8008d92:	f8d8 4000 	ldr.w	r4, [r8]
 8008d96:	4626      	mov	r6, r4
 8008d98:	2e00      	cmp	r6, #0
 8008d9a:	d145      	bne.n	8008e28 <_malloc_r+0xdc>
 8008d9c:	2c00      	cmp	r4, #0
 8008d9e:	d048      	beq.n	8008e32 <_malloc_r+0xe6>
 8008da0:	6823      	ldr	r3, [r4, #0]
 8008da2:	4631      	mov	r1, r6
 8008da4:	4638      	mov	r0, r7
 8008da6:	eb04 0903 	add.w	r9, r4, r3
 8008daa:	f000 fdeb 	bl	8009984 <_sbrk_r>
 8008dae:	4581      	cmp	r9, r0
 8008db0:	d13f      	bne.n	8008e32 <_malloc_r+0xe6>
 8008db2:	6821      	ldr	r1, [r4, #0]
 8008db4:	1a6d      	subs	r5, r5, r1
 8008db6:	4629      	mov	r1, r5
 8008db8:	4638      	mov	r0, r7
 8008dba:	f7ff ffa7 	bl	8008d0c <sbrk_aligned>
 8008dbe:	3001      	adds	r0, #1
 8008dc0:	d037      	beq.n	8008e32 <_malloc_r+0xe6>
 8008dc2:	6823      	ldr	r3, [r4, #0]
 8008dc4:	442b      	add	r3, r5
 8008dc6:	6023      	str	r3, [r4, #0]
 8008dc8:	f8d8 3000 	ldr.w	r3, [r8]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d038      	beq.n	8008e42 <_malloc_r+0xf6>
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	42a2      	cmp	r2, r4
 8008dd4:	d12b      	bne.n	8008e2e <_malloc_r+0xe2>
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	605a      	str	r2, [r3, #4]
 8008dda:	e00f      	b.n	8008dfc <_malloc_r+0xb0>
 8008ddc:	6822      	ldr	r2, [r4, #0]
 8008dde:	1b52      	subs	r2, r2, r5
 8008de0:	d41f      	bmi.n	8008e22 <_malloc_r+0xd6>
 8008de2:	2a0b      	cmp	r2, #11
 8008de4:	d917      	bls.n	8008e16 <_malloc_r+0xca>
 8008de6:	1961      	adds	r1, r4, r5
 8008de8:	42a3      	cmp	r3, r4
 8008dea:	6025      	str	r5, [r4, #0]
 8008dec:	bf18      	it	ne
 8008dee:	6059      	strne	r1, [r3, #4]
 8008df0:	6863      	ldr	r3, [r4, #4]
 8008df2:	bf08      	it	eq
 8008df4:	f8c8 1000 	streq.w	r1, [r8]
 8008df8:	5162      	str	r2, [r4, r5]
 8008dfa:	604b      	str	r3, [r1, #4]
 8008dfc:	4638      	mov	r0, r7
 8008dfe:	f104 060b 	add.w	r6, r4, #11
 8008e02:	f000 f829 	bl	8008e58 <__malloc_unlock>
 8008e06:	f026 0607 	bic.w	r6, r6, #7
 8008e0a:	1d23      	adds	r3, r4, #4
 8008e0c:	1af2      	subs	r2, r6, r3
 8008e0e:	d0ae      	beq.n	8008d6e <_malloc_r+0x22>
 8008e10:	1b9b      	subs	r3, r3, r6
 8008e12:	50a3      	str	r3, [r4, r2]
 8008e14:	e7ab      	b.n	8008d6e <_malloc_r+0x22>
 8008e16:	42a3      	cmp	r3, r4
 8008e18:	6862      	ldr	r2, [r4, #4]
 8008e1a:	d1dd      	bne.n	8008dd8 <_malloc_r+0x8c>
 8008e1c:	f8c8 2000 	str.w	r2, [r8]
 8008e20:	e7ec      	b.n	8008dfc <_malloc_r+0xb0>
 8008e22:	4623      	mov	r3, r4
 8008e24:	6864      	ldr	r4, [r4, #4]
 8008e26:	e7ac      	b.n	8008d82 <_malloc_r+0x36>
 8008e28:	4634      	mov	r4, r6
 8008e2a:	6876      	ldr	r6, [r6, #4]
 8008e2c:	e7b4      	b.n	8008d98 <_malloc_r+0x4c>
 8008e2e:	4613      	mov	r3, r2
 8008e30:	e7cc      	b.n	8008dcc <_malloc_r+0x80>
 8008e32:	230c      	movs	r3, #12
 8008e34:	603b      	str	r3, [r7, #0]
 8008e36:	4638      	mov	r0, r7
 8008e38:	f000 f80e 	bl	8008e58 <__malloc_unlock>
 8008e3c:	e797      	b.n	8008d6e <_malloc_r+0x22>
 8008e3e:	6025      	str	r5, [r4, #0]
 8008e40:	e7dc      	b.n	8008dfc <_malloc_r+0xb0>
 8008e42:	605b      	str	r3, [r3, #4]
 8008e44:	deff      	udf	#255	; 0xff
 8008e46:	bf00      	nop
 8008e48:	24000438 	.word	0x24000438

08008e4c <__malloc_lock>:
 8008e4c:	4801      	ldr	r0, [pc, #4]	; (8008e54 <__malloc_lock+0x8>)
 8008e4e:	f000 bde5 	b.w	8009a1c <__retarget_lock_acquire_recursive>
 8008e52:	bf00      	nop
 8008e54:	24000580 	.word	0x24000580

08008e58 <__malloc_unlock>:
 8008e58:	4801      	ldr	r0, [pc, #4]	; (8008e60 <__malloc_unlock+0x8>)
 8008e5a:	f000 bde0 	b.w	8009a1e <__retarget_lock_release_recursive>
 8008e5e:	bf00      	nop
 8008e60:	24000580 	.word	0x24000580

08008e64 <__cvt>:
 8008e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e66:	ed2d 8b02 	vpush	{d8}
 8008e6a:	eeb0 8b40 	vmov.f64	d8, d0
 8008e6e:	b085      	sub	sp, #20
 8008e70:	4617      	mov	r7, r2
 8008e72:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008e74:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008e76:	ee18 2a90 	vmov	r2, s17
 8008e7a:	f025 0520 	bic.w	r5, r5, #32
 8008e7e:	2a00      	cmp	r2, #0
 8008e80:	bfb6      	itet	lt
 8008e82:	222d      	movlt	r2, #45	; 0x2d
 8008e84:	2200      	movge	r2, #0
 8008e86:	eeb1 8b40 	vneglt.f64	d8, d0
 8008e8a:	2d46      	cmp	r5, #70	; 0x46
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	701a      	strb	r2, [r3, #0]
 8008e90:	d004      	beq.n	8008e9c <__cvt+0x38>
 8008e92:	2d45      	cmp	r5, #69	; 0x45
 8008e94:	d100      	bne.n	8008e98 <__cvt+0x34>
 8008e96:	3401      	adds	r4, #1
 8008e98:	2102      	movs	r1, #2
 8008e9a:	e000      	b.n	8008e9e <__cvt+0x3a>
 8008e9c:	2103      	movs	r1, #3
 8008e9e:	ab03      	add	r3, sp, #12
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	ab02      	add	r3, sp, #8
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	4622      	mov	r2, r4
 8008ea8:	4633      	mov	r3, r6
 8008eaa:	eeb0 0b48 	vmov.f64	d0, d8
 8008eae:	f000 fe3f 	bl	8009b30 <_dtoa_r>
 8008eb2:	2d47      	cmp	r5, #71	; 0x47
 8008eb4:	d101      	bne.n	8008eba <__cvt+0x56>
 8008eb6:	07fb      	lsls	r3, r7, #31
 8008eb8:	d51a      	bpl.n	8008ef0 <__cvt+0x8c>
 8008eba:	2d46      	cmp	r5, #70	; 0x46
 8008ebc:	eb00 0204 	add.w	r2, r0, r4
 8008ec0:	d10c      	bne.n	8008edc <__cvt+0x78>
 8008ec2:	7803      	ldrb	r3, [r0, #0]
 8008ec4:	2b30      	cmp	r3, #48	; 0x30
 8008ec6:	d107      	bne.n	8008ed8 <__cvt+0x74>
 8008ec8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed0:	bf1c      	itt	ne
 8008ed2:	f1c4 0401 	rsbne	r4, r4, #1
 8008ed6:	6034      	strne	r4, [r6, #0]
 8008ed8:	6833      	ldr	r3, [r6, #0]
 8008eda:	441a      	add	r2, r3
 8008edc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee4:	bf08      	it	eq
 8008ee6:	9203      	streq	r2, [sp, #12]
 8008ee8:	2130      	movs	r1, #48	; 0x30
 8008eea:	9b03      	ldr	r3, [sp, #12]
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d307      	bcc.n	8008f00 <__cvt+0x9c>
 8008ef0:	9b03      	ldr	r3, [sp, #12]
 8008ef2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ef4:	1a1b      	subs	r3, r3, r0
 8008ef6:	6013      	str	r3, [r2, #0]
 8008ef8:	b005      	add	sp, #20
 8008efa:	ecbd 8b02 	vpop	{d8}
 8008efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f00:	1c5c      	adds	r4, r3, #1
 8008f02:	9403      	str	r4, [sp, #12]
 8008f04:	7019      	strb	r1, [r3, #0]
 8008f06:	e7f0      	b.n	8008eea <__cvt+0x86>

08008f08 <__exponent>:
 8008f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2900      	cmp	r1, #0
 8008f0e:	bfb8      	it	lt
 8008f10:	4249      	neglt	r1, r1
 8008f12:	f803 2b02 	strb.w	r2, [r3], #2
 8008f16:	bfb4      	ite	lt
 8008f18:	222d      	movlt	r2, #45	; 0x2d
 8008f1a:	222b      	movge	r2, #43	; 0x2b
 8008f1c:	2909      	cmp	r1, #9
 8008f1e:	7042      	strb	r2, [r0, #1]
 8008f20:	dd2a      	ble.n	8008f78 <__exponent+0x70>
 8008f22:	f10d 0207 	add.w	r2, sp, #7
 8008f26:	4617      	mov	r7, r2
 8008f28:	260a      	movs	r6, #10
 8008f2a:	4694      	mov	ip, r2
 8008f2c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008f30:	fb06 1415 	mls	r4, r6, r5, r1
 8008f34:	3430      	adds	r4, #48	; 0x30
 8008f36:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	2c63      	cmp	r4, #99	; 0x63
 8008f3e:	f102 32ff 	add.w	r2, r2, #4294967295
 8008f42:	4629      	mov	r1, r5
 8008f44:	dcf1      	bgt.n	8008f2a <__exponent+0x22>
 8008f46:	3130      	adds	r1, #48	; 0x30
 8008f48:	f1ac 0402 	sub.w	r4, ip, #2
 8008f4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008f50:	1c41      	adds	r1, r0, #1
 8008f52:	4622      	mov	r2, r4
 8008f54:	42ba      	cmp	r2, r7
 8008f56:	d30a      	bcc.n	8008f6e <__exponent+0x66>
 8008f58:	f10d 0209 	add.w	r2, sp, #9
 8008f5c:	eba2 020c 	sub.w	r2, r2, ip
 8008f60:	42bc      	cmp	r4, r7
 8008f62:	bf88      	it	hi
 8008f64:	2200      	movhi	r2, #0
 8008f66:	4413      	add	r3, r2
 8008f68:	1a18      	subs	r0, r3, r0
 8008f6a:	b003      	add	sp, #12
 8008f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f6e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008f72:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008f76:	e7ed      	b.n	8008f54 <__exponent+0x4c>
 8008f78:	2330      	movs	r3, #48	; 0x30
 8008f7a:	3130      	adds	r1, #48	; 0x30
 8008f7c:	7083      	strb	r3, [r0, #2]
 8008f7e:	70c1      	strb	r1, [r0, #3]
 8008f80:	1d03      	adds	r3, r0, #4
 8008f82:	e7f1      	b.n	8008f68 <__exponent+0x60>
 8008f84:	0000      	movs	r0, r0
	...

08008f88 <_printf_float>:
 8008f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f8c:	b08b      	sub	sp, #44	; 0x2c
 8008f8e:	460c      	mov	r4, r1
 8008f90:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008f94:	4616      	mov	r6, r2
 8008f96:	461f      	mov	r7, r3
 8008f98:	4605      	mov	r5, r0
 8008f9a:	f000 fcbb 	bl	8009914 <_localeconv_r>
 8008f9e:	f8d0 b000 	ldr.w	fp, [r0]
 8008fa2:	4658      	mov	r0, fp
 8008fa4:	f7f7 f9f4 	bl	8000390 <strlen>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	9308      	str	r3, [sp, #32]
 8008fac:	f8d8 3000 	ldr.w	r3, [r8]
 8008fb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008fb4:	6822      	ldr	r2, [r4, #0]
 8008fb6:	3307      	adds	r3, #7
 8008fb8:	f023 0307 	bic.w	r3, r3, #7
 8008fbc:	f103 0108 	add.w	r1, r3, #8
 8008fc0:	f8c8 1000 	str.w	r1, [r8]
 8008fc4:	ed93 0b00 	vldr	d0, [r3]
 8008fc8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8009228 <_printf_float+0x2a0>
 8008fcc:	eeb0 7bc0 	vabs.f64	d7, d0
 8008fd0:	eeb4 7b46 	vcmp.f64	d7, d6
 8008fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8008fdc:	4682      	mov	sl, r0
 8008fde:	dd24      	ble.n	800902a <_printf_float+0xa2>
 8008fe0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fe8:	d502      	bpl.n	8008ff0 <_printf_float+0x68>
 8008fea:	232d      	movs	r3, #45	; 0x2d
 8008fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ff0:	498f      	ldr	r1, [pc, #572]	; (8009230 <_printf_float+0x2a8>)
 8008ff2:	4b90      	ldr	r3, [pc, #576]	; (8009234 <_printf_float+0x2ac>)
 8008ff4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008ff8:	bf94      	ite	ls
 8008ffa:	4688      	movls	r8, r1
 8008ffc:	4698      	movhi	r8, r3
 8008ffe:	2303      	movs	r3, #3
 8009000:	6123      	str	r3, [r4, #16]
 8009002:	f022 0204 	bic.w	r2, r2, #4
 8009006:	2300      	movs	r3, #0
 8009008:	6022      	str	r2, [r4, #0]
 800900a:	9304      	str	r3, [sp, #16]
 800900c:	9700      	str	r7, [sp, #0]
 800900e:	4633      	mov	r3, r6
 8009010:	aa09      	add	r2, sp, #36	; 0x24
 8009012:	4621      	mov	r1, r4
 8009014:	4628      	mov	r0, r5
 8009016:	f000 f9d1 	bl	80093bc <_printf_common>
 800901a:	3001      	adds	r0, #1
 800901c:	f040 808a 	bne.w	8009134 <_printf_float+0x1ac>
 8009020:	f04f 30ff 	mov.w	r0, #4294967295
 8009024:	b00b      	add	sp, #44	; 0x2c
 8009026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902a:	eeb4 0b40 	vcmp.f64	d0, d0
 800902e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009032:	d709      	bvc.n	8009048 <_printf_float+0xc0>
 8009034:	ee10 3a90 	vmov	r3, s1
 8009038:	2b00      	cmp	r3, #0
 800903a:	bfbc      	itt	lt
 800903c:	232d      	movlt	r3, #45	; 0x2d
 800903e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009042:	497d      	ldr	r1, [pc, #500]	; (8009238 <_printf_float+0x2b0>)
 8009044:	4b7d      	ldr	r3, [pc, #500]	; (800923c <_printf_float+0x2b4>)
 8009046:	e7d5      	b.n	8008ff4 <_printf_float+0x6c>
 8009048:	6863      	ldr	r3, [r4, #4]
 800904a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800904e:	9104      	str	r1, [sp, #16]
 8009050:	1c59      	adds	r1, r3, #1
 8009052:	d13c      	bne.n	80090ce <_printf_float+0x146>
 8009054:	2306      	movs	r3, #6
 8009056:	6063      	str	r3, [r4, #4]
 8009058:	2300      	movs	r3, #0
 800905a:	9303      	str	r3, [sp, #12]
 800905c:	ab08      	add	r3, sp, #32
 800905e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009062:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009066:	ab07      	add	r3, sp, #28
 8009068:	6861      	ldr	r1, [r4, #4]
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	6022      	str	r2, [r4, #0]
 800906e:	f10d 031b 	add.w	r3, sp, #27
 8009072:	4628      	mov	r0, r5
 8009074:	f7ff fef6 	bl	8008e64 <__cvt>
 8009078:	9b04      	ldr	r3, [sp, #16]
 800907a:	9907      	ldr	r1, [sp, #28]
 800907c:	2b47      	cmp	r3, #71	; 0x47
 800907e:	4680      	mov	r8, r0
 8009080:	d108      	bne.n	8009094 <_printf_float+0x10c>
 8009082:	1cc8      	adds	r0, r1, #3
 8009084:	db02      	blt.n	800908c <_printf_float+0x104>
 8009086:	6863      	ldr	r3, [r4, #4]
 8009088:	4299      	cmp	r1, r3
 800908a:	dd41      	ble.n	8009110 <_printf_float+0x188>
 800908c:	f1a9 0902 	sub.w	r9, r9, #2
 8009090:	fa5f f989 	uxtb.w	r9, r9
 8009094:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009098:	d820      	bhi.n	80090dc <_printf_float+0x154>
 800909a:	3901      	subs	r1, #1
 800909c:	464a      	mov	r2, r9
 800909e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80090a2:	9107      	str	r1, [sp, #28]
 80090a4:	f7ff ff30 	bl	8008f08 <__exponent>
 80090a8:	9a08      	ldr	r2, [sp, #32]
 80090aa:	9004      	str	r0, [sp, #16]
 80090ac:	1813      	adds	r3, r2, r0
 80090ae:	2a01      	cmp	r2, #1
 80090b0:	6123      	str	r3, [r4, #16]
 80090b2:	dc02      	bgt.n	80090ba <_printf_float+0x132>
 80090b4:	6822      	ldr	r2, [r4, #0]
 80090b6:	07d2      	lsls	r2, r2, #31
 80090b8:	d501      	bpl.n	80090be <_printf_float+0x136>
 80090ba:	3301      	adds	r3, #1
 80090bc:	6123      	str	r3, [r4, #16]
 80090be:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d0a2      	beq.n	800900c <_printf_float+0x84>
 80090c6:	232d      	movs	r3, #45	; 0x2d
 80090c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090cc:	e79e      	b.n	800900c <_printf_float+0x84>
 80090ce:	9904      	ldr	r1, [sp, #16]
 80090d0:	2947      	cmp	r1, #71	; 0x47
 80090d2:	d1c1      	bne.n	8009058 <_printf_float+0xd0>
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1bf      	bne.n	8009058 <_printf_float+0xd0>
 80090d8:	2301      	movs	r3, #1
 80090da:	e7bc      	b.n	8009056 <_printf_float+0xce>
 80090dc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80090e0:	d118      	bne.n	8009114 <_printf_float+0x18c>
 80090e2:	2900      	cmp	r1, #0
 80090e4:	6863      	ldr	r3, [r4, #4]
 80090e6:	dd0b      	ble.n	8009100 <_printf_float+0x178>
 80090e8:	6121      	str	r1, [r4, #16]
 80090ea:	b913      	cbnz	r3, 80090f2 <_printf_float+0x16a>
 80090ec:	6822      	ldr	r2, [r4, #0]
 80090ee:	07d0      	lsls	r0, r2, #31
 80090f0:	d502      	bpl.n	80090f8 <_printf_float+0x170>
 80090f2:	3301      	adds	r3, #1
 80090f4:	440b      	add	r3, r1
 80090f6:	6123      	str	r3, [r4, #16]
 80090f8:	2300      	movs	r3, #0
 80090fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80090fc:	9304      	str	r3, [sp, #16]
 80090fe:	e7de      	b.n	80090be <_printf_float+0x136>
 8009100:	b913      	cbnz	r3, 8009108 <_printf_float+0x180>
 8009102:	6822      	ldr	r2, [r4, #0]
 8009104:	07d2      	lsls	r2, r2, #31
 8009106:	d501      	bpl.n	800910c <_printf_float+0x184>
 8009108:	3302      	adds	r3, #2
 800910a:	e7f4      	b.n	80090f6 <_printf_float+0x16e>
 800910c:	2301      	movs	r3, #1
 800910e:	e7f2      	b.n	80090f6 <_printf_float+0x16e>
 8009110:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009114:	9b08      	ldr	r3, [sp, #32]
 8009116:	4299      	cmp	r1, r3
 8009118:	db05      	blt.n	8009126 <_printf_float+0x19e>
 800911a:	6823      	ldr	r3, [r4, #0]
 800911c:	6121      	str	r1, [r4, #16]
 800911e:	07d8      	lsls	r0, r3, #31
 8009120:	d5ea      	bpl.n	80090f8 <_printf_float+0x170>
 8009122:	1c4b      	adds	r3, r1, #1
 8009124:	e7e7      	b.n	80090f6 <_printf_float+0x16e>
 8009126:	2900      	cmp	r1, #0
 8009128:	bfd4      	ite	le
 800912a:	f1c1 0202 	rsble	r2, r1, #2
 800912e:	2201      	movgt	r2, #1
 8009130:	4413      	add	r3, r2
 8009132:	e7e0      	b.n	80090f6 <_printf_float+0x16e>
 8009134:	6823      	ldr	r3, [r4, #0]
 8009136:	055a      	lsls	r2, r3, #21
 8009138:	d407      	bmi.n	800914a <_printf_float+0x1c2>
 800913a:	6923      	ldr	r3, [r4, #16]
 800913c:	4642      	mov	r2, r8
 800913e:	4631      	mov	r1, r6
 8009140:	4628      	mov	r0, r5
 8009142:	47b8      	blx	r7
 8009144:	3001      	adds	r0, #1
 8009146:	d12a      	bne.n	800919e <_printf_float+0x216>
 8009148:	e76a      	b.n	8009020 <_printf_float+0x98>
 800914a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800914e:	f240 80e0 	bls.w	8009312 <_printf_float+0x38a>
 8009152:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009156:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800915a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800915e:	d133      	bne.n	80091c8 <_printf_float+0x240>
 8009160:	4a37      	ldr	r2, [pc, #220]	; (8009240 <_printf_float+0x2b8>)
 8009162:	2301      	movs	r3, #1
 8009164:	4631      	mov	r1, r6
 8009166:	4628      	mov	r0, r5
 8009168:	47b8      	blx	r7
 800916a:	3001      	adds	r0, #1
 800916c:	f43f af58 	beq.w	8009020 <_printf_float+0x98>
 8009170:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009174:	429a      	cmp	r2, r3
 8009176:	db02      	blt.n	800917e <_printf_float+0x1f6>
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	07d8      	lsls	r0, r3, #31
 800917c:	d50f      	bpl.n	800919e <_printf_float+0x216>
 800917e:	4653      	mov	r3, sl
 8009180:	465a      	mov	r2, fp
 8009182:	4631      	mov	r1, r6
 8009184:	4628      	mov	r0, r5
 8009186:	47b8      	blx	r7
 8009188:	3001      	adds	r0, #1
 800918a:	f43f af49 	beq.w	8009020 <_printf_float+0x98>
 800918e:	f04f 0800 	mov.w	r8, #0
 8009192:	f104 091a 	add.w	r9, r4, #26
 8009196:	9b08      	ldr	r3, [sp, #32]
 8009198:	3b01      	subs	r3, #1
 800919a:	4543      	cmp	r3, r8
 800919c:	dc09      	bgt.n	80091b2 <_printf_float+0x22a>
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	079b      	lsls	r3, r3, #30
 80091a2:	f100 8106 	bmi.w	80093b2 <_printf_float+0x42a>
 80091a6:	68e0      	ldr	r0, [r4, #12]
 80091a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091aa:	4298      	cmp	r0, r3
 80091ac:	bfb8      	it	lt
 80091ae:	4618      	movlt	r0, r3
 80091b0:	e738      	b.n	8009024 <_printf_float+0x9c>
 80091b2:	2301      	movs	r3, #1
 80091b4:	464a      	mov	r2, r9
 80091b6:	4631      	mov	r1, r6
 80091b8:	4628      	mov	r0, r5
 80091ba:	47b8      	blx	r7
 80091bc:	3001      	adds	r0, #1
 80091be:	f43f af2f 	beq.w	8009020 <_printf_float+0x98>
 80091c2:	f108 0801 	add.w	r8, r8, #1
 80091c6:	e7e6      	b.n	8009196 <_printf_float+0x20e>
 80091c8:	9b07      	ldr	r3, [sp, #28]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	dc3a      	bgt.n	8009244 <_printf_float+0x2bc>
 80091ce:	4a1c      	ldr	r2, [pc, #112]	; (8009240 <_printf_float+0x2b8>)
 80091d0:	2301      	movs	r3, #1
 80091d2:	4631      	mov	r1, r6
 80091d4:	4628      	mov	r0, r5
 80091d6:	47b8      	blx	r7
 80091d8:	3001      	adds	r0, #1
 80091da:	f43f af21 	beq.w	8009020 <_printf_float+0x98>
 80091de:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	d102      	bne.n	80091ec <_printf_float+0x264>
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	07d9      	lsls	r1, r3, #31
 80091ea:	d5d8      	bpl.n	800919e <_printf_float+0x216>
 80091ec:	4653      	mov	r3, sl
 80091ee:	465a      	mov	r2, fp
 80091f0:	4631      	mov	r1, r6
 80091f2:	4628      	mov	r0, r5
 80091f4:	47b8      	blx	r7
 80091f6:	3001      	adds	r0, #1
 80091f8:	f43f af12 	beq.w	8009020 <_printf_float+0x98>
 80091fc:	f04f 0900 	mov.w	r9, #0
 8009200:	f104 0a1a 	add.w	sl, r4, #26
 8009204:	9b07      	ldr	r3, [sp, #28]
 8009206:	425b      	negs	r3, r3
 8009208:	454b      	cmp	r3, r9
 800920a:	dc01      	bgt.n	8009210 <_printf_float+0x288>
 800920c:	9b08      	ldr	r3, [sp, #32]
 800920e:	e795      	b.n	800913c <_printf_float+0x1b4>
 8009210:	2301      	movs	r3, #1
 8009212:	4652      	mov	r2, sl
 8009214:	4631      	mov	r1, r6
 8009216:	4628      	mov	r0, r5
 8009218:	47b8      	blx	r7
 800921a:	3001      	adds	r0, #1
 800921c:	f43f af00 	beq.w	8009020 <_printf_float+0x98>
 8009220:	f109 0901 	add.w	r9, r9, #1
 8009224:	e7ee      	b.n	8009204 <_printf_float+0x27c>
 8009226:	bf00      	nop
 8009228:	ffffffff 	.word	0xffffffff
 800922c:	7fefffff 	.word	0x7fefffff
 8009230:	0800b928 	.word	0x0800b928
 8009234:	0800b92c 	.word	0x0800b92c
 8009238:	0800b930 	.word	0x0800b930
 800923c:	0800b934 	.word	0x0800b934
 8009240:	0800b938 	.word	0x0800b938
 8009244:	9a08      	ldr	r2, [sp, #32]
 8009246:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009248:	429a      	cmp	r2, r3
 800924a:	bfa8      	it	ge
 800924c:	461a      	movge	r2, r3
 800924e:	2a00      	cmp	r2, #0
 8009250:	4691      	mov	r9, r2
 8009252:	dc38      	bgt.n	80092c6 <_printf_float+0x33e>
 8009254:	2300      	movs	r3, #0
 8009256:	9305      	str	r3, [sp, #20]
 8009258:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800925c:	f104 021a 	add.w	r2, r4, #26
 8009260:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009262:	9905      	ldr	r1, [sp, #20]
 8009264:	9304      	str	r3, [sp, #16]
 8009266:	eba3 0309 	sub.w	r3, r3, r9
 800926a:	428b      	cmp	r3, r1
 800926c:	dc33      	bgt.n	80092d6 <_printf_float+0x34e>
 800926e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009272:	429a      	cmp	r2, r3
 8009274:	db3c      	blt.n	80092f0 <_printf_float+0x368>
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	07da      	lsls	r2, r3, #31
 800927a:	d439      	bmi.n	80092f0 <_printf_float+0x368>
 800927c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009280:	eba2 0903 	sub.w	r9, r2, r3
 8009284:	9b04      	ldr	r3, [sp, #16]
 8009286:	1ad2      	subs	r2, r2, r3
 8009288:	4591      	cmp	r9, r2
 800928a:	bfa8      	it	ge
 800928c:	4691      	movge	r9, r2
 800928e:	f1b9 0f00 	cmp.w	r9, #0
 8009292:	dc35      	bgt.n	8009300 <_printf_float+0x378>
 8009294:	f04f 0800 	mov.w	r8, #0
 8009298:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800929c:	f104 0a1a 	add.w	sl, r4, #26
 80092a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80092a4:	1a9b      	subs	r3, r3, r2
 80092a6:	eba3 0309 	sub.w	r3, r3, r9
 80092aa:	4543      	cmp	r3, r8
 80092ac:	f77f af77 	ble.w	800919e <_printf_float+0x216>
 80092b0:	2301      	movs	r3, #1
 80092b2:	4652      	mov	r2, sl
 80092b4:	4631      	mov	r1, r6
 80092b6:	4628      	mov	r0, r5
 80092b8:	47b8      	blx	r7
 80092ba:	3001      	adds	r0, #1
 80092bc:	f43f aeb0 	beq.w	8009020 <_printf_float+0x98>
 80092c0:	f108 0801 	add.w	r8, r8, #1
 80092c4:	e7ec      	b.n	80092a0 <_printf_float+0x318>
 80092c6:	4613      	mov	r3, r2
 80092c8:	4631      	mov	r1, r6
 80092ca:	4642      	mov	r2, r8
 80092cc:	4628      	mov	r0, r5
 80092ce:	47b8      	blx	r7
 80092d0:	3001      	adds	r0, #1
 80092d2:	d1bf      	bne.n	8009254 <_printf_float+0x2cc>
 80092d4:	e6a4      	b.n	8009020 <_printf_float+0x98>
 80092d6:	2301      	movs	r3, #1
 80092d8:	4631      	mov	r1, r6
 80092da:	4628      	mov	r0, r5
 80092dc:	9204      	str	r2, [sp, #16]
 80092de:	47b8      	blx	r7
 80092e0:	3001      	adds	r0, #1
 80092e2:	f43f ae9d 	beq.w	8009020 <_printf_float+0x98>
 80092e6:	9b05      	ldr	r3, [sp, #20]
 80092e8:	9a04      	ldr	r2, [sp, #16]
 80092ea:	3301      	adds	r3, #1
 80092ec:	9305      	str	r3, [sp, #20]
 80092ee:	e7b7      	b.n	8009260 <_printf_float+0x2d8>
 80092f0:	4653      	mov	r3, sl
 80092f2:	465a      	mov	r2, fp
 80092f4:	4631      	mov	r1, r6
 80092f6:	4628      	mov	r0, r5
 80092f8:	47b8      	blx	r7
 80092fa:	3001      	adds	r0, #1
 80092fc:	d1be      	bne.n	800927c <_printf_float+0x2f4>
 80092fe:	e68f      	b.n	8009020 <_printf_float+0x98>
 8009300:	9a04      	ldr	r2, [sp, #16]
 8009302:	464b      	mov	r3, r9
 8009304:	4442      	add	r2, r8
 8009306:	4631      	mov	r1, r6
 8009308:	4628      	mov	r0, r5
 800930a:	47b8      	blx	r7
 800930c:	3001      	adds	r0, #1
 800930e:	d1c1      	bne.n	8009294 <_printf_float+0x30c>
 8009310:	e686      	b.n	8009020 <_printf_float+0x98>
 8009312:	9a08      	ldr	r2, [sp, #32]
 8009314:	2a01      	cmp	r2, #1
 8009316:	dc01      	bgt.n	800931c <_printf_float+0x394>
 8009318:	07db      	lsls	r3, r3, #31
 800931a:	d537      	bpl.n	800938c <_printf_float+0x404>
 800931c:	2301      	movs	r3, #1
 800931e:	4642      	mov	r2, r8
 8009320:	4631      	mov	r1, r6
 8009322:	4628      	mov	r0, r5
 8009324:	47b8      	blx	r7
 8009326:	3001      	adds	r0, #1
 8009328:	f43f ae7a 	beq.w	8009020 <_printf_float+0x98>
 800932c:	4653      	mov	r3, sl
 800932e:	465a      	mov	r2, fp
 8009330:	4631      	mov	r1, r6
 8009332:	4628      	mov	r0, r5
 8009334:	47b8      	blx	r7
 8009336:	3001      	adds	r0, #1
 8009338:	f43f ae72 	beq.w	8009020 <_printf_float+0x98>
 800933c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009340:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009348:	9b08      	ldr	r3, [sp, #32]
 800934a:	d01a      	beq.n	8009382 <_printf_float+0x3fa>
 800934c:	3b01      	subs	r3, #1
 800934e:	f108 0201 	add.w	r2, r8, #1
 8009352:	4631      	mov	r1, r6
 8009354:	4628      	mov	r0, r5
 8009356:	47b8      	blx	r7
 8009358:	3001      	adds	r0, #1
 800935a:	d10e      	bne.n	800937a <_printf_float+0x3f2>
 800935c:	e660      	b.n	8009020 <_printf_float+0x98>
 800935e:	2301      	movs	r3, #1
 8009360:	464a      	mov	r2, r9
 8009362:	4631      	mov	r1, r6
 8009364:	4628      	mov	r0, r5
 8009366:	47b8      	blx	r7
 8009368:	3001      	adds	r0, #1
 800936a:	f43f ae59 	beq.w	8009020 <_printf_float+0x98>
 800936e:	f108 0801 	add.w	r8, r8, #1
 8009372:	9b08      	ldr	r3, [sp, #32]
 8009374:	3b01      	subs	r3, #1
 8009376:	4543      	cmp	r3, r8
 8009378:	dcf1      	bgt.n	800935e <_printf_float+0x3d6>
 800937a:	9b04      	ldr	r3, [sp, #16]
 800937c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009380:	e6dd      	b.n	800913e <_printf_float+0x1b6>
 8009382:	f04f 0800 	mov.w	r8, #0
 8009386:	f104 091a 	add.w	r9, r4, #26
 800938a:	e7f2      	b.n	8009372 <_printf_float+0x3ea>
 800938c:	2301      	movs	r3, #1
 800938e:	4642      	mov	r2, r8
 8009390:	e7df      	b.n	8009352 <_printf_float+0x3ca>
 8009392:	2301      	movs	r3, #1
 8009394:	464a      	mov	r2, r9
 8009396:	4631      	mov	r1, r6
 8009398:	4628      	mov	r0, r5
 800939a:	47b8      	blx	r7
 800939c:	3001      	adds	r0, #1
 800939e:	f43f ae3f 	beq.w	8009020 <_printf_float+0x98>
 80093a2:	f108 0801 	add.w	r8, r8, #1
 80093a6:	68e3      	ldr	r3, [r4, #12]
 80093a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093aa:	1a5b      	subs	r3, r3, r1
 80093ac:	4543      	cmp	r3, r8
 80093ae:	dcf0      	bgt.n	8009392 <_printf_float+0x40a>
 80093b0:	e6f9      	b.n	80091a6 <_printf_float+0x21e>
 80093b2:	f04f 0800 	mov.w	r8, #0
 80093b6:	f104 0919 	add.w	r9, r4, #25
 80093ba:	e7f4      	b.n	80093a6 <_printf_float+0x41e>

080093bc <_printf_common>:
 80093bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093c0:	4616      	mov	r6, r2
 80093c2:	4699      	mov	r9, r3
 80093c4:	688a      	ldr	r2, [r1, #8]
 80093c6:	690b      	ldr	r3, [r1, #16]
 80093c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093cc:	4293      	cmp	r3, r2
 80093ce:	bfb8      	it	lt
 80093d0:	4613      	movlt	r3, r2
 80093d2:	6033      	str	r3, [r6, #0]
 80093d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093d8:	4607      	mov	r7, r0
 80093da:	460c      	mov	r4, r1
 80093dc:	b10a      	cbz	r2, 80093e2 <_printf_common+0x26>
 80093de:	3301      	adds	r3, #1
 80093e0:	6033      	str	r3, [r6, #0]
 80093e2:	6823      	ldr	r3, [r4, #0]
 80093e4:	0699      	lsls	r1, r3, #26
 80093e6:	bf42      	ittt	mi
 80093e8:	6833      	ldrmi	r3, [r6, #0]
 80093ea:	3302      	addmi	r3, #2
 80093ec:	6033      	strmi	r3, [r6, #0]
 80093ee:	6825      	ldr	r5, [r4, #0]
 80093f0:	f015 0506 	ands.w	r5, r5, #6
 80093f4:	d106      	bne.n	8009404 <_printf_common+0x48>
 80093f6:	f104 0a19 	add.w	sl, r4, #25
 80093fa:	68e3      	ldr	r3, [r4, #12]
 80093fc:	6832      	ldr	r2, [r6, #0]
 80093fe:	1a9b      	subs	r3, r3, r2
 8009400:	42ab      	cmp	r3, r5
 8009402:	dc26      	bgt.n	8009452 <_printf_common+0x96>
 8009404:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009408:	1e13      	subs	r3, r2, #0
 800940a:	6822      	ldr	r2, [r4, #0]
 800940c:	bf18      	it	ne
 800940e:	2301      	movne	r3, #1
 8009410:	0692      	lsls	r2, r2, #26
 8009412:	d42b      	bmi.n	800946c <_printf_common+0xb0>
 8009414:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009418:	4649      	mov	r1, r9
 800941a:	4638      	mov	r0, r7
 800941c:	47c0      	blx	r8
 800941e:	3001      	adds	r0, #1
 8009420:	d01e      	beq.n	8009460 <_printf_common+0xa4>
 8009422:	6823      	ldr	r3, [r4, #0]
 8009424:	6922      	ldr	r2, [r4, #16]
 8009426:	f003 0306 	and.w	r3, r3, #6
 800942a:	2b04      	cmp	r3, #4
 800942c:	bf02      	ittt	eq
 800942e:	68e5      	ldreq	r5, [r4, #12]
 8009430:	6833      	ldreq	r3, [r6, #0]
 8009432:	1aed      	subeq	r5, r5, r3
 8009434:	68a3      	ldr	r3, [r4, #8]
 8009436:	bf0c      	ite	eq
 8009438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800943c:	2500      	movne	r5, #0
 800943e:	4293      	cmp	r3, r2
 8009440:	bfc4      	itt	gt
 8009442:	1a9b      	subgt	r3, r3, r2
 8009444:	18ed      	addgt	r5, r5, r3
 8009446:	2600      	movs	r6, #0
 8009448:	341a      	adds	r4, #26
 800944a:	42b5      	cmp	r5, r6
 800944c:	d11a      	bne.n	8009484 <_printf_common+0xc8>
 800944e:	2000      	movs	r0, #0
 8009450:	e008      	b.n	8009464 <_printf_common+0xa8>
 8009452:	2301      	movs	r3, #1
 8009454:	4652      	mov	r2, sl
 8009456:	4649      	mov	r1, r9
 8009458:	4638      	mov	r0, r7
 800945a:	47c0      	blx	r8
 800945c:	3001      	adds	r0, #1
 800945e:	d103      	bne.n	8009468 <_printf_common+0xac>
 8009460:	f04f 30ff 	mov.w	r0, #4294967295
 8009464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009468:	3501      	adds	r5, #1
 800946a:	e7c6      	b.n	80093fa <_printf_common+0x3e>
 800946c:	18e1      	adds	r1, r4, r3
 800946e:	1c5a      	adds	r2, r3, #1
 8009470:	2030      	movs	r0, #48	; 0x30
 8009472:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009476:	4422      	add	r2, r4
 8009478:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800947c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009480:	3302      	adds	r3, #2
 8009482:	e7c7      	b.n	8009414 <_printf_common+0x58>
 8009484:	2301      	movs	r3, #1
 8009486:	4622      	mov	r2, r4
 8009488:	4649      	mov	r1, r9
 800948a:	4638      	mov	r0, r7
 800948c:	47c0      	blx	r8
 800948e:	3001      	adds	r0, #1
 8009490:	d0e6      	beq.n	8009460 <_printf_common+0xa4>
 8009492:	3601      	adds	r6, #1
 8009494:	e7d9      	b.n	800944a <_printf_common+0x8e>
	...

08009498 <_printf_i>:
 8009498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800949c:	7e0f      	ldrb	r7, [r1, #24]
 800949e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80094a0:	2f78      	cmp	r7, #120	; 0x78
 80094a2:	4691      	mov	r9, r2
 80094a4:	4680      	mov	r8, r0
 80094a6:	460c      	mov	r4, r1
 80094a8:	469a      	mov	sl, r3
 80094aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80094ae:	d807      	bhi.n	80094c0 <_printf_i+0x28>
 80094b0:	2f62      	cmp	r7, #98	; 0x62
 80094b2:	d80a      	bhi.n	80094ca <_printf_i+0x32>
 80094b4:	2f00      	cmp	r7, #0
 80094b6:	f000 80d4 	beq.w	8009662 <_printf_i+0x1ca>
 80094ba:	2f58      	cmp	r7, #88	; 0x58
 80094bc:	f000 80c0 	beq.w	8009640 <_printf_i+0x1a8>
 80094c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094c8:	e03a      	b.n	8009540 <_printf_i+0xa8>
 80094ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094ce:	2b15      	cmp	r3, #21
 80094d0:	d8f6      	bhi.n	80094c0 <_printf_i+0x28>
 80094d2:	a101      	add	r1, pc, #4	; (adr r1, 80094d8 <_printf_i+0x40>)
 80094d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094d8:	08009531 	.word	0x08009531
 80094dc:	08009545 	.word	0x08009545
 80094e0:	080094c1 	.word	0x080094c1
 80094e4:	080094c1 	.word	0x080094c1
 80094e8:	080094c1 	.word	0x080094c1
 80094ec:	080094c1 	.word	0x080094c1
 80094f0:	08009545 	.word	0x08009545
 80094f4:	080094c1 	.word	0x080094c1
 80094f8:	080094c1 	.word	0x080094c1
 80094fc:	080094c1 	.word	0x080094c1
 8009500:	080094c1 	.word	0x080094c1
 8009504:	08009649 	.word	0x08009649
 8009508:	08009571 	.word	0x08009571
 800950c:	08009603 	.word	0x08009603
 8009510:	080094c1 	.word	0x080094c1
 8009514:	080094c1 	.word	0x080094c1
 8009518:	0800966b 	.word	0x0800966b
 800951c:	080094c1 	.word	0x080094c1
 8009520:	08009571 	.word	0x08009571
 8009524:	080094c1 	.word	0x080094c1
 8009528:	080094c1 	.word	0x080094c1
 800952c:	0800960b 	.word	0x0800960b
 8009530:	682b      	ldr	r3, [r5, #0]
 8009532:	1d1a      	adds	r2, r3, #4
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	602a      	str	r2, [r5, #0]
 8009538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800953c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009540:	2301      	movs	r3, #1
 8009542:	e09f      	b.n	8009684 <_printf_i+0x1ec>
 8009544:	6820      	ldr	r0, [r4, #0]
 8009546:	682b      	ldr	r3, [r5, #0]
 8009548:	0607      	lsls	r7, r0, #24
 800954a:	f103 0104 	add.w	r1, r3, #4
 800954e:	6029      	str	r1, [r5, #0]
 8009550:	d501      	bpl.n	8009556 <_printf_i+0xbe>
 8009552:	681e      	ldr	r6, [r3, #0]
 8009554:	e003      	b.n	800955e <_printf_i+0xc6>
 8009556:	0646      	lsls	r6, r0, #25
 8009558:	d5fb      	bpl.n	8009552 <_printf_i+0xba>
 800955a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800955e:	2e00      	cmp	r6, #0
 8009560:	da03      	bge.n	800956a <_printf_i+0xd2>
 8009562:	232d      	movs	r3, #45	; 0x2d
 8009564:	4276      	negs	r6, r6
 8009566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800956a:	485a      	ldr	r0, [pc, #360]	; (80096d4 <_printf_i+0x23c>)
 800956c:	230a      	movs	r3, #10
 800956e:	e012      	b.n	8009596 <_printf_i+0xfe>
 8009570:	682b      	ldr	r3, [r5, #0]
 8009572:	6820      	ldr	r0, [r4, #0]
 8009574:	1d19      	adds	r1, r3, #4
 8009576:	6029      	str	r1, [r5, #0]
 8009578:	0605      	lsls	r5, r0, #24
 800957a:	d501      	bpl.n	8009580 <_printf_i+0xe8>
 800957c:	681e      	ldr	r6, [r3, #0]
 800957e:	e002      	b.n	8009586 <_printf_i+0xee>
 8009580:	0641      	lsls	r1, r0, #25
 8009582:	d5fb      	bpl.n	800957c <_printf_i+0xe4>
 8009584:	881e      	ldrh	r6, [r3, #0]
 8009586:	4853      	ldr	r0, [pc, #332]	; (80096d4 <_printf_i+0x23c>)
 8009588:	2f6f      	cmp	r7, #111	; 0x6f
 800958a:	bf0c      	ite	eq
 800958c:	2308      	moveq	r3, #8
 800958e:	230a      	movne	r3, #10
 8009590:	2100      	movs	r1, #0
 8009592:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009596:	6865      	ldr	r5, [r4, #4]
 8009598:	60a5      	str	r5, [r4, #8]
 800959a:	2d00      	cmp	r5, #0
 800959c:	bfa2      	ittt	ge
 800959e:	6821      	ldrge	r1, [r4, #0]
 80095a0:	f021 0104 	bicge.w	r1, r1, #4
 80095a4:	6021      	strge	r1, [r4, #0]
 80095a6:	b90e      	cbnz	r6, 80095ac <_printf_i+0x114>
 80095a8:	2d00      	cmp	r5, #0
 80095aa:	d04b      	beq.n	8009644 <_printf_i+0x1ac>
 80095ac:	4615      	mov	r5, r2
 80095ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80095b2:	fb03 6711 	mls	r7, r3, r1, r6
 80095b6:	5dc7      	ldrb	r7, [r0, r7]
 80095b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80095bc:	4637      	mov	r7, r6
 80095be:	42bb      	cmp	r3, r7
 80095c0:	460e      	mov	r6, r1
 80095c2:	d9f4      	bls.n	80095ae <_printf_i+0x116>
 80095c4:	2b08      	cmp	r3, #8
 80095c6:	d10b      	bne.n	80095e0 <_printf_i+0x148>
 80095c8:	6823      	ldr	r3, [r4, #0]
 80095ca:	07de      	lsls	r6, r3, #31
 80095cc:	d508      	bpl.n	80095e0 <_printf_i+0x148>
 80095ce:	6923      	ldr	r3, [r4, #16]
 80095d0:	6861      	ldr	r1, [r4, #4]
 80095d2:	4299      	cmp	r1, r3
 80095d4:	bfde      	ittt	le
 80095d6:	2330      	movle	r3, #48	; 0x30
 80095d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80095e0:	1b52      	subs	r2, r2, r5
 80095e2:	6122      	str	r2, [r4, #16]
 80095e4:	f8cd a000 	str.w	sl, [sp]
 80095e8:	464b      	mov	r3, r9
 80095ea:	aa03      	add	r2, sp, #12
 80095ec:	4621      	mov	r1, r4
 80095ee:	4640      	mov	r0, r8
 80095f0:	f7ff fee4 	bl	80093bc <_printf_common>
 80095f4:	3001      	adds	r0, #1
 80095f6:	d14a      	bne.n	800968e <_printf_i+0x1f6>
 80095f8:	f04f 30ff 	mov.w	r0, #4294967295
 80095fc:	b004      	add	sp, #16
 80095fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009602:	6823      	ldr	r3, [r4, #0]
 8009604:	f043 0320 	orr.w	r3, r3, #32
 8009608:	6023      	str	r3, [r4, #0]
 800960a:	4833      	ldr	r0, [pc, #204]	; (80096d8 <_printf_i+0x240>)
 800960c:	2778      	movs	r7, #120	; 0x78
 800960e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	6829      	ldr	r1, [r5, #0]
 8009616:	061f      	lsls	r7, r3, #24
 8009618:	f851 6b04 	ldr.w	r6, [r1], #4
 800961c:	d402      	bmi.n	8009624 <_printf_i+0x18c>
 800961e:	065f      	lsls	r7, r3, #25
 8009620:	bf48      	it	mi
 8009622:	b2b6      	uxthmi	r6, r6
 8009624:	07df      	lsls	r7, r3, #31
 8009626:	bf48      	it	mi
 8009628:	f043 0320 	orrmi.w	r3, r3, #32
 800962c:	6029      	str	r1, [r5, #0]
 800962e:	bf48      	it	mi
 8009630:	6023      	strmi	r3, [r4, #0]
 8009632:	b91e      	cbnz	r6, 800963c <_printf_i+0x1a4>
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	f023 0320 	bic.w	r3, r3, #32
 800963a:	6023      	str	r3, [r4, #0]
 800963c:	2310      	movs	r3, #16
 800963e:	e7a7      	b.n	8009590 <_printf_i+0xf8>
 8009640:	4824      	ldr	r0, [pc, #144]	; (80096d4 <_printf_i+0x23c>)
 8009642:	e7e4      	b.n	800960e <_printf_i+0x176>
 8009644:	4615      	mov	r5, r2
 8009646:	e7bd      	b.n	80095c4 <_printf_i+0x12c>
 8009648:	682b      	ldr	r3, [r5, #0]
 800964a:	6826      	ldr	r6, [r4, #0]
 800964c:	6961      	ldr	r1, [r4, #20]
 800964e:	1d18      	adds	r0, r3, #4
 8009650:	6028      	str	r0, [r5, #0]
 8009652:	0635      	lsls	r5, r6, #24
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	d501      	bpl.n	800965c <_printf_i+0x1c4>
 8009658:	6019      	str	r1, [r3, #0]
 800965a:	e002      	b.n	8009662 <_printf_i+0x1ca>
 800965c:	0670      	lsls	r0, r6, #25
 800965e:	d5fb      	bpl.n	8009658 <_printf_i+0x1c0>
 8009660:	8019      	strh	r1, [r3, #0]
 8009662:	2300      	movs	r3, #0
 8009664:	6123      	str	r3, [r4, #16]
 8009666:	4615      	mov	r5, r2
 8009668:	e7bc      	b.n	80095e4 <_printf_i+0x14c>
 800966a:	682b      	ldr	r3, [r5, #0]
 800966c:	1d1a      	adds	r2, r3, #4
 800966e:	602a      	str	r2, [r5, #0]
 8009670:	681d      	ldr	r5, [r3, #0]
 8009672:	6862      	ldr	r2, [r4, #4]
 8009674:	2100      	movs	r1, #0
 8009676:	4628      	mov	r0, r5
 8009678:	f7f6 fe3a 	bl	80002f0 <memchr>
 800967c:	b108      	cbz	r0, 8009682 <_printf_i+0x1ea>
 800967e:	1b40      	subs	r0, r0, r5
 8009680:	6060      	str	r0, [r4, #4]
 8009682:	6863      	ldr	r3, [r4, #4]
 8009684:	6123      	str	r3, [r4, #16]
 8009686:	2300      	movs	r3, #0
 8009688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800968c:	e7aa      	b.n	80095e4 <_printf_i+0x14c>
 800968e:	6923      	ldr	r3, [r4, #16]
 8009690:	462a      	mov	r2, r5
 8009692:	4649      	mov	r1, r9
 8009694:	4640      	mov	r0, r8
 8009696:	47d0      	blx	sl
 8009698:	3001      	adds	r0, #1
 800969a:	d0ad      	beq.n	80095f8 <_printf_i+0x160>
 800969c:	6823      	ldr	r3, [r4, #0]
 800969e:	079b      	lsls	r3, r3, #30
 80096a0:	d413      	bmi.n	80096ca <_printf_i+0x232>
 80096a2:	68e0      	ldr	r0, [r4, #12]
 80096a4:	9b03      	ldr	r3, [sp, #12]
 80096a6:	4298      	cmp	r0, r3
 80096a8:	bfb8      	it	lt
 80096aa:	4618      	movlt	r0, r3
 80096ac:	e7a6      	b.n	80095fc <_printf_i+0x164>
 80096ae:	2301      	movs	r3, #1
 80096b0:	4632      	mov	r2, r6
 80096b2:	4649      	mov	r1, r9
 80096b4:	4640      	mov	r0, r8
 80096b6:	47d0      	blx	sl
 80096b8:	3001      	adds	r0, #1
 80096ba:	d09d      	beq.n	80095f8 <_printf_i+0x160>
 80096bc:	3501      	adds	r5, #1
 80096be:	68e3      	ldr	r3, [r4, #12]
 80096c0:	9903      	ldr	r1, [sp, #12]
 80096c2:	1a5b      	subs	r3, r3, r1
 80096c4:	42ab      	cmp	r3, r5
 80096c6:	dcf2      	bgt.n	80096ae <_printf_i+0x216>
 80096c8:	e7eb      	b.n	80096a2 <_printf_i+0x20a>
 80096ca:	2500      	movs	r5, #0
 80096cc:	f104 0619 	add.w	r6, r4, #25
 80096d0:	e7f5      	b.n	80096be <_printf_i+0x226>
 80096d2:	bf00      	nop
 80096d4:	0800b93a 	.word	0x0800b93a
 80096d8:	0800b94b 	.word	0x0800b94b

080096dc <std>:
 80096dc:	2300      	movs	r3, #0
 80096de:	b510      	push	{r4, lr}
 80096e0:	4604      	mov	r4, r0
 80096e2:	e9c0 3300 	strd	r3, r3, [r0]
 80096e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096ea:	6083      	str	r3, [r0, #8]
 80096ec:	8181      	strh	r1, [r0, #12]
 80096ee:	6643      	str	r3, [r0, #100]	; 0x64
 80096f0:	81c2      	strh	r2, [r0, #14]
 80096f2:	6183      	str	r3, [r0, #24]
 80096f4:	4619      	mov	r1, r3
 80096f6:	2208      	movs	r2, #8
 80096f8:	305c      	adds	r0, #92	; 0x5c
 80096fa:	f000 f902 	bl	8009902 <memset>
 80096fe:	4b05      	ldr	r3, [pc, #20]	; (8009714 <std+0x38>)
 8009700:	6263      	str	r3, [r4, #36]	; 0x24
 8009702:	4b05      	ldr	r3, [pc, #20]	; (8009718 <std+0x3c>)
 8009704:	62a3      	str	r3, [r4, #40]	; 0x28
 8009706:	4b05      	ldr	r3, [pc, #20]	; (800971c <std+0x40>)
 8009708:	62e3      	str	r3, [r4, #44]	; 0x2c
 800970a:	4b05      	ldr	r3, [pc, #20]	; (8009720 <std+0x44>)
 800970c:	6224      	str	r4, [r4, #32]
 800970e:	6323      	str	r3, [r4, #48]	; 0x30
 8009710:	bd10      	pop	{r4, pc}
 8009712:	bf00      	nop
 8009714:	0800987d 	.word	0x0800987d
 8009718:	0800989f 	.word	0x0800989f
 800971c:	080098d7 	.word	0x080098d7
 8009720:	080098fb 	.word	0x080098fb

08009724 <stdio_exit_handler>:
 8009724:	4a02      	ldr	r2, [pc, #8]	; (8009730 <stdio_exit_handler+0xc>)
 8009726:	4903      	ldr	r1, [pc, #12]	; (8009734 <stdio_exit_handler+0x10>)
 8009728:	4803      	ldr	r0, [pc, #12]	; (8009738 <stdio_exit_handler+0x14>)
 800972a:	f000 b869 	b.w	8009800 <_fwalk_sglue>
 800972e:	bf00      	nop
 8009730:	2400002c 	.word	0x2400002c
 8009734:	0800b155 	.word	0x0800b155
 8009738:	24000038 	.word	0x24000038

0800973c <cleanup_stdio>:
 800973c:	6841      	ldr	r1, [r0, #4]
 800973e:	4b0c      	ldr	r3, [pc, #48]	; (8009770 <cleanup_stdio+0x34>)
 8009740:	4299      	cmp	r1, r3
 8009742:	b510      	push	{r4, lr}
 8009744:	4604      	mov	r4, r0
 8009746:	d001      	beq.n	800974c <cleanup_stdio+0x10>
 8009748:	f001 fd04 	bl	800b154 <_fflush_r>
 800974c:	68a1      	ldr	r1, [r4, #8]
 800974e:	4b09      	ldr	r3, [pc, #36]	; (8009774 <cleanup_stdio+0x38>)
 8009750:	4299      	cmp	r1, r3
 8009752:	d002      	beq.n	800975a <cleanup_stdio+0x1e>
 8009754:	4620      	mov	r0, r4
 8009756:	f001 fcfd 	bl	800b154 <_fflush_r>
 800975a:	68e1      	ldr	r1, [r4, #12]
 800975c:	4b06      	ldr	r3, [pc, #24]	; (8009778 <cleanup_stdio+0x3c>)
 800975e:	4299      	cmp	r1, r3
 8009760:	d004      	beq.n	800976c <cleanup_stdio+0x30>
 8009762:	4620      	mov	r0, r4
 8009764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009768:	f001 bcf4 	b.w	800b154 <_fflush_r>
 800976c:	bd10      	pop	{r4, pc}
 800976e:	bf00      	nop
 8009770:	24000440 	.word	0x24000440
 8009774:	240004a8 	.word	0x240004a8
 8009778:	24000510 	.word	0x24000510

0800977c <global_stdio_init.part.0>:
 800977c:	b510      	push	{r4, lr}
 800977e:	4b0b      	ldr	r3, [pc, #44]	; (80097ac <global_stdio_init.part.0+0x30>)
 8009780:	4c0b      	ldr	r4, [pc, #44]	; (80097b0 <global_stdio_init.part.0+0x34>)
 8009782:	4a0c      	ldr	r2, [pc, #48]	; (80097b4 <global_stdio_init.part.0+0x38>)
 8009784:	601a      	str	r2, [r3, #0]
 8009786:	4620      	mov	r0, r4
 8009788:	2200      	movs	r2, #0
 800978a:	2104      	movs	r1, #4
 800978c:	f7ff ffa6 	bl	80096dc <std>
 8009790:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009794:	2201      	movs	r2, #1
 8009796:	2109      	movs	r1, #9
 8009798:	f7ff ffa0 	bl	80096dc <std>
 800979c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80097a0:	2202      	movs	r2, #2
 80097a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097a6:	2112      	movs	r1, #18
 80097a8:	f7ff bf98 	b.w	80096dc <std>
 80097ac:	24000578 	.word	0x24000578
 80097b0:	24000440 	.word	0x24000440
 80097b4:	08009725 	.word	0x08009725

080097b8 <__sfp_lock_acquire>:
 80097b8:	4801      	ldr	r0, [pc, #4]	; (80097c0 <__sfp_lock_acquire+0x8>)
 80097ba:	f000 b92f 	b.w	8009a1c <__retarget_lock_acquire_recursive>
 80097be:	bf00      	nop
 80097c0:	24000581 	.word	0x24000581

080097c4 <__sfp_lock_release>:
 80097c4:	4801      	ldr	r0, [pc, #4]	; (80097cc <__sfp_lock_release+0x8>)
 80097c6:	f000 b92a 	b.w	8009a1e <__retarget_lock_release_recursive>
 80097ca:	bf00      	nop
 80097cc:	24000581 	.word	0x24000581

080097d0 <__sinit>:
 80097d0:	b510      	push	{r4, lr}
 80097d2:	4604      	mov	r4, r0
 80097d4:	f7ff fff0 	bl	80097b8 <__sfp_lock_acquire>
 80097d8:	6a23      	ldr	r3, [r4, #32]
 80097da:	b11b      	cbz	r3, 80097e4 <__sinit+0x14>
 80097dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097e0:	f7ff bff0 	b.w	80097c4 <__sfp_lock_release>
 80097e4:	4b04      	ldr	r3, [pc, #16]	; (80097f8 <__sinit+0x28>)
 80097e6:	6223      	str	r3, [r4, #32]
 80097e8:	4b04      	ldr	r3, [pc, #16]	; (80097fc <__sinit+0x2c>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d1f5      	bne.n	80097dc <__sinit+0xc>
 80097f0:	f7ff ffc4 	bl	800977c <global_stdio_init.part.0>
 80097f4:	e7f2      	b.n	80097dc <__sinit+0xc>
 80097f6:	bf00      	nop
 80097f8:	0800973d 	.word	0x0800973d
 80097fc:	24000578 	.word	0x24000578

08009800 <_fwalk_sglue>:
 8009800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009804:	4607      	mov	r7, r0
 8009806:	4688      	mov	r8, r1
 8009808:	4614      	mov	r4, r2
 800980a:	2600      	movs	r6, #0
 800980c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009810:	f1b9 0901 	subs.w	r9, r9, #1
 8009814:	d505      	bpl.n	8009822 <_fwalk_sglue+0x22>
 8009816:	6824      	ldr	r4, [r4, #0]
 8009818:	2c00      	cmp	r4, #0
 800981a:	d1f7      	bne.n	800980c <_fwalk_sglue+0xc>
 800981c:	4630      	mov	r0, r6
 800981e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009822:	89ab      	ldrh	r3, [r5, #12]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d907      	bls.n	8009838 <_fwalk_sglue+0x38>
 8009828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800982c:	3301      	adds	r3, #1
 800982e:	d003      	beq.n	8009838 <_fwalk_sglue+0x38>
 8009830:	4629      	mov	r1, r5
 8009832:	4638      	mov	r0, r7
 8009834:	47c0      	blx	r8
 8009836:	4306      	orrs	r6, r0
 8009838:	3568      	adds	r5, #104	; 0x68
 800983a:	e7e9      	b.n	8009810 <_fwalk_sglue+0x10>

0800983c <siprintf>:
 800983c:	b40e      	push	{r1, r2, r3}
 800983e:	b500      	push	{lr}
 8009840:	b09c      	sub	sp, #112	; 0x70
 8009842:	ab1d      	add	r3, sp, #116	; 0x74
 8009844:	9002      	str	r0, [sp, #8]
 8009846:	9006      	str	r0, [sp, #24]
 8009848:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800984c:	4809      	ldr	r0, [pc, #36]	; (8009874 <siprintf+0x38>)
 800984e:	9107      	str	r1, [sp, #28]
 8009850:	9104      	str	r1, [sp, #16]
 8009852:	4909      	ldr	r1, [pc, #36]	; (8009878 <siprintf+0x3c>)
 8009854:	f853 2b04 	ldr.w	r2, [r3], #4
 8009858:	9105      	str	r1, [sp, #20]
 800985a:	6800      	ldr	r0, [r0, #0]
 800985c:	9301      	str	r3, [sp, #4]
 800985e:	a902      	add	r1, sp, #8
 8009860:	f001 faf4 	bl	800ae4c <_svfiprintf_r>
 8009864:	9b02      	ldr	r3, [sp, #8]
 8009866:	2200      	movs	r2, #0
 8009868:	701a      	strb	r2, [r3, #0]
 800986a:	b01c      	add	sp, #112	; 0x70
 800986c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009870:	b003      	add	sp, #12
 8009872:	4770      	bx	lr
 8009874:	24000084 	.word	0x24000084
 8009878:	ffff0208 	.word	0xffff0208

0800987c <__sread>:
 800987c:	b510      	push	{r4, lr}
 800987e:	460c      	mov	r4, r1
 8009880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009884:	f000 f86c 	bl	8009960 <_read_r>
 8009888:	2800      	cmp	r0, #0
 800988a:	bfab      	itete	ge
 800988c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800988e:	89a3      	ldrhlt	r3, [r4, #12]
 8009890:	181b      	addge	r3, r3, r0
 8009892:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009896:	bfac      	ite	ge
 8009898:	6563      	strge	r3, [r4, #84]	; 0x54
 800989a:	81a3      	strhlt	r3, [r4, #12]
 800989c:	bd10      	pop	{r4, pc}

0800989e <__swrite>:
 800989e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a2:	461f      	mov	r7, r3
 80098a4:	898b      	ldrh	r3, [r1, #12]
 80098a6:	05db      	lsls	r3, r3, #23
 80098a8:	4605      	mov	r5, r0
 80098aa:	460c      	mov	r4, r1
 80098ac:	4616      	mov	r6, r2
 80098ae:	d505      	bpl.n	80098bc <__swrite+0x1e>
 80098b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b4:	2302      	movs	r3, #2
 80098b6:	2200      	movs	r2, #0
 80098b8:	f000 f840 	bl	800993c <_lseek_r>
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098c6:	81a3      	strh	r3, [r4, #12]
 80098c8:	4632      	mov	r2, r6
 80098ca:	463b      	mov	r3, r7
 80098cc:	4628      	mov	r0, r5
 80098ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098d2:	f000 b867 	b.w	80099a4 <_write_r>

080098d6 <__sseek>:
 80098d6:	b510      	push	{r4, lr}
 80098d8:	460c      	mov	r4, r1
 80098da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098de:	f000 f82d 	bl	800993c <_lseek_r>
 80098e2:	1c43      	adds	r3, r0, #1
 80098e4:	89a3      	ldrh	r3, [r4, #12]
 80098e6:	bf15      	itete	ne
 80098e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80098ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098f2:	81a3      	strheq	r3, [r4, #12]
 80098f4:	bf18      	it	ne
 80098f6:	81a3      	strhne	r3, [r4, #12]
 80098f8:	bd10      	pop	{r4, pc}

080098fa <__sclose>:
 80098fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098fe:	f000 b80d 	b.w	800991c <_close_r>

08009902 <memset>:
 8009902:	4402      	add	r2, r0
 8009904:	4603      	mov	r3, r0
 8009906:	4293      	cmp	r3, r2
 8009908:	d100      	bne.n	800990c <memset+0xa>
 800990a:	4770      	bx	lr
 800990c:	f803 1b01 	strb.w	r1, [r3], #1
 8009910:	e7f9      	b.n	8009906 <memset+0x4>
	...

08009914 <_localeconv_r>:
 8009914:	4800      	ldr	r0, [pc, #0]	; (8009918 <_localeconv_r+0x4>)
 8009916:	4770      	bx	lr
 8009918:	24000178 	.word	0x24000178

0800991c <_close_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4d06      	ldr	r5, [pc, #24]	; (8009938 <_close_r+0x1c>)
 8009920:	2300      	movs	r3, #0
 8009922:	4604      	mov	r4, r0
 8009924:	4608      	mov	r0, r1
 8009926:	602b      	str	r3, [r5, #0]
 8009928:	f7f8 f87b 	bl	8001a22 <_close>
 800992c:	1c43      	adds	r3, r0, #1
 800992e:	d102      	bne.n	8009936 <_close_r+0x1a>
 8009930:	682b      	ldr	r3, [r5, #0]
 8009932:	b103      	cbz	r3, 8009936 <_close_r+0x1a>
 8009934:	6023      	str	r3, [r4, #0]
 8009936:	bd38      	pop	{r3, r4, r5, pc}
 8009938:	2400057c 	.word	0x2400057c

0800993c <_lseek_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4d07      	ldr	r5, [pc, #28]	; (800995c <_lseek_r+0x20>)
 8009940:	4604      	mov	r4, r0
 8009942:	4608      	mov	r0, r1
 8009944:	4611      	mov	r1, r2
 8009946:	2200      	movs	r2, #0
 8009948:	602a      	str	r2, [r5, #0]
 800994a:	461a      	mov	r2, r3
 800994c:	f7f8 f890 	bl	8001a70 <_lseek>
 8009950:	1c43      	adds	r3, r0, #1
 8009952:	d102      	bne.n	800995a <_lseek_r+0x1e>
 8009954:	682b      	ldr	r3, [r5, #0]
 8009956:	b103      	cbz	r3, 800995a <_lseek_r+0x1e>
 8009958:	6023      	str	r3, [r4, #0]
 800995a:	bd38      	pop	{r3, r4, r5, pc}
 800995c:	2400057c 	.word	0x2400057c

08009960 <_read_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4d07      	ldr	r5, [pc, #28]	; (8009980 <_read_r+0x20>)
 8009964:	4604      	mov	r4, r0
 8009966:	4608      	mov	r0, r1
 8009968:	4611      	mov	r1, r2
 800996a:	2200      	movs	r2, #0
 800996c:	602a      	str	r2, [r5, #0]
 800996e:	461a      	mov	r2, r3
 8009970:	f7f8 f81e 	bl	80019b0 <_read>
 8009974:	1c43      	adds	r3, r0, #1
 8009976:	d102      	bne.n	800997e <_read_r+0x1e>
 8009978:	682b      	ldr	r3, [r5, #0]
 800997a:	b103      	cbz	r3, 800997e <_read_r+0x1e>
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	bd38      	pop	{r3, r4, r5, pc}
 8009980:	2400057c 	.word	0x2400057c

08009984 <_sbrk_r>:
 8009984:	b538      	push	{r3, r4, r5, lr}
 8009986:	4d06      	ldr	r5, [pc, #24]	; (80099a0 <_sbrk_r+0x1c>)
 8009988:	2300      	movs	r3, #0
 800998a:	4604      	mov	r4, r0
 800998c:	4608      	mov	r0, r1
 800998e:	602b      	str	r3, [r5, #0]
 8009990:	f7f8 f87c 	bl	8001a8c <_sbrk>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d102      	bne.n	800999e <_sbrk_r+0x1a>
 8009998:	682b      	ldr	r3, [r5, #0]
 800999a:	b103      	cbz	r3, 800999e <_sbrk_r+0x1a>
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	bd38      	pop	{r3, r4, r5, pc}
 80099a0:	2400057c 	.word	0x2400057c

080099a4 <_write_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	4d07      	ldr	r5, [pc, #28]	; (80099c4 <_write_r+0x20>)
 80099a8:	4604      	mov	r4, r0
 80099aa:	4608      	mov	r0, r1
 80099ac:	4611      	mov	r1, r2
 80099ae:	2200      	movs	r2, #0
 80099b0:	602a      	str	r2, [r5, #0]
 80099b2:	461a      	mov	r2, r3
 80099b4:	f7f8 f819 	bl	80019ea <_write>
 80099b8:	1c43      	adds	r3, r0, #1
 80099ba:	d102      	bne.n	80099c2 <_write_r+0x1e>
 80099bc:	682b      	ldr	r3, [r5, #0]
 80099be:	b103      	cbz	r3, 80099c2 <_write_r+0x1e>
 80099c0:	6023      	str	r3, [r4, #0]
 80099c2:	bd38      	pop	{r3, r4, r5, pc}
 80099c4:	2400057c 	.word	0x2400057c

080099c8 <__errno>:
 80099c8:	4b01      	ldr	r3, [pc, #4]	; (80099d0 <__errno+0x8>)
 80099ca:	6818      	ldr	r0, [r3, #0]
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	24000084 	.word	0x24000084

080099d4 <__libc_init_array>:
 80099d4:	b570      	push	{r4, r5, r6, lr}
 80099d6:	4d0d      	ldr	r5, [pc, #52]	; (8009a0c <__libc_init_array+0x38>)
 80099d8:	4c0d      	ldr	r4, [pc, #52]	; (8009a10 <__libc_init_array+0x3c>)
 80099da:	1b64      	subs	r4, r4, r5
 80099dc:	10a4      	asrs	r4, r4, #2
 80099de:	2600      	movs	r6, #0
 80099e0:	42a6      	cmp	r6, r4
 80099e2:	d109      	bne.n	80099f8 <__libc_init_array+0x24>
 80099e4:	4d0b      	ldr	r5, [pc, #44]	; (8009a14 <__libc_init_array+0x40>)
 80099e6:	4c0c      	ldr	r4, [pc, #48]	; (8009a18 <__libc_init_array+0x44>)
 80099e8:	f001 ff48 	bl	800b87c <_init>
 80099ec:	1b64      	subs	r4, r4, r5
 80099ee:	10a4      	asrs	r4, r4, #2
 80099f0:	2600      	movs	r6, #0
 80099f2:	42a6      	cmp	r6, r4
 80099f4:	d105      	bne.n	8009a02 <__libc_init_array+0x2e>
 80099f6:	bd70      	pop	{r4, r5, r6, pc}
 80099f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80099fc:	4798      	blx	r3
 80099fe:	3601      	adds	r6, #1
 8009a00:	e7ee      	b.n	80099e0 <__libc_init_array+0xc>
 8009a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a06:	4798      	blx	r3
 8009a08:	3601      	adds	r6, #1
 8009a0a:	e7f2      	b.n	80099f2 <__libc_init_array+0x1e>
 8009a0c:	0800bca4 	.word	0x0800bca4
 8009a10:	0800bca4 	.word	0x0800bca4
 8009a14:	0800bca4 	.word	0x0800bca4
 8009a18:	0800bca8 	.word	0x0800bca8

08009a1c <__retarget_lock_acquire_recursive>:
 8009a1c:	4770      	bx	lr

08009a1e <__retarget_lock_release_recursive>:
 8009a1e:	4770      	bx	lr

08009a20 <quorem>:
 8009a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	6903      	ldr	r3, [r0, #16]
 8009a26:	690c      	ldr	r4, [r1, #16]
 8009a28:	42a3      	cmp	r3, r4
 8009a2a:	4607      	mov	r7, r0
 8009a2c:	db7e      	blt.n	8009b2c <quorem+0x10c>
 8009a2e:	3c01      	subs	r4, #1
 8009a30:	f101 0814 	add.w	r8, r1, #20
 8009a34:	f100 0514 	add.w	r5, r0, #20
 8009a38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a3c:	9301      	str	r3, [sp, #4]
 8009a3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a46:	3301      	adds	r3, #1
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009a4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a52:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a56:	d331      	bcc.n	8009abc <quorem+0x9c>
 8009a58:	f04f 0e00 	mov.w	lr, #0
 8009a5c:	4640      	mov	r0, r8
 8009a5e:	46ac      	mov	ip, r5
 8009a60:	46f2      	mov	sl, lr
 8009a62:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a66:	b293      	uxth	r3, r2
 8009a68:	fb06 e303 	mla	r3, r6, r3, lr
 8009a6c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a70:	0c1a      	lsrs	r2, r3, #16
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	ebaa 0303 	sub.w	r3, sl, r3
 8009a78:	f8dc a000 	ldr.w	sl, [ip]
 8009a7c:	fa13 f38a 	uxtah	r3, r3, sl
 8009a80:	fb06 220e 	mla	r2, r6, lr, r2
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	9b00      	ldr	r3, [sp, #0]
 8009a88:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a8c:	b292      	uxth	r2, r2
 8009a8e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009a92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a96:	f8bd 3000 	ldrh.w	r3, [sp]
 8009a9a:	4581      	cmp	r9, r0
 8009a9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009aa0:	f84c 3b04 	str.w	r3, [ip], #4
 8009aa4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009aa8:	d2db      	bcs.n	8009a62 <quorem+0x42>
 8009aaa:	f855 300b 	ldr.w	r3, [r5, fp]
 8009aae:	b92b      	cbnz	r3, 8009abc <quorem+0x9c>
 8009ab0:	9b01      	ldr	r3, [sp, #4]
 8009ab2:	3b04      	subs	r3, #4
 8009ab4:	429d      	cmp	r5, r3
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	d32c      	bcc.n	8009b14 <quorem+0xf4>
 8009aba:	613c      	str	r4, [r7, #16]
 8009abc:	4638      	mov	r0, r7
 8009abe:	f001 f86b 	bl	800ab98 <__mcmp>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	db22      	blt.n	8009b0c <quorem+0xec>
 8009ac6:	3601      	adds	r6, #1
 8009ac8:	4629      	mov	r1, r5
 8009aca:	2000      	movs	r0, #0
 8009acc:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ad0:	f8d1 c000 	ldr.w	ip, [r1]
 8009ad4:	b293      	uxth	r3, r2
 8009ad6:	1ac3      	subs	r3, r0, r3
 8009ad8:	0c12      	lsrs	r2, r2, #16
 8009ada:	fa13 f38c 	uxtah	r3, r3, ip
 8009ade:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009ae2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009aec:	45c1      	cmp	r9, r8
 8009aee:	f841 3b04 	str.w	r3, [r1], #4
 8009af2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009af6:	d2e9      	bcs.n	8009acc <quorem+0xac>
 8009af8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009afc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b00:	b922      	cbnz	r2, 8009b0c <quorem+0xec>
 8009b02:	3b04      	subs	r3, #4
 8009b04:	429d      	cmp	r5, r3
 8009b06:	461a      	mov	r2, r3
 8009b08:	d30a      	bcc.n	8009b20 <quorem+0x100>
 8009b0a:	613c      	str	r4, [r7, #16]
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	b003      	add	sp, #12
 8009b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b14:	6812      	ldr	r2, [r2, #0]
 8009b16:	3b04      	subs	r3, #4
 8009b18:	2a00      	cmp	r2, #0
 8009b1a:	d1ce      	bne.n	8009aba <quorem+0x9a>
 8009b1c:	3c01      	subs	r4, #1
 8009b1e:	e7c9      	b.n	8009ab4 <quorem+0x94>
 8009b20:	6812      	ldr	r2, [r2, #0]
 8009b22:	3b04      	subs	r3, #4
 8009b24:	2a00      	cmp	r2, #0
 8009b26:	d1f0      	bne.n	8009b0a <quorem+0xea>
 8009b28:	3c01      	subs	r4, #1
 8009b2a:	e7eb      	b.n	8009b04 <quorem+0xe4>
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	e7ee      	b.n	8009b0e <quorem+0xee>

08009b30 <_dtoa_r>:
 8009b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b34:	ed2d 8b02 	vpush	{d8}
 8009b38:	69c5      	ldr	r5, [r0, #28]
 8009b3a:	b091      	sub	sp, #68	; 0x44
 8009b3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009b40:	ec59 8b10 	vmov	r8, r9, d0
 8009b44:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009b46:	9106      	str	r1, [sp, #24]
 8009b48:	4606      	mov	r6, r0
 8009b4a:	9208      	str	r2, [sp, #32]
 8009b4c:	930c      	str	r3, [sp, #48]	; 0x30
 8009b4e:	b975      	cbnz	r5, 8009b6e <_dtoa_r+0x3e>
 8009b50:	2010      	movs	r0, #16
 8009b52:	f7ff f8d3 	bl	8008cfc <malloc>
 8009b56:	4602      	mov	r2, r0
 8009b58:	61f0      	str	r0, [r6, #28]
 8009b5a:	b920      	cbnz	r0, 8009b66 <_dtoa_r+0x36>
 8009b5c:	4ba6      	ldr	r3, [pc, #664]	; (8009df8 <_dtoa_r+0x2c8>)
 8009b5e:	21ef      	movs	r1, #239	; 0xef
 8009b60:	48a6      	ldr	r0, [pc, #664]	; (8009dfc <_dtoa_r+0x2cc>)
 8009b62:	f001 fb47 	bl	800b1f4 <__assert_func>
 8009b66:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b6a:	6005      	str	r5, [r0, #0]
 8009b6c:	60c5      	str	r5, [r0, #12]
 8009b6e:	69f3      	ldr	r3, [r6, #28]
 8009b70:	6819      	ldr	r1, [r3, #0]
 8009b72:	b151      	cbz	r1, 8009b8a <_dtoa_r+0x5a>
 8009b74:	685a      	ldr	r2, [r3, #4]
 8009b76:	604a      	str	r2, [r1, #4]
 8009b78:	2301      	movs	r3, #1
 8009b7a:	4093      	lsls	r3, r2
 8009b7c:	608b      	str	r3, [r1, #8]
 8009b7e:	4630      	mov	r0, r6
 8009b80:	f000 fdce 	bl	800a720 <_Bfree>
 8009b84:	69f3      	ldr	r3, [r6, #28]
 8009b86:	2200      	movs	r2, #0
 8009b88:	601a      	str	r2, [r3, #0]
 8009b8a:	f1b9 0300 	subs.w	r3, r9, #0
 8009b8e:	bfbb      	ittet	lt
 8009b90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b94:	9303      	strlt	r3, [sp, #12]
 8009b96:	2300      	movge	r3, #0
 8009b98:	2201      	movlt	r2, #1
 8009b9a:	bfac      	ite	ge
 8009b9c:	6023      	strge	r3, [r4, #0]
 8009b9e:	6022      	strlt	r2, [r4, #0]
 8009ba0:	4b97      	ldr	r3, [pc, #604]	; (8009e00 <_dtoa_r+0x2d0>)
 8009ba2:	9c03      	ldr	r4, [sp, #12]
 8009ba4:	43a3      	bics	r3, r4
 8009ba6:	d11c      	bne.n	8009be2 <_dtoa_r+0xb2>
 8009ba8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009baa:	f242 730f 	movw	r3, #9999	; 0x270f
 8009bae:	6013      	str	r3, [r2, #0]
 8009bb0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009bb4:	ea53 0308 	orrs.w	r3, r3, r8
 8009bb8:	f000 84fb 	beq.w	800a5b2 <_dtoa_r+0xa82>
 8009bbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009bbe:	b963      	cbnz	r3, 8009bda <_dtoa_r+0xaa>
 8009bc0:	4b90      	ldr	r3, [pc, #576]	; (8009e04 <_dtoa_r+0x2d4>)
 8009bc2:	e020      	b.n	8009c06 <_dtoa_r+0xd6>
 8009bc4:	4b90      	ldr	r3, [pc, #576]	; (8009e08 <_dtoa_r+0x2d8>)
 8009bc6:	9301      	str	r3, [sp, #4]
 8009bc8:	3308      	adds	r3, #8
 8009bca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009bcc:	6013      	str	r3, [r2, #0]
 8009bce:	9801      	ldr	r0, [sp, #4]
 8009bd0:	b011      	add	sp, #68	; 0x44
 8009bd2:	ecbd 8b02 	vpop	{d8}
 8009bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bda:	4b8a      	ldr	r3, [pc, #552]	; (8009e04 <_dtoa_r+0x2d4>)
 8009bdc:	9301      	str	r3, [sp, #4]
 8009bde:	3303      	adds	r3, #3
 8009be0:	e7f3      	b.n	8009bca <_dtoa_r+0x9a>
 8009be2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009be6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bee:	d10c      	bne.n	8009c0a <_dtoa_r+0xda>
 8009bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	6013      	str	r3, [r2, #0]
 8009bf6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 84d7 	beq.w	800a5ac <_dtoa_r+0xa7c>
 8009bfe:	4b83      	ldr	r3, [pc, #524]	; (8009e0c <_dtoa_r+0x2dc>)
 8009c00:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009c02:	6013      	str	r3, [r2, #0]
 8009c04:	3b01      	subs	r3, #1
 8009c06:	9301      	str	r3, [sp, #4]
 8009c08:	e7e1      	b.n	8009bce <_dtoa_r+0x9e>
 8009c0a:	aa0e      	add	r2, sp, #56	; 0x38
 8009c0c:	a90f      	add	r1, sp, #60	; 0x3c
 8009c0e:	4630      	mov	r0, r6
 8009c10:	eeb0 0b48 	vmov.f64	d0, d8
 8009c14:	f001 f866 	bl	800ace4 <__d2b>
 8009c18:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8009c1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c1e:	4605      	mov	r5, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d046      	beq.n	8009cb2 <_dtoa_r+0x182>
 8009c24:	eeb0 7b48 	vmov.f64	d7, d8
 8009c28:	ee18 1a90 	vmov	r1, s17
 8009c2c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009c30:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8009c34:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009c38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	ee07 1a90 	vmov	s15, r1
 8009c42:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8009c46:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8009de0 <_dtoa_r+0x2b0>
 8009c4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009c4e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8009de8 <_dtoa_r+0x2b8>
 8009c52:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009c56:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8009df0 <_dtoa_r+0x2c0>
 8009c5a:	ee07 3a90 	vmov	s15, r3
 8009c5e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009c62:	eeb0 7b46 	vmov.f64	d7, d6
 8009c66:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009c6a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009c6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c76:	ee16 ba90 	vmov	fp, s13
 8009c7a:	9009      	str	r0, [sp, #36]	; 0x24
 8009c7c:	d508      	bpl.n	8009c90 <_dtoa_r+0x160>
 8009c7e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009c82:	eeb4 6b47 	vcmp.f64	d6, d7
 8009c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c8a:	bf18      	it	ne
 8009c8c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009c90:	f1bb 0f16 	cmp.w	fp, #22
 8009c94:	d82b      	bhi.n	8009cee <_dtoa_r+0x1be>
 8009c96:	495e      	ldr	r1, [pc, #376]	; (8009e10 <_dtoa_r+0x2e0>)
 8009c98:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8009c9c:	ed91 7b00 	vldr	d7, [r1]
 8009ca0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ca8:	d501      	bpl.n	8009cae <_dtoa_r+0x17e>
 8009caa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009cae:	2100      	movs	r1, #0
 8009cb0:	e01e      	b.n	8009cf0 <_dtoa_r+0x1c0>
 8009cb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8009cba:	2920      	cmp	r1, #32
 8009cbc:	bfc1      	itttt	gt
 8009cbe:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8009cc2:	408c      	lslgt	r4, r1
 8009cc4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8009cc8:	fa28 f101 	lsrgt.w	r1, r8, r1
 8009ccc:	bfd6      	itet	le
 8009cce:	f1c1 0120 	rsble	r1, r1, #32
 8009cd2:	4321      	orrgt	r1, r4
 8009cd4:	fa08 f101 	lslle.w	r1, r8, r1
 8009cd8:	ee07 1a90 	vmov	s15, r1
 8009cdc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	ee17 1a90 	vmov	r1, s15
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009cec:	e7a7      	b.n	8009c3e <_dtoa_r+0x10e>
 8009cee:	2101      	movs	r1, #1
 8009cf0:	1ad2      	subs	r2, r2, r3
 8009cf2:	1e53      	subs	r3, r2, #1
 8009cf4:	9305      	str	r3, [sp, #20]
 8009cf6:	bf45      	ittet	mi
 8009cf8:	f1c2 0301 	rsbmi	r3, r2, #1
 8009cfc:	9304      	strmi	r3, [sp, #16]
 8009cfe:	2300      	movpl	r3, #0
 8009d00:	2300      	movmi	r3, #0
 8009d02:	bf4c      	ite	mi
 8009d04:	9305      	strmi	r3, [sp, #20]
 8009d06:	9304      	strpl	r3, [sp, #16]
 8009d08:	f1bb 0f00 	cmp.w	fp, #0
 8009d0c:	910b      	str	r1, [sp, #44]	; 0x2c
 8009d0e:	db18      	blt.n	8009d42 <_dtoa_r+0x212>
 8009d10:	9b05      	ldr	r3, [sp, #20]
 8009d12:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009d16:	445b      	add	r3, fp
 8009d18:	9305      	str	r3, [sp, #20]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	9a06      	ldr	r2, [sp, #24]
 8009d1e:	2a09      	cmp	r2, #9
 8009d20:	d848      	bhi.n	8009db4 <_dtoa_r+0x284>
 8009d22:	2a05      	cmp	r2, #5
 8009d24:	bfc4      	itt	gt
 8009d26:	3a04      	subgt	r2, #4
 8009d28:	9206      	strgt	r2, [sp, #24]
 8009d2a:	9a06      	ldr	r2, [sp, #24]
 8009d2c:	f1a2 0202 	sub.w	r2, r2, #2
 8009d30:	bfcc      	ite	gt
 8009d32:	2400      	movgt	r4, #0
 8009d34:	2401      	movle	r4, #1
 8009d36:	2a03      	cmp	r2, #3
 8009d38:	d847      	bhi.n	8009dca <_dtoa_r+0x29a>
 8009d3a:	e8df f002 	tbb	[pc, r2]
 8009d3e:	2d0b      	.short	0x2d0b
 8009d40:	392b      	.short	0x392b
 8009d42:	9b04      	ldr	r3, [sp, #16]
 8009d44:	2200      	movs	r2, #0
 8009d46:	eba3 030b 	sub.w	r3, r3, fp
 8009d4a:	9304      	str	r3, [sp, #16]
 8009d4c:	920a      	str	r2, [sp, #40]	; 0x28
 8009d4e:	f1cb 0300 	rsb	r3, fp, #0
 8009d52:	e7e3      	b.n	8009d1c <_dtoa_r+0x1ec>
 8009d54:	2200      	movs	r2, #0
 8009d56:	9207      	str	r2, [sp, #28]
 8009d58:	9a08      	ldr	r2, [sp, #32]
 8009d5a:	2a00      	cmp	r2, #0
 8009d5c:	dc38      	bgt.n	8009dd0 <_dtoa_r+0x2a0>
 8009d5e:	f04f 0a01 	mov.w	sl, #1
 8009d62:	46d1      	mov	r9, sl
 8009d64:	4652      	mov	r2, sl
 8009d66:	f8cd a020 	str.w	sl, [sp, #32]
 8009d6a:	69f7      	ldr	r7, [r6, #28]
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	2004      	movs	r0, #4
 8009d70:	f100 0c14 	add.w	ip, r0, #20
 8009d74:	4594      	cmp	ip, r2
 8009d76:	d930      	bls.n	8009dda <_dtoa_r+0x2aa>
 8009d78:	6079      	str	r1, [r7, #4]
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	930d      	str	r3, [sp, #52]	; 0x34
 8009d7e:	f000 fc8f 	bl	800a6a0 <_Balloc>
 8009d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d84:	9001      	str	r0, [sp, #4]
 8009d86:	4602      	mov	r2, r0
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d145      	bne.n	8009e18 <_dtoa_r+0x2e8>
 8009d8c:	4b21      	ldr	r3, [pc, #132]	; (8009e14 <_dtoa_r+0x2e4>)
 8009d8e:	f240 11af 	movw	r1, #431	; 0x1af
 8009d92:	e6e5      	b.n	8009b60 <_dtoa_r+0x30>
 8009d94:	2201      	movs	r2, #1
 8009d96:	e7de      	b.n	8009d56 <_dtoa_r+0x226>
 8009d98:	2200      	movs	r2, #0
 8009d9a:	9207      	str	r2, [sp, #28]
 8009d9c:	9a08      	ldr	r2, [sp, #32]
 8009d9e:	eb0b 0a02 	add.w	sl, fp, r2
 8009da2:	f10a 0901 	add.w	r9, sl, #1
 8009da6:	464a      	mov	r2, r9
 8009da8:	2a01      	cmp	r2, #1
 8009daa:	bfb8      	it	lt
 8009dac:	2201      	movlt	r2, #1
 8009dae:	e7dc      	b.n	8009d6a <_dtoa_r+0x23a>
 8009db0:	2201      	movs	r2, #1
 8009db2:	e7f2      	b.n	8009d9a <_dtoa_r+0x26a>
 8009db4:	2401      	movs	r4, #1
 8009db6:	2200      	movs	r2, #0
 8009db8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009dbc:	f04f 3aff 	mov.w	sl, #4294967295
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	46d1      	mov	r9, sl
 8009dc4:	2212      	movs	r2, #18
 8009dc6:	9108      	str	r1, [sp, #32]
 8009dc8:	e7cf      	b.n	8009d6a <_dtoa_r+0x23a>
 8009dca:	2201      	movs	r2, #1
 8009dcc:	9207      	str	r2, [sp, #28]
 8009dce:	e7f5      	b.n	8009dbc <_dtoa_r+0x28c>
 8009dd0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009dd4:	46d1      	mov	r9, sl
 8009dd6:	4652      	mov	r2, sl
 8009dd8:	e7c7      	b.n	8009d6a <_dtoa_r+0x23a>
 8009dda:	3101      	adds	r1, #1
 8009ddc:	0040      	lsls	r0, r0, #1
 8009dde:	e7c7      	b.n	8009d70 <_dtoa_r+0x240>
 8009de0:	636f4361 	.word	0x636f4361
 8009de4:	3fd287a7 	.word	0x3fd287a7
 8009de8:	8b60c8b3 	.word	0x8b60c8b3
 8009dec:	3fc68a28 	.word	0x3fc68a28
 8009df0:	509f79fb 	.word	0x509f79fb
 8009df4:	3fd34413 	.word	0x3fd34413
 8009df8:	0800b969 	.word	0x0800b969
 8009dfc:	0800b980 	.word	0x0800b980
 8009e00:	7ff00000 	.word	0x7ff00000
 8009e04:	0800b965 	.word	0x0800b965
 8009e08:	0800b95c 	.word	0x0800b95c
 8009e0c:	0800b939 	.word	0x0800b939
 8009e10:	0800ba70 	.word	0x0800ba70
 8009e14:	0800b9d8 	.word	0x0800b9d8
 8009e18:	69f2      	ldr	r2, [r6, #28]
 8009e1a:	9901      	ldr	r1, [sp, #4]
 8009e1c:	6011      	str	r1, [r2, #0]
 8009e1e:	f1b9 0f0e 	cmp.w	r9, #14
 8009e22:	d86c      	bhi.n	8009efe <_dtoa_r+0x3ce>
 8009e24:	2c00      	cmp	r4, #0
 8009e26:	d06a      	beq.n	8009efe <_dtoa_r+0x3ce>
 8009e28:	f1bb 0f00 	cmp.w	fp, #0
 8009e2c:	f340 80a0 	ble.w	8009f70 <_dtoa_r+0x440>
 8009e30:	4ac1      	ldr	r2, [pc, #772]	; (800a138 <_dtoa_r+0x608>)
 8009e32:	f00b 010f 	and.w	r1, fp, #15
 8009e36:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009e3a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009e3e:	ed92 7b00 	vldr	d7, [r2]
 8009e42:	ea4f 122b 	mov.w	r2, fp, asr #4
 8009e46:	f000 8087 	beq.w	8009f58 <_dtoa_r+0x428>
 8009e4a:	49bc      	ldr	r1, [pc, #752]	; (800a13c <_dtoa_r+0x60c>)
 8009e4c:	ed91 6b08 	vldr	d6, [r1, #32]
 8009e50:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009e54:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009e58:	f002 020f 	and.w	r2, r2, #15
 8009e5c:	2103      	movs	r1, #3
 8009e5e:	48b7      	ldr	r0, [pc, #732]	; (800a13c <_dtoa_r+0x60c>)
 8009e60:	2a00      	cmp	r2, #0
 8009e62:	d17b      	bne.n	8009f5c <_dtoa_r+0x42c>
 8009e64:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009e68:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009e6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009e70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e72:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e76:	2a00      	cmp	r2, #0
 8009e78:	f000 80a0 	beq.w	8009fbc <_dtoa_r+0x48c>
 8009e7c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009e80:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e88:	f140 8098 	bpl.w	8009fbc <_dtoa_r+0x48c>
 8009e8c:	f1b9 0f00 	cmp.w	r9, #0
 8009e90:	f000 8094 	beq.w	8009fbc <_dtoa_r+0x48c>
 8009e94:	f1ba 0f00 	cmp.w	sl, #0
 8009e98:	dd2f      	ble.n	8009efa <_dtoa_r+0x3ca>
 8009e9a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009e9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009ea2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ea6:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009eaa:	3101      	adds	r1, #1
 8009eac:	4654      	mov	r4, sl
 8009eae:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009eb2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009eb6:	ee07 1a90 	vmov	s15, r1
 8009eba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009ebe:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009ec2:	ee15 7a90 	vmov	r7, s11
 8009ec6:	ec51 0b15 	vmov	r0, r1, d5
 8009eca:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8009ece:	2c00      	cmp	r4, #0
 8009ed0:	d177      	bne.n	8009fc2 <_dtoa_r+0x492>
 8009ed2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009ed6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009eda:	ec41 0b17 	vmov	d7, r0, r1
 8009ede:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ee6:	f300 826a 	bgt.w	800a3be <_dtoa_r+0x88e>
 8009eea:	eeb1 7b47 	vneg.f64	d7, d7
 8009eee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ef6:	f100 8260 	bmi.w	800a3ba <_dtoa_r+0x88a>
 8009efa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009efe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f00:	2a00      	cmp	r2, #0
 8009f02:	f2c0 811d 	blt.w	800a140 <_dtoa_r+0x610>
 8009f06:	f1bb 0f0e 	cmp.w	fp, #14
 8009f0a:	f300 8119 	bgt.w	800a140 <_dtoa_r+0x610>
 8009f0e:	4b8a      	ldr	r3, [pc, #552]	; (800a138 <_dtoa_r+0x608>)
 8009f10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009f14:	ed93 6b00 	vldr	d6, [r3]
 8009f18:	9b08      	ldr	r3, [sp, #32]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f280 80b7 	bge.w	800a08e <_dtoa_r+0x55e>
 8009f20:	f1b9 0f00 	cmp.w	r9, #0
 8009f24:	f300 80b3 	bgt.w	800a08e <_dtoa_r+0x55e>
 8009f28:	f040 8246 	bne.w	800a3b8 <_dtoa_r+0x888>
 8009f2c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009f30:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009f34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f38:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f40:	464c      	mov	r4, r9
 8009f42:	464f      	mov	r7, r9
 8009f44:	f280 821c 	bge.w	800a380 <_dtoa_r+0x850>
 8009f48:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009f4c:	2331      	movs	r3, #49	; 0x31
 8009f4e:	f808 3b01 	strb.w	r3, [r8], #1
 8009f52:	f10b 0b01 	add.w	fp, fp, #1
 8009f56:	e218      	b.n	800a38a <_dtoa_r+0x85a>
 8009f58:	2102      	movs	r1, #2
 8009f5a:	e780      	b.n	8009e5e <_dtoa_r+0x32e>
 8009f5c:	07d4      	lsls	r4, r2, #31
 8009f5e:	d504      	bpl.n	8009f6a <_dtoa_r+0x43a>
 8009f60:	ed90 6b00 	vldr	d6, [r0]
 8009f64:	3101      	adds	r1, #1
 8009f66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009f6a:	1052      	asrs	r2, r2, #1
 8009f6c:	3008      	adds	r0, #8
 8009f6e:	e777      	b.n	8009e60 <_dtoa_r+0x330>
 8009f70:	d022      	beq.n	8009fb8 <_dtoa_r+0x488>
 8009f72:	f1cb 0200 	rsb	r2, fp, #0
 8009f76:	4970      	ldr	r1, [pc, #448]	; (800a138 <_dtoa_r+0x608>)
 8009f78:	f002 000f 	and.w	r0, r2, #15
 8009f7c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009f80:	ed91 7b00 	vldr	d7, [r1]
 8009f84:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009f88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009f8c:	486b      	ldr	r0, [pc, #428]	; (800a13c <_dtoa_r+0x60c>)
 8009f8e:	1112      	asrs	r2, r2, #4
 8009f90:	2400      	movs	r4, #0
 8009f92:	2102      	movs	r1, #2
 8009f94:	b92a      	cbnz	r2, 8009fa2 <_dtoa_r+0x472>
 8009f96:	2c00      	cmp	r4, #0
 8009f98:	f43f af6a 	beq.w	8009e70 <_dtoa_r+0x340>
 8009f9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009fa0:	e766      	b.n	8009e70 <_dtoa_r+0x340>
 8009fa2:	07d7      	lsls	r7, r2, #31
 8009fa4:	d505      	bpl.n	8009fb2 <_dtoa_r+0x482>
 8009fa6:	ed90 6b00 	vldr	d6, [r0]
 8009faa:	3101      	adds	r1, #1
 8009fac:	2401      	movs	r4, #1
 8009fae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009fb2:	1052      	asrs	r2, r2, #1
 8009fb4:	3008      	adds	r0, #8
 8009fb6:	e7ed      	b.n	8009f94 <_dtoa_r+0x464>
 8009fb8:	2102      	movs	r1, #2
 8009fba:	e759      	b.n	8009e70 <_dtoa_r+0x340>
 8009fbc:	465a      	mov	r2, fp
 8009fbe:	464c      	mov	r4, r9
 8009fc0:	e775      	b.n	8009eae <_dtoa_r+0x37e>
 8009fc2:	ec41 0b17 	vmov	d7, r0, r1
 8009fc6:	495c      	ldr	r1, [pc, #368]	; (800a138 <_dtoa_r+0x608>)
 8009fc8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8009fcc:	ed11 4b02 	vldr	d4, [r1, #-8]
 8009fd0:	9901      	ldr	r1, [sp, #4]
 8009fd2:	440c      	add	r4, r1
 8009fd4:	9907      	ldr	r1, [sp, #28]
 8009fd6:	b351      	cbz	r1, 800a02e <_dtoa_r+0x4fe>
 8009fd8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009fdc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009fe0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009fe4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009fe8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009fec:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009ff0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009ff4:	ee14 1a90 	vmov	r1, s9
 8009ff8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009ffc:	3130      	adds	r1, #48	; 0x30
 8009ffe:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a002:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a00a:	f808 1b01 	strb.w	r1, [r8], #1
 800a00e:	d439      	bmi.n	800a084 <_dtoa_r+0x554>
 800a010:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a014:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a01c:	d472      	bmi.n	800a104 <_dtoa_r+0x5d4>
 800a01e:	45a0      	cmp	r8, r4
 800a020:	f43f af6b 	beq.w	8009efa <_dtoa_r+0x3ca>
 800a024:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a028:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a02c:	e7e0      	b.n	8009ff0 <_dtoa_r+0x4c0>
 800a02e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a032:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a036:	4620      	mov	r0, r4
 800a038:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a03c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a040:	ee14 1a90 	vmov	r1, s9
 800a044:	3130      	adds	r1, #48	; 0x30
 800a046:	f808 1b01 	strb.w	r1, [r8], #1
 800a04a:	45a0      	cmp	r8, r4
 800a04c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a050:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a054:	d118      	bne.n	800a088 <_dtoa_r+0x558>
 800a056:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a05a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a05e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a066:	dc4d      	bgt.n	800a104 <_dtoa_r+0x5d4>
 800a068:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a06c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a074:	f57f af41 	bpl.w	8009efa <_dtoa_r+0x3ca>
 800a078:	4680      	mov	r8, r0
 800a07a:	3801      	subs	r0, #1
 800a07c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a080:	2b30      	cmp	r3, #48	; 0x30
 800a082:	d0f9      	beq.n	800a078 <_dtoa_r+0x548>
 800a084:	4693      	mov	fp, r2
 800a086:	e02a      	b.n	800a0de <_dtoa_r+0x5ae>
 800a088:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a08c:	e7d6      	b.n	800a03c <_dtoa_r+0x50c>
 800a08e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a092:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a096:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a09a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a09e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a0a2:	ee15 3a10 	vmov	r3, s10
 800a0a6:	3330      	adds	r3, #48	; 0x30
 800a0a8:	f808 3b01 	strb.w	r3, [r8], #1
 800a0ac:	9b01      	ldr	r3, [sp, #4]
 800a0ae:	eba8 0303 	sub.w	r3, r8, r3
 800a0b2:	4599      	cmp	r9, r3
 800a0b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a0b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a0bc:	d133      	bne.n	800a126 <_dtoa_r+0x5f6>
 800a0be:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a0c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ca:	dc1a      	bgt.n	800a102 <_dtoa_r+0x5d2>
 800a0cc:	eeb4 7b46 	vcmp.f64	d7, d6
 800a0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0d4:	d103      	bne.n	800a0de <_dtoa_r+0x5ae>
 800a0d6:	ee15 3a10 	vmov	r3, s10
 800a0da:	07d9      	lsls	r1, r3, #31
 800a0dc:	d411      	bmi.n	800a102 <_dtoa_r+0x5d2>
 800a0de:	4629      	mov	r1, r5
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f000 fb1d 	bl	800a720 <_Bfree>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0ea:	f888 3000 	strb.w	r3, [r8]
 800a0ee:	f10b 0301 	add.w	r3, fp, #1
 800a0f2:	6013      	str	r3, [r2, #0]
 800a0f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f43f ad69 	beq.w	8009bce <_dtoa_r+0x9e>
 800a0fc:	f8c3 8000 	str.w	r8, [r3]
 800a100:	e565      	b.n	8009bce <_dtoa_r+0x9e>
 800a102:	465a      	mov	r2, fp
 800a104:	4643      	mov	r3, r8
 800a106:	4698      	mov	r8, r3
 800a108:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800a10c:	2939      	cmp	r1, #57	; 0x39
 800a10e:	d106      	bne.n	800a11e <_dtoa_r+0x5ee>
 800a110:	9901      	ldr	r1, [sp, #4]
 800a112:	4299      	cmp	r1, r3
 800a114:	d1f7      	bne.n	800a106 <_dtoa_r+0x5d6>
 800a116:	9801      	ldr	r0, [sp, #4]
 800a118:	2130      	movs	r1, #48	; 0x30
 800a11a:	3201      	adds	r2, #1
 800a11c:	7001      	strb	r1, [r0, #0]
 800a11e:	7819      	ldrb	r1, [r3, #0]
 800a120:	3101      	adds	r1, #1
 800a122:	7019      	strb	r1, [r3, #0]
 800a124:	e7ae      	b.n	800a084 <_dtoa_r+0x554>
 800a126:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a12a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a132:	d1b2      	bne.n	800a09a <_dtoa_r+0x56a>
 800a134:	e7d3      	b.n	800a0de <_dtoa_r+0x5ae>
 800a136:	bf00      	nop
 800a138:	0800ba70 	.word	0x0800ba70
 800a13c:	0800ba48 	.word	0x0800ba48
 800a140:	9907      	ldr	r1, [sp, #28]
 800a142:	2900      	cmp	r1, #0
 800a144:	f000 80d0 	beq.w	800a2e8 <_dtoa_r+0x7b8>
 800a148:	9906      	ldr	r1, [sp, #24]
 800a14a:	2901      	cmp	r1, #1
 800a14c:	f300 80b4 	bgt.w	800a2b8 <_dtoa_r+0x788>
 800a150:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a152:	2900      	cmp	r1, #0
 800a154:	f000 80ac 	beq.w	800a2b0 <_dtoa_r+0x780>
 800a158:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a15c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a160:	461c      	mov	r4, r3
 800a162:	9309      	str	r3, [sp, #36]	; 0x24
 800a164:	9b04      	ldr	r3, [sp, #16]
 800a166:	4413      	add	r3, r2
 800a168:	9304      	str	r3, [sp, #16]
 800a16a:	9b05      	ldr	r3, [sp, #20]
 800a16c:	2101      	movs	r1, #1
 800a16e:	4413      	add	r3, r2
 800a170:	4630      	mov	r0, r6
 800a172:	9305      	str	r3, [sp, #20]
 800a174:	f000 fb8a 	bl	800a88c <__i2b>
 800a178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a17a:	4607      	mov	r7, r0
 800a17c:	f1b8 0f00 	cmp.w	r8, #0
 800a180:	d00d      	beq.n	800a19e <_dtoa_r+0x66e>
 800a182:	9a05      	ldr	r2, [sp, #20]
 800a184:	2a00      	cmp	r2, #0
 800a186:	dd0a      	ble.n	800a19e <_dtoa_r+0x66e>
 800a188:	4542      	cmp	r2, r8
 800a18a:	9904      	ldr	r1, [sp, #16]
 800a18c:	bfa8      	it	ge
 800a18e:	4642      	movge	r2, r8
 800a190:	1a89      	subs	r1, r1, r2
 800a192:	9104      	str	r1, [sp, #16]
 800a194:	9905      	ldr	r1, [sp, #20]
 800a196:	eba8 0802 	sub.w	r8, r8, r2
 800a19a:	1a8a      	subs	r2, r1, r2
 800a19c:	9205      	str	r2, [sp, #20]
 800a19e:	b303      	cbz	r3, 800a1e2 <_dtoa_r+0x6b2>
 800a1a0:	9a07      	ldr	r2, [sp, #28]
 800a1a2:	2a00      	cmp	r2, #0
 800a1a4:	f000 80a5 	beq.w	800a2f2 <_dtoa_r+0x7c2>
 800a1a8:	2c00      	cmp	r4, #0
 800a1aa:	dd13      	ble.n	800a1d4 <_dtoa_r+0x6a4>
 800a1ac:	4639      	mov	r1, r7
 800a1ae:	4622      	mov	r2, r4
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	930d      	str	r3, [sp, #52]	; 0x34
 800a1b4:	f000 fc2a 	bl	800aa0c <__pow5mult>
 800a1b8:	462a      	mov	r2, r5
 800a1ba:	4601      	mov	r1, r0
 800a1bc:	4607      	mov	r7, r0
 800a1be:	4630      	mov	r0, r6
 800a1c0:	f000 fb7a 	bl	800a8b8 <__multiply>
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	9009      	str	r0, [sp, #36]	; 0x24
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	f000 faa9 	bl	800a720 <_Bfree>
 800a1ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1d2:	4615      	mov	r5, r2
 800a1d4:	1b1a      	subs	r2, r3, r4
 800a1d6:	d004      	beq.n	800a1e2 <_dtoa_r+0x6b2>
 800a1d8:	4629      	mov	r1, r5
 800a1da:	4630      	mov	r0, r6
 800a1dc:	f000 fc16 	bl	800aa0c <__pow5mult>
 800a1e0:	4605      	mov	r5, r0
 800a1e2:	2101      	movs	r1, #1
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	f000 fb51 	bl	800a88c <__i2b>
 800a1ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	f340 8081 	ble.w	800a2f6 <_dtoa_r+0x7c6>
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	4601      	mov	r1, r0
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	f000 fc07 	bl	800aa0c <__pow5mult>
 800a1fe:	9b06      	ldr	r3, [sp, #24]
 800a200:	2b01      	cmp	r3, #1
 800a202:	4604      	mov	r4, r0
 800a204:	dd7a      	ble.n	800a2fc <_dtoa_r+0x7cc>
 800a206:	2300      	movs	r3, #0
 800a208:	9309      	str	r3, [sp, #36]	; 0x24
 800a20a:	6922      	ldr	r2, [r4, #16]
 800a20c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a210:	6910      	ldr	r0, [r2, #16]
 800a212:	f000 faed 	bl	800a7f0 <__hi0bits>
 800a216:	f1c0 0020 	rsb	r0, r0, #32
 800a21a:	9b05      	ldr	r3, [sp, #20]
 800a21c:	4418      	add	r0, r3
 800a21e:	f010 001f 	ands.w	r0, r0, #31
 800a222:	f000 8093 	beq.w	800a34c <_dtoa_r+0x81c>
 800a226:	f1c0 0220 	rsb	r2, r0, #32
 800a22a:	2a04      	cmp	r2, #4
 800a22c:	f340 8085 	ble.w	800a33a <_dtoa_r+0x80a>
 800a230:	9b04      	ldr	r3, [sp, #16]
 800a232:	f1c0 001c 	rsb	r0, r0, #28
 800a236:	4403      	add	r3, r0
 800a238:	9304      	str	r3, [sp, #16]
 800a23a:	9b05      	ldr	r3, [sp, #20]
 800a23c:	4480      	add	r8, r0
 800a23e:	4403      	add	r3, r0
 800a240:	9305      	str	r3, [sp, #20]
 800a242:	9b04      	ldr	r3, [sp, #16]
 800a244:	2b00      	cmp	r3, #0
 800a246:	dd05      	ble.n	800a254 <_dtoa_r+0x724>
 800a248:	4629      	mov	r1, r5
 800a24a:	461a      	mov	r2, r3
 800a24c:	4630      	mov	r0, r6
 800a24e:	f000 fc37 	bl	800aac0 <__lshift>
 800a252:	4605      	mov	r5, r0
 800a254:	9b05      	ldr	r3, [sp, #20]
 800a256:	2b00      	cmp	r3, #0
 800a258:	dd05      	ble.n	800a266 <_dtoa_r+0x736>
 800a25a:	4621      	mov	r1, r4
 800a25c:	461a      	mov	r2, r3
 800a25e:	4630      	mov	r0, r6
 800a260:	f000 fc2e 	bl	800aac0 <__lshift>
 800a264:	4604      	mov	r4, r0
 800a266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d071      	beq.n	800a350 <_dtoa_r+0x820>
 800a26c:	4621      	mov	r1, r4
 800a26e:	4628      	mov	r0, r5
 800a270:	f000 fc92 	bl	800ab98 <__mcmp>
 800a274:	2800      	cmp	r0, #0
 800a276:	da6b      	bge.n	800a350 <_dtoa_r+0x820>
 800a278:	2300      	movs	r3, #0
 800a27a:	4629      	mov	r1, r5
 800a27c:	220a      	movs	r2, #10
 800a27e:	4630      	mov	r0, r6
 800a280:	f000 fa70 	bl	800a764 <__multadd>
 800a284:	9b07      	ldr	r3, [sp, #28]
 800a286:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a28a:	4605      	mov	r5, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f000 8197 	beq.w	800a5c0 <_dtoa_r+0xa90>
 800a292:	4639      	mov	r1, r7
 800a294:	2300      	movs	r3, #0
 800a296:	220a      	movs	r2, #10
 800a298:	4630      	mov	r0, r6
 800a29a:	f000 fa63 	bl	800a764 <__multadd>
 800a29e:	f1ba 0f00 	cmp.w	sl, #0
 800a2a2:	4607      	mov	r7, r0
 800a2a4:	f300 8093 	bgt.w	800a3ce <_dtoa_r+0x89e>
 800a2a8:	9b06      	ldr	r3, [sp, #24]
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	dc57      	bgt.n	800a35e <_dtoa_r+0x82e>
 800a2ae:	e08e      	b.n	800a3ce <_dtoa_r+0x89e>
 800a2b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a2b6:	e751      	b.n	800a15c <_dtoa_r+0x62c>
 800a2b8:	f109 34ff 	add.w	r4, r9, #4294967295
 800a2bc:	42a3      	cmp	r3, r4
 800a2be:	bfbf      	itttt	lt
 800a2c0:	1ae2      	sublt	r2, r4, r3
 800a2c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a2c4:	189b      	addlt	r3, r3, r2
 800a2c6:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a2c8:	bfae      	itee	ge
 800a2ca:	1b1c      	subge	r4, r3, r4
 800a2cc:	4623      	movlt	r3, r4
 800a2ce:	2400      	movlt	r4, #0
 800a2d0:	f1b9 0f00 	cmp.w	r9, #0
 800a2d4:	bfb5      	itete	lt
 800a2d6:	9a04      	ldrlt	r2, [sp, #16]
 800a2d8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a2dc:	eba2 0809 	sublt.w	r8, r2, r9
 800a2e0:	464a      	movge	r2, r9
 800a2e2:	bfb8      	it	lt
 800a2e4:	2200      	movlt	r2, #0
 800a2e6:	e73c      	b.n	800a162 <_dtoa_r+0x632>
 800a2e8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a2ec:	9f07      	ldr	r7, [sp, #28]
 800a2ee:	461c      	mov	r4, r3
 800a2f0:	e744      	b.n	800a17c <_dtoa_r+0x64c>
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	e770      	b.n	800a1d8 <_dtoa_r+0x6a8>
 800a2f6:	9b06      	ldr	r3, [sp, #24]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	dc18      	bgt.n	800a32e <_dtoa_r+0x7fe>
 800a2fc:	9b02      	ldr	r3, [sp, #8]
 800a2fe:	b9b3      	cbnz	r3, 800a32e <_dtoa_r+0x7fe>
 800a300:	9b03      	ldr	r3, [sp, #12]
 800a302:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a306:	b9a2      	cbnz	r2, 800a332 <_dtoa_r+0x802>
 800a308:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a30c:	0d12      	lsrs	r2, r2, #20
 800a30e:	0512      	lsls	r2, r2, #20
 800a310:	b18a      	cbz	r2, 800a336 <_dtoa_r+0x806>
 800a312:	9b04      	ldr	r3, [sp, #16]
 800a314:	3301      	adds	r3, #1
 800a316:	9304      	str	r3, [sp, #16]
 800a318:	9b05      	ldr	r3, [sp, #20]
 800a31a:	3301      	adds	r3, #1
 800a31c:	9305      	str	r3, [sp, #20]
 800a31e:	2301      	movs	r3, #1
 800a320:	9309      	str	r3, [sp, #36]	; 0x24
 800a322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a324:	2b00      	cmp	r3, #0
 800a326:	f47f af70 	bne.w	800a20a <_dtoa_r+0x6da>
 800a32a:	2001      	movs	r0, #1
 800a32c:	e775      	b.n	800a21a <_dtoa_r+0x6ea>
 800a32e:	2300      	movs	r3, #0
 800a330:	e7f6      	b.n	800a320 <_dtoa_r+0x7f0>
 800a332:	9b02      	ldr	r3, [sp, #8]
 800a334:	e7f4      	b.n	800a320 <_dtoa_r+0x7f0>
 800a336:	9209      	str	r2, [sp, #36]	; 0x24
 800a338:	e7f3      	b.n	800a322 <_dtoa_r+0x7f2>
 800a33a:	d082      	beq.n	800a242 <_dtoa_r+0x712>
 800a33c:	9b04      	ldr	r3, [sp, #16]
 800a33e:	321c      	adds	r2, #28
 800a340:	4413      	add	r3, r2
 800a342:	9304      	str	r3, [sp, #16]
 800a344:	9b05      	ldr	r3, [sp, #20]
 800a346:	4490      	add	r8, r2
 800a348:	4413      	add	r3, r2
 800a34a:	e779      	b.n	800a240 <_dtoa_r+0x710>
 800a34c:	4602      	mov	r2, r0
 800a34e:	e7f5      	b.n	800a33c <_dtoa_r+0x80c>
 800a350:	f1b9 0f00 	cmp.w	r9, #0
 800a354:	dc36      	bgt.n	800a3c4 <_dtoa_r+0x894>
 800a356:	9b06      	ldr	r3, [sp, #24]
 800a358:	2b02      	cmp	r3, #2
 800a35a:	dd33      	ble.n	800a3c4 <_dtoa_r+0x894>
 800a35c:	46ca      	mov	sl, r9
 800a35e:	f1ba 0f00 	cmp.w	sl, #0
 800a362:	d10d      	bne.n	800a380 <_dtoa_r+0x850>
 800a364:	4621      	mov	r1, r4
 800a366:	4653      	mov	r3, sl
 800a368:	2205      	movs	r2, #5
 800a36a:	4630      	mov	r0, r6
 800a36c:	f000 f9fa 	bl	800a764 <__multadd>
 800a370:	4601      	mov	r1, r0
 800a372:	4604      	mov	r4, r0
 800a374:	4628      	mov	r0, r5
 800a376:	f000 fc0f 	bl	800ab98 <__mcmp>
 800a37a:	2800      	cmp	r0, #0
 800a37c:	f73f ade4 	bgt.w	8009f48 <_dtoa_r+0x418>
 800a380:	9b08      	ldr	r3, [sp, #32]
 800a382:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a386:	ea6f 0b03 	mvn.w	fp, r3
 800a38a:	f04f 0900 	mov.w	r9, #0
 800a38e:	4621      	mov	r1, r4
 800a390:	4630      	mov	r0, r6
 800a392:	f000 f9c5 	bl	800a720 <_Bfree>
 800a396:	2f00      	cmp	r7, #0
 800a398:	f43f aea1 	beq.w	800a0de <_dtoa_r+0x5ae>
 800a39c:	f1b9 0f00 	cmp.w	r9, #0
 800a3a0:	d005      	beq.n	800a3ae <_dtoa_r+0x87e>
 800a3a2:	45b9      	cmp	r9, r7
 800a3a4:	d003      	beq.n	800a3ae <_dtoa_r+0x87e>
 800a3a6:	4649      	mov	r1, r9
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	f000 f9b9 	bl	800a720 <_Bfree>
 800a3ae:	4639      	mov	r1, r7
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	f000 f9b5 	bl	800a720 <_Bfree>
 800a3b6:	e692      	b.n	800a0de <_dtoa_r+0x5ae>
 800a3b8:	2400      	movs	r4, #0
 800a3ba:	4627      	mov	r7, r4
 800a3bc:	e7e0      	b.n	800a380 <_dtoa_r+0x850>
 800a3be:	4693      	mov	fp, r2
 800a3c0:	4627      	mov	r7, r4
 800a3c2:	e5c1      	b.n	8009f48 <_dtoa_r+0x418>
 800a3c4:	9b07      	ldr	r3, [sp, #28]
 800a3c6:	46ca      	mov	sl, r9
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f000 8100 	beq.w	800a5ce <_dtoa_r+0xa9e>
 800a3ce:	f1b8 0f00 	cmp.w	r8, #0
 800a3d2:	dd05      	ble.n	800a3e0 <_dtoa_r+0x8b0>
 800a3d4:	4639      	mov	r1, r7
 800a3d6:	4642      	mov	r2, r8
 800a3d8:	4630      	mov	r0, r6
 800a3da:	f000 fb71 	bl	800aac0 <__lshift>
 800a3de:	4607      	mov	r7, r0
 800a3e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d05d      	beq.n	800a4a2 <_dtoa_r+0x972>
 800a3e6:	6879      	ldr	r1, [r7, #4]
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	f000 f959 	bl	800a6a0 <_Balloc>
 800a3ee:	4680      	mov	r8, r0
 800a3f0:	b928      	cbnz	r0, 800a3fe <_dtoa_r+0x8ce>
 800a3f2:	4b82      	ldr	r3, [pc, #520]	; (800a5fc <_dtoa_r+0xacc>)
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a3fa:	f7ff bbb1 	b.w	8009b60 <_dtoa_r+0x30>
 800a3fe:	693a      	ldr	r2, [r7, #16]
 800a400:	3202      	adds	r2, #2
 800a402:	0092      	lsls	r2, r2, #2
 800a404:	f107 010c 	add.w	r1, r7, #12
 800a408:	300c      	adds	r0, #12
 800a40a:	f000 fee5 	bl	800b1d8 <memcpy>
 800a40e:	2201      	movs	r2, #1
 800a410:	4641      	mov	r1, r8
 800a412:	4630      	mov	r0, r6
 800a414:	f000 fb54 	bl	800aac0 <__lshift>
 800a418:	9b01      	ldr	r3, [sp, #4]
 800a41a:	3301      	adds	r3, #1
 800a41c:	9304      	str	r3, [sp, #16]
 800a41e:	9b01      	ldr	r3, [sp, #4]
 800a420:	4453      	add	r3, sl
 800a422:	9308      	str	r3, [sp, #32]
 800a424:	9b02      	ldr	r3, [sp, #8]
 800a426:	f003 0301 	and.w	r3, r3, #1
 800a42a:	46b9      	mov	r9, r7
 800a42c:	9307      	str	r3, [sp, #28]
 800a42e:	4607      	mov	r7, r0
 800a430:	9b04      	ldr	r3, [sp, #16]
 800a432:	4621      	mov	r1, r4
 800a434:	3b01      	subs	r3, #1
 800a436:	4628      	mov	r0, r5
 800a438:	9302      	str	r3, [sp, #8]
 800a43a:	f7ff faf1 	bl	8009a20 <quorem>
 800a43e:	4603      	mov	r3, r0
 800a440:	3330      	adds	r3, #48	; 0x30
 800a442:	9005      	str	r0, [sp, #20]
 800a444:	4649      	mov	r1, r9
 800a446:	4628      	mov	r0, r5
 800a448:	9309      	str	r3, [sp, #36]	; 0x24
 800a44a:	f000 fba5 	bl	800ab98 <__mcmp>
 800a44e:	463a      	mov	r2, r7
 800a450:	4682      	mov	sl, r0
 800a452:	4621      	mov	r1, r4
 800a454:	4630      	mov	r0, r6
 800a456:	f000 fbbb 	bl	800abd0 <__mdiff>
 800a45a:	68c2      	ldr	r2, [r0, #12]
 800a45c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a45e:	4680      	mov	r8, r0
 800a460:	bb0a      	cbnz	r2, 800a4a6 <_dtoa_r+0x976>
 800a462:	4601      	mov	r1, r0
 800a464:	4628      	mov	r0, r5
 800a466:	f000 fb97 	bl	800ab98 <__mcmp>
 800a46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a46c:	4602      	mov	r2, r0
 800a46e:	4641      	mov	r1, r8
 800a470:	4630      	mov	r0, r6
 800a472:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a476:	f000 f953 	bl	800a720 <_Bfree>
 800a47a:	9b06      	ldr	r3, [sp, #24]
 800a47c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a47e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a482:	ea43 0102 	orr.w	r1, r3, r2
 800a486:	9b07      	ldr	r3, [sp, #28]
 800a488:	4319      	orrs	r1, r3
 800a48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a48c:	d10d      	bne.n	800a4aa <_dtoa_r+0x97a>
 800a48e:	2b39      	cmp	r3, #57	; 0x39
 800a490:	d029      	beq.n	800a4e6 <_dtoa_r+0x9b6>
 800a492:	f1ba 0f00 	cmp.w	sl, #0
 800a496:	dd01      	ble.n	800a49c <_dtoa_r+0x96c>
 800a498:	9b05      	ldr	r3, [sp, #20]
 800a49a:	3331      	adds	r3, #49	; 0x31
 800a49c:	9a02      	ldr	r2, [sp, #8]
 800a49e:	7013      	strb	r3, [r2, #0]
 800a4a0:	e775      	b.n	800a38e <_dtoa_r+0x85e>
 800a4a2:	4638      	mov	r0, r7
 800a4a4:	e7b8      	b.n	800a418 <_dtoa_r+0x8e8>
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	e7e1      	b.n	800a46e <_dtoa_r+0x93e>
 800a4aa:	f1ba 0f00 	cmp.w	sl, #0
 800a4ae:	db06      	blt.n	800a4be <_dtoa_r+0x98e>
 800a4b0:	9906      	ldr	r1, [sp, #24]
 800a4b2:	ea41 0a0a 	orr.w	sl, r1, sl
 800a4b6:	9907      	ldr	r1, [sp, #28]
 800a4b8:	ea5a 0a01 	orrs.w	sl, sl, r1
 800a4bc:	d120      	bne.n	800a500 <_dtoa_r+0x9d0>
 800a4be:	2a00      	cmp	r2, #0
 800a4c0:	ddec      	ble.n	800a49c <_dtoa_r+0x96c>
 800a4c2:	4629      	mov	r1, r5
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	9304      	str	r3, [sp, #16]
 800a4ca:	f000 faf9 	bl	800aac0 <__lshift>
 800a4ce:	4621      	mov	r1, r4
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	f000 fb61 	bl	800ab98 <__mcmp>
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	9b04      	ldr	r3, [sp, #16]
 800a4da:	dc02      	bgt.n	800a4e2 <_dtoa_r+0x9b2>
 800a4dc:	d1de      	bne.n	800a49c <_dtoa_r+0x96c>
 800a4de:	07da      	lsls	r2, r3, #31
 800a4e0:	d5dc      	bpl.n	800a49c <_dtoa_r+0x96c>
 800a4e2:	2b39      	cmp	r3, #57	; 0x39
 800a4e4:	d1d8      	bne.n	800a498 <_dtoa_r+0x968>
 800a4e6:	9a02      	ldr	r2, [sp, #8]
 800a4e8:	2339      	movs	r3, #57	; 0x39
 800a4ea:	7013      	strb	r3, [r2, #0]
 800a4ec:	4643      	mov	r3, r8
 800a4ee:	4698      	mov	r8, r3
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a4f6:	2a39      	cmp	r2, #57	; 0x39
 800a4f8:	d051      	beq.n	800a59e <_dtoa_r+0xa6e>
 800a4fa:	3201      	adds	r2, #1
 800a4fc:	701a      	strb	r2, [r3, #0]
 800a4fe:	e746      	b.n	800a38e <_dtoa_r+0x85e>
 800a500:	2a00      	cmp	r2, #0
 800a502:	dd03      	ble.n	800a50c <_dtoa_r+0x9dc>
 800a504:	2b39      	cmp	r3, #57	; 0x39
 800a506:	d0ee      	beq.n	800a4e6 <_dtoa_r+0x9b6>
 800a508:	3301      	adds	r3, #1
 800a50a:	e7c7      	b.n	800a49c <_dtoa_r+0x96c>
 800a50c:	9a04      	ldr	r2, [sp, #16]
 800a50e:	9908      	ldr	r1, [sp, #32]
 800a510:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a514:	428a      	cmp	r2, r1
 800a516:	d02b      	beq.n	800a570 <_dtoa_r+0xa40>
 800a518:	4629      	mov	r1, r5
 800a51a:	2300      	movs	r3, #0
 800a51c:	220a      	movs	r2, #10
 800a51e:	4630      	mov	r0, r6
 800a520:	f000 f920 	bl	800a764 <__multadd>
 800a524:	45b9      	cmp	r9, r7
 800a526:	4605      	mov	r5, r0
 800a528:	f04f 0300 	mov.w	r3, #0
 800a52c:	f04f 020a 	mov.w	r2, #10
 800a530:	4649      	mov	r1, r9
 800a532:	4630      	mov	r0, r6
 800a534:	d107      	bne.n	800a546 <_dtoa_r+0xa16>
 800a536:	f000 f915 	bl	800a764 <__multadd>
 800a53a:	4681      	mov	r9, r0
 800a53c:	4607      	mov	r7, r0
 800a53e:	9b04      	ldr	r3, [sp, #16]
 800a540:	3301      	adds	r3, #1
 800a542:	9304      	str	r3, [sp, #16]
 800a544:	e774      	b.n	800a430 <_dtoa_r+0x900>
 800a546:	f000 f90d 	bl	800a764 <__multadd>
 800a54a:	4639      	mov	r1, r7
 800a54c:	4681      	mov	r9, r0
 800a54e:	2300      	movs	r3, #0
 800a550:	220a      	movs	r2, #10
 800a552:	4630      	mov	r0, r6
 800a554:	f000 f906 	bl	800a764 <__multadd>
 800a558:	4607      	mov	r7, r0
 800a55a:	e7f0      	b.n	800a53e <_dtoa_r+0xa0e>
 800a55c:	f1ba 0f00 	cmp.w	sl, #0
 800a560:	9a01      	ldr	r2, [sp, #4]
 800a562:	bfcc      	ite	gt
 800a564:	46d0      	movgt	r8, sl
 800a566:	f04f 0801 	movle.w	r8, #1
 800a56a:	4490      	add	r8, r2
 800a56c:	f04f 0900 	mov.w	r9, #0
 800a570:	4629      	mov	r1, r5
 800a572:	2201      	movs	r2, #1
 800a574:	4630      	mov	r0, r6
 800a576:	9302      	str	r3, [sp, #8]
 800a578:	f000 faa2 	bl	800aac0 <__lshift>
 800a57c:	4621      	mov	r1, r4
 800a57e:	4605      	mov	r5, r0
 800a580:	f000 fb0a 	bl	800ab98 <__mcmp>
 800a584:	2800      	cmp	r0, #0
 800a586:	dcb1      	bgt.n	800a4ec <_dtoa_r+0x9bc>
 800a588:	d102      	bne.n	800a590 <_dtoa_r+0xa60>
 800a58a:	9b02      	ldr	r3, [sp, #8]
 800a58c:	07db      	lsls	r3, r3, #31
 800a58e:	d4ad      	bmi.n	800a4ec <_dtoa_r+0x9bc>
 800a590:	4643      	mov	r3, r8
 800a592:	4698      	mov	r8, r3
 800a594:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a598:	2a30      	cmp	r2, #48	; 0x30
 800a59a:	d0fa      	beq.n	800a592 <_dtoa_r+0xa62>
 800a59c:	e6f7      	b.n	800a38e <_dtoa_r+0x85e>
 800a59e:	9a01      	ldr	r2, [sp, #4]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d1a4      	bne.n	800a4ee <_dtoa_r+0x9be>
 800a5a4:	f10b 0b01 	add.w	fp, fp, #1
 800a5a8:	2331      	movs	r3, #49	; 0x31
 800a5aa:	e778      	b.n	800a49e <_dtoa_r+0x96e>
 800a5ac:	4b14      	ldr	r3, [pc, #80]	; (800a600 <_dtoa_r+0xad0>)
 800a5ae:	f7ff bb2a 	b.w	8009c06 <_dtoa_r+0xd6>
 800a5b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f47f ab05 	bne.w	8009bc4 <_dtoa_r+0x94>
 800a5ba:	4b12      	ldr	r3, [pc, #72]	; (800a604 <_dtoa_r+0xad4>)
 800a5bc:	f7ff bb23 	b.w	8009c06 <_dtoa_r+0xd6>
 800a5c0:	f1ba 0f00 	cmp.w	sl, #0
 800a5c4:	dc03      	bgt.n	800a5ce <_dtoa_r+0xa9e>
 800a5c6:	9b06      	ldr	r3, [sp, #24]
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	f73f aec8 	bgt.w	800a35e <_dtoa_r+0x82e>
 800a5ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a5d2:	4621      	mov	r1, r4
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	f7ff fa23 	bl	8009a20 <quorem>
 800a5da:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a5de:	f808 3b01 	strb.w	r3, [r8], #1
 800a5e2:	9a01      	ldr	r2, [sp, #4]
 800a5e4:	eba8 0202 	sub.w	r2, r8, r2
 800a5e8:	4592      	cmp	sl, r2
 800a5ea:	ddb7      	ble.n	800a55c <_dtoa_r+0xa2c>
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	220a      	movs	r2, #10
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	f000 f8b6 	bl	800a764 <__multadd>
 800a5f8:	4605      	mov	r5, r0
 800a5fa:	e7ea      	b.n	800a5d2 <_dtoa_r+0xaa2>
 800a5fc:	0800b9d8 	.word	0x0800b9d8
 800a600:	0800b938 	.word	0x0800b938
 800a604:	0800b95c 	.word	0x0800b95c

0800a608 <_free_r>:
 800a608:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a60a:	2900      	cmp	r1, #0
 800a60c:	d044      	beq.n	800a698 <_free_r+0x90>
 800a60e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a612:	9001      	str	r0, [sp, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	f1a1 0404 	sub.w	r4, r1, #4
 800a61a:	bfb8      	it	lt
 800a61c:	18e4      	addlt	r4, r4, r3
 800a61e:	f7fe fc15 	bl	8008e4c <__malloc_lock>
 800a622:	4a1e      	ldr	r2, [pc, #120]	; (800a69c <_free_r+0x94>)
 800a624:	9801      	ldr	r0, [sp, #4]
 800a626:	6813      	ldr	r3, [r2, #0]
 800a628:	b933      	cbnz	r3, 800a638 <_free_r+0x30>
 800a62a:	6063      	str	r3, [r4, #4]
 800a62c:	6014      	str	r4, [r2, #0]
 800a62e:	b003      	add	sp, #12
 800a630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a634:	f7fe bc10 	b.w	8008e58 <__malloc_unlock>
 800a638:	42a3      	cmp	r3, r4
 800a63a:	d908      	bls.n	800a64e <_free_r+0x46>
 800a63c:	6825      	ldr	r5, [r4, #0]
 800a63e:	1961      	adds	r1, r4, r5
 800a640:	428b      	cmp	r3, r1
 800a642:	bf01      	itttt	eq
 800a644:	6819      	ldreq	r1, [r3, #0]
 800a646:	685b      	ldreq	r3, [r3, #4]
 800a648:	1949      	addeq	r1, r1, r5
 800a64a:	6021      	streq	r1, [r4, #0]
 800a64c:	e7ed      	b.n	800a62a <_free_r+0x22>
 800a64e:	461a      	mov	r2, r3
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	b10b      	cbz	r3, 800a658 <_free_r+0x50>
 800a654:	42a3      	cmp	r3, r4
 800a656:	d9fa      	bls.n	800a64e <_free_r+0x46>
 800a658:	6811      	ldr	r1, [r2, #0]
 800a65a:	1855      	adds	r5, r2, r1
 800a65c:	42a5      	cmp	r5, r4
 800a65e:	d10b      	bne.n	800a678 <_free_r+0x70>
 800a660:	6824      	ldr	r4, [r4, #0]
 800a662:	4421      	add	r1, r4
 800a664:	1854      	adds	r4, r2, r1
 800a666:	42a3      	cmp	r3, r4
 800a668:	6011      	str	r1, [r2, #0]
 800a66a:	d1e0      	bne.n	800a62e <_free_r+0x26>
 800a66c:	681c      	ldr	r4, [r3, #0]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	6053      	str	r3, [r2, #4]
 800a672:	440c      	add	r4, r1
 800a674:	6014      	str	r4, [r2, #0]
 800a676:	e7da      	b.n	800a62e <_free_r+0x26>
 800a678:	d902      	bls.n	800a680 <_free_r+0x78>
 800a67a:	230c      	movs	r3, #12
 800a67c:	6003      	str	r3, [r0, #0]
 800a67e:	e7d6      	b.n	800a62e <_free_r+0x26>
 800a680:	6825      	ldr	r5, [r4, #0]
 800a682:	1961      	adds	r1, r4, r5
 800a684:	428b      	cmp	r3, r1
 800a686:	bf04      	itt	eq
 800a688:	6819      	ldreq	r1, [r3, #0]
 800a68a:	685b      	ldreq	r3, [r3, #4]
 800a68c:	6063      	str	r3, [r4, #4]
 800a68e:	bf04      	itt	eq
 800a690:	1949      	addeq	r1, r1, r5
 800a692:	6021      	streq	r1, [r4, #0]
 800a694:	6054      	str	r4, [r2, #4]
 800a696:	e7ca      	b.n	800a62e <_free_r+0x26>
 800a698:	b003      	add	sp, #12
 800a69a:	bd30      	pop	{r4, r5, pc}
 800a69c:	24000438 	.word	0x24000438

0800a6a0 <_Balloc>:
 800a6a0:	b570      	push	{r4, r5, r6, lr}
 800a6a2:	69c6      	ldr	r6, [r0, #28]
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	460d      	mov	r5, r1
 800a6a8:	b976      	cbnz	r6, 800a6c8 <_Balloc+0x28>
 800a6aa:	2010      	movs	r0, #16
 800a6ac:	f7fe fb26 	bl	8008cfc <malloc>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	61e0      	str	r0, [r4, #28]
 800a6b4:	b920      	cbnz	r0, 800a6c0 <_Balloc+0x20>
 800a6b6:	4b18      	ldr	r3, [pc, #96]	; (800a718 <_Balloc+0x78>)
 800a6b8:	4818      	ldr	r0, [pc, #96]	; (800a71c <_Balloc+0x7c>)
 800a6ba:	216b      	movs	r1, #107	; 0x6b
 800a6bc:	f000 fd9a 	bl	800b1f4 <__assert_func>
 800a6c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6c4:	6006      	str	r6, [r0, #0]
 800a6c6:	60c6      	str	r6, [r0, #12]
 800a6c8:	69e6      	ldr	r6, [r4, #28]
 800a6ca:	68f3      	ldr	r3, [r6, #12]
 800a6cc:	b183      	cbz	r3, 800a6f0 <_Balloc+0x50>
 800a6ce:	69e3      	ldr	r3, [r4, #28]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a6d6:	b9b8      	cbnz	r0, 800a708 <_Balloc+0x68>
 800a6d8:	2101      	movs	r1, #1
 800a6da:	fa01 f605 	lsl.w	r6, r1, r5
 800a6de:	1d72      	adds	r2, r6, #5
 800a6e0:	0092      	lsls	r2, r2, #2
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f000 fda4 	bl	800b230 <_calloc_r>
 800a6e8:	b160      	cbz	r0, 800a704 <_Balloc+0x64>
 800a6ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a6ee:	e00e      	b.n	800a70e <_Balloc+0x6e>
 800a6f0:	2221      	movs	r2, #33	; 0x21
 800a6f2:	2104      	movs	r1, #4
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	f000 fd9b 	bl	800b230 <_calloc_r>
 800a6fa:	69e3      	ldr	r3, [r4, #28]
 800a6fc:	60f0      	str	r0, [r6, #12]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1e4      	bne.n	800a6ce <_Balloc+0x2e>
 800a704:	2000      	movs	r0, #0
 800a706:	bd70      	pop	{r4, r5, r6, pc}
 800a708:	6802      	ldr	r2, [r0, #0]
 800a70a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a70e:	2300      	movs	r3, #0
 800a710:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a714:	e7f7      	b.n	800a706 <_Balloc+0x66>
 800a716:	bf00      	nop
 800a718:	0800b969 	.word	0x0800b969
 800a71c:	0800b9e9 	.word	0x0800b9e9

0800a720 <_Bfree>:
 800a720:	b570      	push	{r4, r5, r6, lr}
 800a722:	69c6      	ldr	r6, [r0, #28]
 800a724:	4605      	mov	r5, r0
 800a726:	460c      	mov	r4, r1
 800a728:	b976      	cbnz	r6, 800a748 <_Bfree+0x28>
 800a72a:	2010      	movs	r0, #16
 800a72c:	f7fe fae6 	bl	8008cfc <malloc>
 800a730:	4602      	mov	r2, r0
 800a732:	61e8      	str	r0, [r5, #28]
 800a734:	b920      	cbnz	r0, 800a740 <_Bfree+0x20>
 800a736:	4b09      	ldr	r3, [pc, #36]	; (800a75c <_Bfree+0x3c>)
 800a738:	4809      	ldr	r0, [pc, #36]	; (800a760 <_Bfree+0x40>)
 800a73a:	218f      	movs	r1, #143	; 0x8f
 800a73c:	f000 fd5a 	bl	800b1f4 <__assert_func>
 800a740:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a744:	6006      	str	r6, [r0, #0]
 800a746:	60c6      	str	r6, [r0, #12]
 800a748:	b13c      	cbz	r4, 800a75a <_Bfree+0x3a>
 800a74a:	69eb      	ldr	r3, [r5, #28]
 800a74c:	6862      	ldr	r2, [r4, #4]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a754:	6021      	str	r1, [r4, #0]
 800a756:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a75a:	bd70      	pop	{r4, r5, r6, pc}
 800a75c:	0800b969 	.word	0x0800b969
 800a760:	0800b9e9 	.word	0x0800b9e9

0800a764 <__multadd>:
 800a764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a768:	690d      	ldr	r5, [r1, #16]
 800a76a:	4607      	mov	r7, r0
 800a76c:	460c      	mov	r4, r1
 800a76e:	461e      	mov	r6, r3
 800a770:	f101 0c14 	add.w	ip, r1, #20
 800a774:	2000      	movs	r0, #0
 800a776:	f8dc 3000 	ldr.w	r3, [ip]
 800a77a:	b299      	uxth	r1, r3
 800a77c:	fb02 6101 	mla	r1, r2, r1, r6
 800a780:	0c1e      	lsrs	r6, r3, #16
 800a782:	0c0b      	lsrs	r3, r1, #16
 800a784:	fb02 3306 	mla	r3, r2, r6, r3
 800a788:	b289      	uxth	r1, r1
 800a78a:	3001      	adds	r0, #1
 800a78c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a790:	4285      	cmp	r5, r0
 800a792:	f84c 1b04 	str.w	r1, [ip], #4
 800a796:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a79a:	dcec      	bgt.n	800a776 <__multadd+0x12>
 800a79c:	b30e      	cbz	r6, 800a7e2 <__multadd+0x7e>
 800a79e:	68a3      	ldr	r3, [r4, #8]
 800a7a0:	42ab      	cmp	r3, r5
 800a7a2:	dc19      	bgt.n	800a7d8 <__multadd+0x74>
 800a7a4:	6861      	ldr	r1, [r4, #4]
 800a7a6:	4638      	mov	r0, r7
 800a7a8:	3101      	adds	r1, #1
 800a7aa:	f7ff ff79 	bl	800a6a0 <_Balloc>
 800a7ae:	4680      	mov	r8, r0
 800a7b0:	b928      	cbnz	r0, 800a7be <__multadd+0x5a>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	4b0c      	ldr	r3, [pc, #48]	; (800a7e8 <__multadd+0x84>)
 800a7b6:	480d      	ldr	r0, [pc, #52]	; (800a7ec <__multadd+0x88>)
 800a7b8:	21ba      	movs	r1, #186	; 0xba
 800a7ba:	f000 fd1b 	bl	800b1f4 <__assert_func>
 800a7be:	6922      	ldr	r2, [r4, #16]
 800a7c0:	3202      	adds	r2, #2
 800a7c2:	f104 010c 	add.w	r1, r4, #12
 800a7c6:	0092      	lsls	r2, r2, #2
 800a7c8:	300c      	adds	r0, #12
 800a7ca:	f000 fd05 	bl	800b1d8 <memcpy>
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	4638      	mov	r0, r7
 800a7d2:	f7ff ffa5 	bl	800a720 <_Bfree>
 800a7d6:	4644      	mov	r4, r8
 800a7d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a7dc:	3501      	adds	r5, #1
 800a7de:	615e      	str	r6, [r3, #20]
 800a7e0:	6125      	str	r5, [r4, #16]
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7e8:	0800b9d8 	.word	0x0800b9d8
 800a7ec:	0800b9e9 	.word	0x0800b9e9

0800a7f0 <__hi0bits>:
 800a7f0:	0c03      	lsrs	r3, r0, #16
 800a7f2:	041b      	lsls	r3, r3, #16
 800a7f4:	b9d3      	cbnz	r3, 800a82c <__hi0bits+0x3c>
 800a7f6:	0400      	lsls	r0, r0, #16
 800a7f8:	2310      	movs	r3, #16
 800a7fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a7fe:	bf04      	itt	eq
 800a800:	0200      	lsleq	r0, r0, #8
 800a802:	3308      	addeq	r3, #8
 800a804:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a808:	bf04      	itt	eq
 800a80a:	0100      	lsleq	r0, r0, #4
 800a80c:	3304      	addeq	r3, #4
 800a80e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a812:	bf04      	itt	eq
 800a814:	0080      	lsleq	r0, r0, #2
 800a816:	3302      	addeq	r3, #2
 800a818:	2800      	cmp	r0, #0
 800a81a:	db05      	blt.n	800a828 <__hi0bits+0x38>
 800a81c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a820:	f103 0301 	add.w	r3, r3, #1
 800a824:	bf08      	it	eq
 800a826:	2320      	moveq	r3, #32
 800a828:	4618      	mov	r0, r3
 800a82a:	4770      	bx	lr
 800a82c:	2300      	movs	r3, #0
 800a82e:	e7e4      	b.n	800a7fa <__hi0bits+0xa>

0800a830 <__lo0bits>:
 800a830:	6803      	ldr	r3, [r0, #0]
 800a832:	f013 0207 	ands.w	r2, r3, #7
 800a836:	d00c      	beq.n	800a852 <__lo0bits+0x22>
 800a838:	07d9      	lsls	r1, r3, #31
 800a83a:	d422      	bmi.n	800a882 <__lo0bits+0x52>
 800a83c:	079a      	lsls	r2, r3, #30
 800a83e:	bf49      	itett	mi
 800a840:	085b      	lsrmi	r3, r3, #1
 800a842:	089b      	lsrpl	r3, r3, #2
 800a844:	6003      	strmi	r3, [r0, #0]
 800a846:	2201      	movmi	r2, #1
 800a848:	bf5c      	itt	pl
 800a84a:	6003      	strpl	r3, [r0, #0]
 800a84c:	2202      	movpl	r2, #2
 800a84e:	4610      	mov	r0, r2
 800a850:	4770      	bx	lr
 800a852:	b299      	uxth	r1, r3
 800a854:	b909      	cbnz	r1, 800a85a <__lo0bits+0x2a>
 800a856:	0c1b      	lsrs	r3, r3, #16
 800a858:	2210      	movs	r2, #16
 800a85a:	b2d9      	uxtb	r1, r3
 800a85c:	b909      	cbnz	r1, 800a862 <__lo0bits+0x32>
 800a85e:	3208      	adds	r2, #8
 800a860:	0a1b      	lsrs	r3, r3, #8
 800a862:	0719      	lsls	r1, r3, #28
 800a864:	bf04      	itt	eq
 800a866:	091b      	lsreq	r3, r3, #4
 800a868:	3204      	addeq	r2, #4
 800a86a:	0799      	lsls	r1, r3, #30
 800a86c:	bf04      	itt	eq
 800a86e:	089b      	lsreq	r3, r3, #2
 800a870:	3202      	addeq	r2, #2
 800a872:	07d9      	lsls	r1, r3, #31
 800a874:	d403      	bmi.n	800a87e <__lo0bits+0x4e>
 800a876:	085b      	lsrs	r3, r3, #1
 800a878:	f102 0201 	add.w	r2, r2, #1
 800a87c:	d003      	beq.n	800a886 <__lo0bits+0x56>
 800a87e:	6003      	str	r3, [r0, #0]
 800a880:	e7e5      	b.n	800a84e <__lo0bits+0x1e>
 800a882:	2200      	movs	r2, #0
 800a884:	e7e3      	b.n	800a84e <__lo0bits+0x1e>
 800a886:	2220      	movs	r2, #32
 800a888:	e7e1      	b.n	800a84e <__lo0bits+0x1e>
	...

0800a88c <__i2b>:
 800a88c:	b510      	push	{r4, lr}
 800a88e:	460c      	mov	r4, r1
 800a890:	2101      	movs	r1, #1
 800a892:	f7ff ff05 	bl	800a6a0 <_Balloc>
 800a896:	4602      	mov	r2, r0
 800a898:	b928      	cbnz	r0, 800a8a6 <__i2b+0x1a>
 800a89a:	4b05      	ldr	r3, [pc, #20]	; (800a8b0 <__i2b+0x24>)
 800a89c:	4805      	ldr	r0, [pc, #20]	; (800a8b4 <__i2b+0x28>)
 800a89e:	f240 1145 	movw	r1, #325	; 0x145
 800a8a2:	f000 fca7 	bl	800b1f4 <__assert_func>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	6144      	str	r4, [r0, #20]
 800a8aa:	6103      	str	r3, [r0, #16]
 800a8ac:	bd10      	pop	{r4, pc}
 800a8ae:	bf00      	nop
 800a8b0:	0800b9d8 	.word	0x0800b9d8
 800a8b4:	0800b9e9 	.word	0x0800b9e9

0800a8b8 <__multiply>:
 800a8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8bc:	4691      	mov	r9, r2
 800a8be:	690a      	ldr	r2, [r1, #16]
 800a8c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	bfb8      	it	lt
 800a8c8:	460b      	movlt	r3, r1
 800a8ca:	460c      	mov	r4, r1
 800a8cc:	bfbc      	itt	lt
 800a8ce:	464c      	movlt	r4, r9
 800a8d0:	4699      	movlt	r9, r3
 800a8d2:	6927      	ldr	r7, [r4, #16]
 800a8d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a8d8:	68a3      	ldr	r3, [r4, #8]
 800a8da:	6861      	ldr	r1, [r4, #4]
 800a8dc:	eb07 060a 	add.w	r6, r7, sl
 800a8e0:	42b3      	cmp	r3, r6
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	bfb8      	it	lt
 800a8e6:	3101      	addlt	r1, #1
 800a8e8:	f7ff feda 	bl	800a6a0 <_Balloc>
 800a8ec:	b930      	cbnz	r0, 800a8fc <__multiply+0x44>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	4b44      	ldr	r3, [pc, #272]	; (800aa04 <__multiply+0x14c>)
 800a8f2:	4845      	ldr	r0, [pc, #276]	; (800aa08 <__multiply+0x150>)
 800a8f4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a8f8:	f000 fc7c 	bl	800b1f4 <__assert_func>
 800a8fc:	f100 0514 	add.w	r5, r0, #20
 800a900:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a904:	462b      	mov	r3, r5
 800a906:	2200      	movs	r2, #0
 800a908:	4543      	cmp	r3, r8
 800a90a:	d321      	bcc.n	800a950 <__multiply+0x98>
 800a90c:	f104 0314 	add.w	r3, r4, #20
 800a910:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a914:	f109 0314 	add.w	r3, r9, #20
 800a918:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a91c:	9202      	str	r2, [sp, #8]
 800a91e:	1b3a      	subs	r2, r7, r4
 800a920:	3a15      	subs	r2, #21
 800a922:	f022 0203 	bic.w	r2, r2, #3
 800a926:	3204      	adds	r2, #4
 800a928:	f104 0115 	add.w	r1, r4, #21
 800a92c:	428f      	cmp	r7, r1
 800a92e:	bf38      	it	cc
 800a930:	2204      	movcc	r2, #4
 800a932:	9201      	str	r2, [sp, #4]
 800a934:	9a02      	ldr	r2, [sp, #8]
 800a936:	9303      	str	r3, [sp, #12]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d80c      	bhi.n	800a956 <__multiply+0x9e>
 800a93c:	2e00      	cmp	r6, #0
 800a93e:	dd03      	ble.n	800a948 <__multiply+0x90>
 800a940:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a944:	2b00      	cmp	r3, #0
 800a946:	d05b      	beq.n	800aa00 <__multiply+0x148>
 800a948:	6106      	str	r6, [r0, #16]
 800a94a:	b005      	add	sp, #20
 800a94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a950:	f843 2b04 	str.w	r2, [r3], #4
 800a954:	e7d8      	b.n	800a908 <__multiply+0x50>
 800a956:	f8b3 a000 	ldrh.w	sl, [r3]
 800a95a:	f1ba 0f00 	cmp.w	sl, #0
 800a95e:	d024      	beq.n	800a9aa <__multiply+0xf2>
 800a960:	f104 0e14 	add.w	lr, r4, #20
 800a964:	46a9      	mov	r9, r5
 800a966:	f04f 0c00 	mov.w	ip, #0
 800a96a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a96e:	f8d9 1000 	ldr.w	r1, [r9]
 800a972:	fa1f fb82 	uxth.w	fp, r2
 800a976:	b289      	uxth	r1, r1
 800a978:	fb0a 110b 	mla	r1, sl, fp, r1
 800a97c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a980:	f8d9 2000 	ldr.w	r2, [r9]
 800a984:	4461      	add	r1, ip
 800a986:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a98a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a98e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a992:	b289      	uxth	r1, r1
 800a994:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a998:	4577      	cmp	r7, lr
 800a99a:	f849 1b04 	str.w	r1, [r9], #4
 800a99e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a9a2:	d8e2      	bhi.n	800a96a <__multiply+0xb2>
 800a9a4:	9a01      	ldr	r2, [sp, #4]
 800a9a6:	f845 c002 	str.w	ip, [r5, r2]
 800a9aa:	9a03      	ldr	r2, [sp, #12]
 800a9ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a9b0:	3304      	adds	r3, #4
 800a9b2:	f1b9 0f00 	cmp.w	r9, #0
 800a9b6:	d021      	beq.n	800a9fc <__multiply+0x144>
 800a9b8:	6829      	ldr	r1, [r5, #0]
 800a9ba:	f104 0c14 	add.w	ip, r4, #20
 800a9be:	46ae      	mov	lr, r5
 800a9c0:	f04f 0a00 	mov.w	sl, #0
 800a9c4:	f8bc b000 	ldrh.w	fp, [ip]
 800a9c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a9cc:	fb09 220b 	mla	r2, r9, fp, r2
 800a9d0:	4452      	add	r2, sl
 800a9d2:	b289      	uxth	r1, r1
 800a9d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a9d8:	f84e 1b04 	str.w	r1, [lr], #4
 800a9dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a9e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a9e4:	f8be 1000 	ldrh.w	r1, [lr]
 800a9e8:	fb09 110a 	mla	r1, r9, sl, r1
 800a9ec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a9f0:	4567      	cmp	r7, ip
 800a9f2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a9f6:	d8e5      	bhi.n	800a9c4 <__multiply+0x10c>
 800a9f8:	9a01      	ldr	r2, [sp, #4]
 800a9fa:	50a9      	str	r1, [r5, r2]
 800a9fc:	3504      	adds	r5, #4
 800a9fe:	e799      	b.n	800a934 <__multiply+0x7c>
 800aa00:	3e01      	subs	r6, #1
 800aa02:	e79b      	b.n	800a93c <__multiply+0x84>
 800aa04:	0800b9d8 	.word	0x0800b9d8
 800aa08:	0800b9e9 	.word	0x0800b9e9

0800aa0c <__pow5mult>:
 800aa0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa10:	4615      	mov	r5, r2
 800aa12:	f012 0203 	ands.w	r2, r2, #3
 800aa16:	4606      	mov	r6, r0
 800aa18:	460f      	mov	r7, r1
 800aa1a:	d007      	beq.n	800aa2c <__pow5mult+0x20>
 800aa1c:	4c25      	ldr	r4, [pc, #148]	; (800aab4 <__pow5mult+0xa8>)
 800aa1e:	3a01      	subs	r2, #1
 800aa20:	2300      	movs	r3, #0
 800aa22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa26:	f7ff fe9d 	bl	800a764 <__multadd>
 800aa2a:	4607      	mov	r7, r0
 800aa2c:	10ad      	asrs	r5, r5, #2
 800aa2e:	d03d      	beq.n	800aaac <__pow5mult+0xa0>
 800aa30:	69f4      	ldr	r4, [r6, #28]
 800aa32:	b97c      	cbnz	r4, 800aa54 <__pow5mult+0x48>
 800aa34:	2010      	movs	r0, #16
 800aa36:	f7fe f961 	bl	8008cfc <malloc>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	61f0      	str	r0, [r6, #28]
 800aa3e:	b928      	cbnz	r0, 800aa4c <__pow5mult+0x40>
 800aa40:	4b1d      	ldr	r3, [pc, #116]	; (800aab8 <__pow5mult+0xac>)
 800aa42:	481e      	ldr	r0, [pc, #120]	; (800aabc <__pow5mult+0xb0>)
 800aa44:	f240 11b3 	movw	r1, #435	; 0x1b3
 800aa48:	f000 fbd4 	bl	800b1f4 <__assert_func>
 800aa4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa50:	6004      	str	r4, [r0, #0]
 800aa52:	60c4      	str	r4, [r0, #12]
 800aa54:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800aa58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa5c:	b94c      	cbnz	r4, 800aa72 <__pow5mult+0x66>
 800aa5e:	f240 2171 	movw	r1, #625	; 0x271
 800aa62:	4630      	mov	r0, r6
 800aa64:	f7ff ff12 	bl	800a88c <__i2b>
 800aa68:	2300      	movs	r3, #0
 800aa6a:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa6e:	4604      	mov	r4, r0
 800aa70:	6003      	str	r3, [r0, #0]
 800aa72:	f04f 0900 	mov.w	r9, #0
 800aa76:	07eb      	lsls	r3, r5, #31
 800aa78:	d50a      	bpl.n	800aa90 <__pow5mult+0x84>
 800aa7a:	4639      	mov	r1, r7
 800aa7c:	4622      	mov	r2, r4
 800aa7e:	4630      	mov	r0, r6
 800aa80:	f7ff ff1a 	bl	800a8b8 <__multiply>
 800aa84:	4639      	mov	r1, r7
 800aa86:	4680      	mov	r8, r0
 800aa88:	4630      	mov	r0, r6
 800aa8a:	f7ff fe49 	bl	800a720 <_Bfree>
 800aa8e:	4647      	mov	r7, r8
 800aa90:	106d      	asrs	r5, r5, #1
 800aa92:	d00b      	beq.n	800aaac <__pow5mult+0xa0>
 800aa94:	6820      	ldr	r0, [r4, #0]
 800aa96:	b938      	cbnz	r0, 800aaa8 <__pow5mult+0x9c>
 800aa98:	4622      	mov	r2, r4
 800aa9a:	4621      	mov	r1, r4
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f7ff ff0b 	bl	800a8b8 <__multiply>
 800aaa2:	6020      	str	r0, [r4, #0]
 800aaa4:	f8c0 9000 	str.w	r9, [r0]
 800aaa8:	4604      	mov	r4, r0
 800aaaa:	e7e4      	b.n	800aa76 <__pow5mult+0x6a>
 800aaac:	4638      	mov	r0, r7
 800aaae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aab2:	bf00      	nop
 800aab4:	0800bb38 	.word	0x0800bb38
 800aab8:	0800b969 	.word	0x0800b969
 800aabc:	0800b9e9 	.word	0x0800b9e9

0800aac0 <__lshift>:
 800aac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aac4:	460c      	mov	r4, r1
 800aac6:	6849      	ldr	r1, [r1, #4]
 800aac8:	6923      	ldr	r3, [r4, #16]
 800aaca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aace:	68a3      	ldr	r3, [r4, #8]
 800aad0:	4607      	mov	r7, r0
 800aad2:	4691      	mov	r9, r2
 800aad4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aad8:	f108 0601 	add.w	r6, r8, #1
 800aadc:	42b3      	cmp	r3, r6
 800aade:	db0b      	blt.n	800aaf8 <__lshift+0x38>
 800aae0:	4638      	mov	r0, r7
 800aae2:	f7ff fddd 	bl	800a6a0 <_Balloc>
 800aae6:	4605      	mov	r5, r0
 800aae8:	b948      	cbnz	r0, 800aafe <__lshift+0x3e>
 800aaea:	4602      	mov	r2, r0
 800aaec:	4b28      	ldr	r3, [pc, #160]	; (800ab90 <__lshift+0xd0>)
 800aaee:	4829      	ldr	r0, [pc, #164]	; (800ab94 <__lshift+0xd4>)
 800aaf0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800aaf4:	f000 fb7e 	bl	800b1f4 <__assert_func>
 800aaf8:	3101      	adds	r1, #1
 800aafa:	005b      	lsls	r3, r3, #1
 800aafc:	e7ee      	b.n	800aadc <__lshift+0x1c>
 800aafe:	2300      	movs	r3, #0
 800ab00:	f100 0114 	add.w	r1, r0, #20
 800ab04:	f100 0210 	add.w	r2, r0, #16
 800ab08:	4618      	mov	r0, r3
 800ab0a:	4553      	cmp	r3, sl
 800ab0c:	db33      	blt.n	800ab76 <__lshift+0xb6>
 800ab0e:	6920      	ldr	r0, [r4, #16]
 800ab10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab14:	f104 0314 	add.w	r3, r4, #20
 800ab18:	f019 091f 	ands.w	r9, r9, #31
 800ab1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab24:	d02b      	beq.n	800ab7e <__lshift+0xbe>
 800ab26:	f1c9 0e20 	rsb	lr, r9, #32
 800ab2a:	468a      	mov	sl, r1
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	6818      	ldr	r0, [r3, #0]
 800ab30:	fa00 f009 	lsl.w	r0, r0, r9
 800ab34:	4310      	orrs	r0, r2
 800ab36:	f84a 0b04 	str.w	r0, [sl], #4
 800ab3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab3e:	459c      	cmp	ip, r3
 800ab40:	fa22 f20e 	lsr.w	r2, r2, lr
 800ab44:	d8f3      	bhi.n	800ab2e <__lshift+0x6e>
 800ab46:	ebac 0304 	sub.w	r3, ip, r4
 800ab4a:	3b15      	subs	r3, #21
 800ab4c:	f023 0303 	bic.w	r3, r3, #3
 800ab50:	3304      	adds	r3, #4
 800ab52:	f104 0015 	add.w	r0, r4, #21
 800ab56:	4584      	cmp	ip, r0
 800ab58:	bf38      	it	cc
 800ab5a:	2304      	movcc	r3, #4
 800ab5c:	50ca      	str	r2, [r1, r3]
 800ab5e:	b10a      	cbz	r2, 800ab64 <__lshift+0xa4>
 800ab60:	f108 0602 	add.w	r6, r8, #2
 800ab64:	3e01      	subs	r6, #1
 800ab66:	4638      	mov	r0, r7
 800ab68:	612e      	str	r6, [r5, #16]
 800ab6a:	4621      	mov	r1, r4
 800ab6c:	f7ff fdd8 	bl	800a720 <_Bfree>
 800ab70:	4628      	mov	r0, r5
 800ab72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab76:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	e7c5      	b.n	800ab0a <__lshift+0x4a>
 800ab7e:	3904      	subs	r1, #4
 800ab80:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab84:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab88:	459c      	cmp	ip, r3
 800ab8a:	d8f9      	bhi.n	800ab80 <__lshift+0xc0>
 800ab8c:	e7ea      	b.n	800ab64 <__lshift+0xa4>
 800ab8e:	bf00      	nop
 800ab90:	0800b9d8 	.word	0x0800b9d8
 800ab94:	0800b9e9 	.word	0x0800b9e9

0800ab98 <__mcmp>:
 800ab98:	b530      	push	{r4, r5, lr}
 800ab9a:	6902      	ldr	r2, [r0, #16]
 800ab9c:	690c      	ldr	r4, [r1, #16]
 800ab9e:	1b12      	subs	r2, r2, r4
 800aba0:	d10e      	bne.n	800abc0 <__mcmp+0x28>
 800aba2:	f100 0314 	add.w	r3, r0, #20
 800aba6:	3114      	adds	r1, #20
 800aba8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800abac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800abb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800abb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800abb8:	42a5      	cmp	r5, r4
 800abba:	d003      	beq.n	800abc4 <__mcmp+0x2c>
 800abbc:	d305      	bcc.n	800abca <__mcmp+0x32>
 800abbe:	2201      	movs	r2, #1
 800abc0:	4610      	mov	r0, r2
 800abc2:	bd30      	pop	{r4, r5, pc}
 800abc4:	4283      	cmp	r3, r0
 800abc6:	d3f3      	bcc.n	800abb0 <__mcmp+0x18>
 800abc8:	e7fa      	b.n	800abc0 <__mcmp+0x28>
 800abca:	f04f 32ff 	mov.w	r2, #4294967295
 800abce:	e7f7      	b.n	800abc0 <__mcmp+0x28>

0800abd0 <__mdiff>:
 800abd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd4:	460c      	mov	r4, r1
 800abd6:	4606      	mov	r6, r0
 800abd8:	4611      	mov	r1, r2
 800abda:	4620      	mov	r0, r4
 800abdc:	4690      	mov	r8, r2
 800abde:	f7ff ffdb 	bl	800ab98 <__mcmp>
 800abe2:	1e05      	subs	r5, r0, #0
 800abe4:	d110      	bne.n	800ac08 <__mdiff+0x38>
 800abe6:	4629      	mov	r1, r5
 800abe8:	4630      	mov	r0, r6
 800abea:	f7ff fd59 	bl	800a6a0 <_Balloc>
 800abee:	b930      	cbnz	r0, 800abfe <__mdiff+0x2e>
 800abf0:	4b3a      	ldr	r3, [pc, #232]	; (800acdc <__mdiff+0x10c>)
 800abf2:	4602      	mov	r2, r0
 800abf4:	f240 2137 	movw	r1, #567	; 0x237
 800abf8:	4839      	ldr	r0, [pc, #228]	; (800ace0 <__mdiff+0x110>)
 800abfa:	f000 fafb 	bl	800b1f4 <__assert_func>
 800abfe:	2301      	movs	r3, #1
 800ac00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac08:	bfa4      	itt	ge
 800ac0a:	4643      	movge	r3, r8
 800ac0c:	46a0      	movge	r8, r4
 800ac0e:	4630      	mov	r0, r6
 800ac10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ac14:	bfa6      	itte	ge
 800ac16:	461c      	movge	r4, r3
 800ac18:	2500      	movge	r5, #0
 800ac1a:	2501      	movlt	r5, #1
 800ac1c:	f7ff fd40 	bl	800a6a0 <_Balloc>
 800ac20:	b920      	cbnz	r0, 800ac2c <__mdiff+0x5c>
 800ac22:	4b2e      	ldr	r3, [pc, #184]	; (800acdc <__mdiff+0x10c>)
 800ac24:	4602      	mov	r2, r0
 800ac26:	f240 2145 	movw	r1, #581	; 0x245
 800ac2a:	e7e5      	b.n	800abf8 <__mdiff+0x28>
 800ac2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ac30:	6926      	ldr	r6, [r4, #16]
 800ac32:	60c5      	str	r5, [r0, #12]
 800ac34:	f104 0914 	add.w	r9, r4, #20
 800ac38:	f108 0514 	add.w	r5, r8, #20
 800ac3c:	f100 0e14 	add.w	lr, r0, #20
 800ac40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ac44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ac48:	f108 0210 	add.w	r2, r8, #16
 800ac4c:	46f2      	mov	sl, lr
 800ac4e:	2100      	movs	r1, #0
 800ac50:	f859 3b04 	ldr.w	r3, [r9], #4
 800ac54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ac58:	fa11 f88b 	uxtah	r8, r1, fp
 800ac5c:	b299      	uxth	r1, r3
 800ac5e:	0c1b      	lsrs	r3, r3, #16
 800ac60:	eba8 0801 	sub.w	r8, r8, r1
 800ac64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ac68:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ac6c:	fa1f f888 	uxth.w	r8, r8
 800ac70:	1419      	asrs	r1, r3, #16
 800ac72:	454e      	cmp	r6, r9
 800ac74:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ac78:	f84a 3b04 	str.w	r3, [sl], #4
 800ac7c:	d8e8      	bhi.n	800ac50 <__mdiff+0x80>
 800ac7e:	1b33      	subs	r3, r6, r4
 800ac80:	3b15      	subs	r3, #21
 800ac82:	f023 0303 	bic.w	r3, r3, #3
 800ac86:	3304      	adds	r3, #4
 800ac88:	3415      	adds	r4, #21
 800ac8a:	42a6      	cmp	r6, r4
 800ac8c:	bf38      	it	cc
 800ac8e:	2304      	movcc	r3, #4
 800ac90:	441d      	add	r5, r3
 800ac92:	4473      	add	r3, lr
 800ac94:	469e      	mov	lr, r3
 800ac96:	462e      	mov	r6, r5
 800ac98:	4566      	cmp	r6, ip
 800ac9a:	d30e      	bcc.n	800acba <__mdiff+0xea>
 800ac9c:	f10c 0203 	add.w	r2, ip, #3
 800aca0:	1b52      	subs	r2, r2, r5
 800aca2:	f022 0203 	bic.w	r2, r2, #3
 800aca6:	3d03      	subs	r5, #3
 800aca8:	45ac      	cmp	ip, r5
 800acaa:	bf38      	it	cc
 800acac:	2200      	movcc	r2, #0
 800acae:	4413      	add	r3, r2
 800acb0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800acb4:	b17a      	cbz	r2, 800acd6 <__mdiff+0x106>
 800acb6:	6107      	str	r7, [r0, #16]
 800acb8:	e7a4      	b.n	800ac04 <__mdiff+0x34>
 800acba:	f856 8b04 	ldr.w	r8, [r6], #4
 800acbe:	fa11 f288 	uxtah	r2, r1, r8
 800acc2:	1414      	asrs	r4, r2, #16
 800acc4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800acc8:	b292      	uxth	r2, r2
 800acca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800acce:	f84e 2b04 	str.w	r2, [lr], #4
 800acd2:	1421      	asrs	r1, r4, #16
 800acd4:	e7e0      	b.n	800ac98 <__mdiff+0xc8>
 800acd6:	3f01      	subs	r7, #1
 800acd8:	e7ea      	b.n	800acb0 <__mdiff+0xe0>
 800acda:	bf00      	nop
 800acdc:	0800b9d8 	.word	0x0800b9d8
 800ace0:	0800b9e9 	.word	0x0800b9e9

0800ace4 <__d2b>:
 800ace4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ace8:	460f      	mov	r7, r1
 800acea:	2101      	movs	r1, #1
 800acec:	ec59 8b10 	vmov	r8, r9, d0
 800acf0:	4616      	mov	r6, r2
 800acf2:	f7ff fcd5 	bl	800a6a0 <_Balloc>
 800acf6:	4604      	mov	r4, r0
 800acf8:	b930      	cbnz	r0, 800ad08 <__d2b+0x24>
 800acfa:	4602      	mov	r2, r0
 800acfc:	4b24      	ldr	r3, [pc, #144]	; (800ad90 <__d2b+0xac>)
 800acfe:	4825      	ldr	r0, [pc, #148]	; (800ad94 <__d2b+0xb0>)
 800ad00:	f240 310f 	movw	r1, #783	; 0x30f
 800ad04:	f000 fa76 	bl	800b1f4 <__assert_func>
 800ad08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ad0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad10:	bb2d      	cbnz	r5, 800ad5e <__d2b+0x7a>
 800ad12:	9301      	str	r3, [sp, #4]
 800ad14:	f1b8 0300 	subs.w	r3, r8, #0
 800ad18:	d026      	beq.n	800ad68 <__d2b+0x84>
 800ad1a:	4668      	mov	r0, sp
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	f7ff fd87 	bl	800a830 <__lo0bits>
 800ad22:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ad26:	b1e8      	cbz	r0, 800ad64 <__d2b+0x80>
 800ad28:	f1c0 0320 	rsb	r3, r0, #32
 800ad2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad30:	430b      	orrs	r3, r1
 800ad32:	40c2      	lsrs	r2, r0
 800ad34:	6163      	str	r3, [r4, #20]
 800ad36:	9201      	str	r2, [sp, #4]
 800ad38:	9b01      	ldr	r3, [sp, #4]
 800ad3a:	61a3      	str	r3, [r4, #24]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	bf14      	ite	ne
 800ad40:	2202      	movne	r2, #2
 800ad42:	2201      	moveq	r2, #1
 800ad44:	6122      	str	r2, [r4, #16]
 800ad46:	b1bd      	cbz	r5, 800ad78 <__d2b+0x94>
 800ad48:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ad4c:	4405      	add	r5, r0
 800ad4e:	603d      	str	r5, [r7, #0]
 800ad50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad54:	6030      	str	r0, [r6, #0]
 800ad56:	4620      	mov	r0, r4
 800ad58:	b003      	add	sp, #12
 800ad5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad62:	e7d6      	b.n	800ad12 <__d2b+0x2e>
 800ad64:	6161      	str	r1, [r4, #20]
 800ad66:	e7e7      	b.n	800ad38 <__d2b+0x54>
 800ad68:	a801      	add	r0, sp, #4
 800ad6a:	f7ff fd61 	bl	800a830 <__lo0bits>
 800ad6e:	9b01      	ldr	r3, [sp, #4]
 800ad70:	6163      	str	r3, [r4, #20]
 800ad72:	3020      	adds	r0, #32
 800ad74:	2201      	movs	r2, #1
 800ad76:	e7e5      	b.n	800ad44 <__d2b+0x60>
 800ad78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad80:	6038      	str	r0, [r7, #0]
 800ad82:	6918      	ldr	r0, [r3, #16]
 800ad84:	f7ff fd34 	bl	800a7f0 <__hi0bits>
 800ad88:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad8c:	e7e2      	b.n	800ad54 <__d2b+0x70>
 800ad8e:	bf00      	nop
 800ad90:	0800b9d8 	.word	0x0800b9d8
 800ad94:	0800b9e9 	.word	0x0800b9e9

0800ad98 <__ssputs_r>:
 800ad98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad9c:	688e      	ldr	r6, [r1, #8]
 800ad9e:	461f      	mov	r7, r3
 800ada0:	42be      	cmp	r6, r7
 800ada2:	680b      	ldr	r3, [r1, #0]
 800ada4:	4682      	mov	sl, r0
 800ada6:	460c      	mov	r4, r1
 800ada8:	4690      	mov	r8, r2
 800adaa:	d82c      	bhi.n	800ae06 <__ssputs_r+0x6e>
 800adac:	898a      	ldrh	r2, [r1, #12]
 800adae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800adb2:	d026      	beq.n	800ae02 <__ssputs_r+0x6a>
 800adb4:	6965      	ldr	r5, [r4, #20]
 800adb6:	6909      	ldr	r1, [r1, #16]
 800adb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adbc:	eba3 0901 	sub.w	r9, r3, r1
 800adc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adc4:	1c7b      	adds	r3, r7, #1
 800adc6:	444b      	add	r3, r9
 800adc8:	106d      	asrs	r5, r5, #1
 800adca:	429d      	cmp	r5, r3
 800adcc:	bf38      	it	cc
 800adce:	461d      	movcc	r5, r3
 800add0:	0553      	lsls	r3, r2, #21
 800add2:	d527      	bpl.n	800ae24 <__ssputs_r+0x8c>
 800add4:	4629      	mov	r1, r5
 800add6:	f7fd ffb9 	bl	8008d4c <_malloc_r>
 800adda:	4606      	mov	r6, r0
 800addc:	b360      	cbz	r0, 800ae38 <__ssputs_r+0xa0>
 800adde:	6921      	ldr	r1, [r4, #16]
 800ade0:	464a      	mov	r2, r9
 800ade2:	f000 f9f9 	bl	800b1d8 <memcpy>
 800ade6:	89a3      	ldrh	r3, [r4, #12]
 800ade8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800adec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adf0:	81a3      	strh	r3, [r4, #12]
 800adf2:	6126      	str	r6, [r4, #16]
 800adf4:	6165      	str	r5, [r4, #20]
 800adf6:	444e      	add	r6, r9
 800adf8:	eba5 0509 	sub.w	r5, r5, r9
 800adfc:	6026      	str	r6, [r4, #0]
 800adfe:	60a5      	str	r5, [r4, #8]
 800ae00:	463e      	mov	r6, r7
 800ae02:	42be      	cmp	r6, r7
 800ae04:	d900      	bls.n	800ae08 <__ssputs_r+0x70>
 800ae06:	463e      	mov	r6, r7
 800ae08:	6820      	ldr	r0, [r4, #0]
 800ae0a:	4632      	mov	r2, r6
 800ae0c:	4641      	mov	r1, r8
 800ae0e:	f000 f9c9 	bl	800b1a4 <memmove>
 800ae12:	68a3      	ldr	r3, [r4, #8]
 800ae14:	1b9b      	subs	r3, r3, r6
 800ae16:	60a3      	str	r3, [r4, #8]
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	4433      	add	r3, r6
 800ae1c:	6023      	str	r3, [r4, #0]
 800ae1e:	2000      	movs	r0, #0
 800ae20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae24:	462a      	mov	r2, r5
 800ae26:	f000 fa2b 	bl	800b280 <_realloc_r>
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	d1e0      	bne.n	800adf2 <__ssputs_r+0x5a>
 800ae30:	6921      	ldr	r1, [r4, #16]
 800ae32:	4650      	mov	r0, sl
 800ae34:	f7ff fbe8 	bl	800a608 <_free_r>
 800ae38:	230c      	movs	r3, #12
 800ae3a:	f8ca 3000 	str.w	r3, [sl]
 800ae3e:	89a3      	ldrh	r3, [r4, #12]
 800ae40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae44:	81a3      	strh	r3, [r4, #12]
 800ae46:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4a:	e7e9      	b.n	800ae20 <__ssputs_r+0x88>

0800ae4c <_svfiprintf_r>:
 800ae4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae50:	4698      	mov	r8, r3
 800ae52:	898b      	ldrh	r3, [r1, #12]
 800ae54:	061b      	lsls	r3, r3, #24
 800ae56:	b09d      	sub	sp, #116	; 0x74
 800ae58:	4607      	mov	r7, r0
 800ae5a:	460d      	mov	r5, r1
 800ae5c:	4614      	mov	r4, r2
 800ae5e:	d50e      	bpl.n	800ae7e <_svfiprintf_r+0x32>
 800ae60:	690b      	ldr	r3, [r1, #16]
 800ae62:	b963      	cbnz	r3, 800ae7e <_svfiprintf_r+0x32>
 800ae64:	2140      	movs	r1, #64	; 0x40
 800ae66:	f7fd ff71 	bl	8008d4c <_malloc_r>
 800ae6a:	6028      	str	r0, [r5, #0]
 800ae6c:	6128      	str	r0, [r5, #16]
 800ae6e:	b920      	cbnz	r0, 800ae7a <_svfiprintf_r+0x2e>
 800ae70:	230c      	movs	r3, #12
 800ae72:	603b      	str	r3, [r7, #0]
 800ae74:	f04f 30ff 	mov.w	r0, #4294967295
 800ae78:	e0d0      	b.n	800b01c <_svfiprintf_r+0x1d0>
 800ae7a:	2340      	movs	r3, #64	; 0x40
 800ae7c:	616b      	str	r3, [r5, #20]
 800ae7e:	2300      	movs	r3, #0
 800ae80:	9309      	str	r3, [sp, #36]	; 0x24
 800ae82:	2320      	movs	r3, #32
 800ae84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae88:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae8c:	2330      	movs	r3, #48	; 0x30
 800ae8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b034 <_svfiprintf_r+0x1e8>
 800ae92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae96:	f04f 0901 	mov.w	r9, #1
 800ae9a:	4623      	mov	r3, r4
 800ae9c:	469a      	mov	sl, r3
 800ae9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aea2:	b10a      	cbz	r2, 800aea8 <_svfiprintf_r+0x5c>
 800aea4:	2a25      	cmp	r2, #37	; 0x25
 800aea6:	d1f9      	bne.n	800ae9c <_svfiprintf_r+0x50>
 800aea8:	ebba 0b04 	subs.w	fp, sl, r4
 800aeac:	d00b      	beq.n	800aec6 <_svfiprintf_r+0x7a>
 800aeae:	465b      	mov	r3, fp
 800aeb0:	4622      	mov	r2, r4
 800aeb2:	4629      	mov	r1, r5
 800aeb4:	4638      	mov	r0, r7
 800aeb6:	f7ff ff6f 	bl	800ad98 <__ssputs_r>
 800aeba:	3001      	adds	r0, #1
 800aebc:	f000 80a9 	beq.w	800b012 <_svfiprintf_r+0x1c6>
 800aec0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aec2:	445a      	add	r2, fp
 800aec4:	9209      	str	r2, [sp, #36]	; 0x24
 800aec6:	f89a 3000 	ldrb.w	r3, [sl]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f000 80a1 	beq.w	800b012 <_svfiprintf_r+0x1c6>
 800aed0:	2300      	movs	r3, #0
 800aed2:	f04f 32ff 	mov.w	r2, #4294967295
 800aed6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aeda:	f10a 0a01 	add.w	sl, sl, #1
 800aede:	9304      	str	r3, [sp, #16]
 800aee0:	9307      	str	r3, [sp, #28]
 800aee2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aee6:	931a      	str	r3, [sp, #104]	; 0x68
 800aee8:	4654      	mov	r4, sl
 800aeea:	2205      	movs	r2, #5
 800aeec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aef0:	4850      	ldr	r0, [pc, #320]	; (800b034 <_svfiprintf_r+0x1e8>)
 800aef2:	f7f5 f9fd 	bl	80002f0 <memchr>
 800aef6:	9a04      	ldr	r2, [sp, #16]
 800aef8:	b9d8      	cbnz	r0, 800af32 <_svfiprintf_r+0xe6>
 800aefa:	06d0      	lsls	r0, r2, #27
 800aefc:	bf44      	itt	mi
 800aefe:	2320      	movmi	r3, #32
 800af00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af04:	0711      	lsls	r1, r2, #28
 800af06:	bf44      	itt	mi
 800af08:	232b      	movmi	r3, #43	; 0x2b
 800af0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af0e:	f89a 3000 	ldrb.w	r3, [sl]
 800af12:	2b2a      	cmp	r3, #42	; 0x2a
 800af14:	d015      	beq.n	800af42 <_svfiprintf_r+0xf6>
 800af16:	9a07      	ldr	r2, [sp, #28]
 800af18:	4654      	mov	r4, sl
 800af1a:	2000      	movs	r0, #0
 800af1c:	f04f 0c0a 	mov.w	ip, #10
 800af20:	4621      	mov	r1, r4
 800af22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af26:	3b30      	subs	r3, #48	; 0x30
 800af28:	2b09      	cmp	r3, #9
 800af2a:	d94d      	bls.n	800afc8 <_svfiprintf_r+0x17c>
 800af2c:	b1b0      	cbz	r0, 800af5c <_svfiprintf_r+0x110>
 800af2e:	9207      	str	r2, [sp, #28]
 800af30:	e014      	b.n	800af5c <_svfiprintf_r+0x110>
 800af32:	eba0 0308 	sub.w	r3, r0, r8
 800af36:	fa09 f303 	lsl.w	r3, r9, r3
 800af3a:	4313      	orrs	r3, r2
 800af3c:	9304      	str	r3, [sp, #16]
 800af3e:	46a2      	mov	sl, r4
 800af40:	e7d2      	b.n	800aee8 <_svfiprintf_r+0x9c>
 800af42:	9b03      	ldr	r3, [sp, #12]
 800af44:	1d19      	adds	r1, r3, #4
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	9103      	str	r1, [sp, #12]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	bfbb      	ittet	lt
 800af4e:	425b      	neglt	r3, r3
 800af50:	f042 0202 	orrlt.w	r2, r2, #2
 800af54:	9307      	strge	r3, [sp, #28]
 800af56:	9307      	strlt	r3, [sp, #28]
 800af58:	bfb8      	it	lt
 800af5a:	9204      	strlt	r2, [sp, #16]
 800af5c:	7823      	ldrb	r3, [r4, #0]
 800af5e:	2b2e      	cmp	r3, #46	; 0x2e
 800af60:	d10c      	bne.n	800af7c <_svfiprintf_r+0x130>
 800af62:	7863      	ldrb	r3, [r4, #1]
 800af64:	2b2a      	cmp	r3, #42	; 0x2a
 800af66:	d134      	bne.n	800afd2 <_svfiprintf_r+0x186>
 800af68:	9b03      	ldr	r3, [sp, #12]
 800af6a:	1d1a      	adds	r2, r3, #4
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	9203      	str	r2, [sp, #12]
 800af70:	2b00      	cmp	r3, #0
 800af72:	bfb8      	it	lt
 800af74:	f04f 33ff 	movlt.w	r3, #4294967295
 800af78:	3402      	adds	r4, #2
 800af7a:	9305      	str	r3, [sp, #20]
 800af7c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b044 <_svfiprintf_r+0x1f8>
 800af80:	7821      	ldrb	r1, [r4, #0]
 800af82:	2203      	movs	r2, #3
 800af84:	4650      	mov	r0, sl
 800af86:	f7f5 f9b3 	bl	80002f0 <memchr>
 800af8a:	b138      	cbz	r0, 800af9c <_svfiprintf_r+0x150>
 800af8c:	9b04      	ldr	r3, [sp, #16]
 800af8e:	eba0 000a 	sub.w	r0, r0, sl
 800af92:	2240      	movs	r2, #64	; 0x40
 800af94:	4082      	lsls	r2, r0
 800af96:	4313      	orrs	r3, r2
 800af98:	3401      	adds	r4, #1
 800af9a:	9304      	str	r3, [sp, #16]
 800af9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afa0:	4825      	ldr	r0, [pc, #148]	; (800b038 <_svfiprintf_r+0x1ec>)
 800afa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afa6:	2206      	movs	r2, #6
 800afa8:	f7f5 f9a2 	bl	80002f0 <memchr>
 800afac:	2800      	cmp	r0, #0
 800afae:	d038      	beq.n	800b022 <_svfiprintf_r+0x1d6>
 800afb0:	4b22      	ldr	r3, [pc, #136]	; (800b03c <_svfiprintf_r+0x1f0>)
 800afb2:	bb1b      	cbnz	r3, 800affc <_svfiprintf_r+0x1b0>
 800afb4:	9b03      	ldr	r3, [sp, #12]
 800afb6:	3307      	adds	r3, #7
 800afb8:	f023 0307 	bic.w	r3, r3, #7
 800afbc:	3308      	adds	r3, #8
 800afbe:	9303      	str	r3, [sp, #12]
 800afc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afc2:	4433      	add	r3, r6
 800afc4:	9309      	str	r3, [sp, #36]	; 0x24
 800afc6:	e768      	b.n	800ae9a <_svfiprintf_r+0x4e>
 800afc8:	fb0c 3202 	mla	r2, ip, r2, r3
 800afcc:	460c      	mov	r4, r1
 800afce:	2001      	movs	r0, #1
 800afd0:	e7a6      	b.n	800af20 <_svfiprintf_r+0xd4>
 800afd2:	2300      	movs	r3, #0
 800afd4:	3401      	adds	r4, #1
 800afd6:	9305      	str	r3, [sp, #20]
 800afd8:	4619      	mov	r1, r3
 800afda:	f04f 0c0a 	mov.w	ip, #10
 800afde:	4620      	mov	r0, r4
 800afe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afe4:	3a30      	subs	r2, #48	; 0x30
 800afe6:	2a09      	cmp	r2, #9
 800afe8:	d903      	bls.n	800aff2 <_svfiprintf_r+0x1a6>
 800afea:	2b00      	cmp	r3, #0
 800afec:	d0c6      	beq.n	800af7c <_svfiprintf_r+0x130>
 800afee:	9105      	str	r1, [sp, #20]
 800aff0:	e7c4      	b.n	800af7c <_svfiprintf_r+0x130>
 800aff2:	fb0c 2101 	mla	r1, ip, r1, r2
 800aff6:	4604      	mov	r4, r0
 800aff8:	2301      	movs	r3, #1
 800affa:	e7f0      	b.n	800afde <_svfiprintf_r+0x192>
 800affc:	ab03      	add	r3, sp, #12
 800affe:	9300      	str	r3, [sp, #0]
 800b000:	462a      	mov	r2, r5
 800b002:	4b0f      	ldr	r3, [pc, #60]	; (800b040 <_svfiprintf_r+0x1f4>)
 800b004:	a904      	add	r1, sp, #16
 800b006:	4638      	mov	r0, r7
 800b008:	f7fd ffbe 	bl	8008f88 <_printf_float>
 800b00c:	1c42      	adds	r2, r0, #1
 800b00e:	4606      	mov	r6, r0
 800b010:	d1d6      	bne.n	800afc0 <_svfiprintf_r+0x174>
 800b012:	89ab      	ldrh	r3, [r5, #12]
 800b014:	065b      	lsls	r3, r3, #25
 800b016:	f53f af2d 	bmi.w	800ae74 <_svfiprintf_r+0x28>
 800b01a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b01c:	b01d      	add	sp, #116	; 0x74
 800b01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b022:	ab03      	add	r3, sp, #12
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	462a      	mov	r2, r5
 800b028:	4b05      	ldr	r3, [pc, #20]	; (800b040 <_svfiprintf_r+0x1f4>)
 800b02a:	a904      	add	r1, sp, #16
 800b02c:	4638      	mov	r0, r7
 800b02e:	f7fe fa33 	bl	8009498 <_printf_i>
 800b032:	e7eb      	b.n	800b00c <_svfiprintf_r+0x1c0>
 800b034:	0800bb44 	.word	0x0800bb44
 800b038:	0800bb4e 	.word	0x0800bb4e
 800b03c:	08008f89 	.word	0x08008f89
 800b040:	0800ad99 	.word	0x0800ad99
 800b044:	0800bb4a 	.word	0x0800bb4a

0800b048 <__sflush_r>:
 800b048:	898a      	ldrh	r2, [r1, #12]
 800b04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b04e:	4605      	mov	r5, r0
 800b050:	0710      	lsls	r0, r2, #28
 800b052:	460c      	mov	r4, r1
 800b054:	d458      	bmi.n	800b108 <__sflush_r+0xc0>
 800b056:	684b      	ldr	r3, [r1, #4]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	dc05      	bgt.n	800b068 <__sflush_r+0x20>
 800b05c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b05e:	2b00      	cmp	r3, #0
 800b060:	dc02      	bgt.n	800b068 <__sflush_r+0x20>
 800b062:	2000      	movs	r0, #0
 800b064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b06a:	2e00      	cmp	r6, #0
 800b06c:	d0f9      	beq.n	800b062 <__sflush_r+0x1a>
 800b06e:	2300      	movs	r3, #0
 800b070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b074:	682f      	ldr	r7, [r5, #0]
 800b076:	6a21      	ldr	r1, [r4, #32]
 800b078:	602b      	str	r3, [r5, #0]
 800b07a:	d032      	beq.n	800b0e2 <__sflush_r+0x9a>
 800b07c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b07e:	89a3      	ldrh	r3, [r4, #12]
 800b080:	075a      	lsls	r2, r3, #29
 800b082:	d505      	bpl.n	800b090 <__sflush_r+0x48>
 800b084:	6863      	ldr	r3, [r4, #4]
 800b086:	1ac0      	subs	r0, r0, r3
 800b088:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b08a:	b10b      	cbz	r3, 800b090 <__sflush_r+0x48>
 800b08c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b08e:	1ac0      	subs	r0, r0, r3
 800b090:	2300      	movs	r3, #0
 800b092:	4602      	mov	r2, r0
 800b094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b096:	6a21      	ldr	r1, [r4, #32]
 800b098:	4628      	mov	r0, r5
 800b09a:	47b0      	blx	r6
 800b09c:	1c43      	adds	r3, r0, #1
 800b09e:	89a3      	ldrh	r3, [r4, #12]
 800b0a0:	d106      	bne.n	800b0b0 <__sflush_r+0x68>
 800b0a2:	6829      	ldr	r1, [r5, #0]
 800b0a4:	291d      	cmp	r1, #29
 800b0a6:	d82b      	bhi.n	800b100 <__sflush_r+0xb8>
 800b0a8:	4a29      	ldr	r2, [pc, #164]	; (800b150 <__sflush_r+0x108>)
 800b0aa:	410a      	asrs	r2, r1
 800b0ac:	07d6      	lsls	r6, r2, #31
 800b0ae:	d427      	bmi.n	800b100 <__sflush_r+0xb8>
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	6062      	str	r2, [r4, #4]
 800b0b4:	04d9      	lsls	r1, r3, #19
 800b0b6:	6922      	ldr	r2, [r4, #16]
 800b0b8:	6022      	str	r2, [r4, #0]
 800b0ba:	d504      	bpl.n	800b0c6 <__sflush_r+0x7e>
 800b0bc:	1c42      	adds	r2, r0, #1
 800b0be:	d101      	bne.n	800b0c4 <__sflush_r+0x7c>
 800b0c0:	682b      	ldr	r3, [r5, #0]
 800b0c2:	b903      	cbnz	r3, 800b0c6 <__sflush_r+0x7e>
 800b0c4:	6560      	str	r0, [r4, #84]	; 0x54
 800b0c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0c8:	602f      	str	r7, [r5, #0]
 800b0ca:	2900      	cmp	r1, #0
 800b0cc:	d0c9      	beq.n	800b062 <__sflush_r+0x1a>
 800b0ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0d2:	4299      	cmp	r1, r3
 800b0d4:	d002      	beq.n	800b0dc <__sflush_r+0x94>
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	f7ff fa96 	bl	800a608 <_free_r>
 800b0dc:	2000      	movs	r0, #0
 800b0de:	6360      	str	r0, [r4, #52]	; 0x34
 800b0e0:	e7c0      	b.n	800b064 <__sflush_r+0x1c>
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	47b0      	blx	r6
 800b0e8:	1c41      	adds	r1, r0, #1
 800b0ea:	d1c8      	bne.n	800b07e <__sflush_r+0x36>
 800b0ec:	682b      	ldr	r3, [r5, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d0c5      	beq.n	800b07e <__sflush_r+0x36>
 800b0f2:	2b1d      	cmp	r3, #29
 800b0f4:	d001      	beq.n	800b0fa <__sflush_r+0xb2>
 800b0f6:	2b16      	cmp	r3, #22
 800b0f8:	d101      	bne.n	800b0fe <__sflush_r+0xb6>
 800b0fa:	602f      	str	r7, [r5, #0]
 800b0fc:	e7b1      	b.n	800b062 <__sflush_r+0x1a>
 800b0fe:	89a3      	ldrh	r3, [r4, #12]
 800b100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b104:	81a3      	strh	r3, [r4, #12]
 800b106:	e7ad      	b.n	800b064 <__sflush_r+0x1c>
 800b108:	690f      	ldr	r7, [r1, #16]
 800b10a:	2f00      	cmp	r7, #0
 800b10c:	d0a9      	beq.n	800b062 <__sflush_r+0x1a>
 800b10e:	0793      	lsls	r3, r2, #30
 800b110:	680e      	ldr	r6, [r1, #0]
 800b112:	bf08      	it	eq
 800b114:	694b      	ldreq	r3, [r1, #20]
 800b116:	600f      	str	r7, [r1, #0]
 800b118:	bf18      	it	ne
 800b11a:	2300      	movne	r3, #0
 800b11c:	eba6 0807 	sub.w	r8, r6, r7
 800b120:	608b      	str	r3, [r1, #8]
 800b122:	f1b8 0f00 	cmp.w	r8, #0
 800b126:	dd9c      	ble.n	800b062 <__sflush_r+0x1a>
 800b128:	6a21      	ldr	r1, [r4, #32]
 800b12a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b12c:	4643      	mov	r3, r8
 800b12e:	463a      	mov	r2, r7
 800b130:	4628      	mov	r0, r5
 800b132:	47b0      	blx	r6
 800b134:	2800      	cmp	r0, #0
 800b136:	dc06      	bgt.n	800b146 <__sflush_r+0xfe>
 800b138:	89a3      	ldrh	r3, [r4, #12]
 800b13a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b13e:	81a3      	strh	r3, [r4, #12]
 800b140:	f04f 30ff 	mov.w	r0, #4294967295
 800b144:	e78e      	b.n	800b064 <__sflush_r+0x1c>
 800b146:	4407      	add	r7, r0
 800b148:	eba8 0800 	sub.w	r8, r8, r0
 800b14c:	e7e9      	b.n	800b122 <__sflush_r+0xda>
 800b14e:	bf00      	nop
 800b150:	dfbffffe 	.word	0xdfbffffe

0800b154 <_fflush_r>:
 800b154:	b538      	push	{r3, r4, r5, lr}
 800b156:	690b      	ldr	r3, [r1, #16]
 800b158:	4605      	mov	r5, r0
 800b15a:	460c      	mov	r4, r1
 800b15c:	b913      	cbnz	r3, 800b164 <_fflush_r+0x10>
 800b15e:	2500      	movs	r5, #0
 800b160:	4628      	mov	r0, r5
 800b162:	bd38      	pop	{r3, r4, r5, pc}
 800b164:	b118      	cbz	r0, 800b16e <_fflush_r+0x1a>
 800b166:	6a03      	ldr	r3, [r0, #32]
 800b168:	b90b      	cbnz	r3, 800b16e <_fflush_r+0x1a>
 800b16a:	f7fe fb31 	bl	80097d0 <__sinit>
 800b16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d0f3      	beq.n	800b15e <_fflush_r+0xa>
 800b176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b178:	07d0      	lsls	r0, r2, #31
 800b17a:	d404      	bmi.n	800b186 <_fflush_r+0x32>
 800b17c:	0599      	lsls	r1, r3, #22
 800b17e:	d402      	bmi.n	800b186 <_fflush_r+0x32>
 800b180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b182:	f7fe fc4b 	bl	8009a1c <__retarget_lock_acquire_recursive>
 800b186:	4628      	mov	r0, r5
 800b188:	4621      	mov	r1, r4
 800b18a:	f7ff ff5d 	bl	800b048 <__sflush_r>
 800b18e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b190:	07da      	lsls	r2, r3, #31
 800b192:	4605      	mov	r5, r0
 800b194:	d4e4      	bmi.n	800b160 <_fflush_r+0xc>
 800b196:	89a3      	ldrh	r3, [r4, #12]
 800b198:	059b      	lsls	r3, r3, #22
 800b19a:	d4e1      	bmi.n	800b160 <_fflush_r+0xc>
 800b19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b19e:	f7fe fc3e 	bl	8009a1e <__retarget_lock_release_recursive>
 800b1a2:	e7dd      	b.n	800b160 <_fflush_r+0xc>

0800b1a4 <memmove>:
 800b1a4:	4288      	cmp	r0, r1
 800b1a6:	b510      	push	{r4, lr}
 800b1a8:	eb01 0402 	add.w	r4, r1, r2
 800b1ac:	d902      	bls.n	800b1b4 <memmove+0x10>
 800b1ae:	4284      	cmp	r4, r0
 800b1b0:	4623      	mov	r3, r4
 800b1b2:	d807      	bhi.n	800b1c4 <memmove+0x20>
 800b1b4:	1e43      	subs	r3, r0, #1
 800b1b6:	42a1      	cmp	r1, r4
 800b1b8:	d008      	beq.n	800b1cc <memmove+0x28>
 800b1ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1c2:	e7f8      	b.n	800b1b6 <memmove+0x12>
 800b1c4:	4402      	add	r2, r0
 800b1c6:	4601      	mov	r1, r0
 800b1c8:	428a      	cmp	r2, r1
 800b1ca:	d100      	bne.n	800b1ce <memmove+0x2a>
 800b1cc:	bd10      	pop	{r4, pc}
 800b1ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1d6:	e7f7      	b.n	800b1c8 <memmove+0x24>

0800b1d8 <memcpy>:
 800b1d8:	440a      	add	r2, r1
 800b1da:	4291      	cmp	r1, r2
 800b1dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1e0:	d100      	bne.n	800b1e4 <memcpy+0xc>
 800b1e2:	4770      	bx	lr
 800b1e4:	b510      	push	{r4, lr}
 800b1e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1ee:	4291      	cmp	r1, r2
 800b1f0:	d1f9      	bne.n	800b1e6 <memcpy+0xe>
 800b1f2:	bd10      	pop	{r4, pc}

0800b1f4 <__assert_func>:
 800b1f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1f6:	4614      	mov	r4, r2
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	4b09      	ldr	r3, [pc, #36]	; (800b220 <__assert_func+0x2c>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4605      	mov	r5, r0
 800b200:	68d8      	ldr	r0, [r3, #12]
 800b202:	b14c      	cbz	r4, 800b218 <__assert_func+0x24>
 800b204:	4b07      	ldr	r3, [pc, #28]	; (800b224 <__assert_func+0x30>)
 800b206:	9100      	str	r1, [sp, #0]
 800b208:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b20c:	4906      	ldr	r1, [pc, #24]	; (800b228 <__assert_func+0x34>)
 800b20e:	462b      	mov	r3, r5
 800b210:	f000 f872 	bl	800b2f8 <fiprintf>
 800b214:	f000 f882 	bl	800b31c <abort>
 800b218:	4b04      	ldr	r3, [pc, #16]	; (800b22c <__assert_func+0x38>)
 800b21a:	461c      	mov	r4, r3
 800b21c:	e7f3      	b.n	800b206 <__assert_func+0x12>
 800b21e:	bf00      	nop
 800b220:	24000084 	.word	0x24000084
 800b224:	0800bb5f 	.word	0x0800bb5f
 800b228:	0800bb6c 	.word	0x0800bb6c
 800b22c:	0800bb9a 	.word	0x0800bb9a

0800b230 <_calloc_r>:
 800b230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b232:	fba1 2402 	umull	r2, r4, r1, r2
 800b236:	b94c      	cbnz	r4, 800b24c <_calloc_r+0x1c>
 800b238:	4611      	mov	r1, r2
 800b23a:	9201      	str	r2, [sp, #4]
 800b23c:	f7fd fd86 	bl	8008d4c <_malloc_r>
 800b240:	9a01      	ldr	r2, [sp, #4]
 800b242:	4605      	mov	r5, r0
 800b244:	b930      	cbnz	r0, 800b254 <_calloc_r+0x24>
 800b246:	4628      	mov	r0, r5
 800b248:	b003      	add	sp, #12
 800b24a:	bd30      	pop	{r4, r5, pc}
 800b24c:	220c      	movs	r2, #12
 800b24e:	6002      	str	r2, [r0, #0]
 800b250:	2500      	movs	r5, #0
 800b252:	e7f8      	b.n	800b246 <_calloc_r+0x16>
 800b254:	4621      	mov	r1, r4
 800b256:	f7fe fb54 	bl	8009902 <memset>
 800b25a:	e7f4      	b.n	800b246 <_calloc_r+0x16>

0800b25c <__ascii_mbtowc>:
 800b25c:	b082      	sub	sp, #8
 800b25e:	b901      	cbnz	r1, 800b262 <__ascii_mbtowc+0x6>
 800b260:	a901      	add	r1, sp, #4
 800b262:	b142      	cbz	r2, 800b276 <__ascii_mbtowc+0x1a>
 800b264:	b14b      	cbz	r3, 800b27a <__ascii_mbtowc+0x1e>
 800b266:	7813      	ldrb	r3, [r2, #0]
 800b268:	600b      	str	r3, [r1, #0]
 800b26a:	7812      	ldrb	r2, [r2, #0]
 800b26c:	1e10      	subs	r0, r2, #0
 800b26e:	bf18      	it	ne
 800b270:	2001      	movne	r0, #1
 800b272:	b002      	add	sp, #8
 800b274:	4770      	bx	lr
 800b276:	4610      	mov	r0, r2
 800b278:	e7fb      	b.n	800b272 <__ascii_mbtowc+0x16>
 800b27a:	f06f 0001 	mvn.w	r0, #1
 800b27e:	e7f8      	b.n	800b272 <__ascii_mbtowc+0x16>

0800b280 <_realloc_r>:
 800b280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b284:	4680      	mov	r8, r0
 800b286:	4614      	mov	r4, r2
 800b288:	460e      	mov	r6, r1
 800b28a:	b921      	cbnz	r1, 800b296 <_realloc_r+0x16>
 800b28c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b290:	4611      	mov	r1, r2
 800b292:	f7fd bd5b 	b.w	8008d4c <_malloc_r>
 800b296:	b92a      	cbnz	r2, 800b2a4 <_realloc_r+0x24>
 800b298:	f7ff f9b6 	bl	800a608 <_free_r>
 800b29c:	4625      	mov	r5, r4
 800b29e:	4628      	mov	r0, r5
 800b2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2a4:	f000 f841 	bl	800b32a <_malloc_usable_size_r>
 800b2a8:	4284      	cmp	r4, r0
 800b2aa:	4607      	mov	r7, r0
 800b2ac:	d802      	bhi.n	800b2b4 <_realloc_r+0x34>
 800b2ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2b2:	d812      	bhi.n	800b2da <_realloc_r+0x5a>
 800b2b4:	4621      	mov	r1, r4
 800b2b6:	4640      	mov	r0, r8
 800b2b8:	f7fd fd48 	bl	8008d4c <_malloc_r>
 800b2bc:	4605      	mov	r5, r0
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d0ed      	beq.n	800b29e <_realloc_r+0x1e>
 800b2c2:	42bc      	cmp	r4, r7
 800b2c4:	4622      	mov	r2, r4
 800b2c6:	4631      	mov	r1, r6
 800b2c8:	bf28      	it	cs
 800b2ca:	463a      	movcs	r2, r7
 800b2cc:	f7ff ff84 	bl	800b1d8 <memcpy>
 800b2d0:	4631      	mov	r1, r6
 800b2d2:	4640      	mov	r0, r8
 800b2d4:	f7ff f998 	bl	800a608 <_free_r>
 800b2d8:	e7e1      	b.n	800b29e <_realloc_r+0x1e>
 800b2da:	4635      	mov	r5, r6
 800b2dc:	e7df      	b.n	800b29e <_realloc_r+0x1e>

0800b2de <__ascii_wctomb>:
 800b2de:	b149      	cbz	r1, 800b2f4 <__ascii_wctomb+0x16>
 800b2e0:	2aff      	cmp	r2, #255	; 0xff
 800b2e2:	bf85      	ittet	hi
 800b2e4:	238a      	movhi	r3, #138	; 0x8a
 800b2e6:	6003      	strhi	r3, [r0, #0]
 800b2e8:	700a      	strbls	r2, [r1, #0]
 800b2ea:	f04f 30ff 	movhi.w	r0, #4294967295
 800b2ee:	bf98      	it	ls
 800b2f0:	2001      	movls	r0, #1
 800b2f2:	4770      	bx	lr
 800b2f4:	4608      	mov	r0, r1
 800b2f6:	4770      	bx	lr

0800b2f8 <fiprintf>:
 800b2f8:	b40e      	push	{r1, r2, r3}
 800b2fa:	b503      	push	{r0, r1, lr}
 800b2fc:	4601      	mov	r1, r0
 800b2fe:	ab03      	add	r3, sp, #12
 800b300:	4805      	ldr	r0, [pc, #20]	; (800b318 <fiprintf+0x20>)
 800b302:	f853 2b04 	ldr.w	r2, [r3], #4
 800b306:	6800      	ldr	r0, [r0, #0]
 800b308:	9301      	str	r3, [sp, #4]
 800b30a:	f000 f83f 	bl	800b38c <_vfiprintf_r>
 800b30e:	b002      	add	sp, #8
 800b310:	f85d eb04 	ldr.w	lr, [sp], #4
 800b314:	b003      	add	sp, #12
 800b316:	4770      	bx	lr
 800b318:	24000084 	.word	0x24000084

0800b31c <abort>:
 800b31c:	b508      	push	{r3, lr}
 800b31e:	2006      	movs	r0, #6
 800b320:	f000 fa0c 	bl	800b73c <raise>
 800b324:	2001      	movs	r0, #1
 800b326:	f7f6 fb39 	bl	800199c <_exit>

0800b32a <_malloc_usable_size_r>:
 800b32a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b32e:	1f18      	subs	r0, r3, #4
 800b330:	2b00      	cmp	r3, #0
 800b332:	bfbc      	itt	lt
 800b334:	580b      	ldrlt	r3, [r1, r0]
 800b336:	18c0      	addlt	r0, r0, r3
 800b338:	4770      	bx	lr

0800b33a <__sfputc_r>:
 800b33a:	6893      	ldr	r3, [r2, #8]
 800b33c:	3b01      	subs	r3, #1
 800b33e:	2b00      	cmp	r3, #0
 800b340:	b410      	push	{r4}
 800b342:	6093      	str	r3, [r2, #8]
 800b344:	da08      	bge.n	800b358 <__sfputc_r+0x1e>
 800b346:	6994      	ldr	r4, [r2, #24]
 800b348:	42a3      	cmp	r3, r4
 800b34a:	db01      	blt.n	800b350 <__sfputc_r+0x16>
 800b34c:	290a      	cmp	r1, #10
 800b34e:	d103      	bne.n	800b358 <__sfputc_r+0x1e>
 800b350:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b354:	f000 b934 	b.w	800b5c0 <__swbuf_r>
 800b358:	6813      	ldr	r3, [r2, #0]
 800b35a:	1c58      	adds	r0, r3, #1
 800b35c:	6010      	str	r0, [r2, #0]
 800b35e:	7019      	strb	r1, [r3, #0]
 800b360:	4608      	mov	r0, r1
 800b362:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <__sfputs_r>:
 800b368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36a:	4606      	mov	r6, r0
 800b36c:	460f      	mov	r7, r1
 800b36e:	4614      	mov	r4, r2
 800b370:	18d5      	adds	r5, r2, r3
 800b372:	42ac      	cmp	r4, r5
 800b374:	d101      	bne.n	800b37a <__sfputs_r+0x12>
 800b376:	2000      	movs	r0, #0
 800b378:	e007      	b.n	800b38a <__sfputs_r+0x22>
 800b37a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b37e:	463a      	mov	r2, r7
 800b380:	4630      	mov	r0, r6
 800b382:	f7ff ffda 	bl	800b33a <__sfputc_r>
 800b386:	1c43      	adds	r3, r0, #1
 800b388:	d1f3      	bne.n	800b372 <__sfputs_r+0xa>
 800b38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b38c <_vfiprintf_r>:
 800b38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b390:	460d      	mov	r5, r1
 800b392:	b09d      	sub	sp, #116	; 0x74
 800b394:	4614      	mov	r4, r2
 800b396:	4698      	mov	r8, r3
 800b398:	4606      	mov	r6, r0
 800b39a:	b118      	cbz	r0, 800b3a4 <_vfiprintf_r+0x18>
 800b39c:	6a03      	ldr	r3, [r0, #32]
 800b39e:	b90b      	cbnz	r3, 800b3a4 <_vfiprintf_r+0x18>
 800b3a0:	f7fe fa16 	bl	80097d0 <__sinit>
 800b3a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3a6:	07d9      	lsls	r1, r3, #31
 800b3a8:	d405      	bmi.n	800b3b6 <_vfiprintf_r+0x2a>
 800b3aa:	89ab      	ldrh	r3, [r5, #12]
 800b3ac:	059a      	lsls	r2, r3, #22
 800b3ae:	d402      	bmi.n	800b3b6 <_vfiprintf_r+0x2a>
 800b3b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3b2:	f7fe fb33 	bl	8009a1c <__retarget_lock_acquire_recursive>
 800b3b6:	89ab      	ldrh	r3, [r5, #12]
 800b3b8:	071b      	lsls	r3, r3, #28
 800b3ba:	d501      	bpl.n	800b3c0 <_vfiprintf_r+0x34>
 800b3bc:	692b      	ldr	r3, [r5, #16]
 800b3be:	b99b      	cbnz	r3, 800b3e8 <_vfiprintf_r+0x5c>
 800b3c0:	4629      	mov	r1, r5
 800b3c2:	4630      	mov	r0, r6
 800b3c4:	f000 f93a 	bl	800b63c <__swsetup_r>
 800b3c8:	b170      	cbz	r0, 800b3e8 <_vfiprintf_r+0x5c>
 800b3ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3cc:	07dc      	lsls	r4, r3, #31
 800b3ce:	d504      	bpl.n	800b3da <_vfiprintf_r+0x4e>
 800b3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d4:	b01d      	add	sp, #116	; 0x74
 800b3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3da:	89ab      	ldrh	r3, [r5, #12]
 800b3dc:	0598      	lsls	r0, r3, #22
 800b3de:	d4f7      	bmi.n	800b3d0 <_vfiprintf_r+0x44>
 800b3e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3e2:	f7fe fb1c 	bl	8009a1e <__retarget_lock_release_recursive>
 800b3e6:	e7f3      	b.n	800b3d0 <_vfiprintf_r+0x44>
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ec:	2320      	movs	r3, #32
 800b3ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3f6:	2330      	movs	r3, #48	; 0x30
 800b3f8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b5ac <_vfiprintf_r+0x220>
 800b3fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b400:	f04f 0901 	mov.w	r9, #1
 800b404:	4623      	mov	r3, r4
 800b406:	469a      	mov	sl, r3
 800b408:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b40c:	b10a      	cbz	r2, 800b412 <_vfiprintf_r+0x86>
 800b40e:	2a25      	cmp	r2, #37	; 0x25
 800b410:	d1f9      	bne.n	800b406 <_vfiprintf_r+0x7a>
 800b412:	ebba 0b04 	subs.w	fp, sl, r4
 800b416:	d00b      	beq.n	800b430 <_vfiprintf_r+0xa4>
 800b418:	465b      	mov	r3, fp
 800b41a:	4622      	mov	r2, r4
 800b41c:	4629      	mov	r1, r5
 800b41e:	4630      	mov	r0, r6
 800b420:	f7ff ffa2 	bl	800b368 <__sfputs_r>
 800b424:	3001      	adds	r0, #1
 800b426:	f000 80a9 	beq.w	800b57c <_vfiprintf_r+0x1f0>
 800b42a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b42c:	445a      	add	r2, fp
 800b42e:	9209      	str	r2, [sp, #36]	; 0x24
 800b430:	f89a 3000 	ldrb.w	r3, [sl]
 800b434:	2b00      	cmp	r3, #0
 800b436:	f000 80a1 	beq.w	800b57c <_vfiprintf_r+0x1f0>
 800b43a:	2300      	movs	r3, #0
 800b43c:	f04f 32ff 	mov.w	r2, #4294967295
 800b440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b444:	f10a 0a01 	add.w	sl, sl, #1
 800b448:	9304      	str	r3, [sp, #16]
 800b44a:	9307      	str	r3, [sp, #28]
 800b44c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b450:	931a      	str	r3, [sp, #104]	; 0x68
 800b452:	4654      	mov	r4, sl
 800b454:	2205      	movs	r2, #5
 800b456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b45a:	4854      	ldr	r0, [pc, #336]	; (800b5ac <_vfiprintf_r+0x220>)
 800b45c:	f7f4 ff48 	bl	80002f0 <memchr>
 800b460:	9a04      	ldr	r2, [sp, #16]
 800b462:	b9d8      	cbnz	r0, 800b49c <_vfiprintf_r+0x110>
 800b464:	06d1      	lsls	r1, r2, #27
 800b466:	bf44      	itt	mi
 800b468:	2320      	movmi	r3, #32
 800b46a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b46e:	0713      	lsls	r3, r2, #28
 800b470:	bf44      	itt	mi
 800b472:	232b      	movmi	r3, #43	; 0x2b
 800b474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b478:	f89a 3000 	ldrb.w	r3, [sl]
 800b47c:	2b2a      	cmp	r3, #42	; 0x2a
 800b47e:	d015      	beq.n	800b4ac <_vfiprintf_r+0x120>
 800b480:	9a07      	ldr	r2, [sp, #28]
 800b482:	4654      	mov	r4, sl
 800b484:	2000      	movs	r0, #0
 800b486:	f04f 0c0a 	mov.w	ip, #10
 800b48a:	4621      	mov	r1, r4
 800b48c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b490:	3b30      	subs	r3, #48	; 0x30
 800b492:	2b09      	cmp	r3, #9
 800b494:	d94d      	bls.n	800b532 <_vfiprintf_r+0x1a6>
 800b496:	b1b0      	cbz	r0, 800b4c6 <_vfiprintf_r+0x13a>
 800b498:	9207      	str	r2, [sp, #28]
 800b49a:	e014      	b.n	800b4c6 <_vfiprintf_r+0x13a>
 800b49c:	eba0 0308 	sub.w	r3, r0, r8
 800b4a0:	fa09 f303 	lsl.w	r3, r9, r3
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	9304      	str	r3, [sp, #16]
 800b4a8:	46a2      	mov	sl, r4
 800b4aa:	e7d2      	b.n	800b452 <_vfiprintf_r+0xc6>
 800b4ac:	9b03      	ldr	r3, [sp, #12]
 800b4ae:	1d19      	adds	r1, r3, #4
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	9103      	str	r1, [sp, #12]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	bfbb      	ittet	lt
 800b4b8:	425b      	neglt	r3, r3
 800b4ba:	f042 0202 	orrlt.w	r2, r2, #2
 800b4be:	9307      	strge	r3, [sp, #28]
 800b4c0:	9307      	strlt	r3, [sp, #28]
 800b4c2:	bfb8      	it	lt
 800b4c4:	9204      	strlt	r2, [sp, #16]
 800b4c6:	7823      	ldrb	r3, [r4, #0]
 800b4c8:	2b2e      	cmp	r3, #46	; 0x2e
 800b4ca:	d10c      	bne.n	800b4e6 <_vfiprintf_r+0x15a>
 800b4cc:	7863      	ldrb	r3, [r4, #1]
 800b4ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b4d0:	d134      	bne.n	800b53c <_vfiprintf_r+0x1b0>
 800b4d2:	9b03      	ldr	r3, [sp, #12]
 800b4d4:	1d1a      	adds	r2, r3, #4
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	9203      	str	r2, [sp, #12]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	bfb8      	it	lt
 800b4de:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4e2:	3402      	adds	r4, #2
 800b4e4:	9305      	str	r3, [sp, #20]
 800b4e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b5bc <_vfiprintf_r+0x230>
 800b4ea:	7821      	ldrb	r1, [r4, #0]
 800b4ec:	2203      	movs	r2, #3
 800b4ee:	4650      	mov	r0, sl
 800b4f0:	f7f4 fefe 	bl	80002f0 <memchr>
 800b4f4:	b138      	cbz	r0, 800b506 <_vfiprintf_r+0x17a>
 800b4f6:	9b04      	ldr	r3, [sp, #16]
 800b4f8:	eba0 000a 	sub.w	r0, r0, sl
 800b4fc:	2240      	movs	r2, #64	; 0x40
 800b4fe:	4082      	lsls	r2, r0
 800b500:	4313      	orrs	r3, r2
 800b502:	3401      	adds	r4, #1
 800b504:	9304      	str	r3, [sp, #16]
 800b506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b50a:	4829      	ldr	r0, [pc, #164]	; (800b5b0 <_vfiprintf_r+0x224>)
 800b50c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b510:	2206      	movs	r2, #6
 800b512:	f7f4 feed 	bl	80002f0 <memchr>
 800b516:	2800      	cmp	r0, #0
 800b518:	d03f      	beq.n	800b59a <_vfiprintf_r+0x20e>
 800b51a:	4b26      	ldr	r3, [pc, #152]	; (800b5b4 <_vfiprintf_r+0x228>)
 800b51c:	bb1b      	cbnz	r3, 800b566 <_vfiprintf_r+0x1da>
 800b51e:	9b03      	ldr	r3, [sp, #12]
 800b520:	3307      	adds	r3, #7
 800b522:	f023 0307 	bic.w	r3, r3, #7
 800b526:	3308      	adds	r3, #8
 800b528:	9303      	str	r3, [sp, #12]
 800b52a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b52c:	443b      	add	r3, r7
 800b52e:	9309      	str	r3, [sp, #36]	; 0x24
 800b530:	e768      	b.n	800b404 <_vfiprintf_r+0x78>
 800b532:	fb0c 3202 	mla	r2, ip, r2, r3
 800b536:	460c      	mov	r4, r1
 800b538:	2001      	movs	r0, #1
 800b53a:	e7a6      	b.n	800b48a <_vfiprintf_r+0xfe>
 800b53c:	2300      	movs	r3, #0
 800b53e:	3401      	adds	r4, #1
 800b540:	9305      	str	r3, [sp, #20]
 800b542:	4619      	mov	r1, r3
 800b544:	f04f 0c0a 	mov.w	ip, #10
 800b548:	4620      	mov	r0, r4
 800b54a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b54e:	3a30      	subs	r2, #48	; 0x30
 800b550:	2a09      	cmp	r2, #9
 800b552:	d903      	bls.n	800b55c <_vfiprintf_r+0x1d0>
 800b554:	2b00      	cmp	r3, #0
 800b556:	d0c6      	beq.n	800b4e6 <_vfiprintf_r+0x15a>
 800b558:	9105      	str	r1, [sp, #20]
 800b55a:	e7c4      	b.n	800b4e6 <_vfiprintf_r+0x15a>
 800b55c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b560:	4604      	mov	r4, r0
 800b562:	2301      	movs	r3, #1
 800b564:	e7f0      	b.n	800b548 <_vfiprintf_r+0x1bc>
 800b566:	ab03      	add	r3, sp, #12
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	462a      	mov	r2, r5
 800b56c:	4b12      	ldr	r3, [pc, #72]	; (800b5b8 <_vfiprintf_r+0x22c>)
 800b56e:	a904      	add	r1, sp, #16
 800b570:	4630      	mov	r0, r6
 800b572:	f7fd fd09 	bl	8008f88 <_printf_float>
 800b576:	4607      	mov	r7, r0
 800b578:	1c78      	adds	r0, r7, #1
 800b57a:	d1d6      	bne.n	800b52a <_vfiprintf_r+0x19e>
 800b57c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b57e:	07d9      	lsls	r1, r3, #31
 800b580:	d405      	bmi.n	800b58e <_vfiprintf_r+0x202>
 800b582:	89ab      	ldrh	r3, [r5, #12]
 800b584:	059a      	lsls	r2, r3, #22
 800b586:	d402      	bmi.n	800b58e <_vfiprintf_r+0x202>
 800b588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b58a:	f7fe fa48 	bl	8009a1e <__retarget_lock_release_recursive>
 800b58e:	89ab      	ldrh	r3, [r5, #12]
 800b590:	065b      	lsls	r3, r3, #25
 800b592:	f53f af1d 	bmi.w	800b3d0 <_vfiprintf_r+0x44>
 800b596:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b598:	e71c      	b.n	800b3d4 <_vfiprintf_r+0x48>
 800b59a:	ab03      	add	r3, sp, #12
 800b59c:	9300      	str	r3, [sp, #0]
 800b59e:	462a      	mov	r2, r5
 800b5a0:	4b05      	ldr	r3, [pc, #20]	; (800b5b8 <_vfiprintf_r+0x22c>)
 800b5a2:	a904      	add	r1, sp, #16
 800b5a4:	4630      	mov	r0, r6
 800b5a6:	f7fd ff77 	bl	8009498 <_printf_i>
 800b5aa:	e7e4      	b.n	800b576 <_vfiprintf_r+0x1ea>
 800b5ac:	0800bb44 	.word	0x0800bb44
 800b5b0:	0800bb4e 	.word	0x0800bb4e
 800b5b4:	08008f89 	.word	0x08008f89
 800b5b8:	0800b369 	.word	0x0800b369
 800b5bc:	0800bb4a 	.word	0x0800bb4a

0800b5c0 <__swbuf_r>:
 800b5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c2:	460e      	mov	r6, r1
 800b5c4:	4614      	mov	r4, r2
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	b118      	cbz	r0, 800b5d2 <__swbuf_r+0x12>
 800b5ca:	6a03      	ldr	r3, [r0, #32]
 800b5cc:	b90b      	cbnz	r3, 800b5d2 <__swbuf_r+0x12>
 800b5ce:	f7fe f8ff 	bl	80097d0 <__sinit>
 800b5d2:	69a3      	ldr	r3, [r4, #24]
 800b5d4:	60a3      	str	r3, [r4, #8]
 800b5d6:	89a3      	ldrh	r3, [r4, #12]
 800b5d8:	071a      	lsls	r2, r3, #28
 800b5da:	d525      	bpl.n	800b628 <__swbuf_r+0x68>
 800b5dc:	6923      	ldr	r3, [r4, #16]
 800b5de:	b31b      	cbz	r3, 800b628 <__swbuf_r+0x68>
 800b5e0:	6823      	ldr	r3, [r4, #0]
 800b5e2:	6922      	ldr	r2, [r4, #16]
 800b5e4:	1a98      	subs	r0, r3, r2
 800b5e6:	6963      	ldr	r3, [r4, #20]
 800b5e8:	b2f6      	uxtb	r6, r6
 800b5ea:	4283      	cmp	r3, r0
 800b5ec:	4637      	mov	r7, r6
 800b5ee:	dc04      	bgt.n	800b5fa <__swbuf_r+0x3a>
 800b5f0:	4621      	mov	r1, r4
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	f7ff fdae 	bl	800b154 <_fflush_r>
 800b5f8:	b9e0      	cbnz	r0, 800b634 <__swbuf_r+0x74>
 800b5fa:	68a3      	ldr	r3, [r4, #8]
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	60a3      	str	r3, [r4, #8]
 800b600:	6823      	ldr	r3, [r4, #0]
 800b602:	1c5a      	adds	r2, r3, #1
 800b604:	6022      	str	r2, [r4, #0]
 800b606:	701e      	strb	r6, [r3, #0]
 800b608:	6962      	ldr	r2, [r4, #20]
 800b60a:	1c43      	adds	r3, r0, #1
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d004      	beq.n	800b61a <__swbuf_r+0x5a>
 800b610:	89a3      	ldrh	r3, [r4, #12]
 800b612:	07db      	lsls	r3, r3, #31
 800b614:	d506      	bpl.n	800b624 <__swbuf_r+0x64>
 800b616:	2e0a      	cmp	r6, #10
 800b618:	d104      	bne.n	800b624 <__swbuf_r+0x64>
 800b61a:	4621      	mov	r1, r4
 800b61c:	4628      	mov	r0, r5
 800b61e:	f7ff fd99 	bl	800b154 <_fflush_r>
 800b622:	b938      	cbnz	r0, 800b634 <__swbuf_r+0x74>
 800b624:	4638      	mov	r0, r7
 800b626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b628:	4621      	mov	r1, r4
 800b62a:	4628      	mov	r0, r5
 800b62c:	f000 f806 	bl	800b63c <__swsetup_r>
 800b630:	2800      	cmp	r0, #0
 800b632:	d0d5      	beq.n	800b5e0 <__swbuf_r+0x20>
 800b634:	f04f 37ff 	mov.w	r7, #4294967295
 800b638:	e7f4      	b.n	800b624 <__swbuf_r+0x64>
	...

0800b63c <__swsetup_r>:
 800b63c:	b538      	push	{r3, r4, r5, lr}
 800b63e:	4b2a      	ldr	r3, [pc, #168]	; (800b6e8 <__swsetup_r+0xac>)
 800b640:	4605      	mov	r5, r0
 800b642:	6818      	ldr	r0, [r3, #0]
 800b644:	460c      	mov	r4, r1
 800b646:	b118      	cbz	r0, 800b650 <__swsetup_r+0x14>
 800b648:	6a03      	ldr	r3, [r0, #32]
 800b64a:	b90b      	cbnz	r3, 800b650 <__swsetup_r+0x14>
 800b64c:	f7fe f8c0 	bl	80097d0 <__sinit>
 800b650:	89a3      	ldrh	r3, [r4, #12]
 800b652:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b656:	0718      	lsls	r0, r3, #28
 800b658:	d422      	bmi.n	800b6a0 <__swsetup_r+0x64>
 800b65a:	06d9      	lsls	r1, r3, #27
 800b65c:	d407      	bmi.n	800b66e <__swsetup_r+0x32>
 800b65e:	2309      	movs	r3, #9
 800b660:	602b      	str	r3, [r5, #0]
 800b662:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b666:	81a3      	strh	r3, [r4, #12]
 800b668:	f04f 30ff 	mov.w	r0, #4294967295
 800b66c:	e034      	b.n	800b6d8 <__swsetup_r+0x9c>
 800b66e:	0758      	lsls	r0, r3, #29
 800b670:	d512      	bpl.n	800b698 <__swsetup_r+0x5c>
 800b672:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b674:	b141      	cbz	r1, 800b688 <__swsetup_r+0x4c>
 800b676:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b67a:	4299      	cmp	r1, r3
 800b67c:	d002      	beq.n	800b684 <__swsetup_r+0x48>
 800b67e:	4628      	mov	r0, r5
 800b680:	f7fe ffc2 	bl	800a608 <_free_r>
 800b684:	2300      	movs	r3, #0
 800b686:	6363      	str	r3, [r4, #52]	; 0x34
 800b688:	89a3      	ldrh	r3, [r4, #12]
 800b68a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b68e:	81a3      	strh	r3, [r4, #12]
 800b690:	2300      	movs	r3, #0
 800b692:	6063      	str	r3, [r4, #4]
 800b694:	6923      	ldr	r3, [r4, #16]
 800b696:	6023      	str	r3, [r4, #0]
 800b698:	89a3      	ldrh	r3, [r4, #12]
 800b69a:	f043 0308 	orr.w	r3, r3, #8
 800b69e:	81a3      	strh	r3, [r4, #12]
 800b6a0:	6923      	ldr	r3, [r4, #16]
 800b6a2:	b94b      	cbnz	r3, 800b6b8 <__swsetup_r+0x7c>
 800b6a4:	89a3      	ldrh	r3, [r4, #12]
 800b6a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6ae:	d003      	beq.n	800b6b8 <__swsetup_r+0x7c>
 800b6b0:	4621      	mov	r1, r4
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	f000 f884 	bl	800b7c0 <__smakebuf_r>
 800b6b8:	89a0      	ldrh	r0, [r4, #12]
 800b6ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6be:	f010 0301 	ands.w	r3, r0, #1
 800b6c2:	d00a      	beq.n	800b6da <__swsetup_r+0x9e>
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	60a3      	str	r3, [r4, #8]
 800b6c8:	6963      	ldr	r3, [r4, #20]
 800b6ca:	425b      	negs	r3, r3
 800b6cc:	61a3      	str	r3, [r4, #24]
 800b6ce:	6923      	ldr	r3, [r4, #16]
 800b6d0:	b943      	cbnz	r3, 800b6e4 <__swsetup_r+0xa8>
 800b6d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b6d6:	d1c4      	bne.n	800b662 <__swsetup_r+0x26>
 800b6d8:	bd38      	pop	{r3, r4, r5, pc}
 800b6da:	0781      	lsls	r1, r0, #30
 800b6dc:	bf58      	it	pl
 800b6de:	6963      	ldrpl	r3, [r4, #20]
 800b6e0:	60a3      	str	r3, [r4, #8]
 800b6e2:	e7f4      	b.n	800b6ce <__swsetup_r+0x92>
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	e7f7      	b.n	800b6d8 <__swsetup_r+0x9c>
 800b6e8:	24000084 	.word	0x24000084

0800b6ec <_raise_r>:
 800b6ec:	291f      	cmp	r1, #31
 800b6ee:	b538      	push	{r3, r4, r5, lr}
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	460d      	mov	r5, r1
 800b6f4:	d904      	bls.n	800b700 <_raise_r+0x14>
 800b6f6:	2316      	movs	r3, #22
 800b6f8:	6003      	str	r3, [r0, #0]
 800b6fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b6fe:	bd38      	pop	{r3, r4, r5, pc}
 800b700:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b702:	b112      	cbz	r2, 800b70a <_raise_r+0x1e>
 800b704:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b708:	b94b      	cbnz	r3, 800b71e <_raise_r+0x32>
 800b70a:	4620      	mov	r0, r4
 800b70c:	f000 f830 	bl	800b770 <_getpid_r>
 800b710:	462a      	mov	r2, r5
 800b712:	4601      	mov	r1, r0
 800b714:	4620      	mov	r0, r4
 800b716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b71a:	f000 b817 	b.w	800b74c <_kill_r>
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d00a      	beq.n	800b738 <_raise_r+0x4c>
 800b722:	1c59      	adds	r1, r3, #1
 800b724:	d103      	bne.n	800b72e <_raise_r+0x42>
 800b726:	2316      	movs	r3, #22
 800b728:	6003      	str	r3, [r0, #0]
 800b72a:	2001      	movs	r0, #1
 800b72c:	e7e7      	b.n	800b6fe <_raise_r+0x12>
 800b72e:	2400      	movs	r4, #0
 800b730:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b734:	4628      	mov	r0, r5
 800b736:	4798      	blx	r3
 800b738:	2000      	movs	r0, #0
 800b73a:	e7e0      	b.n	800b6fe <_raise_r+0x12>

0800b73c <raise>:
 800b73c:	4b02      	ldr	r3, [pc, #8]	; (800b748 <raise+0xc>)
 800b73e:	4601      	mov	r1, r0
 800b740:	6818      	ldr	r0, [r3, #0]
 800b742:	f7ff bfd3 	b.w	800b6ec <_raise_r>
 800b746:	bf00      	nop
 800b748:	24000084 	.word	0x24000084

0800b74c <_kill_r>:
 800b74c:	b538      	push	{r3, r4, r5, lr}
 800b74e:	4d07      	ldr	r5, [pc, #28]	; (800b76c <_kill_r+0x20>)
 800b750:	2300      	movs	r3, #0
 800b752:	4604      	mov	r4, r0
 800b754:	4608      	mov	r0, r1
 800b756:	4611      	mov	r1, r2
 800b758:	602b      	str	r3, [r5, #0]
 800b75a:	f7f6 f90f 	bl	800197c <_kill>
 800b75e:	1c43      	adds	r3, r0, #1
 800b760:	d102      	bne.n	800b768 <_kill_r+0x1c>
 800b762:	682b      	ldr	r3, [r5, #0]
 800b764:	b103      	cbz	r3, 800b768 <_kill_r+0x1c>
 800b766:	6023      	str	r3, [r4, #0]
 800b768:	bd38      	pop	{r3, r4, r5, pc}
 800b76a:	bf00      	nop
 800b76c:	2400057c 	.word	0x2400057c

0800b770 <_getpid_r>:
 800b770:	f7f6 b8fc 	b.w	800196c <_getpid>

0800b774 <__swhatbuf_r>:
 800b774:	b570      	push	{r4, r5, r6, lr}
 800b776:	460c      	mov	r4, r1
 800b778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b77c:	2900      	cmp	r1, #0
 800b77e:	b096      	sub	sp, #88	; 0x58
 800b780:	4615      	mov	r5, r2
 800b782:	461e      	mov	r6, r3
 800b784:	da0d      	bge.n	800b7a2 <__swhatbuf_r+0x2e>
 800b786:	89a3      	ldrh	r3, [r4, #12]
 800b788:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b78c:	f04f 0100 	mov.w	r1, #0
 800b790:	bf0c      	ite	eq
 800b792:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b796:	2340      	movne	r3, #64	; 0x40
 800b798:	2000      	movs	r0, #0
 800b79a:	6031      	str	r1, [r6, #0]
 800b79c:	602b      	str	r3, [r5, #0]
 800b79e:	b016      	add	sp, #88	; 0x58
 800b7a0:	bd70      	pop	{r4, r5, r6, pc}
 800b7a2:	466a      	mov	r2, sp
 800b7a4:	f000 f848 	bl	800b838 <_fstat_r>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	dbec      	blt.n	800b786 <__swhatbuf_r+0x12>
 800b7ac:	9901      	ldr	r1, [sp, #4]
 800b7ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b7b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b7b6:	4259      	negs	r1, r3
 800b7b8:	4159      	adcs	r1, r3
 800b7ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7be:	e7eb      	b.n	800b798 <__swhatbuf_r+0x24>

0800b7c0 <__smakebuf_r>:
 800b7c0:	898b      	ldrh	r3, [r1, #12]
 800b7c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7c4:	079d      	lsls	r5, r3, #30
 800b7c6:	4606      	mov	r6, r0
 800b7c8:	460c      	mov	r4, r1
 800b7ca:	d507      	bpl.n	800b7dc <__smakebuf_r+0x1c>
 800b7cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7d0:	6023      	str	r3, [r4, #0]
 800b7d2:	6123      	str	r3, [r4, #16]
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	6163      	str	r3, [r4, #20]
 800b7d8:	b002      	add	sp, #8
 800b7da:	bd70      	pop	{r4, r5, r6, pc}
 800b7dc:	ab01      	add	r3, sp, #4
 800b7de:	466a      	mov	r2, sp
 800b7e0:	f7ff ffc8 	bl	800b774 <__swhatbuf_r>
 800b7e4:	9900      	ldr	r1, [sp, #0]
 800b7e6:	4605      	mov	r5, r0
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	f7fd faaf 	bl	8008d4c <_malloc_r>
 800b7ee:	b948      	cbnz	r0, 800b804 <__smakebuf_r+0x44>
 800b7f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7f4:	059a      	lsls	r2, r3, #22
 800b7f6:	d4ef      	bmi.n	800b7d8 <__smakebuf_r+0x18>
 800b7f8:	f023 0303 	bic.w	r3, r3, #3
 800b7fc:	f043 0302 	orr.w	r3, r3, #2
 800b800:	81a3      	strh	r3, [r4, #12]
 800b802:	e7e3      	b.n	800b7cc <__smakebuf_r+0xc>
 800b804:	89a3      	ldrh	r3, [r4, #12]
 800b806:	6020      	str	r0, [r4, #0]
 800b808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b80c:	81a3      	strh	r3, [r4, #12]
 800b80e:	9b00      	ldr	r3, [sp, #0]
 800b810:	6163      	str	r3, [r4, #20]
 800b812:	9b01      	ldr	r3, [sp, #4]
 800b814:	6120      	str	r0, [r4, #16]
 800b816:	b15b      	cbz	r3, 800b830 <__smakebuf_r+0x70>
 800b818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b81c:	4630      	mov	r0, r6
 800b81e:	f000 f81d 	bl	800b85c <_isatty_r>
 800b822:	b128      	cbz	r0, 800b830 <__smakebuf_r+0x70>
 800b824:	89a3      	ldrh	r3, [r4, #12]
 800b826:	f023 0303 	bic.w	r3, r3, #3
 800b82a:	f043 0301 	orr.w	r3, r3, #1
 800b82e:	81a3      	strh	r3, [r4, #12]
 800b830:	89a3      	ldrh	r3, [r4, #12]
 800b832:	431d      	orrs	r5, r3
 800b834:	81a5      	strh	r5, [r4, #12]
 800b836:	e7cf      	b.n	800b7d8 <__smakebuf_r+0x18>

0800b838 <_fstat_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	4d07      	ldr	r5, [pc, #28]	; (800b858 <_fstat_r+0x20>)
 800b83c:	2300      	movs	r3, #0
 800b83e:	4604      	mov	r4, r0
 800b840:	4608      	mov	r0, r1
 800b842:	4611      	mov	r1, r2
 800b844:	602b      	str	r3, [r5, #0]
 800b846:	f7f6 f8f8 	bl	8001a3a <_fstat>
 800b84a:	1c43      	adds	r3, r0, #1
 800b84c:	d102      	bne.n	800b854 <_fstat_r+0x1c>
 800b84e:	682b      	ldr	r3, [r5, #0]
 800b850:	b103      	cbz	r3, 800b854 <_fstat_r+0x1c>
 800b852:	6023      	str	r3, [r4, #0]
 800b854:	bd38      	pop	{r3, r4, r5, pc}
 800b856:	bf00      	nop
 800b858:	2400057c 	.word	0x2400057c

0800b85c <_isatty_r>:
 800b85c:	b538      	push	{r3, r4, r5, lr}
 800b85e:	4d06      	ldr	r5, [pc, #24]	; (800b878 <_isatty_r+0x1c>)
 800b860:	2300      	movs	r3, #0
 800b862:	4604      	mov	r4, r0
 800b864:	4608      	mov	r0, r1
 800b866:	602b      	str	r3, [r5, #0]
 800b868:	f7f6 f8f7 	bl	8001a5a <_isatty>
 800b86c:	1c43      	adds	r3, r0, #1
 800b86e:	d102      	bne.n	800b876 <_isatty_r+0x1a>
 800b870:	682b      	ldr	r3, [r5, #0]
 800b872:	b103      	cbz	r3, 800b876 <_isatty_r+0x1a>
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	bd38      	pop	{r3, r4, r5, pc}
 800b878:	2400057c 	.word	0x2400057c

0800b87c <_init>:
 800b87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87e:	bf00      	nop
 800b880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b882:	bc08      	pop	{r3}
 800b884:	469e      	mov	lr, r3
 800b886:	4770      	bx	lr

0800b888 <_fini>:
 800b888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b88a:	bf00      	nop
 800b88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b88e:	bc08      	pop	{r3}
 800b890:	469e      	mov	lr, r3
 800b892:	4770      	bx	lr
