
neuralnet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d20  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000814  08008fd0  08008fd0  00018fd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080097e4  080097e4  000197e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080097ec  080097ec  000197ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080097f0  080097f0  000197f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  24000000  080097f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001d8  240001f0  080099e4  000201f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240003c8  080099e4  000203c8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000101f0  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001f0e  00000000  00000000  0003040e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b70  00000000  00000000  00032320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ab8  00000000  00000000  00032e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002fc21  00000000  00000000  00033948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000f02d  00000000  00000000  00063569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00134a96  00000000  00000000  00072596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001a702c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003e9c  00000000  00000000  001a707c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001f0 	.word	0x240001f0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008fb8 	.word	0x08008fb8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001f4 	.word	0x240001f4
 80002ec:	08008fb8 	.word	0x08008fb8

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <init_mat>:
};
struct network architecture[5];

//FUNCTION DEFINITIONS START
struct matrix init_mat(int row, int col)
{
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b089      	sub	sp, #36	; 0x24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
    struct matrix x;
    x.row = row;
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	61bb      	str	r3, [r7, #24]
    x.col = col;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	61fb      	str	r3, [r7, #28]
    x.value = (float *)malloc(sizeof(float)*x.row * x.col);
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	69fa      	ldr	r2, [r7, #28]
 80006bc:	fb02 f303 	mul.w	r3, r2, r3
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	4618      	mov	r0, r3
 80006c4:	f005 fe34 	bl	8006330 <malloc>
 80006c8:	4603      	mov	r3, r0
 80006ca:	617b      	str	r3, [r7, #20]
    return x;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	461c      	mov	r4, r3
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80006d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	3724      	adds	r7, #36	; 0x24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd90      	pop	{r4, r7, pc}

080006e4 <matmul>:

struct matrix matmul(struct matrix A,struct matrix B)
{
 80006e4:	b5b0      	push	{r4, r5, r7, lr}
 80006e6:	b0cc      	sub	sp, #304	; 0x130
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	f507 7498 	add.w	r4, r7, #304	; 0x130
 80006ee:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 80006f2:	6020      	str	r0, [r4, #0]
 80006f4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80006f8:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 80006fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    struct matrix result;
    if(A.col != B.row)
 8000700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000704:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000708:	689a      	ldr	r2, [r3, #8]
 800070a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800070e:	429a      	cmp	r2, r3
 8000710:	d029      	beq.n	8000766 <matmul+0x82>
    {
			char buffer[256] = "Issue: matmul";
 8000712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000716:	f5a3 758e 	sub.w	r5, r3, #284	; 0x11c
 800071a:	4b63      	ldr	r3, [pc, #396]	; (80008a8 <matmul+0x1c4>)
 800071c:	462c      	mov	r4, r5
 800071e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000720:	c407      	stmia	r4!, {r0, r1, r2}
 8000722:	8023      	strh	r3, [r4, #0]
 8000724:	f105 030e 	add.w	r3, r5, #14
 8000728:	22f2      	movs	r2, #242	; 0xf2
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f005 fe07 	bl	8006340 <memset>
			HAL_UART_Transmit(&huart3,(uint8_t *)buffer,strlen(buffer),100);
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fdda 	bl	80002f0 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	b29a      	uxth	r2, r3
 8000740:	f107 0114 	add.w	r1, r7, #20
 8000744:	2364      	movs	r3, #100	; 0x64
 8000746:	4859      	ldr	r0, [pc, #356]	; (80008ac <matmul+0x1c8>)
 8000748:	f004 fc0e 	bl	8004f68 <HAL_UART_Transmit>
			return result;
 800074c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000750:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	461c      	mov	r4, r3
 8000758:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800075c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000760:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                *(result.value + result.col * row + col) = sum;
            }
        }
        return result;
    }
}
 8000764:	e096      	b.n	8000894 <matmul+0x1b0>
        result.row = A.row;
 8000766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800076a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        result.col = B.col;
 8000774:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000778:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        result.value = (float *)malloc(sizeof(float)*result.row * result.col);
 800077c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000780:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000784:	fb02 f303 	mul.w	r3, r2, r3
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	4618      	mov	r0, r3
 800078c:	f005 fdd0 	bl	8006330 <malloc>
 8000790:	4603      	mov	r3, r0
 8000792:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        for (int row = 0; row < A.row; ++row)
 8000796:	2300      	movs	r3, #0
 8000798:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800079c:	e065      	b.n	800086a <matmul+0x186>
            for (int col = 0; col < B.col; ++col)
 800079e:	2300      	movs	r3, #0
 80007a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80007a4:	e056      	b.n	8000854 <matmul+0x170>
                sum = 0;
 80007a6:	f04f 0300 	mov.w	r3, #0
 80007aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                for (int it = 0; it < B.row; ++it)
 80007ae:	2300      	movs	r3, #0
 80007b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80007b4:	e032      	b.n	800081c <matmul+0x138>
                    sum += (*(A.value + A.col*row + it) * *(B.value +B.col * it + col));
 80007b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80007ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80007c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80007ce:	fb01 f303 	mul.w	r3, r1, r3
 80007d2:	4619      	mov	r1, r3
 80007d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80007d8:	440b      	add	r3, r1
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	ed93 7a00 	vldr	s14, [r3]
 80007e2:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80007e6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80007ea:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80007ee:	fb01 f303 	mul.w	r3, r1, r3
 80007f2:	4619      	mov	r1, r3
 80007f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007f8:	440b      	add	r3, r1
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	edd3 7a00 	vldr	s15, [r3]
 8000802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000806:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 800080a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800080e:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
                for (int it = 0; it < B.row; ++it)
 8000812:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000816:	3301      	adds	r3, #1
 8000818:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800081c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000820:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000824:	429a      	cmp	r2, r3
 8000826:	dbc6      	blt.n	80007b6 <matmul+0xd2>
                *(result.value + result.col * row + col) = sum;
 8000828:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800082c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000830:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8000834:	fb01 f303 	mul.w	r3, r1, r3
 8000838:	4619      	mov	r1, r3
 800083a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800083e:	440b      	add	r3, r1
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000848:	601a      	str	r2, [r3, #0]
            for (int col = 0; col < B.col; ++col)
 800084a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800084e:	3301      	adds	r3, #1
 8000850:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000854:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000858:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800085c:	429a      	cmp	r2, r3
 800085e:	dba2      	blt.n	80007a6 <matmul+0xc2>
        for (int row = 0; row < A.row; ++row)
 8000860:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000864:	3301      	adds	r3, #1
 8000866:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800086a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800086e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000878:	429a      	cmp	r2, r3
 800087a:	db90      	blt.n	800079e <matmul+0xba>
        return result;
 800087c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000880:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	461c      	mov	r4, r3
 8000888:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800088c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000890:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000898:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800089c:	6818      	ldr	r0, [r3, #0]
 800089e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bdb0      	pop	{r4, r5, r7, pc}
 80008a6:	bf00      	nop
 80008a8:	08008fd0 	.word	0x08008fd0
 80008ac:	2400020c 	.word	0x2400020c

080008b0 <matrix_add>:
struct matrix matrix_add(struct matrix A, struct matrix B)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b0c9      	sub	sp, #292	; 0x124
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80008ba:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 80008be:	6020      	str	r0, [r4, #0]
 80008c0:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80008c4:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 80008c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    struct matrix result;
    if(A.row !=B.row || A.col != B.col)
 80008cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008d0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80008d4:	685a      	ldr	r2, [r3, #4]
 80008d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008da:	429a      	cmp	r2, r3
 80008dc:	d108      	bne.n	80008f0 <matrix_add+0x40>
 80008de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008e2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80008e6:	689a      	ldr	r2, [r3, #8]
 80008e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d02c      	beq.n	800094a <matrix_add+0x9a>
    {
			char buffer[256] = "Issue: add";
 80008f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008f4:	f5a3 7488 	sub.w	r4, r3, #272	; 0x110
 80008f8:	4a47      	ldr	r2, [pc, #284]	; (8000a18 <matrix_add+0x168>)
 80008fa:	4623      	mov	r3, r4
 80008fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80008fe:	c303      	stmia	r3!, {r0, r1}
 8000900:	801a      	strh	r2, [r3, #0]
 8000902:	3302      	adds	r3, #2
 8000904:	0c12      	lsrs	r2, r2, #16
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	f104 030b 	add.w	r3, r4, #11
 800090c:	22f5      	movs	r2, #245	; 0xf5
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f005 fd15 	bl	8006340 <memset>
	HAL_UART_Transmit(&huart3,(uint8_t *)buffer,strlen(buffer),100);
 8000916:	f107 0310 	add.w	r3, r7, #16
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fce8 	bl	80002f0 <strlen>
 8000920:	4603      	mov	r3, r0
 8000922:	b29a      	uxth	r2, r3
 8000924:	f107 0110 	add.w	r1, r7, #16
 8000928:	2364      	movs	r3, #100	; 0x64
 800092a:	483c      	ldr	r0, [pc, #240]	; (8000a1c <matrix_add+0x16c>)
 800092c:	f004 fb1c 	bl	8004f68 <HAL_UART_Transmit>
        return result;
 8000930:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000934:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	461c      	mov	r4, r3
 800093c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000940:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000944:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        {
            *(result.value+i) = *(A.value+i) + *(B.value+i);
        }
        return result;
    }
}
 8000948:	e05c      	b.n	8000a04 <matrix_add+0x154>
        result.row = A.row;result.col = A.col;
 800094a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800094e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000958:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800095c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        result.value = (float *)malloc(sizeof(float)*result.row * result.col);
 8000966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800096a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800096e:	fb02 f303 	mul.w	r3, r2, r3
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	4618      	mov	r0, r3
 8000976:	f005 fcdb 	bl	8006330 <malloc>
 800097a:	4603      	mov	r3, r0
 800097c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        for(int i=0;i<=A.row*A.col;++i)
 8000980:	2300      	movs	r3, #0
 8000982:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000986:	e021      	b.n	80009cc <matrix_add+0x11c>
            *(result.value+i) = *(A.value+i) + *(B.value+i);
 8000988:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800098c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	4413      	add	r3, r2
 800099a:	ed93 7a00 	vldr	s14, [r3]
 800099e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80009a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	4413      	add	r3, r2
 80009aa:	edd3 7a00 	vldr	s15, [r3]
 80009ae:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80009b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009be:	edc3 7a00 	vstr	s15, [r3]
        for(int i=0;i<=A.row*A.col;++i)
 80009c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80009c6:	3301      	adds	r3, #1
 80009c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80009cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80009d0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80009da:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80009de:	6892      	ldr	r2, [r2, #8]
 80009e0:	fb02 f303 	mul.w	r3, r2, r3
 80009e4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80009e8:	429a      	cmp	r2, r3
 80009ea:	ddcd      	ble.n	8000988 <matrix_add+0xd8>
        return result;
 80009ec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80009f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	461c      	mov	r4, r3
 80009f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000a04:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a08:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000a0c:	6818      	ldr	r0, [r3, #0]
 8000a0e:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd90      	pop	{r4, r7, pc}
 8000a16:	bf00      	nop
 8000a18:	080090d0 	.word	0x080090d0
 8000a1c:	2400020c 	.word	0x2400020c

08000a20 <matrix_subtract>:
struct matrix matrix_subtract(struct matrix A, struct matrix B)
{
 8000a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a22:	b0c9      	sub	sp, #292	; 0x124
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8000a2a:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8000a2e:	6020      	str	r0, [r4, #0]
 8000a30:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8000a34:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8000a38:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    struct matrix result;
    if(A.row !=B.row || A.col != B.col)
 8000a3c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a40:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d108      	bne.n	8000a60 <matrix_subtract+0x40>
 8000a4e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a52:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000a56:	689a      	ldr	r2, [r3, #8]
 8000a58:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d02b      	beq.n	8000ab8 <matrix_subtract+0x98>
    {
char buffer[256] = "Issue: substract";
 8000a60:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a64:	f5a3 7688 	sub.w	r6, r3, #272	; 0x110
 8000a68:	4b46      	ldr	r3, [pc, #280]	; (8000b84 <matrix_subtract+0x164>)
 8000a6a:	4634      	mov	r4, r6
 8000a6c:	461d      	mov	r5, r3
 8000a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a72:	682b      	ldr	r3, [r5, #0]
 8000a74:	7023      	strb	r3, [r4, #0]
 8000a76:	f106 0311 	add.w	r3, r6, #17
 8000a7a:	22ef      	movs	r2, #239	; 0xef
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f005 fc5e 	bl	8006340 <memset>
	HAL_UART_Transmit(&huart3,(uint8_t *)buffer,strlen(buffer),100);
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fc31 	bl	80002f0 <strlen>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	f107 0110 	add.w	r1, r7, #16
 8000a96:	2364      	movs	r3, #100	; 0x64
 8000a98:	483b      	ldr	r0, [pc, #236]	; (8000b88 <matrix_subtract+0x168>)
 8000a9a:	f004 fa65 	bl	8004f68 <HAL_UART_Transmit>
        return result;
 8000a9e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000aa2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	461c      	mov	r4, r3
 8000aaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000aae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        {
            *(result.value+i) = *(A.value+i) - *(B.value+i);
        }
        return result;
    }
}
 8000ab6:	e05c      	b.n	8000b72 <matrix_subtract+0x152>
        result.row = A.row;result.col = A.col;
 8000ab8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000abc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000ac6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000aca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        result.value = (float *)malloc(sizeof(float)*result.row * result.col);
 8000ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ad8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000adc:	fb02 f303 	mul.w	r3, r2, r3
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f005 fc24 	bl	8006330 <malloc>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        for(int i=0;i<=A.row*A.col;++i)
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000af4:	e021      	b.n	8000b3a <matrix_subtract+0x11a>
            *(result.value+i) = *(A.value+i) - *(B.value+i);
 8000af6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000afa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	4413      	add	r3, r2
 8000b08:	ed93 7a00 	vldr	s14, [r3]
 8000b0c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8000b10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	edd3 7a00 	vldr	s15, [r3]
 8000b1c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000b20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	4413      	add	r3, r2
 8000b28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b2c:	edc3 7a00 	vstr	s15, [r3]
        for(int i=0;i<=A.row*A.col;++i)
 8000b30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000b34:	3301      	adds	r3, #1
 8000b36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000b3a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000b3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000b48:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8000b4c:	6892      	ldr	r2, [r2, #8]
 8000b4e:	fb02 f303 	mul.w	r3, r2, r3
 8000b52:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000b56:	429a      	cmp	r2, r3
 8000b58:	ddcd      	ble.n	8000af6 <matrix_subtract+0xd6>
        return result;
 8000b5a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000b5e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	461c      	mov	r4, r3
 8000b66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000b72:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000b76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000b7a:	6818      	ldr	r0, [r3, #0]
 8000b7c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b84:	080091d0 	.word	0x080091d0
 8000b88:	2400020c 	.word	0x2400020c

08000b8c <matrix_transpose>:
struct matrix matrix_transpose(struct matrix A)
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b08b      	sub	sp, #44	; 0x2c
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	4638      	mov	r0, r7
 8000b96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if(A.row == 1 || A.col == 1)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d002      	beq.n	8000ba6 <matrix_transpose+0x1a>
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d113      	bne.n	8000bce <matrix_transpose+0x42>
    {
        A.row ^= A.col ^= A.row ^= A.col;
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	4053      	eors	r3, r2
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	4053      	eors	r3, r2
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4053      	eors	r3, r2
 8000bbc:	607b      	str	r3, [r7, #4]
        return A;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	461c      	mov	r4, r3
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000bc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000bcc:	e04b      	b.n	8000c66 <matrix_transpose+0xda>
    }
    else {
        struct matrix result;
        result.row = A.row;result.col = A.col;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	61fb      	str	r3, [r7, #28]
        result.value = (float *)malloc(sizeof(float)*result.row * result.col);
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	69fa      	ldr	r2, [r7, #28]
 8000bda:	fb02 f303 	mul.w	r3, r2, r3
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f005 fba5 	bl	8006330 <malloc>
 8000be6:	4603      	mov	r3, r0
 8000be8:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < A.row; ++i) {
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
 8000bee:	e022      	b.n	8000c36 <matrix_transpose+0xaa>
            for (int j = 0; j < A.col; ++j) {
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
 8000bf4:	e018      	b.n	8000c28 <matrix_transpose+0x9c>
                *(result.value + A.row * i + j) = *(A.value + i + A.col * j);
 8000bf6:	683a      	ldr	r2, [r7, #0]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	6a39      	ldr	r1, [r7, #32]
 8000bfc:	fb01 f303 	mul.w	r3, r1, r3
 8000c00:	4619      	mov	r1, r3
 8000c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c04:	440b      	add	r3, r1
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	441a      	add	r2, r3
 8000c0a:	6979      	ldr	r1, [r7, #20]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c10:	fb00 f303 	mul.w	r3, r0, r3
 8000c14:	4618      	mov	r0, r3
 8000c16:	6a3b      	ldr	r3, [r7, #32]
 8000c18:	4403      	add	r3, r0
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	6812      	ldr	r2, [r2, #0]
 8000c20:	601a      	str	r2, [r3, #0]
            for (int j = 0; j < A.col; ++j) {
 8000c22:	6a3b      	ldr	r3, [r7, #32]
 8000c24:	3301      	adds	r3, #1
 8000c26:	623b      	str	r3, [r7, #32]
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	6a3a      	ldr	r2, [r7, #32]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	dbe2      	blt.n	8000bf6 <matrix_transpose+0x6a>
        for (int i = 0; i < A.row; ++i) {
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	3301      	adds	r3, #1
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	dbd8      	blt.n	8000bf0 <matrix_transpose+0x64>
            }
        }
        result.row ^= result.col ^= result.row ^= result.col;
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	4053      	eors	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	4053      	eors	r3, r2
 8000c4c:	61fb      	str	r3, [r7, #28]
 8000c4e:	69fa      	ldr	r2, [r7, #28]
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	4053      	eors	r3, r2
 8000c54:	61bb      	str	r3, [r7, #24]
        return result;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	461c      	mov	r4, r3
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
}
 8000c66:	68f8      	ldr	r0, [r7, #12]
 8000c68:	372c      	adds	r7, #44	; 0x2c
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd90      	pop	{r4, r7, pc}

08000c6e <scalar_multiplication>:
struct matrix scalar_multiplication(struct matrix A, float x)
{
 8000c6e:	b590      	push	{r4, r7, lr}
 8000c70:	b08b      	sub	sp, #44	; 0x2c
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6178      	str	r0, [r7, #20]
 8000c76:	f107 0008 	add.w	r0, r7, #8
 8000c7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000c7e:	ed87 0a01 	vstr	s0, [r7, #4]
    struct matrix result;
    result.row = A.row; result.col = A.col;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	61fb      	str	r3, [r7, #28]
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	623b      	str	r3, [r7, #32]
    result.value = (float *)malloc(sizeof(float)*result.row * result.col);
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	6a3a      	ldr	r2, [r7, #32]
 8000c8e:	fb02 f303 	mul.w	r3, r2, r3
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f005 fb4b 	bl	8006330 <malloc>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	61bb      	str	r3, [r7, #24]
    for(int i=0;i<=A.row*A.col;++i)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ca2:	e012      	b.n	8000cca <scalar_multiplication+0x5c>
    {
        *(result.value+i) = *(A.value+i) * x;
 8000ca4:	68ba      	ldr	r2, [r7, #8]
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4413      	add	r3, r2
 8000cac:	ed93 7a00 	vldr	s14, [r3]
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cc0:	edc3 7a00 	vstr	s15, [r3]
    for(int i=0;i<=A.row*A.col;++i)
 8000cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	fb02 f303 	mul.w	r3, r2, r3
 8000cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	dde5      	ble.n	8000ca4 <scalar_multiplication+0x36>
    }
    return result;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	461c      	mov	r4, r3
 8000cdc:	f107 0318 	add.w	r3, r7, #24
 8000ce0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ce4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000ce8:	6978      	ldr	r0, [r7, #20]
 8000cea:	372c      	adds	r7, #44	; 0x2c
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd90      	pop	{r4, r7, pc}

08000cf0 <matmul_elementwise>:
struct matrix matmul_elementwise(struct matrix A, struct matrix B)
{
 8000cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf2:	b0c9      	sub	sp, #292	; 0x124
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8000cfa:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8000cfe:	6020      	str	r0, [r4, #0]
 8000d00:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8000d04:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8000d08:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    struct matrix result;
    if(A.row !=B.row || A.col != B.col)
 8000d0c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d10:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d108      	bne.n	8000d30 <matmul_elementwise+0x40>
 8000d1e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d22:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d02b      	beq.n	8000d88 <matmul_elementwise+0x98>
    {
char buffer[256] = "Issue: matmul elmnt";
 8000d30:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d34:	f5a3 7688 	sub.w	r6, r3, #272	; 0x110
 8000d38:	4b46      	ldr	r3, [pc, #280]	; (8000e54 <matmul_elementwise+0x164>)
 8000d3a:	4634      	mov	r4, r6
 8000d3c:	461d      	mov	r5, r3
 8000d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d42:	682b      	ldr	r3, [r5, #0]
 8000d44:	6023      	str	r3, [r4, #0]
 8000d46:	f106 0314 	add.w	r3, r6, #20
 8000d4a:	22ec      	movs	r2, #236	; 0xec
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f005 faf6 	bl	8006340 <memset>
	HAL_UART_Transmit(&huart3,(uint8_t *)buffer,strlen(buffer),100);
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fac9 	bl	80002f0 <strlen>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	f107 0110 	add.w	r1, r7, #16
 8000d66:	2364      	movs	r3, #100	; 0x64
 8000d68:	483b      	ldr	r0, [pc, #236]	; (8000e58 <matmul_elementwise+0x168>)
 8000d6a:	f004 f8fd 	bl	8004f68 <HAL_UART_Transmit>
        return result;
 8000d6e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d72:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	461c      	mov	r4, r3
 8000d7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        {
            *(result.value+i) = *(A.value+i) * *(B.value+i);
        }
        return result;
    }
}// Hadamard product function
 8000d86:	e05c      	b.n	8000e42 <matmul_elementwise+0x152>
        result.row = A.row;result.col = A.col;
 8000d88:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d8c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000d96:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d9a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        result.value = (float *)malloc(sizeof(float)*result.row * result.col);
 8000da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000da8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000dac:	fb02 f303 	mul.w	r3, r2, r3
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4618      	mov	r0, r3
 8000db4:	f005 fabc 	bl	8006330 <malloc>
 8000db8:	4603      	mov	r3, r0
 8000dba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        for(int i=0;i<=A.row*A.col;++i)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000dc4:	e021      	b.n	8000e0a <matmul_elementwise+0x11a>
            *(result.value+i) = *(A.value+i) * *(B.value+i);
 8000dc6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000dca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	ed93 7a00 	vldr	s14, [r3]
 8000ddc:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8000de0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	edd3 7a00 	vldr	s15, [r3]
 8000dec:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000df0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dfc:	edc3 7a00 	vstr	s15, [r3]
        for(int i=0;i<=A.row*A.col;++i)
 8000e00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000e04:	3301      	adds	r3, #1
 8000e06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000e0a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e0e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000e18:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8000e1c:	6892      	ldr	r2, [r2, #8]
 8000e1e:	fb02 f303 	mul.w	r3, r2, r3
 8000e22:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000e26:	429a      	cmp	r2, r3
 8000e28:	ddcd      	ble.n	8000dc6 <matmul_elementwise+0xd6>
        return result;
 8000e2a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	461c      	mov	r4, r3
 8000e36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}// Hadamard product function
 8000e42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e46:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e4a:	6818      	ldr	r0, [r3, #0]
 8000e4c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e54:	080092d0 	.word	0x080092d0
 8000e58:	2400020c 	.word	0x2400020c

08000e5c <matmul_kroneker>:

struct matrix matmul_kroneker(struct matrix A, struct matrix B)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b08f      	sub	sp, #60	; 0x3c
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	4638      	mov	r0, r7
 8000e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    struct matrix result;
    int startRow, startCol;
    result.row = A.row*B.row;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e6e:	fb02 f303 	mul.w	r3, r2, r3
 8000e72:	61bb      	str	r3, [r7, #24]
    result.col = A.col*B.col;
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e78:	fb02 f303 	mul.w	r3, r2, r3
 8000e7c:	61fb      	str	r3, [r7, #28]
    result.value = (float *)malloc(sizeof(float)*result.row * result.col);
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	69fa      	ldr	r2, [r7, #28]
 8000e82:	fb02 f303 	mul.w	r3, r2, r3
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f005 fa51 	bl	8006330 <malloc>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	617b      	str	r3, [r7, #20]
    for(int i=0;i<A.row;i++){
 8000e92:	2300      	movs	r3, #0
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
 8000e96:	e054      	b.n	8000f42 <matmul_kroneker+0xe6>
        for(int j=0;j<A.col;j++){
 8000e98:	2300      	movs	r3, #0
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
 8000e9c:	e04a      	b.n	8000f34 <matmul_kroneker+0xd8>
            startRow = i*B.row;
 8000e9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea2:	fb02 f303 	mul.w	r3, r2, r3
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
            startCol = j*B.col;
 8000ea8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eac:	fb02 f303 	mul.w	r3, r2, r3
 8000eb0:	623b      	str	r3, [r7, #32]
            for(int k=0;k<B.row;k++){
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eb6:	e036      	b.n	8000f26 <matmul_kroneker+0xca>
                for(int l=0;l<B.col;l++){
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ebc:	e02c      	b.n	8000f18 <matmul_kroneker+0xbc>
                    *(result.value + result.col*(startRow + k) + startCol + l) = *(A.value + A.col * i + j) * *(B.value + B.col*k + l);
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ec4:	fb01 f303 	mul.w	r3, r1, r3
 8000ec8:	4619      	mov	r1, r3
 8000eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ecc:	440b      	add	r3, r1
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	ed93 7a00 	vldr	s14, [r3]
 8000ed6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000eda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000edc:	fb01 f303 	mul.w	r3, r1, r3
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee4:	440b      	add	r3, r1
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	edd3 7a00 	vldr	s15, [r3]
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ef4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ef6:	4401      	add	r1, r0
 8000ef8:	fb01 f303 	mul.w	r3, r1, r3
 8000efc:	4619      	mov	r1, r3
 8000efe:	6a3b      	ldr	r3, [r7, #32]
 8000f00:	4419      	add	r1, r3
 8000f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f04:	440b      	add	r3, r1
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f0e:	edc3 7a00 	vstr	s15, [r3]
                for(int l=0;l<B.col;l++){
 8000f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f14:	3301      	adds	r3, #1
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	dbce      	blt.n	8000ebe <matmul_kroneker+0x62>
            for(int k=0;k<B.row;k++){
 8000f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f22:	3301      	adds	r3, #1
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	dbc4      	blt.n	8000eb8 <matmul_kroneker+0x5c>
        for(int j=0;j<A.col;j++){
 8000f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f30:	3301      	adds	r3, #1
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	dbb0      	blt.n	8000e9e <matmul_kroneker+0x42>
    for(int i=0;i<A.row;i++){
 8000f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f3e:	3301      	adds	r3, #1
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f46:	429a      	cmp	r2, r3
 8000f48:	dba6      	blt.n	8000e98 <matmul_kroneker+0x3c>
                }
            }
        }
    }
    return result;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	461c      	mov	r4, r3
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	373c      	adds	r7, #60	; 0x3c
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd90      	pop	{r4, r7, pc}

08000f62 <update_weights>:
struct  matrix update_weights(struct matrix w, float lr, struct matrix delta, struct matrix output)
{
 8000f62:	b5b0      	push	{r4, r5, r7, lr}
 8000f64:	b094      	sub	sp, #80	; 0x50
 8000f66:	af04      	add	r7, sp, #16
 8000f68:	6178      	str	r0, [r7, #20]
 8000f6a:	f107 0008 	add.w	r0, r7, #8
 8000f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000f72:	ed87 0a01 	vstr	s0, [r7, #4]
    w = matrix_add(w, scalar_multiplication(matmul_kroneker(matrix_transpose(output), delta),lr));
 8000f76:	f107 001c 	add.w	r0, r7, #28
 8000f7a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f80:	f7ff fe04 	bl	8000b8c <matrix_transpose>
 8000f84:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000f88:	466b      	mov	r3, sp
 8000f8a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000f8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	f7ff ff5e 	bl	8000e5c <matmul_kroneker>
 8000fa0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000fa4:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fae:	f7ff fe5e 	bl	8000c6e <scalar_multiplication>
 8000fb2:	f107 0508 	add.w	r5, r7, #8
 8000fb6:	466c      	mov	r4, sp
 8000fb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fbc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fca:	4628      	mov	r0, r5
 8000fcc:	f7ff fc70 	bl	80008b0 <matrix_add>
    return w;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	461c      	mov	r4, r3
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000fe0:	6978      	ldr	r0, [r7, #20]
 8000fe2:	3740      	adds	r7, #64	; 0x40
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bdb0      	pop	{r4, r5, r7, pc}

08000fe8 <backprop>:
struct matrix backprop(struct matrix exp, struct matrix output,struct matrix input)
{
 8000fe8:	b5b0      	push	{r4, r5, r7, lr}
 8000fea:	b094      	sub	sp, #80	; 0x50
 8000fec:	af04      	add	r7, sp, #16
 8000fee:	61f8      	str	r0, [r7, #28]
 8000ff0:	f107 0010 	add.w	r0, r7, #16
 8000ff4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    struct matrix error,delta;
    delta.row = input.row;
 8000ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    delta.col = input.col;
 8000ffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    delta.value = (float *)malloc(sizeof(float)*delta.row * delta.col);
 8001000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001004:	fb02 f303 	mul.w	r3, r2, r3
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4618      	mov	r0, r3
 800100c:	f005 f990 	bl	8006330 <malloc>
 8001010:	4603      	mov	r3, r0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    for(int i=0;i<delta.row*delta.col;++i)
 8001014:	2300      	movs	r3, #0
 8001016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001018:	e01d      	b.n	8001056 <backprop+0x6e>
    {
        *(delta.value+i) = activation_relu_back(*(output.value + i));
 800101a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800101c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	edd3 7a00 	vldr	s15, [r3]
 8001026:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800102a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102e:	bf4c      	ite	mi
 8001030:	2301      	movmi	r3, #1
 8001032:	2300      	movpl	r3, #0
 8001034:	b2db      	uxtb	r3, r3
 8001036:	f083 0301 	eor.w	r3, r3, #1
 800103a:	b2db      	uxtb	r3, r3
 800103c:	ee07 3a90 	vmov	s15, r3
 8001040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800104c:	edc3 7a00 	vstr	s15, [r3]
    for(int i=0;i<delta.row*delta.col;++i)
 8001050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001052:	3301      	adds	r3, #1
 8001054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800105a:	fb02 f303 	mul.w	r3, r2, r3
 800105e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001060:	429a      	cmp	r2, r3
 8001062:	dbda      	blt.n	800101a <backprop+0x32>
    }
    error = matrix_subtract(exp,output);
 8001064:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001068:	466b      	mov	r3, sp
 800106a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800106e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001070:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	cb0e      	ldmia	r3, {r1, r2, r3}
 800107a:	4620      	mov	r0, r4
 800107c:	f7ff fcd0 	bl	8000a20 <matrix_subtract>
    delta = (delta.col == 1 ? scalar_multiplication(delta,*(error.value)): matmul_elementwise(error, delta));
 8001080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001082:	2b01      	cmp	r3, #1
 8001084:	d10c      	bne.n	80010a0 <backprop+0xb8>
 8001086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001090:	eeb0 0a67 	vmov.f32	s0, s15
 8001094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001098:	cb0e      	ldmia	r3, {r1, r2, r3}
 800109a:	f7ff fde8 	bl	8000c6e <scalar_multiplication>
 800109e:	e013      	b.n	80010c8 <backprop+0xe0>
 80010a0:	463d      	mov	r5, r7
 80010a2:	466c      	mov	r4, sp
 80010a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010b6:	4628      	mov	r0, r5
 80010b8:	f7ff fe1a 	bl	8000cf0 <matmul_elementwise>
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	463a      	mov	r2, r7
 80010c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80010c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return delta;
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	461c      	mov	r4, r3
 80010cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    //error = (expected - output) * transfer_derivative(output), where transfer derivative is activation_back
    //error = weight_k * error_j * transfer_derivative(output)
}// can be recursive!!!!!
 80010d8:	69f8      	ldr	r0, [r7, #28]
 80010da:	3740      	adds	r7, #64	; 0x40
 80010dc:	46bd      	mov	sp, r7
 80010de:	bdb0      	pop	{r4, r5, r7, pc}

080010e0 <forward_propagation>:
struct matrix forward_propagation(struct matrix w, struct matrix x)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b08d      	sub	sp, #52	; 0x34
 80010e4:	af04      	add	r7, sp, #16
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	4638      	mov	r0, r7
 80010ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    struct matrix out;
    out = matmul(w,x);
 80010ee:	f107 0410 	add.w	r4, r7, #16
 80010f2:	466b      	mov	r3, sp
 80010f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80010fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010fe:	463b      	mov	r3, r7
 8001100:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001102:	4620      	mov	r0, r4
 8001104:	f7ff faee 	bl	80006e4 <matmul>
    for(int i=0;i<=out.col*out.row;++i)
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	e01a      	b.n	8001144 <forward_propagation+0x64>
    {
        *(out.value+i) = activation_relu(*(out.value+i));
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	edd3 7a00 	vldr	s15, [r3]
 800111a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800111e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001122:	d502      	bpl.n	800112a <forward_propagation+0x4a>
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	e004      	b.n	8001134 <forward_propagation+0x54>
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6939      	ldr	r1, [r7, #16]
 8001136:	69fa      	ldr	r2, [r7, #28]
 8001138:	0092      	lsls	r2, r2, #2
 800113a:	440a      	add	r2, r1
 800113c:	6013      	str	r3, [r2, #0]
    for(int i=0;i<=out.col*out.row;++i)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3301      	adds	r3, #1
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	fb02 f303 	mul.w	r3, r2, r3
 800114c:	69fa      	ldr	r2, [r7, #28]
 800114e:	429a      	cmp	r2, r3
 8001150:	dddd      	ble.n	800110e <forward_propagation+0x2e>
    }
    return out;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	461c      	mov	r4, r3
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800115e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
} // can be recursive
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	3724      	adds	r7, #36	; 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd90      	pop	{r4, r7, pc}
	...

0800116c <print_error>:

void print_error(float b)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b0c2      	sub	sp, #264	; 0x108
 8001170:	af00      	add	r7, sp, #0
 8001172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800117a:	ed83 0a00 	vstr	s0, [r3]
	char buffer[256];
	HAL_UART_Transmit(&huart3,(uint8_t *)buffer,sprintf(buffer,"%f\n",b),100);
 800117e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800118e:	f107 0008 	add.w	r0, r7, #8
 8001192:	ec53 2b17 	vmov	r2, r3, d7
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <print_error+0x4c>)
 8001198:	f005 fe0c 	bl	8006db4 <siprintf>
 800119c:	4603      	mov	r3, r0
 800119e:	b29a      	uxth	r2, r3
 80011a0:	f107 0108 	add.w	r1, r7, #8
 80011a4:	2364      	movs	r3, #100	; 0x64
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <print_error+0x50>)
 80011a8:	f003 fede 	bl	8004f68 <HAL_UART_Transmit>
}
 80011ac:	bf00      	nop
 80011ae:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	080093d0 	.word	0x080093d0
 80011bc:	2400020c 	.word	0x2400020c

080011c0 <mean_error>:
float mean_error()
{
 80011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c2:	b095      	sub	sp, #84	; 0x54
 80011c4:	af04      	add	r7, sp, #16
	float current_error=0;
 80011c6:	f04f 0300 	mov.w	r3, #0
 80011ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int j=0;j<batch;++j)
 80011cc:	2300      	movs	r3, #0
 80011ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80011d0:	e0ce      	b.n	8001370 <mean_error+0x1b0>
        {
            //forward pass
            for(int l=0;l<layers;++l)
 80011d2:	2300      	movs	r3, #0
 80011d4:	637b      	str	r3, [r7, #52]	; 0x34
 80011d6:	e098      	b.n	800130a <mean_error+0x14a>
            {
                    architecture[l+1].inputs = forward_propagation(matrix_transpose(architecture[l].weights),(l == 0 ? inputs[j] : architecture[l].inputs));
 80011d8:	f107 0010 	add.w	r0, r7, #16
 80011dc:	496e      	ldr	r1, [pc, #440]	; (8001398 <mean_error+0x1d8>)
 80011de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011e0:	4613      	mov	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011ec:	f7ff fcce 	bl	8000b8c <matrix_transpose>
 80011f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10c      	bne.n	8001210 <mean_error+0x50>
 80011f6:	4969      	ldr	r1, [pc, #420]	; (800139c <mean_error+0x1dc>)
 80011f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	18ca      	adds	r2, r1, r3
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	ca07      	ldmia	r2, {r0, r1, r2}
 800120a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800120e:	e00e      	b.n	800122e <mean_error+0x6e>
 8001210:	4961      	ldr	r1, [pc, #388]	; (8001398 <mean_error+0x1d8>)
 8001212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001214:	4613      	mov	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	4413      	add	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	f103 0208 	add.w	r2, r3, #8
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	3204      	adds	r2, #4
 8001228:	ca07      	ldmia	r2, {r0, r1, r2}
 800122a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800122e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	4959      	ldr	r1, [pc, #356]	; (8001398 <mean_error+0x1d8>)
 8001234:	4613      	mov	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4413      	add	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	f103 0508 	add.w	r5, r3, #8
 8001242:	463e      	mov	r6, r7
 8001244:	466c      	mov	r4, sp
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800124e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001258:	4630      	mov	r0, r6
 800125a:	f7ff ff41 	bl	80010e0 <forward_propagation>
 800125e:	1d2b      	adds	r3, r5, #4
 8001260:	463a      	mov	r2, r7
 8001262:	ca07      	ldmia	r2, {r0, r1, r2}
 8001264:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                    architecture[l].output = architecture[l + 1].inputs;
 8001268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	484a      	ldr	r0, [pc, #296]	; (8001398 <mean_error+0x1d8>)
 800126e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001270:	460b      	mov	r3, r1
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	440b      	add	r3, r1
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4403      	add	r3, r0
 800127a:	f103 0018 	add.w	r0, r3, #24
 800127e:	4946      	ldr	r1, [pc, #280]	; (8001398 <mean_error+0x1d8>)
 8001280:	4613      	mov	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	3308      	adds	r3, #8
 800128c:	4604      	mov	r4, r0
 800128e:	3304      	adds	r3, #4
 8001290:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001294:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                if(l==layers-1)
 8001298:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <mean_error+0x1e0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3b01      	subs	r3, #1
 800129e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d12f      	bne.n	8001304 <mean_error+0x144>
                    architecture[l].output = forward_propagation(matrix_transpose(architecture[l].weights),architecture[l].inputs);
 80012a4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80012a8:	493b      	ldr	r1, [pc, #236]	; (8001398 <mean_error+0x1d8>)
 80012aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012ac:	4613      	mov	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4413      	add	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012b8:	f7ff fc68 	bl	8000b8c <matrix_transpose>
 80012bc:	4936      	ldr	r1, [pc, #216]	; (8001398 <mean_error+0x1d8>)
 80012be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012c0:	4613      	mov	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4413      	add	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	f103 0618 	add.w	r6, r3, #24
 80012ce:	463d      	mov	r5, r7
 80012d0:	4931      	ldr	r1, [pc, #196]	; (8001398 <mean_error+0x1d8>)
 80012d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012d4:	4613      	mov	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	3308      	adds	r3, #8
 80012e0:	466c      	mov	r4, sp
 80012e2:	3304      	adds	r3, #4
 80012e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80012e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012f2:	4628      	mov	r0, r5
 80012f4:	f7ff fef4 	bl	80010e0 <forward_propagation>
 80012f8:	4634      	mov	r4, r6
 80012fa:	463b      	mov	r3, r7
 80012fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001300:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            for(int l=0;l<layers;++l)
 8001304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001306:	3301      	adds	r3, #1
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
 800130a:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <mean_error+0x1e0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001310:	429a      	cmp	r2, r3
 8001312:	f6ff af61 	blt.w	80011d8 <mean_error+0x18>
            }
		current_error += abs(*(architecture[layers-1].output.value)-*(expected[j].value));
 8001316:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <mean_error+0x1e0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	1e5a      	subs	r2, r3, #1
 800131c:	491e      	ldr	r1, [pc, #120]	; (8001398 <mean_error+0x1d8>)
 800131e:	4613      	mov	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	4413      	add	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	440b      	add	r3, r1
 8001328:	3318      	adds	r3, #24
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	ed93 7a00 	vldr	s14, [r3]
 8001330:	491c      	ldr	r1, [pc, #112]	; (80013a4 <mean_error+0x1e4>)
 8001332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001334:	4613      	mov	r3, r2
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800134c:	ee17 3a90 	vmov	r3, s15
 8001350:	2b00      	cmp	r3, #0
 8001352:	bfb8      	it	lt
 8001354:	425b      	neglt	r3, r3
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001366:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	for(int j=0;j<batch;++j)
 800136a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800136c:	3301      	adds	r3, #1
 800136e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <mean_error+0x1e8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001376:	429a      	cmp	r2, r3
 8001378:	f6ff af2b 	blt.w	80011d2 <mean_error+0x12>
					}
    return current_error/4;
 800137c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001380:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001384:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001388:	eef0 7a66 	vmov.f32	s15, s13
}
 800138c:	eeb0 0a67 	vmov.f32	s0, s15
 8001390:	3744      	adds	r7, #68	; 0x44
 8001392:	46bd      	mov	sp, r7
 8001394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001396:	bf00      	nop
 8001398:	240002fc 	.word	0x240002fc
 800139c:	2400029c 	.word	0x2400029c
 80013a0:	24000004 	.word	0x24000004
 80013a4:	240002cc 	.word	0x240002cc
 80013a8:	24000008 	.word	0x24000008

080013ac <train>:
void train(int epochs)
{
 80013ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013b0:	ed2d 8b02 	vpush	{d8}
 80013b4:	b0a2      	sub	sp, #136	; 0x88
 80013b6:	af06      	add	r7, sp, #24
 80013b8:	6178      	str	r0, [r7, #20]
    for(int i=0;i<epochs;++i)
 80013ba:	2300      	movs	r3, #0
 80013bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80013be:	e155      	b.n	800166c <train+0x2c0>
    {
        for(int j=0;j<batch;++j)
 80013c0:	2300      	movs	r3, #0
 80013c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80013c4:	e141      	b.n	800164a <train+0x29e>
        {
            //forward pass
            for(int l=0;l<layers;++l)
 80013c6:	2300      	movs	r3, #0
 80013c8:	667b      	str	r3, [r7, #100]	; 0x64
 80013ca:	e099      	b.n	8001500 <train+0x154>
            {
                    architecture[l+1].inputs = forward_propagation(matrix_transpose(architecture[l].weights),
 80013cc:	f107 0018 	add.w	r0, r7, #24
 80013d0:	49ad      	ldr	r1, [pc, #692]	; (8001688 <train+0x2dc>)
 80013d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80013d4:	4613      	mov	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013e0:	f7ff fbd4 	bl	8000b8c <matrix_transpose>
 80013e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10c      	bne.n	8001404 <train+0x58>
 80013ea:	49a8      	ldr	r1, [pc, #672]	; (800168c <train+0x2e0>)
 80013ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	18ca      	adds	r2, r1, r3
 80013f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80013fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001402:	e00e      	b.n	8001422 <train+0x76>
 8001404:	49a0      	ldr	r1, [pc, #640]	; (8001688 <train+0x2dc>)
 8001406:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001408:	4613      	mov	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	4413      	add	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	f103 0208 	add.w	r2, r3, #8
 8001416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141a:	3204      	adds	r2, #4
 800141c:	ca07      	ldmia	r2, {r0, r1, r2}
 800141e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001422:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	4998      	ldr	r1, [pc, #608]	; (8001688 <train+0x2dc>)
 8001428:	4613      	mov	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4413      	add	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	f103 0508 	add.w	r5, r3, #8
 8001436:	463e      	mov	r6, r7
 8001438:	466c      	mov	r4, sp
 800143a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001442:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001446:	f107 0318 	add.w	r3, r7, #24
 800144a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800144c:	4630      	mov	r0, r6
 800144e:	f7ff fe47 	bl	80010e0 <forward_propagation>
 8001452:	1d2b      	adds	r3, r5, #4
 8001454:	463a      	mov	r2, r7
 8001456:	ca07      	ldmia	r2, {r0, r1, r2}
 8001458:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                                                     (l == 0 ? inputs[j] : architecture[l].inputs));

                if(l==layers-1){
 800145c:	4b8c      	ldr	r3, [pc, #560]	; (8001690 <train+0x2e4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3b01      	subs	r3, #1
 8001462:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001464:	429a      	cmp	r2, r3
 8001466:	d130      	bne.n	80014ca <train+0x11e>
                    architecture[l].output = forward_propagation(matrix_transpose(architecture[l].weights),architecture[l].inputs);}
 8001468:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800146c:	4986      	ldr	r1, [pc, #536]	; (8001688 <train+0x2dc>)
 800146e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001470:	4613      	mov	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800147c:	f7ff fb86 	bl	8000b8c <matrix_transpose>
 8001480:	4981      	ldr	r1, [pc, #516]	; (8001688 <train+0x2dc>)
 8001482:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	f103 0618 	add.w	r6, r3, #24
 8001492:	463d      	mov	r5, r7
 8001494:	497c      	ldr	r1, [pc, #496]	; (8001688 <train+0x2dc>)
 8001496:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001498:	4613      	mov	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	3308      	adds	r3, #8
 80014a4:	466c      	mov	r4, sp
 80014a6:	3304      	adds	r3, #4
 80014a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b6:	4628      	mov	r0, r5
 80014b8:	f7ff fe12 	bl	80010e0 <forward_propagation>
 80014bc:	4634      	mov	r4, r6
 80014be:	463b      	mov	r3, r7
 80014c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014c8:	e017      	b.n	80014fa <train+0x14e>
								else{
									architecture[l].output = architecture[l + 1].inputs;
 80014ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	486e      	ldr	r0, [pc, #440]	; (8001688 <train+0x2dc>)
 80014d0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80014d2:	460b      	mov	r3, r1
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	440b      	add	r3, r1
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4403      	add	r3, r0
 80014dc:	f103 0018 	add.w	r0, r3, #24
 80014e0:	4969      	ldr	r1, [pc, #420]	; (8001688 <train+0x2dc>)
 80014e2:	4613      	mov	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	3308      	adds	r3, #8
 80014ee:	4604      	mov	r4, r0
 80014f0:	3304      	adds	r3, #4
 80014f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            for(int l=0;l<layers;++l)
 80014fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014fc:	3301      	adds	r3, #1
 80014fe:	667b      	str	r3, [r7, #100]	; 0x64
 8001500:	4b63      	ldr	r3, [pc, #396]	; (8001690 <train+0x2e4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001506:	429a      	cmp	r2, r3
 8001508:	f6ff af60 	blt.w	80013cc <train+0x20>
								}
            }
            //backwards pass
            for(int l=layers-1;l>=0;--l) // goes 2 1 0 2 not updated
 800150c:	4b60      	ldr	r3, [pc, #384]	; (8001690 <train+0x2e4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3b01      	subs	r3, #1
 8001512:	663b      	str	r3, [r7, #96]	; 0x60
 8001514:	e092      	b.n	800163c <train+0x290>
            {
                architecture[l].weights = update_weights(architecture[l].weights, lr,
 8001516:	4b5f      	ldr	r3, [pc, #380]	; (8001694 <train+0x2e8>)
 8001518:	ed93 8a00 	vldr	s16, [r3]
                               backprop((l==layers-1?expected[j]:architecture[l].output), architecture[l].output,
 800151c:	4b5c      	ldr	r3, [pc, #368]	; (8001690 <train+0x2e4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3b01      	subs	r3, #1
                architecture[l].weights = update_weights(architecture[l].weights, lr,
 8001522:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001524:	429a      	cmp	r2, r3
 8001526:	d10c      	bne.n	8001542 <train+0x196>
 8001528:	495b      	ldr	r1, [pc, #364]	; (8001698 <train+0x2ec>)
 800152a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	18ca      	adds	r2, r1, r3
 8001536:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800153a:	ca07      	ldmia	r2, {r0, r1, r2}
 800153c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001540:	e00d      	b.n	800155e <train+0x1b2>
 8001542:	4951      	ldr	r1, [pc, #324]	; (8001688 <train+0x2dc>)
 8001544:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001546:	4613      	mov	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	f103 0218 	add.w	r2, r3, #24
 8001554:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001558:	ca07      	ldmia	r2, {r0, r1, r2}
 800155a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800155e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10c      	bne.n	800157e <train+0x1d2>
 8001564:	4949      	ldr	r1, [pc, #292]	; (800168c <train+0x2e0>)
 8001566:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001568:	4613      	mov	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	18ca      	adds	r2, r1, r3
 8001572:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001576:	ca07      	ldmia	r2, {r0, r1, r2}
 8001578:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800157c:	e00e      	b.n	800159c <train+0x1f0>
 800157e:	4942      	ldr	r1, [pc, #264]	; (8001688 <train+0x2dc>)
 8001580:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001582:	4613      	mov	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	4413      	add	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	440b      	add	r3, r1
 800158c:	f103 0208 	add.w	r2, r3, #8
 8001590:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001594:	3204      	adds	r2, #4
 8001596:	ca07      	ldmia	r2, {r0, r1, r2}
 8001598:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800159c:	f107 0554 	add.w	r5, r7, #84	; 0x54
 80015a0:	ac03      	add	r4, sp, #12
 80015a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80015ae:	4936      	ldr	r1, [pc, #216]	; (8001688 <train+0x2dc>)
 80015b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015b2:	4613      	mov	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	f103 0218 	add.w	r2, r3, #24
 80015c0:	466b      	mov	r3, sp
 80015c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80015c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80015c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ce:	4628      	mov	r0, r5
 80015d0:	f7ff fd0a 	bl	8000fe8 <backprop>
 80015d4:	492c      	ldr	r1, [pc, #176]	; (8001688 <train+0x2dc>)
 80015d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015d8:	4613      	mov	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	eb01 0803 	add.w	r8, r1, r3
 80015e4:	463e      	mov	r6, r7
 80015e6:	4928      	ldr	r1, [pc, #160]	; (8001688 <train+0x2dc>)
 80015e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	18cc      	adds	r4, r1, r3
 80015f4:	4924      	ldr	r1, [pc, #144]	; (8001688 <train+0x2dc>)
 80015f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	f103 0218 	add.w	r2, r3, #24
 8001606:	ab03      	add	r3, sp, #12
 8001608:	ca07      	ldmia	r2, {r0, r1, r2}
 800160a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800160e:	466d      	mov	r5, sp
 8001610:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001614:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001618:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800161c:	eeb0 0a48 	vmov.f32	s0, s16
 8001620:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001624:	4630      	mov	r0, r6
 8001626:	f7ff fc9c 	bl	8000f62 <update_weights>
 800162a:	4644      	mov	r4, r8
 800162c:	463b      	mov	r3, r7
 800162e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001632:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            for(int l=layers-1;l>=0;--l) // goes 2 1 0 2 not updated
 8001636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001638:	3b01      	subs	r3, #1
 800163a:	663b      	str	r3, [r7, #96]	; 0x60
 800163c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800163e:	2b00      	cmp	r3, #0
 8001640:	f6bf af69 	bge.w	8001516 <train+0x16a>
        for(int j=0;j<batch;++j)
 8001644:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001646:	3301      	adds	r3, #1
 8001648:	66bb      	str	r3, [r7, #104]	; 0x68
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <train+0x2f0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001650:	429a      	cmp	r2, r3
 8001652:	f6ff aeb8 	blt.w	80013c6 <train+0x1a>
                                        (l==0?inputs[j]:architecture[l].inputs)), architecture[l].output);
            }
        }
        print_error(mean_error());
 8001656:	f7ff fdb3 	bl	80011c0 <mean_error>
 800165a:	eef0 7a40 	vmov.f32	s15, s0
 800165e:	eeb0 0a67 	vmov.f32	s0, s15
 8001662:	f7ff fd83 	bl	800116c <print_error>
    for(int i=0;i<epochs;++i)
 8001666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001668:	3301      	adds	r3, #1
 800166a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800166c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	429a      	cmp	r2, r3
 8001672:	f6ff aea5 	blt.w	80013c0 <train+0x14>
    }
}
 8001676:	bf00      	nop
 8001678:	bf00      	nop
 800167a:	3770      	adds	r7, #112	; 0x70
 800167c:	46bd      	mov	sp, r7
 800167e:	ecbd 8b02 	vpop	{d8}
 8001682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001686:	bf00      	nop
 8001688:	240002fc 	.word	0x240002fc
 800168c:	2400029c 	.word	0x2400029c
 8001690:	24000004 	.word	0x24000004
 8001694:	24000000 	.word	0x24000000
 8001698:	240002cc 	.word	0x240002cc
 800169c:	24000008 	.word	0x24000008

080016a0 <randomize_weights>:
void randomize_weights()
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
    for(int i=0;i<layers;++i)
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	e02c      	b.n	8001706 <randomize_weights+0x66>
    {
        for(int j=0;j<architecture[i].weights.row*architecture[i].weights.col;++j)
 80016ac:	2300      	movs	r3, #0
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	e00f      	b.n	80016d2 <randomize_weights+0x32>
        {
            *(architecture[i].weights.value+j)= 1.3;//((float) rand()/(float)(RAND_MAX)*10.0);
 80016b2:	491b      	ldr	r1, [pc, #108]	; (8001720 <randomize_weights+0x80>)
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	4a16      	ldr	r2, [pc, #88]	; (8001724 <randomize_weights+0x84>)
 80016ca:	601a      	str	r2, [r3, #0]
        for(int j=0;j<architecture[i].weights.row*architecture[i].weights.col;++j)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	4913      	ldr	r1, [pc, #76]	; (8001720 <randomize_weights+0x80>)
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4413      	add	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	440b      	add	r3, r1
 80016e0:	3304      	adds	r3, #4
 80016e2:	6819      	ldr	r1, [r3, #0]
 80016e4:	480e      	ldr	r0, [pc, #56]	; (8001720 <randomize_weights+0x80>)
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4413      	add	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4403      	add	r3, r0
 80016f2:	3308      	adds	r3, #8
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	fb01 f303 	mul.w	r3, r1, r3
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	dbd8      	blt.n	80016b2 <randomize_weights+0x12>
    for(int i=0;i<layers;++i)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3301      	adds	r3, #1
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <randomize_weights+0x88>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	429a      	cmp	r2, r3
 800170e:	dbcd      	blt.n	80016ac <randomize_weights+0xc>
        }
    }
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	240002fc 	.word	0x240002fc
 8001724:	3fa66666 	.word	0x3fa66666
 8001728:	24000004 	.word	0x24000004

0800172c <init_architecture>:
void init_architecture()
{
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b08f      	sub	sp, #60	; 0x3c
 8001730:	af00      	add	r7, sp, #0

    layers=3;
 8001732:	4bae      	ldr	r3, [pc, #696]	; (80019ec <init_architecture+0x2c0>)
 8001734:	2203      	movs	r2, #3
 8001736:	601a      	str	r2, [r3, #0]
    int x=6,y=6,z=1;
 8001738:	2306      	movs	r3, #6
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	2306      	movs	r3, #6
 800173e:	61bb      	str	r3, [r7, #24]
 8001740:	2301      	movs	r3, #1
 8001742:	617b      	str	r3, [r7, #20]

	architecture[0].weights = init_mat(x,x);
 8001744:	4caa      	ldr	r4, [pc, #680]	; (80019f0 <init_architecture+0x2c4>)
 8001746:	463b      	mov	r3, r7
 8001748:	69fa      	ldr	r2, [r7, #28]
 800174a:	69f9      	ldr	r1, [r7, #28]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ffa9 	bl	80006a4 <init_mat>
 8001752:	463b      	mov	r3, r7
 8001754:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001758:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	architecture[0].output= init_mat(x,1);
 800175c:	4ca4      	ldr	r4, [pc, #656]	; (80019f0 <init_architecture+0x2c4>)
 800175e:	463b      	mov	r3, r7
 8001760:	2201      	movs	r2, #1
 8001762:	69f9      	ldr	r1, [r7, #28]
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe ff9d 	bl	80006a4 <init_mat>
 800176a:	f104 0318 	add.w	r3, r4, #24
 800176e:	463a      	mov	r2, r7
 8001770:	ca07      	ldmia	r2, {r0, r1, r2}
 8001772:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	architecture[1].weights = init_mat(x,y);
 8001776:	4c9e      	ldr	r4, [pc, #632]	; (80019f0 <init_architecture+0x2c4>)
 8001778:	463b      	mov	r3, r7
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	69f9      	ldr	r1, [r7, #28]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe ff90 	bl	80006a4 <init_mat>
 8001784:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8001788:	463a      	mov	r2, r7
 800178a:	ca07      	ldmia	r2, {r0, r1, r2}
 800178c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	architecture[1].output = init_mat(y,1);
 8001790:	4c97      	ldr	r4, [pc, #604]	; (80019f0 <init_architecture+0x2c4>)
 8001792:	463b      	mov	r3, r7
 8001794:	2201      	movs	r2, #1
 8001796:	69b9      	ldr	r1, [r7, #24]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe ff83 	bl	80006a4 <init_mat>
 800179e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80017a2:	463a      	mov	r2, r7
 80017a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80017a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	architecture[2].weights = init_mat(y,z);
 80017aa:	4c91      	ldr	r4, [pc, #580]	; (80019f0 <init_architecture+0x2c4>)
 80017ac:	463b      	mov	r3, r7
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	69b9      	ldr	r1, [r7, #24]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe ff76 	bl	80006a4 <init_mat>
 80017b8:	f104 0348 	add.w	r3, r4, #72	; 0x48
 80017bc:	463a      	mov	r2, r7
 80017be:	ca07      	ldmia	r2, {r0, r1, r2}
 80017c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	architecture[2].output = init_mat(z,1);
 80017c4:	4c8a      	ldr	r4, [pc, #552]	; (80019f0 <init_architecture+0x2c4>)
 80017c6:	463b      	mov	r3, r7
 80017c8:	2201      	movs	r2, #1
 80017ca:	6979      	ldr	r1, [r7, #20]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe ff69 	bl	80006a4 <init_mat>
 80017d2:	f104 0360 	add.w	r3, r4, #96	; 0x60
 80017d6:	463a      	mov	r2, r7
 80017d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80017da:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    randomize_weights();
 80017de:	f7ff ff5f 	bl	80016a0 <randomize_weights>

    inputs[0].row = 6;
 80017e2:	4b84      	ldr	r3, [pc, #528]	; (80019f4 <init_architecture+0x2c8>)
 80017e4:	2206      	movs	r2, #6
 80017e6:	605a      	str	r2, [r3, #4]
    inputs[0].col = 1;
 80017e8:	4b82      	ldr	r3, [pc, #520]	; (80019f4 <init_architecture+0x2c8>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	609a      	str	r2, [r3, #8]

    for(int b=0;b<batch;++b) {
 80017ee:	2300      	movs	r3, #0
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
 80017f2:	e02d      	b.n	8001850 <init_architecture+0x124>
        inputs[b].row = inputs[0].row;
 80017f4:	4b7f      	ldr	r3, [pc, #508]	; (80019f4 <init_architecture+0x2c8>)
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	487e      	ldr	r0, [pc, #504]	; (80019f4 <init_architecture+0x2c8>)
 80017fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4403      	add	r3, r0
 8001806:	3304      	adds	r3, #4
 8001808:	6019      	str	r1, [r3, #0]
        inputs[b].col = inputs[0].col;
 800180a:	4b7a      	ldr	r3, [pc, #488]	; (80019f4 <init_architecture+0x2c8>)
 800180c:	6899      	ldr	r1, [r3, #8]
 800180e:	4879      	ldr	r0, [pc, #484]	; (80019f4 <init_architecture+0x2c8>)
 8001810:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4403      	add	r3, r0
 800181c:	3308      	adds	r3, #8
 800181e:	6019      	str	r1, [r3, #0]
        inputs[b].value = (float *) malloc(sizeof(float) * inputs[0].row * inputs[0].col);
 8001820:	4b74      	ldr	r3, [pc, #464]	; (80019f4 <init_architecture+0x2c8>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	461a      	mov	r2, r3
 8001826:	4b73      	ldr	r3, [pc, #460]	; (80019f4 <init_architecture+0x2c8>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	fb02 f303 	mul.w	r3, r2, r3
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4618      	mov	r0, r3
 8001832:	f004 fd7d 	bl	8006330 <malloc>
 8001836:	4603      	mov	r3, r0
 8001838:	4618      	mov	r0, r3
 800183a:	496e      	ldr	r1, [pc, #440]	; (80019f4 <init_architecture+0x2c8>)
 800183c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	6018      	str	r0, [r3, #0]
    for(int b=0;b<batch;++b) {
 800184a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800184c:	3301      	adds	r3, #1
 800184e:	637b      	str	r3, [r7, #52]	; 0x34
 8001850:	4b69      	ldr	r3, [pc, #420]	; (80019f8 <init_architecture+0x2cc>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001856:	429a      	cmp	r2, r3
 8001858:	dbcc      	blt.n	80017f4 <init_architecture+0xc8>
    }
    for (int b=0;b<batch;++b){
 800185a:	2300      	movs	r3, #0
 800185c:	633b      	str	r3, [r7, #48]	; 0x30
 800185e:	e03b      	b.n	80018d8 <init_architecture+0x1ac>
        for (int i = 0; i < inputs[b].row * inputs[b].col; ++i) {
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001864:	e01e      	b.n	80018a4 <init_architecture+0x178>
            *(inputs[b].value + i)=1.0-0.5*b;
 8001866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001868:	ee07 3a90 	vmov	s15, r3
 800186c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001870:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001874:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001878:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800187c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001880:	495c      	ldr	r1, [pc, #368]	; (80019f4 <init_architecture+0x2c8>)
 8001882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800189a:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < inputs[b].row * inputs[b].col; ++i) {
 800189e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a0:	3301      	adds	r3, #1
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018a4:	4953      	ldr	r1, [pc, #332]	; (80019f4 <init_architecture+0x2c8>)
 80018a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	3304      	adds	r3, #4
 80018b4:	6819      	ldr	r1, [r3, #0]
 80018b6:	484f      	ldr	r0, [pc, #316]	; (80019f4 <init_architecture+0x2c8>)
 80018b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4403      	add	r3, r0
 80018c4:	3308      	adds	r3, #8
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ce:	429a      	cmp	r2, r3
 80018d0:	dbc9      	blt.n	8001866 <init_architecture+0x13a>
    for (int b=0;b<batch;++b){
 80018d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d4:	3301      	adds	r3, #1
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
 80018d8:	4b47      	ldr	r3, [pc, #284]	; (80019f8 <init_architecture+0x2cc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018de:	429a      	cmp	r2, r3
 80018e0:	dbbe      	blt.n	8001860 <init_architecture+0x134>
        }
    }

        expected[0].row = 1;
 80018e2:	4b46      	ldr	r3, [pc, #280]	; (80019fc <init_architecture+0x2d0>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	605a      	str	r2, [r3, #4]
        expected[0].col = 1;
 80018e8:	4b44      	ldr	r3, [pc, #272]	; (80019fc <init_architecture+0x2d0>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	609a      	str	r2, [r3, #8]
    for(int b=0;b<batch;++b) {
 80018ee:	2300      	movs	r3, #0
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80018f2:	e02d      	b.n	8001950 <init_architecture+0x224>
        expected[b].row = expected[0].row;
 80018f4:	4b41      	ldr	r3, [pc, #260]	; (80019fc <init_architecture+0x2d0>)
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	4840      	ldr	r0, [pc, #256]	; (80019fc <init_architecture+0x2d0>)
 80018fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018fc:	4613      	mov	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4413      	add	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4403      	add	r3, r0
 8001906:	3304      	adds	r3, #4
 8001908:	6019      	str	r1, [r3, #0]
        expected[b].col = expected[0].col;
 800190a:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <init_architecture+0x2d0>)
 800190c:	6899      	ldr	r1, [r3, #8]
 800190e:	483b      	ldr	r0, [pc, #236]	; (80019fc <init_architecture+0x2d0>)
 8001910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001912:	4613      	mov	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4403      	add	r3, r0
 800191c:	3308      	adds	r3, #8
 800191e:	6019      	str	r1, [r3, #0]
        expected[b].value = (float *) malloc(sizeof(float) * expected[0].row * expected[0].col);
 8001920:	4b36      	ldr	r3, [pc, #216]	; (80019fc <init_architecture+0x2d0>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	461a      	mov	r2, r3
 8001926:	4b35      	ldr	r3, [pc, #212]	; (80019fc <init_architecture+0x2d0>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	fb02 f303 	mul.w	r3, r2, r3
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4618      	mov	r0, r3
 8001932:	f004 fcfd 	bl	8006330 <malloc>
 8001936:	4603      	mov	r3, r0
 8001938:	4618      	mov	r0, r3
 800193a:	4930      	ldr	r1, [pc, #192]	; (80019fc <init_architecture+0x2d0>)
 800193c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	6018      	str	r0, [r3, #0]
    for(int b=0;b<batch;++b) {
 800194a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194c:	3301      	adds	r3, #1
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001950:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <init_architecture+0x2cc>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001956:	429a      	cmp	r2, r3
 8001958:	dbcc      	blt.n	80018f4 <init_architecture+0x1c8>
    }
    for(int b=0;b<batch;++b) {
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
 800195e:	e03b      	b.n	80019d8 <init_architecture+0x2ac>
        for (int i = 0; i < expected[b].row * expected[b].col; ++i) {
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
 8001964:	e01e      	b.n	80019a4 <init_architecture+0x278>
           *(expected[b].value + i)=1-.5*b;
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	ee07 3a90 	vmov	s15, r3
 800196c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001970:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001974:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001978:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800197c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001980:	491e      	ldr	r1, [pc, #120]	; (80019fc <init_architecture+0x2d0>)
 8001982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800199a:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < expected[b].row * expected[b].col; ++i) {
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	3301      	adds	r3, #1
 80019a2:	623b      	str	r3, [r7, #32]
 80019a4:	4915      	ldr	r1, [pc, #84]	; (80019fc <init_architecture+0x2d0>)
 80019a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a8:	4613      	mov	r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	3304      	adds	r3, #4
 80019b4:	6819      	ldr	r1, [r3, #0]
 80019b6:	4811      	ldr	r0, [pc, #68]	; (80019fc <init_architecture+0x2d0>)
 80019b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4403      	add	r3, r0
 80019c4:	3308      	adds	r3, #8
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	6a3a      	ldr	r2, [r7, #32]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	dbc9      	blt.n	8001966 <init_architecture+0x23a>
    for(int b=0;b<batch;++b) {
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	3301      	adds	r3, #1
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
 80019d8:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <init_architecture+0x2cc>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019de:	429a      	cmp	r2, r3
 80019e0:	dbbe      	blt.n	8001960 <init_architecture+0x234>
        }
    }
}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	373c      	adds	r7, #60	; 0x3c
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd90      	pop	{r4, r7, pc}
 80019ec:	24000004 	.word	0x24000004
 80019f0:	240002fc 	.word	0x240002fc
 80019f4:	2400029c 	.word	0x2400029c
 80019f8:	24000008 	.word	0x24000008
 80019fc:	240002cc 	.word	0x240002cc

08001a00 <main>:

int main(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0

  HAL_Init();
 8001a04:	f000 fc08 	bl	8002218 <HAL_Init>
  SystemClock_Config();
 8001a08:	f000 f812 	bl	8001a30 <SystemClock_Config>
  MX_GPIO_Init();
 8001a0c:	f000 f8d2 	bl	8001bb4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001a10:	f000 f87c 	bl	8001b0c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8001a14:	f000 f8c6 	bl	8001ba4 <MX_USB_OTG_HS_USB_Init>
  init_architecture();
 8001a18:	f7ff fe88 	bl	800172c <init_architecture>
  train(epochs);
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <main+0x2c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fcc3 	bl	80013ac <train>
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	2400000c 	.word	0x2400000c

08001a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b09c      	sub	sp, #112	; 0x70
 8001a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3a:	224c      	movs	r2, #76	; 0x4c
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f004 fc7e 	bl	8006340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2220      	movs	r2, #32
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f004 fc78 	bl	8006340 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001a50:	2004      	movs	r0, #4
 8001a52:	f000 ff21 	bl	8002898 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001a56:	2300      	movs	r3, #0
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <SystemClock_Config+0xd8>)
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	4a2a      	ldr	r2, [pc, #168]	; (8001b08 <SystemClock_Config+0xd8>)
 8001a60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a64:	6193      	str	r3, [r2, #24]
 8001a66:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <SystemClock_Config+0xd8>)
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a72:	bf00      	nop
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <SystemClock_Config+0xd8>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a80:	d1f8      	bne.n	8001a74 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001a82:	2321      	movs	r3, #33	; 0x21
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a86:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a90:	2302      	movs	r3, #2
 8001a92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a94:	2302      	movs	r3, #2
 8001a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001a9c:	2310      	movs	r3, #16
 8001a9e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001aac:	230c      	movs	r3, #12
 8001aae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 ff45 	bl	800294c <HAL_RCC_OscConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ac8:	f000 f98e 	bl	8001de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001acc:	233f      	movs	r3, #63	; 0x3f
 8001ace:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2101      	movs	r1, #1
 8001af0:	4618      	mov	r0, r3
 8001af2:	f001 fb2f 	bl	8003154 <HAL_RCC_ClockConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001afc:	f000 f974 	bl	8001de8 <Error_Handler>
  }
}
 8001b00:	bf00      	nop
 8001b02:	3770      	adds	r7, #112	; 0x70
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	58024800 	.word	0x58024800

08001b0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b10:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b12:	4a23      	ldr	r2, [pc, #140]	; (8001ba0 <MX_USART3_UART_Init+0x94>)
 8001b14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b16:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1e:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b24:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b30:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b32:	220c      	movs	r2, #12
 8001b34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b42:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b54:	4811      	ldr	r0, [pc, #68]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b56:	f003 f9b7 	bl	8004ec8 <HAL_UART_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001b60:	f000 f942 	bl	8001de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b64:	2100      	movs	r1, #0
 8001b66:	480d      	ldr	r0, [pc, #52]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b68:	f004 faee 	bl	8006148 <HAL_UARTEx_SetTxFifoThreshold>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001b72:	f000 f939 	bl	8001de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b76:	2100      	movs	r1, #0
 8001b78:	4808      	ldr	r0, [pc, #32]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b7a:	f004 fb23 	bl	80061c4 <HAL_UARTEx_SetRxFifoThreshold>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001b84:	f000 f930 	bl	8001de8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b8a:	f004 faa4 	bl	80060d6 <HAL_UARTEx_DisableFifoMode>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001b94:	f000 f928 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	2400020c 	.word	0x2400020c
 8001ba0:	40004800 	.word	0x40004800

08001ba4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08e      	sub	sp, #56	; 0x38
 8001bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bca:	4b80      	ldr	r3, [pc, #512]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001bcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bd0:	4a7e      	ldr	r2, [pc, #504]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001bda:	4b7c      	ldr	r3, [pc, #496]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001bdc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	623b      	str	r3, [r7, #32]
 8001be6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001be8:	4b78      	ldr	r3, [pc, #480]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001bea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bee:	4a77      	ldr	r2, [pc, #476]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001bf0:	f043 0320 	orr.w	r3, r3, #32
 8001bf4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001bf8:	4b74      	ldr	r3, [pc, #464]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001bfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	61fb      	str	r3, [r7, #28]
 8001c04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c06:	4b71      	ldr	r3, [pc, #452]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001c08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c0c:	4a6f      	ldr	r2, [pc, #444]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c12:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c16:	4b6d      	ldr	r3, [pc, #436]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001c18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c20:	61bb      	str	r3, [r7, #24]
 8001c22:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c24:	4b69      	ldr	r3, [pc, #420]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001c26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c2a:	4a68      	ldr	r2, [pc, #416]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c34:	4b65      	ldr	r3, [pc, #404]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001c36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c42:	4b62      	ldr	r3, [pc, #392]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001c44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c48:	4a60      	ldr	r2, [pc, #384]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001c4a:	f043 0308 	orr.w	r3, r3, #8
 8001c4e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c52:	4b5e      	ldr	r3, [pc, #376]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001c54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c60:	4b5a      	ldr	r3, [pc, #360]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001c62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c66:	4a59      	ldr	r2, [pc, #356]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c70:	4b56      	ldr	r3, [pc, #344]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001c72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	4b53      	ldr	r3, [pc, #332]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001c80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c84:	4a51      	ldr	r2, [pc, #324]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c8e:	4b4f      	ldr	r3, [pc, #316]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001c90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c9c:	4b4b      	ldr	r3, [pc, #300]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001c9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ca2:	4a4a      	ldr	r2, [pc, #296]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001ca4:	f043 0310 	orr.w	r3, r3, #16
 8001ca8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001cac:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <MX_GPIO_Init+0x218>)
 8001cae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc0:	4843      	ldr	r0, [pc, #268]	; (8001dd0 <MX_GPIO_Init+0x21c>)
 8001cc2:	f000 fdcf 	bl	8002864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f244 0101 	movw	r1, #16385	; 0x4001
 8001ccc:	4841      	ldr	r0, [pc, #260]	; (8001dd4 <MX_GPIO_Init+0x220>)
 8001cce:	f000 fdc9 	bl	8002864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	4840      	ldr	r0, [pc, #256]	; (8001dd8 <MX_GPIO_Init+0x224>)
 8001cd8:	f000 fdc4 	bl	8002864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cee:	4619      	mov	r1, r3
 8001cf0:	483a      	ldr	r0, [pc, #232]	; (8001ddc <MX_GPIO_Init+0x228>)
 8001cf2:	f000 fc07 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4830      	ldr	r0, [pc, #192]	; (8001dd0 <MX_GPIO_Init+0x21c>)
 8001d10:	f000 fbf8 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001d14:	f244 0301 	movw	r3, #16385	; 0x4001
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4829      	ldr	r0, [pc, #164]	; (8001dd4 <MX_GPIO_Init+0x220>)
 8001d2e:	f000 fbe9 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d44:	4619      	mov	r1, r3
 8001d46:	4826      	ldr	r0, [pc, #152]	; (8001de0 <MX_GPIO_Init+0x22c>)
 8001d48:	f000 fbdc 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4820      	ldr	r0, [pc, #128]	; (8001de4 <MX_GPIO_Init+0x230>)
 8001d62:	f000 fbcf 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001d78:	230a      	movs	r3, #10
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d80:	4619      	mov	r1, r3
 8001d82:	4818      	ldr	r0, [pc, #96]	; (8001de4 <MX_GPIO_Init+0x230>)
 8001d84:	f000 fbbe 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001d88:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4810      	ldr	r0, [pc, #64]	; (8001de4 <MX_GPIO_Init+0x230>)
 8001da2:	f000 fbaf 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001da6:	2302      	movs	r3, #2
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4806      	ldr	r0, [pc, #24]	; (8001dd8 <MX_GPIO_Init+0x224>)
 8001dbe:	f000 fba1 	bl	8002504 <HAL_GPIO_Init>

}
 8001dc2:	bf00      	nop
 8001dc4:	3738      	adds	r7, #56	; 0x38
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	58024400 	.word	0x58024400
 8001dd0:	58021400 	.word	0x58021400
 8001dd4:	58020400 	.word	0x58020400
 8001dd8:	58021000 	.word	0x58021000
 8001ddc:	58020800 	.word	0x58020800
 8001de0:	58021800 	.word	0x58021800
 8001de4:	58020000 	.word	0x58020000

08001de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dec:	b672      	cpsid	i
}
 8001dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <Error_Handler+0x8>
	...

08001df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_MspInit+0x30>)
 8001dfc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001e00:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <HAL_MspInit+0x30>)
 8001e02:	f043 0302 	orr.w	r3, r3, #2
 8001e06:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_MspInit+0x30>)
 8001e0c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	607b      	str	r3, [r7, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	58024400 	.word	0x58024400

08001e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b0b8      	sub	sp, #224	; 0xe0
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	22b8      	movs	r2, #184	; 0xb8
 8001e46:	2100      	movs	r1, #0
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f004 fa79 	bl	8006340 <memset>
  if(huart->Instance==USART3)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a25      	ldr	r2, [pc, #148]	; (8001ee8 <HAL_UART_MspInit+0xc0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d142      	bne.n	8001ede <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	4618      	mov	r0, r3
 8001e68:	f001 fd00 	bl	800386c <HAL_RCCEx_PeriphCLKConfig>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e72:	f7ff ffb9 	bl	8001de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e76:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <HAL_UART_MspInit+0xc4>)
 8001e78:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001e7c:	4a1b      	ldr	r2, [pc, #108]	; (8001eec <HAL_UART_MspInit+0xc4>)
 8001e7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e82:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001e86:	4b19      	ldr	r3, [pc, #100]	; (8001eec <HAL_UART_MspInit+0xc4>)
 8001e88:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e94:	4b15      	ldr	r3, [pc, #84]	; (8001eec <HAL_UART_MspInit+0xc4>)
 8001e96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e9a:	4a14      	ldr	r2, [pc, #80]	; (8001eec <HAL_UART_MspInit+0xc4>)
 8001e9c:	f043 0308 	orr.w	r3, r3, #8
 8001ea0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_UART_MspInit+0xc4>)
 8001ea6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001eb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eb6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ecc:	2307      	movs	r3, #7
 8001ece:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <HAL_UART_MspInit+0xc8>)
 8001eda:	f000 fb13 	bl	8002504 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ede:	bf00      	nop
 8001ee0:	37e0      	adds	r7, #224	; 0xe0
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40004800 	.word	0x40004800
 8001eec:	58024400 	.word	0x58024400
 8001ef0:	58020c00 	.word	0x58020c00

08001ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <NMI_Handler+0x4>

08001efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <HardFault_Handler+0x4>

08001f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <MemManage_Handler+0x4>

08001f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <BusFault_Handler+0x4>

08001f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <UsageFault_Handler+0x4>

08001f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f40:	f000 f9dc 	bl	80022fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
	return 1;
 8001f4c:	2301      	movs	r3, #1
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <_kill>:

int _kill(int pid, int sig)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f62:	f004 f9bb 	bl	80062dc <__errno>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2216      	movs	r2, #22
 8001f6a:	601a      	str	r2, [r3, #0]
	return -1;
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_exit>:

void _exit (int status)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f80:	f04f 31ff 	mov.w	r1, #4294967295
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ffe7 	bl	8001f58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f8a:	e7fe      	b.n	8001f8a <_exit+0x12>

08001f8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	e00a      	b.n	8001fb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f9e:	f3af 8000 	nop.w
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	60ba      	str	r2, [r7, #8]
 8001faa:	b2ca      	uxtb	r2, r1
 8001fac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	dbf0      	blt.n	8001f9e <_read+0x12>
	}

return len;
 8001fbc:	687b      	ldr	r3, [r7, #4]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b086      	sub	sp, #24
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e009      	b.n	8001fec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	60ba      	str	r2, [r7, #8]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	dbf1      	blt.n	8001fd8 <_write+0x12>
	}
	return len;
 8001ff4:	687b      	ldr	r3, [r7, #4]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <_close>:

int _close(int file)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
	return -1;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002026:	605a      	str	r2, [r3, #4]
	return 0;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <_isatty>:

int _isatty(int file)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
	return 1;
 800203e:	2301      	movs	r3, #1
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
	return 0;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002070:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <_sbrk+0x5c>)
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <_sbrk+0x60>)
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800207c:	4b13      	ldr	r3, [pc, #76]	; (80020cc <_sbrk+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d102      	bne.n	800208a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <_sbrk+0x64>)
 8002086:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <_sbrk+0x68>)
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <_sbrk+0x64>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	429a      	cmp	r2, r3
 8002096:	d207      	bcs.n	80020a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002098:	f004 f920 	bl	80062dc <__errno>
 800209c:	4603      	mov	r3, r0
 800209e:	220c      	movs	r2, #12
 80020a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295
 80020a6:	e009      	b.n	80020bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <_sbrk+0x64>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	4a05      	ldr	r2, [pc, #20]	; (80020cc <_sbrk+0x64>)
 80020b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ba:	68fb      	ldr	r3, [r7, #12]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	24100000 	.word	0x24100000
 80020c8:	00000400 	.word	0x00000400
 80020cc:	240003b0 	.word	0x240003b0
 80020d0:	240003c8 	.word	0x240003c8

080020d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020d8:	4b32      	ldr	r3, [pc, #200]	; (80021a4 <SystemInit+0xd0>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020de:	4a31      	ldr	r2, [pc, #196]	; (80021a4 <SystemInit+0xd0>)
 80020e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020e8:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <SystemInit+0xd4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d807      	bhi.n	8002104 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020f4:	4b2c      	ldr	r3, [pc, #176]	; (80021a8 <SystemInit+0xd4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f023 030f 	bic.w	r3, r3, #15
 80020fc:	4a2a      	ldr	r2, [pc, #168]	; (80021a8 <SystemInit+0xd4>)
 80020fe:	f043 0303 	orr.w	r3, r3, #3
 8002102:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002104:	4b29      	ldr	r3, [pc, #164]	; (80021ac <SystemInit+0xd8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a28      	ldr	r2, [pc, #160]	; (80021ac <SystemInit+0xd8>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002110:	4b26      	ldr	r3, [pc, #152]	; (80021ac <SystemInit+0xd8>)
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002116:	4b25      	ldr	r3, [pc, #148]	; (80021ac <SystemInit+0xd8>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4924      	ldr	r1, [pc, #144]	; (80021ac <SystemInit+0xd8>)
 800211c:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <SystemInit+0xdc>)
 800211e:	4013      	ands	r3, r2
 8002120:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002122:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <SystemInit+0xd4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800212e:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <SystemInit+0xd4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 030f 	bic.w	r3, r3, #15
 8002136:	4a1c      	ldr	r2, [pc, #112]	; (80021a8 <SystemInit+0xd4>)
 8002138:	f043 0303 	orr.w	r3, r3, #3
 800213c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800213e:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <SystemInit+0xd8>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <SystemInit+0xd8>)
 8002146:	2200      	movs	r2, #0
 8002148:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800214a:	4b18      	ldr	r3, [pc, #96]	; (80021ac <SystemInit+0xd8>)
 800214c:	2200      	movs	r2, #0
 800214e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002150:	4b16      	ldr	r3, [pc, #88]	; (80021ac <SystemInit+0xd8>)
 8002152:	4a18      	ldr	r2, [pc, #96]	; (80021b4 <SystemInit+0xe0>)
 8002154:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <SystemInit+0xd8>)
 8002158:	4a17      	ldr	r2, [pc, #92]	; (80021b8 <SystemInit+0xe4>)
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800215c:	4b13      	ldr	r3, [pc, #76]	; (80021ac <SystemInit+0xd8>)
 800215e:	4a17      	ldr	r2, [pc, #92]	; (80021bc <SystemInit+0xe8>)
 8002160:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002162:	4b12      	ldr	r3, [pc, #72]	; (80021ac <SystemInit+0xd8>)
 8002164:	2200      	movs	r2, #0
 8002166:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002168:	4b10      	ldr	r3, [pc, #64]	; (80021ac <SystemInit+0xd8>)
 800216a:	4a14      	ldr	r2, [pc, #80]	; (80021bc <SystemInit+0xe8>)
 800216c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800216e:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <SystemInit+0xd8>)
 8002170:	2200      	movs	r2, #0
 8002172:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002174:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <SystemInit+0xd8>)
 8002176:	4a11      	ldr	r2, [pc, #68]	; (80021bc <SystemInit+0xe8>)
 8002178:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800217a:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <SystemInit+0xd8>)
 800217c:	2200      	movs	r2, #0
 800217e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002180:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <SystemInit+0xd8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a09      	ldr	r2, [pc, #36]	; (80021ac <SystemInit+0xd8>)
 8002186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800218c:	4b07      	ldr	r3, [pc, #28]	; (80021ac <SystemInit+0xd8>)
 800218e:	2200      	movs	r2, #0
 8002190:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <SystemInit+0xec>)
 8002194:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002198:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00
 80021a8:	52002000 	.word	0x52002000
 80021ac:	58024400 	.word	0x58024400
 80021b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80021b4:	02020200 	.word	0x02020200
 80021b8:	01ff0000 	.word	0x01ff0000
 80021bc:	01010280 	.word	0x01010280
 80021c0:	52004000 	.word	0x52004000

080021c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80021c8:	f7ff ff84 	bl	80020d4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021cc:	480c      	ldr	r0, [pc, #48]	; (8002200 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ce:	490d      	ldr	r1, [pc, #52]	; (8002204 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021d0:	4a0d      	ldr	r2, [pc, #52]	; (8002208 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d4:	e002      	b.n	80021dc <LoopCopyDataInit>

080021d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021da:	3304      	adds	r3, #4

080021dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80021dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e0:	d3f9      	bcc.n	80021d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021e4:	4c0a      	ldr	r4, [pc, #40]	; (8002210 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e8:	e001      	b.n	80021ee <LoopFillZerobss>

080021ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ec:	3204      	adds	r2, #4

080021ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f0:	d3fb      	bcc.n	80021ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021f2:	f004 f879 	bl	80062e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021f6:	f7ff fc03 	bl	8001a00 <main>
  bx  lr
 80021fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021fc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002200:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002204:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 8002208:	080097f4 	.word	0x080097f4
  ldr r2, =_sbss
 800220c:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 8002210:	240003c8 	.word	0x240003c8

08002214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002214:	e7fe      	b.n	8002214 <ADC_IRQHandler>
	...

08002218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221e:	2003      	movs	r0, #3
 8002220:	f000 f93e 	bl	80024a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002224:	f001 f94c 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 8002228:	4602      	mov	r2, r0
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <HAL_Init+0x68>)
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	4913      	ldr	r1, [pc, #76]	; (8002284 <HAL_Init+0x6c>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
 8002240:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002242:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <HAL_Init+0x68>)
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	4a0e      	ldr	r2, [pc, #56]	; (8002284 <HAL_Init+0x6c>)
 800224c:	5cd3      	ldrb	r3, [r2, r3]
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <HAL_Init+0x70>)
 800225a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800225c:	4a0b      	ldr	r2, [pc, #44]	; (800228c <HAL_Init+0x74>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002262:	2000      	movs	r0, #0
 8002264:	f000 f814 	bl	8002290 <HAL_InitTick>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e002      	b.n	8002278 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002272:	f7ff fdbf 	bl	8001df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	58024400 	.word	0x58024400
 8002284:	080093d4 	.word	0x080093d4
 8002288:	24000014 	.word	0x24000014
 800228c:	24000010 	.word	0x24000010

08002290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002298:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <HAL_InitTick+0x60>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e021      	b.n	80022e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80022a4:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <HAL_InitTick+0x64>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_InitTick+0x60>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4619      	mov	r1, r3
 80022ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f915 	bl	80024ea <HAL_SYSTICK_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00e      	b.n	80022e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b0f      	cmp	r3, #15
 80022ce:	d80a      	bhi.n	80022e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d0:	2200      	movs	r2, #0
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	f000 f8ed 	bl	80024b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022dc:	4a06      	ldr	r2, [pc, #24]	; (80022f8 <HAL_InitTick+0x68>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	e000      	b.n	80022e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	2400001c 	.word	0x2400001c
 80022f4:	24000010 	.word	0x24000010
 80022f8:	24000018 	.word	0x24000018

080022fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_IncTick+0x20>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_IncTick+0x24>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4413      	add	r3, r2
 800230c:	4a04      	ldr	r2, [pc, #16]	; (8002320 <HAL_IncTick+0x24>)
 800230e:	6013      	str	r3, [r2, #0]
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	2400001c 	.word	0x2400001c
 8002320:	240003b4 	.word	0x240003b4

08002324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return uwTick;
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <HAL_GetTick+0x14>)
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	240003b4 	.word	0x240003b4

0800233c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <__NVIC_SetPriorityGrouping+0x40>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002358:	4013      	ands	r3, r2
 800235a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <__NVIC_SetPriorityGrouping+0x44>)
 8002366:	4313      	orrs	r3, r2
 8002368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236a:	4a04      	ldr	r2, [pc, #16]	; (800237c <__NVIC_SetPriorityGrouping+0x40>)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	60d3      	str	r3, [r2, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00
 8002380:	05fa0000 	.word	0x05fa0000

08002384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <__NVIC_GetPriorityGrouping+0x18>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	f003 0307 	and.w	r3, r3, #7
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	db0a      	blt.n	80023ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	490c      	ldr	r1, [pc, #48]	; (80023ec <__NVIC_SetPriority+0x4c>)
 80023ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023be:	0112      	lsls	r2, r2, #4
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	440b      	add	r3, r1
 80023c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c8:	e00a      	b.n	80023e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4908      	ldr	r1, [pc, #32]	; (80023f0 <__NVIC_SetPriority+0x50>)
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	3b04      	subs	r3, #4
 80023d8:	0112      	lsls	r2, r2, #4
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	440b      	add	r3, r1
 80023de:	761a      	strb	r2, [r3, #24]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000e100 	.word	0xe000e100
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f1c3 0307 	rsb	r3, r3, #7
 800240e:	2b04      	cmp	r3, #4
 8002410:	bf28      	it	cs
 8002412:	2304      	movcs	r3, #4
 8002414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3304      	adds	r3, #4
 800241a:	2b06      	cmp	r3, #6
 800241c:	d902      	bls.n	8002424 <NVIC_EncodePriority+0x30>
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3b03      	subs	r3, #3
 8002422:	e000      	b.n	8002426 <NVIC_EncodePriority+0x32>
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	f04f 32ff 	mov.w	r2, #4294967295
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43da      	mvns	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	401a      	ands	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800243c:	f04f 31ff 	mov.w	r1, #4294967295
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	43d9      	mvns	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	4313      	orrs	r3, r2
         );
}
 800244e:	4618      	mov	r0, r3
 8002450:	3724      	adds	r7, #36	; 0x24
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3b01      	subs	r3, #1
 8002468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800246c:	d301      	bcc.n	8002472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800246e:	2301      	movs	r3, #1
 8002470:	e00f      	b.n	8002492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002472:	4a0a      	ldr	r2, [pc, #40]	; (800249c <SysTick_Config+0x40>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3b01      	subs	r3, #1
 8002478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800247a:	210f      	movs	r1, #15
 800247c:	f04f 30ff 	mov.w	r0, #4294967295
 8002480:	f7ff ff8e 	bl	80023a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <SysTick_Config+0x40>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800248a:	4b04      	ldr	r3, [pc, #16]	; (800249c <SysTick_Config+0x40>)
 800248c:	2207      	movs	r2, #7
 800248e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	e000e010 	.word	0xe000e010

080024a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff ff47 	bl	800233c <__NVIC_SetPriorityGrouping>
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b086      	sub	sp, #24
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4603      	mov	r3, r0
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024c4:	f7ff ff5e 	bl	8002384 <__NVIC_GetPriorityGrouping>
 80024c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	6978      	ldr	r0, [r7, #20]
 80024d0:	f7ff ff90 	bl	80023f4 <NVIC_EncodePriority>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff5f 	bl	80023a0 <__NVIC_SetPriority>
}
 80024e2:	bf00      	nop
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff ffb2 	bl	800245c <SysTick_Config>
 80024f8:	4603      	mov	r3, r0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002504:	b480      	push	{r7}
 8002506:	b089      	sub	sp, #36	; 0x24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002512:	4b89      	ldr	r3, [pc, #548]	; (8002738 <HAL_GPIO_Init+0x234>)
 8002514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002516:	e194      	b.n	8002842 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	2101      	movs	r1, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 8186 	beq.w	800283c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b01      	cmp	r3, #1
 800253a:	d005      	beq.n	8002548 <HAL_GPIO_Init+0x44>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d130      	bne.n	80025aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800257e:	2201      	movs	r2, #1
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f003 0201 	and.w	r2, r3, #1
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d017      	beq.n	80025e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	2203      	movs	r2, #3
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d123      	bne.n	800263a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	08da      	lsrs	r2, r3, #3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3208      	adds	r2, #8
 80025fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	220f      	movs	r2, #15
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	08da      	lsrs	r2, r3, #3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3208      	adds	r2, #8
 8002634:	69b9      	ldr	r1, [r7, #24]
 8002636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	2203      	movs	r2, #3
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 0203 	and.w	r2, r3, #3
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 80e0 	beq.w	800283c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267c:	4b2f      	ldr	r3, [pc, #188]	; (800273c <HAL_GPIO_Init+0x238>)
 800267e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002682:	4a2e      	ldr	r2, [pc, #184]	; (800273c <HAL_GPIO_Init+0x238>)
 8002684:	f043 0302 	orr.w	r3, r3, #2
 8002688:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800268c:	4b2b      	ldr	r3, [pc, #172]	; (800273c <HAL_GPIO_Init+0x238>)
 800268e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800269a:	4a29      	ldr	r2, [pc, #164]	; (8002740 <HAL_GPIO_Init+0x23c>)
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	089b      	lsrs	r3, r3, #2
 80026a0:	3302      	adds	r3, #2
 80026a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	220f      	movs	r2, #15
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a20      	ldr	r2, [pc, #128]	; (8002744 <HAL_GPIO_Init+0x240>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d052      	beq.n	800276c <HAL_GPIO_Init+0x268>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a1f      	ldr	r2, [pc, #124]	; (8002748 <HAL_GPIO_Init+0x244>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d031      	beq.n	8002732 <HAL_GPIO_Init+0x22e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a1e      	ldr	r2, [pc, #120]	; (800274c <HAL_GPIO_Init+0x248>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d02b      	beq.n	800272e <HAL_GPIO_Init+0x22a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <HAL_GPIO_Init+0x24c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d025      	beq.n	800272a <HAL_GPIO_Init+0x226>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a1c      	ldr	r2, [pc, #112]	; (8002754 <HAL_GPIO_Init+0x250>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d01f      	beq.n	8002726 <HAL_GPIO_Init+0x222>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a1b      	ldr	r2, [pc, #108]	; (8002758 <HAL_GPIO_Init+0x254>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d019      	beq.n	8002722 <HAL_GPIO_Init+0x21e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a1a      	ldr	r2, [pc, #104]	; (800275c <HAL_GPIO_Init+0x258>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d013      	beq.n	800271e <HAL_GPIO_Init+0x21a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a19      	ldr	r2, [pc, #100]	; (8002760 <HAL_GPIO_Init+0x25c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00d      	beq.n	800271a <HAL_GPIO_Init+0x216>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a18      	ldr	r2, [pc, #96]	; (8002764 <HAL_GPIO_Init+0x260>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d007      	beq.n	8002716 <HAL_GPIO_Init+0x212>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a17      	ldr	r2, [pc, #92]	; (8002768 <HAL_GPIO_Init+0x264>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d101      	bne.n	8002712 <HAL_GPIO_Init+0x20e>
 800270e:	2309      	movs	r3, #9
 8002710:	e02d      	b.n	800276e <HAL_GPIO_Init+0x26a>
 8002712:	230a      	movs	r3, #10
 8002714:	e02b      	b.n	800276e <HAL_GPIO_Init+0x26a>
 8002716:	2308      	movs	r3, #8
 8002718:	e029      	b.n	800276e <HAL_GPIO_Init+0x26a>
 800271a:	2307      	movs	r3, #7
 800271c:	e027      	b.n	800276e <HAL_GPIO_Init+0x26a>
 800271e:	2306      	movs	r3, #6
 8002720:	e025      	b.n	800276e <HAL_GPIO_Init+0x26a>
 8002722:	2305      	movs	r3, #5
 8002724:	e023      	b.n	800276e <HAL_GPIO_Init+0x26a>
 8002726:	2304      	movs	r3, #4
 8002728:	e021      	b.n	800276e <HAL_GPIO_Init+0x26a>
 800272a:	2303      	movs	r3, #3
 800272c:	e01f      	b.n	800276e <HAL_GPIO_Init+0x26a>
 800272e:	2302      	movs	r3, #2
 8002730:	e01d      	b.n	800276e <HAL_GPIO_Init+0x26a>
 8002732:	2301      	movs	r3, #1
 8002734:	e01b      	b.n	800276e <HAL_GPIO_Init+0x26a>
 8002736:	bf00      	nop
 8002738:	58000080 	.word	0x58000080
 800273c:	58024400 	.word	0x58024400
 8002740:	58000400 	.word	0x58000400
 8002744:	58020000 	.word	0x58020000
 8002748:	58020400 	.word	0x58020400
 800274c:	58020800 	.word	0x58020800
 8002750:	58020c00 	.word	0x58020c00
 8002754:	58021000 	.word	0x58021000
 8002758:	58021400 	.word	0x58021400
 800275c:	58021800 	.word	0x58021800
 8002760:	58021c00 	.word	0x58021c00
 8002764:	58022000 	.word	0x58022000
 8002768:	58022400 	.word	0x58022400
 800276c:	2300      	movs	r3, #0
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	f002 0203 	and.w	r2, r2, #3
 8002774:	0092      	lsls	r2, r2, #2
 8002776:	4093      	lsls	r3, r2
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800277e:	4938      	ldr	r1, [pc, #224]	; (8002860 <HAL_GPIO_Init+0x35c>)
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	089b      	lsrs	r3, r3, #2
 8002784:	3302      	adds	r3, #2
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800278c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80027b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80027e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	3301      	adds	r3, #1
 8002840:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	fa22 f303 	lsr.w	r3, r2, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	f47f ae63 	bne.w	8002518 <HAL_GPIO_Init+0x14>
  }
}
 8002852:	bf00      	nop
 8002854:	bf00      	nop
 8002856:	3724      	adds	r7, #36	; 0x24
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	58000400 	.word	0x58000400

08002864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	807b      	strh	r3, [r7, #2]
 8002870:	4613      	mov	r3, r2
 8002872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002874:	787b      	ldrb	r3, [r7, #1]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800287a:	887a      	ldrh	r2, [r7, #2]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002880:	e003      	b.n	800288a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002882:	887b      	ldrh	r3, [r7, #2]
 8002884:	041a      	lsls	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	619a      	str	r2, [r3, #24]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80028a0:	4b29      	ldr	r3, [pc, #164]	; (8002948 <HAL_PWREx_ConfigSupply+0xb0>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	2b06      	cmp	r3, #6
 80028aa:	d00a      	beq.n	80028c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028ac:	4b26      	ldr	r3, [pc, #152]	; (8002948 <HAL_PWREx_ConfigSupply+0xb0>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d001      	beq.n	80028be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e040      	b.n	8002940 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	e03e      	b.n	8002940 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80028c2:	4b21      	ldr	r3, [pc, #132]	; (8002948 <HAL_PWREx_ConfigSupply+0xb0>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80028ca:	491f      	ldr	r1, [pc, #124]	; (8002948 <HAL_PWREx_ConfigSupply+0xb0>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028d2:	f7ff fd27 	bl	8002324 <HAL_GetTick>
 80028d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028d8:	e009      	b.n	80028ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028da:	f7ff fd23 	bl	8002324 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028e8:	d901      	bls.n	80028ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e028      	b.n	8002940 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028ee:	4b16      	ldr	r3, [pc, #88]	; (8002948 <HAL_PWREx_ConfigSupply+0xb0>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028fa:	d1ee      	bne.n	80028da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b1e      	cmp	r3, #30
 8002900:	d008      	beq.n	8002914 <HAL_PWREx_ConfigSupply+0x7c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b2e      	cmp	r3, #46	; 0x2e
 8002906:	d005      	beq.n	8002914 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b1d      	cmp	r3, #29
 800290c:	d002      	beq.n	8002914 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b2d      	cmp	r3, #45	; 0x2d
 8002912:	d114      	bne.n	800293e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002914:	f7ff fd06 	bl	8002324 <HAL_GetTick>
 8002918:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800291a:	e009      	b.n	8002930 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800291c:	f7ff fd02 	bl	8002324 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800292a:	d901      	bls.n	8002930 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e007      	b.n	8002940 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_PWREx_ConfigSupply+0xb0>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293c:	d1ee      	bne.n	800291c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	58024800 	.word	0x58024800

0800294c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08c      	sub	sp, #48	; 0x30
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e3f4      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80b3 	beq.w	8002ad2 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800296c:	4b95      	ldr	r3, [pc, #596]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002976:	4b93      	ldr	r3, [pc, #588]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297e:	2b10      	cmp	r3, #16
 8002980:	d007      	beq.n	8002992 <HAL_RCC_OscConfig+0x46>
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	2b18      	cmp	r3, #24
 8002986:	d112      	bne.n	80029ae <HAL_RCC_OscConfig+0x62>
 8002988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d10d      	bne.n	80029ae <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002992:	4b8c      	ldr	r3, [pc, #560]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8098 	beq.w	8002ad0 <HAL_RCC_OscConfig+0x184>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f040 8093 	bne.w	8002ad0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e3cc      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b6:	d106      	bne.n	80029c6 <HAL_RCC_OscConfig+0x7a>
 80029b8:	4b82      	ldr	r3, [pc, #520]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a81      	ldr	r2, [pc, #516]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 80029be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	e058      	b.n	8002a78 <HAL_RCC_OscConfig+0x12c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d112      	bne.n	80029f4 <HAL_RCC_OscConfig+0xa8>
 80029ce:	4b7d      	ldr	r3, [pc, #500]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a7c      	ldr	r2, [pc, #496]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 80029d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b7a      	ldr	r3, [pc, #488]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a79      	ldr	r2, [pc, #484]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 80029e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b77      	ldr	r3, [pc, #476]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a76      	ldr	r2, [pc, #472]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 80029ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e041      	b.n	8002a78 <HAL_RCC_OscConfig+0x12c>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029fc:	d112      	bne.n	8002a24 <HAL_RCC_OscConfig+0xd8>
 80029fe:	4b71      	ldr	r3, [pc, #452]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a70      	ldr	r2, [pc, #448]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	4b6e      	ldr	r3, [pc, #440]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a6d      	ldr	r2, [pc, #436]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002a10:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b6b      	ldr	r3, [pc, #428]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a6a      	ldr	r2, [pc, #424]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e029      	b.n	8002a78 <HAL_RCC_OscConfig+0x12c>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002a2c:	d112      	bne.n	8002a54 <HAL_RCC_OscConfig+0x108>
 8002a2e:	4b65      	ldr	r3, [pc, #404]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a64      	ldr	r2, [pc, #400]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4b62      	ldr	r3, [pc, #392]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a61      	ldr	r2, [pc, #388]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002a40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	4b5f      	ldr	r3, [pc, #380]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a5e      	ldr	r2, [pc, #376]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e011      	b.n	8002a78 <HAL_RCC_OscConfig+0x12c>
 8002a54:	4b5b      	ldr	r3, [pc, #364]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a5a      	ldr	r2, [pc, #360]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b58      	ldr	r3, [pc, #352]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a57      	ldr	r2, [pc, #348]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b55      	ldr	r3, [pc, #340]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a54      	ldr	r2, [pc, #336]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002a72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d013      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7ff fc50 	bl	8002324 <HAL_GetTick>
 8002a84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a88:	f7ff fc4c 	bl	8002324 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	; 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e356      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a9a:	4b4a      	ldr	r3, [pc, #296]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x13c>
 8002aa6:	e014      	b.n	8002ad2 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7ff fc3c 	bl	8002324 <HAL_GetTick>
 8002aac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7ff fc38 	bl	8002324 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e342      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ac2:	4b40      	ldr	r3, [pc, #256]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x164>
 8002ace:	e000      	b.n	8002ad2 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 808d 	beq.w	8002bfa <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae0:	4b38      	ldr	r3, [pc, #224]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ae8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002aea:	4b36      	ldr	r3, [pc, #216]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <HAL_RCC_OscConfig+0x1ba>
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	2b18      	cmp	r3, #24
 8002afa:	d137      	bne.n	8002b6c <HAL_RCC_OscConfig+0x220>
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d132      	bne.n	8002b6c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b06:	4b2f      	ldr	r3, [pc, #188]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1d2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e314      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b1e:	4b29      	ldr	r3, [pc, #164]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 0219 	bic.w	r2, r3, #25
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	4926      	ldr	r1, [pc, #152]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b30:	f7ff fbf8 	bl	8002324 <HAL_GetTick>
 8002b34:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b38:	f7ff fbf4 	bl	8002324 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e2fe      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b56:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	061b      	lsls	r3, r3, #24
 8002b64:	4917      	ldr	r1, [pc, #92]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b6a:	e046      	b.n	8002bfa <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d029      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b74:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f023 0219 	bic.w	r2, r3, #25
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4910      	ldr	r1, [pc, #64]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b86:	f7ff fbcd 	bl	8002324 <HAL_GetTick>
 8002b8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b8e:	f7ff fbc9 	bl	8002324 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e2d3      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ba0:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	061b      	lsls	r3, r3, #24
 8002bba:	4902      	ldr	r1, [pc, #8]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
 8002bc0:	e01b      	b.n	8002bfa <HAL_RCC_OscConfig+0x2ae>
 8002bc2:	bf00      	nop
 8002bc4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc8:	4b97      	ldr	r3, [pc, #604]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a96      	ldr	r2, [pc, #600]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002bce:	f023 0301 	bic.w	r3, r3, #1
 8002bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7ff fba6 	bl	8002324 <HAL_GetTick>
 8002bd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bdc:	f7ff fba2 	bl	8002324 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e2ac      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bee:	4b8e      	ldr	r3, [pc, #568]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d06a      	beq.n	8002cdc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c06:	4b88      	ldr	r3, [pc, #544]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c10:	4b85      	ldr	r3, [pc, #532]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d007      	beq.n	8002c2c <HAL_RCC_OscConfig+0x2e0>
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	2b18      	cmp	r3, #24
 8002c20:	d11b      	bne.n	8002c5a <HAL_RCC_OscConfig+0x30e>
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d116      	bne.n	8002c5a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c2c:	4b7e      	ldr	r3, [pc, #504]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_OscConfig+0x2f8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	2b80      	cmp	r3, #128	; 0x80
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e281      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c44:	4b78      	ldr	r3, [pc, #480]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	061b      	lsls	r3, r3, #24
 8002c52:	4975      	ldr	r1, [pc, #468]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c58:	e040      	b.n	8002cdc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d023      	beq.n	8002caa <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c62:	4b71      	ldr	r3, [pc, #452]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a70      	ldr	r2, [pc, #448]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6e:	f7ff fb59 	bl	8002324 <HAL_GetTick>
 8002c72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c76:	f7ff fb55 	bl	8002324 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e25f      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c88:	4b67      	ldr	r3, [pc, #412]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c94:	4b64      	ldr	r3, [pc, #400]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	061b      	lsls	r3, r3, #24
 8002ca2:	4961      	ldr	r1, [pc, #388]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60cb      	str	r3, [r1, #12]
 8002ca8:	e018      	b.n	8002cdc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002caa:	4b5f      	ldr	r3, [pc, #380]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a5e      	ldr	r2, [pc, #376]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002cb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb6:	f7ff fb35 	bl	8002324 <HAL_GetTick>
 8002cba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002cbe:	f7ff fb31 	bl	8002324 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e23b      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cd0:	4b55      	ldr	r3, [pc, #340]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f0      	bne.n	8002cbe <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d036      	beq.n	8002d56 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d019      	beq.n	8002d24 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cf0:	4b4d      	ldr	r3, [pc, #308]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf4:	4a4c      	ldr	r2, [pc, #304]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfc:	f7ff fb12 	bl	8002324 <HAL_GetTick>
 8002d00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d04:	f7ff fb0e 	bl	8002324 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e218      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d16:	4b44      	ldr	r3, [pc, #272]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x3b8>
 8002d22:	e018      	b.n	8002d56 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d24:	4b40      	ldr	r3, [pc, #256]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d28:	4a3f      	ldr	r2, [pc, #252]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002d2a:	f023 0301 	bic.w	r3, r3, #1
 8002d2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7ff faf8 	bl	8002324 <HAL_GetTick>
 8002d34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d38:	f7ff faf4 	bl	8002324 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e1fe      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d4a:	4b37      	ldr	r3, [pc, #220]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d036      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d019      	beq.n	8002d9e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d6a:	4b2f      	ldr	r3, [pc, #188]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a2e      	ldr	r2, [pc, #184]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002d70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d76:	f7ff fad5 	bl	8002324 <HAL_GetTick>
 8002d7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d7e:	f7ff fad1 	bl	8002324 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e1db      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d90:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCC_OscConfig+0x432>
 8002d9c:	e018      	b.n	8002dd0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d9e:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a21      	ldr	r2, [pc, #132]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002da4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002da8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002daa:	f7ff fabb 	bl	8002324 <HAL_GetTick>
 8002dae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002db2:	f7ff fab7 	bl	8002324 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e1c1      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dc4:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f0      	bne.n	8002db2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 80af 	beq.w	8002f3c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002dde:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <HAL_RCC_OscConfig+0x4e0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a12      	ldr	r2, [pc, #72]	; (8002e2c <HAL_RCC_OscConfig+0x4e0>)
 8002de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dea:	f7ff fa9b 	bl	8002324 <HAL_GetTick>
 8002dee:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002df2:	f7ff fa97 	bl	8002324 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b64      	cmp	r3, #100	; 0x64
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e1a1      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e04:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_RCC_OscConfig+0x4e0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d10b      	bne.n	8002e30 <HAL_RCC_OscConfig+0x4e4>
 8002e18:	4b03      	ldr	r3, [pc, #12]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1c:	4a02      	ldr	r2, [pc, #8]	; (8002e28 <HAL_RCC_OscConfig+0x4dc>)
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	6713      	str	r3, [r2, #112]	; 0x70
 8002e24:	e05b      	b.n	8002ede <HAL_RCC_OscConfig+0x592>
 8002e26:	bf00      	nop
 8002e28:	58024400 	.word	0x58024400
 8002e2c:	58024800 	.word	0x58024800
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d112      	bne.n	8002e5e <HAL_RCC_OscConfig+0x512>
 8002e38:	4b9d      	ldr	r3, [pc, #628]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	4a9c      	ldr	r2, [pc, #624]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	6713      	str	r3, [r2, #112]	; 0x70
 8002e44:	4b9a      	ldr	r3, [pc, #616]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e48:	4a99      	ldr	r2, [pc, #612]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002e4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e50:	4b97      	ldr	r3, [pc, #604]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e54:	4a96      	ldr	r2, [pc, #600]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002e56:	f023 0304 	bic.w	r3, r3, #4
 8002e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5c:	e03f      	b.n	8002ede <HAL_RCC_OscConfig+0x592>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b05      	cmp	r3, #5
 8002e64:	d112      	bne.n	8002e8c <HAL_RCC_OscConfig+0x540>
 8002e66:	4b92      	ldr	r3, [pc, #584]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	4a91      	ldr	r2, [pc, #580]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002e6c:	f043 0304 	orr.w	r3, r3, #4
 8002e70:	6713      	str	r3, [r2, #112]	; 0x70
 8002e72:	4b8f      	ldr	r3, [pc, #572]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a8e      	ldr	r2, [pc, #568]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002e78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7e:	4b8c      	ldr	r3, [pc, #560]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a8b      	ldr	r2, [pc, #556]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8a:	e028      	b.n	8002ede <HAL_RCC_OscConfig+0x592>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b85      	cmp	r3, #133	; 0x85
 8002e92:	d112      	bne.n	8002eba <HAL_RCC_OscConfig+0x56e>
 8002e94:	4b86      	ldr	r3, [pc, #536]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	4a85      	ldr	r2, [pc, #532]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002e9a:	f043 0304 	orr.w	r3, r3, #4
 8002e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea0:	4b83      	ldr	r3, [pc, #524]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	4a82      	ldr	r2, [pc, #520]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002eac:	4b80      	ldr	r3, [pc, #512]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	4a7f      	ldr	r2, [pc, #508]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb8:	e011      	b.n	8002ede <HAL_RCC_OscConfig+0x592>
 8002eba:	4b7d      	ldr	r3, [pc, #500]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	4a7c      	ldr	r2, [pc, #496]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec6:	4b7a      	ldr	r3, [pc, #488]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	4a79      	ldr	r2, [pc, #484]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002ecc:	f023 0304 	bic.w	r3, r3, #4
 8002ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed2:	4b77      	ldr	r3, [pc, #476]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a76      	ldr	r2, [pc, #472]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002ed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d015      	beq.n	8002f12 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee6:	f7ff fa1d 	bl	8002324 <HAL_GetTick>
 8002eea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7ff fa19 	bl	8002324 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e121      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f04:	4b6a      	ldr	r3, [pc, #424]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0ee      	beq.n	8002eee <HAL_RCC_OscConfig+0x5a2>
 8002f10:	e014      	b.n	8002f3c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f12:	f7ff fa07 	bl	8002324 <HAL_GetTick>
 8002f16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f18:	e00a      	b.n	8002f30 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f7ff fa03 	bl	8002324 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e10b      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f30:	4b5f      	ldr	r3, [pc, #380]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1ee      	bne.n	8002f1a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 8100 	beq.w	8003146 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f46:	4b5a      	ldr	r3, [pc, #360]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f4e:	2b18      	cmp	r3, #24
 8002f50:	f000 80bb 	beq.w	80030ca <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	f040 8095 	bne.w	8003088 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5e:	4b54      	ldr	r3, [pc, #336]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a53      	ldr	r2, [pc, #332]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002f64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6a:	f7ff f9db 	bl	8002324 <HAL_GetTick>
 8002f6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f72:	f7ff f9d7 	bl	8002324 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e0e1      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f84:	4b4a      	ldr	r3, [pc, #296]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f0      	bne.n	8002f72 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f90:	4b47      	ldr	r3, [pc, #284]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f94:	4b47      	ldr	r3, [pc, #284]	; (80030b4 <HAL_RCC_OscConfig+0x768>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fa0:	0112      	lsls	r2, r2, #4
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	4942      	ldr	r1, [pc, #264]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	628b      	str	r3, [r1, #40]	; 0x28
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	025b      	lsls	r3, r3, #9
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	041b      	lsls	r3, r3, #16
 8002fc8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002fda:	4935      	ldr	r1, [pc, #212]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002fe0:	4b33      	ldr	r3, [pc, #204]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe4:	4a32      	ldr	r2, [pc, #200]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fec:	4b30      	ldr	r3, [pc, #192]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff0:	4b31      	ldr	r3, [pc, #196]	; (80030b8 <HAL_RCC_OscConfig+0x76c>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ff8:	00d2      	lsls	r2, r2, #3
 8002ffa:	492d      	ldr	r1, [pc, #180]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003000:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	f023 020c 	bic.w	r2, r3, #12
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	4928      	ldr	r1, [pc, #160]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 800300e:	4313      	orrs	r3, r2
 8003010:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003012:	4b27      	ldr	r3, [pc, #156]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	f023 0202 	bic.w	r2, r3, #2
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	4924      	ldr	r1, [pc, #144]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8003020:	4313      	orrs	r3, r2
 8003022:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003024:	4b22      	ldr	r3, [pc, #136]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	4a21      	ldr	r2, [pc, #132]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 800302a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003030:	4b1f      	ldr	r3, [pc, #124]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	4a1e      	ldr	r2, [pc, #120]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8003036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800303a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800303c:	4b1c      	ldr	r3, [pc, #112]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	4a1b      	ldr	r2, [pc, #108]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8003042:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003046:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003048:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	4a18      	ldr	r2, [pc, #96]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003054:	4b16      	ldr	r3, [pc, #88]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a15      	ldr	r2, [pc, #84]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 800305a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7ff f960 	bl	8002324 <HAL_GetTick>
 8003064:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003068:	f7ff f95c 	bl	8002324 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e066      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800307a:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x71c>
 8003086:	e05e      	b.n	8003146 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a08      	ldr	r2, [pc, #32]	; (80030b0 <HAL_RCC_OscConfig+0x764>)
 800308e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7ff f946 	bl	8002324 <HAL_GetTick>
 8003098:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800309a:	e00f      	b.n	80030bc <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800309c:	f7ff f942 	bl	8002324 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d908      	bls.n	80030bc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e04c      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
 80030ae:	bf00      	nop
 80030b0:	58024400 	.word	0x58024400
 80030b4:	fffffc0c 	.word	0xfffffc0c
 80030b8:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030bc:	4b24      	ldr	r3, [pc, #144]	; (8003150 <HAL_RCC_OscConfig+0x804>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1e9      	bne.n	800309c <HAL_RCC_OscConfig+0x750>
 80030c8:	e03d      	b.n	8003146 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030ca:	4b21      	ldr	r3, [pc, #132]	; (8003150 <HAL_RCC_OscConfig+0x804>)
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030d0:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <HAL_RCC_OscConfig+0x804>)
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d031      	beq.n	8003142 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f003 0203 	and.w	r2, r3, #3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d12a      	bne.n	8003142 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d122      	bne.n	8003142 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003108:	429a      	cmp	r2, r3
 800310a:	d11a      	bne.n	8003142 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	0a5b      	lsrs	r3, r3, #9
 8003110:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003118:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d111      	bne.n	8003142 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	0c1b      	lsrs	r3, r3, #16
 8003122:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800312c:	429a      	cmp	r2, r3
 800312e:	d108      	bne.n	8003142 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	0e1b      	lsrs	r3, r3, #24
 8003134:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3730      	adds	r7, #48	; 0x30
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	58024400 	.word	0x58024400

08003154 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e19c      	b.n	80034a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003168:	4b8a      	ldr	r3, [pc, #552]	; (8003394 <HAL_RCC_ClockConfig+0x240>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d910      	bls.n	8003198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	4b87      	ldr	r3, [pc, #540]	; (8003394 <HAL_RCC_ClockConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 020f 	bic.w	r2, r3, #15
 800317e:	4985      	ldr	r1, [pc, #532]	; (8003394 <HAL_RCC_ClockConfig+0x240>)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003186:	4b83      	ldr	r3, [pc, #524]	; (8003394 <HAL_RCC_ClockConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d001      	beq.n	8003198 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e184      	b.n	80034a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d010      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	4b7b      	ldr	r3, [pc, #492]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d908      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031b4:	4b78      	ldr	r3, [pc, #480]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	4975      	ldr	r1, [pc, #468]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d010      	beq.n	80031f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	4b70      	ldr	r3, [pc, #448]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031de:	429a      	cmp	r2, r3
 80031e0:	d908      	bls.n	80031f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031e2:	4b6d      	ldr	r3, [pc, #436]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	496a      	ldr	r1, [pc, #424]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d010      	beq.n	8003222 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699a      	ldr	r2, [r3, #24]
 8003204:	4b64      	ldr	r3, [pc, #400]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800320c:	429a      	cmp	r2, r3
 800320e:	d908      	bls.n	8003222 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003210:	4b61      	ldr	r3, [pc, #388]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	495e      	ldr	r1, [pc, #376]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 800321e:	4313      	orrs	r3, r2
 8003220:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d010      	beq.n	8003250 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	4b59      	ldr	r3, [pc, #356]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800323a:	429a      	cmp	r2, r3
 800323c:	d908      	bls.n	8003250 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800323e:	4b56      	ldr	r3, [pc, #344]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	4953      	ldr	r1, [pc, #332]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 800324c:	4313      	orrs	r3, r2
 800324e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d010      	beq.n	800327e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	4b4d      	ldr	r3, [pc, #308]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	429a      	cmp	r2, r3
 800326a:	d908      	bls.n	800327e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800326c:	4b4a      	ldr	r3, [pc, #296]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f023 020f 	bic.w	r2, r3, #15
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4947      	ldr	r1, [pc, #284]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 800327a:	4313      	orrs	r3, r2
 800327c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d055      	beq.n	8003336 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800328a:	4b43      	ldr	r3, [pc, #268]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	4940      	ldr	r1, [pc, #256]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 8003298:	4313      	orrs	r3, r2
 800329a:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d107      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032a4:	4b3c      	ldr	r3, [pc, #240]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d121      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0f6      	b.n	80034a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d107      	bne.n	80032cc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032bc:	4b36      	ldr	r3, [pc, #216]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d115      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0ea      	b.n	80034a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d107      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032d4:	4b30      	ldr	r3, [pc, #192]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d109      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0de      	b.n	80034a2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032e4:	4b2c      	ldr	r3, [pc, #176]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e0d6      	b.n	80034a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032f4:	4b28      	ldr	r3, [pc, #160]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	f023 0207 	bic.w	r2, r3, #7
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	4925      	ldr	r1, [pc, #148]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 8003302:	4313      	orrs	r3, r2
 8003304:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003306:	f7ff f80d 	bl	8002324 <HAL_GetTick>
 800330a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330c:	e00a      	b.n	8003324 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330e:	f7ff f809 	bl	8002324 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f241 3288 	movw	r2, #5000	; 0x1388
 800331c:	4293      	cmp	r3, r2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e0be      	b.n	80034a2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003324:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	429a      	cmp	r2, r3
 8003334:	d1eb      	bne.n	800330e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d010      	beq.n	8003364 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	4b14      	ldr	r3, [pc, #80]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	429a      	cmp	r2, r3
 8003350:	d208      	bcs.n	8003364 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003352:	4b11      	ldr	r3, [pc, #68]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f023 020f 	bic.w	r2, r3, #15
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	490e      	ldr	r1, [pc, #56]	; (8003398 <HAL_RCC_ClockConfig+0x244>)
 8003360:	4313      	orrs	r3, r2
 8003362:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_RCC_ClockConfig+0x240>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d214      	bcs.n	800339c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003372:	4b08      	ldr	r3, [pc, #32]	; (8003394 <HAL_RCC_ClockConfig+0x240>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 020f 	bic.w	r2, r3, #15
 800337a:	4906      	ldr	r1, [pc, #24]	; (8003394 <HAL_RCC_ClockConfig+0x240>)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	4313      	orrs	r3, r2
 8003380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003382:	4b04      	ldr	r3, [pc, #16]	; (8003394 <HAL_RCC_ClockConfig+0x240>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e086      	b.n	80034a2 <HAL_RCC_ClockConfig+0x34e>
 8003394:	52002000 	.word	0x52002000
 8003398:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d010      	beq.n	80033ca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	4b3f      	ldr	r3, [pc, #252]	; (80034ac <HAL_RCC_ClockConfig+0x358>)
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d208      	bcs.n	80033ca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033b8:	4b3c      	ldr	r3, [pc, #240]	; (80034ac <HAL_RCC_ClockConfig+0x358>)
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	4939      	ldr	r1, [pc, #228]	; (80034ac <HAL_RCC_ClockConfig+0x358>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d010      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695a      	ldr	r2, [r3, #20]
 80033da:	4b34      	ldr	r3, [pc, #208]	; (80034ac <HAL_RCC_ClockConfig+0x358>)
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d208      	bcs.n	80033f8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033e6:	4b31      	ldr	r3, [pc, #196]	; (80034ac <HAL_RCC_ClockConfig+0x358>)
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	492e      	ldr	r1, [pc, #184]	; (80034ac <HAL_RCC_ClockConfig+0x358>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	d010      	beq.n	8003426 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699a      	ldr	r2, [r3, #24]
 8003408:	4b28      	ldr	r3, [pc, #160]	; (80034ac <HAL_RCC_ClockConfig+0x358>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003410:	429a      	cmp	r2, r3
 8003412:	d208      	bcs.n	8003426 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003414:	4b25      	ldr	r3, [pc, #148]	; (80034ac <HAL_RCC_ClockConfig+0x358>)
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	4922      	ldr	r1, [pc, #136]	; (80034ac <HAL_RCC_ClockConfig+0x358>)
 8003422:	4313      	orrs	r3, r2
 8003424:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b00      	cmp	r3, #0
 8003430:	d010      	beq.n	8003454 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69da      	ldr	r2, [r3, #28]
 8003436:	4b1d      	ldr	r3, [pc, #116]	; (80034ac <HAL_RCC_ClockConfig+0x358>)
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800343e:	429a      	cmp	r2, r3
 8003440:	d208      	bcs.n	8003454 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003442:	4b1a      	ldr	r3, [pc, #104]	; (80034ac <HAL_RCC_ClockConfig+0x358>)
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	4917      	ldr	r1, [pc, #92]	; (80034ac <HAL_RCC_ClockConfig+0x358>)
 8003450:	4313      	orrs	r3, r2
 8003452:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003454:	f000 f834 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 8003458:	4602      	mov	r2, r0
 800345a:	4b14      	ldr	r3, [pc, #80]	; (80034ac <HAL_RCC_ClockConfig+0x358>)
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	4912      	ldr	r1, [pc, #72]	; (80034b0 <HAL_RCC_ClockConfig+0x35c>)
 8003466:	5ccb      	ldrb	r3, [r1, r3]
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
 8003470:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003472:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <HAL_RCC_ClockConfig+0x358>)
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	4a0d      	ldr	r2, [pc, #52]	; (80034b0 <HAL_RCC_ClockConfig+0x35c>)
 800347c:	5cd3      	ldrb	r3, [r2, r3]
 800347e:	f003 031f 	and.w	r3, r3, #31
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
 8003488:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <HAL_RCC_ClockConfig+0x360>)
 800348a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800348c:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <HAL_RCC_ClockConfig+0x364>)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003492:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <HAL_RCC_ClockConfig+0x368>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe fefa 	bl	8002290 <HAL_InitTick>
 800349c:	4603      	mov	r3, r0
 800349e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	58024400 	.word	0x58024400
 80034b0:	080093d4 	.word	0x080093d4
 80034b4:	24000014 	.word	0x24000014
 80034b8:	24000010 	.word	0x24000010
 80034bc:	24000018 	.word	0x24000018

080034c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b089      	sub	sp, #36	; 0x24
 80034c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034c6:	4bb3      	ldr	r3, [pc, #716]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034ce:	2b18      	cmp	r3, #24
 80034d0:	f200 8155 	bhi.w	800377e <HAL_RCC_GetSysClockFreq+0x2be>
 80034d4:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	08003541 	.word	0x08003541
 80034e0:	0800377f 	.word	0x0800377f
 80034e4:	0800377f 	.word	0x0800377f
 80034e8:	0800377f 	.word	0x0800377f
 80034ec:	0800377f 	.word	0x0800377f
 80034f0:	0800377f 	.word	0x0800377f
 80034f4:	0800377f 	.word	0x0800377f
 80034f8:	0800377f 	.word	0x0800377f
 80034fc:	08003567 	.word	0x08003567
 8003500:	0800377f 	.word	0x0800377f
 8003504:	0800377f 	.word	0x0800377f
 8003508:	0800377f 	.word	0x0800377f
 800350c:	0800377f 	.word	0x0800377f
 8003510:	0800377f 	.word	0x0800377f
 8003514:	0800377f 	.word	0x0800377f
 8003518:	0800377f 	.word	0x0800377f
 800351c:	0800356d 	.word	0x0800356d
 8003520:	0800377f 	.word	0x0800377f
 8003524:	0800377f 	.word	0x0800377f
 8003528:	0800377f 	.word	0x0800377f
 800352c:	0800377f 	.word	0x0800377f
 8003530:	0800377f 	.word	0x0800377f
 8003534:	0800377f 	.word	0x0800377f
 8003538:	0800377f 	.word	0x0800377f
 800353c:	08003573 	.word	0x08003573
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003540:	4b94      	ldr	r3, [pc, #592]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d009      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800354c:	4b91      	ldr	r3, [pc, #580]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	08db      	lsrs	r3, r3, #3
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	4a90      	ldr	r2, [pc, #576]	; (8003798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
 800355c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800355e:	e111      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003560:	4b8d      	ldr	r3, [pc, #564]	; (8003798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003562:	61bb      	str	r3, [r7, #24]
    break;
 8003564:	e10e      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003566:	4b8d      	ldr	r3, [pc, #564]	; (800379c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003568:	61bb      	str	r3, [r7, #24]
    break;
 800356a:	e10b      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800356c:	4b8c      	ldr	r3, [pc, #560]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800356e:	61bb      	str	r3, [r7, #24]
    break;
 8003570:	e108      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003572:	4b88      	ldr	r3, [pc, #544]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800357c:	4b85      	ldr	r3, [pc, #532]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003586:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003588:	4b82      	ldr	r3, [pc, #520]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003592:	4b80      	ldr	r3, [pc, #512]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003596:	08db      	lsrs	r3, r3, #3
 8003598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	fb02 f303 	mul.w	r3, r2, r3
 80035a2:	ee07 3a90 	vmov	s15, r3
 80035a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035aa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80e1 	beq.w	8003778 <HAL_RCC_GetSysClockFreq+0x2b8>
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	f000 8083 	beq.w	80036c4 <HAL_RCC_GetSysClockFreq+0x204>
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	f200 80a1 	bhi.w	8003708 <HAL_RCC_GetSysClockFreq+0x248>
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_RCC_GetSysClockFreq+0x114>
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d056      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0x1c0>
 80035d2:	e099      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035d4:	4b6f      	ldr	r3, [pc, #444]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d02d      	beq.n	800363c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035e0:	4b6c      	ldr	r3, [pc, #432]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	08db      	lsrs	r3, r3, #3
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	4a6b      	ldr	r2, [pc, #428]	; (8003798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035ec:	fa22 f303 	lsr.w	r3, r2, r3
 80035f0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	ee07 3a90 	vmov	s15, r3
 80035f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800360a:	4b62      	ldr	r3, [pc, #392]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800361a:	ed97 6a02 	vldr	s12, [r7, #8]
 800361e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80037a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800362a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800362e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003636:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800363a:	e087      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003646:	eddf 6a58 	vldr	s13, [pc, #352]	; 80037a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800364a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800364e:	4b51      	ldr	r3, [pc, #324]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800365e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003662:	eddf 5a50 	vldr	s11, [pc, #320]	; 80037a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800366a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800366e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800367e:	e065      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	ee07 3a90 	vmov	s15, r3
 8003686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800368a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80037ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800368e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003692:	4b40      	ldr	r3, [pc, #256]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800369a:	ee07 3a90 	vmov	s15, r3
 800369e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80036a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80037a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036c2:	e043      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	ee07 3a90 	vmov	s15, r3
 80036ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80037b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80036d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036d6:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036de:	ee07 3a90 	vmov	s15, r3
 80036e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80037a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003706:	e021      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	ee07 3a90 	vmov	s15, r3
 800370e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003712:	eddf 6a26 	vldr	s13, [pc, #152]	; 80037ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8003716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800371a:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800372a:	ed97 6a02 	vldr	s12, [r7, #8]
 800372e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80037a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800373a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800373e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800374a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	0a5b      	lsrs	r3, r3, #9
 8003752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003756:	3301      	adds	r3, #1
 8003758:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	ee07 3a90 	vmov	s15, r3
 8003760:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003764:	edd7 6a07 	vldr	s13, [r7, #28]
 8003768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800376c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003770:	ee17 3a90 	vmov	r3, s15
 8003774:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003776:	e005      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	61bb      	str	r3, [r7, #24]
    break;
 800377c:	e002      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800377e:	4b07      	ldr	r3, [pc, #28]	; (800379c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003780:	61bb      	str	r3, [r7, #24]
    break;
 8003782:	bf00      	nop
  }

  return sysclockfreq;
 8003784:	69bb      	ldr	r3, [r7, #24]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3724      	adds	r7, #36	; 0x24
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	58024400 	.word	0x58024400
 8003798:	03d09000 	.word	0x03d09000
 800379c:	003d0900 	.word	0x003d0900
 80037a0:	007a1200 	.word	0x007a1200
 80037a4:	46000000 	.word	0x46000000
 80037a8:	4c742400 	.word	0x4c742400
 80037ac:	4a742400 	.word	0x4a742400
 80037b0:	4af42400 	.word	0x4af42400

080037b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80037ba:	f7ff fe81 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 80037be:	4602      	mov	r2, r0
 80037c0:	4b10      	ldr	r3, [pc, #64]	; (8003804 <HAL_RCC_GetHCLKFreq+0x50>)
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	0a1b      	lsrs	r3, r3, #8
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	490f      	ldr	r1, [pc, #60]	; (8003808 <HAL_RCC_GetHCLKFreq+0x54>)
 80037cc:	5ccb      	ldrb	r3, [r1, r3]
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	fa22 f303 	lsr.w	r3, r2, r3
 80037d6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80037d8:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <HAL_RCC_GetHCLKFreq+0x50>)
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	4a09      	ldr	r2, [pc, #36]	; (8003808 <HAL_RCC_GetHCLKFreq+0x54>)
 80037e2:	5cd3      	ldrb	r3, [r2, r3]
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	fa22 f303 	lsr.w	r3, r2, r3
 80037ee:	4a07      	ldr	r2, [pc, #28]	; (800380c <HAL_RCC_GetHCLKFreq+0x58>)
 80037f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037f2:	4a07      	ldr	r2, [pc, #28]	; (8003810 <HAL_RCC_GetHCLKFreq+0x5c>)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <HAL_RCC_GetHCLKFreq+0x58>)
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	58024400 	.word	0x58024400
 8003808:	080093d4 	.word	0x080093d4
 800380c:	24000014 	.word	0x24000014
 8003810:	24000010 	.word	0x24000010

08003814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003818:	f7ff ffcc 	bl	80037b4 <HAL_RCC_GetHCLKFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b06      	ldr	r3, [pc, #24]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	4904      	ldr	r1, [pc, #16]	; (800383c <HAL_RCC_GetPCLK1Freq+0x28>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd80      	pop	{r7, pc}
 8003838:	58024400 	.word	0x58024400
 800383c:	080093d4 	.word	0x080093d4

08003840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003844:	f7ff ffb6 	bl	80037b4 <HAL_RCC_GetHCLKFreq>
 8003848:	4602      	mov	r2, r0
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <HAL_RCC_GetPCLK2Freq+0x24>)
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	0a1b      	lsrs	r3, r3, #8
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	4904      	ldr	r1, [pc, #16]	; (8003868 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003856:	5ccb      	ldrb	r3, [r1, r3]
 8003858:	f003 031f 	and.w	r3, r3, #31
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	58024400 	.word	0x58024400
 8003868:	080093d4 	.word	0x080093d4

0800386c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003874:	2300      	movs	r3, #0
 8003876:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003878:	2300      	movs	r3, #0
 800387a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d03f      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800388c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003890:	d02a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003892:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003896:	d824      	bhi.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003898:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800389c:	d018      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800389e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038a2:	d81e      	bhi.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ac:	d007      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80038ae:	e018      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b0:	4b9f      	ldr	r3, [pc, #636]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	4a9e      	ldr	r2, [pc, #632]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038bc:	e015      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3304      	adds	r3, #4
 80038c2:	2102      	movs	r1, #2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f001 f99b 	bl	8004c00 <RCCEx_PLL2_Config>
 80038ca:	4603      	mov	r3, r0
 80038cc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038ce:	e00c      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3324      	adds	r3, #36	; 0x24
 80038d4:	2102      	movs	r1, #2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f001 fa44 	bl	8004d64 <RCCEx_PLL3_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038e0:	e003      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	75fb      	strb	r3, [r7, #23]
      break;
 80038e6:	e000      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80038e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d109      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80038f0:	4b8f      	ldr	r3, [pc, #572]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038fc:	498c      	ldr	r1, [pc, #560]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	650b      	str	r3, [r1, #80]	; 0x50
 8003902:	e001      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003904:	7dfb      	ldrb	r3, [r7, #23]
 8003906:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d03d      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003918:	2b04      	cmp	r3, #4
 800391a:	d826      	bhi.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800391c:	a201      	add	r2, pc, #4	; (adr r2, 8003924 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800391e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003922:	bf00      	nop
 8003924:	08003939 	.word	0x08003939
 8003928:	08003947 	.word	0x08003947
 800392c:	08003959 	.word	0x08003959
 8003930:	08003971 	.word	0x08003971
 8003934:	08003971 	.word	0x08003971
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003938:	4b7d      	ldr	r3, [pc, #500]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	4a7c      	ldr	r2, [pc, #496]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800393e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003942:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003944:	e015      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3304      	adds	r3, #4
 800394a:	2100      	movs	r1, #0
 800394c:	4618      	mov	r0, r3
 800394e:	f001 f957 	bl	8004c00 <RCCEx_PLL2_Config>
 8003952:	4603      	mov	r3, r0
 8003954:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003956:	e00c      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3324      	adds	r3, #36	; 0x24
 800395c:	2100      	movs	r1, #0
 800395e:	4618      	mov	r0, r3
 8003960:	f001 fa00 	bl	8004d64 <RCCEx_PLL3_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003968:	e003      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	75fb      	strb	r3, [r7, #23]
      break;
 800396e:	e000      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003972:	7dfb      	ldrb	r3, [r7, #23]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d109      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003978:	4b6d      	ldr	r3, [pc, #436]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800397a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397c:	f023 0207 	bic.w	r2, r3, #7
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003984:	496a      	ldr	r1, [pc, #424]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003986:	4313      	orrs	r3, r2
 8003988:	650b      	str	r3, [r1, #80]	; 0x50
 800398a:	e001      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398c:	7dfb      	ldrb	r3, [r7, #23]
 800398e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003998:	2b00      	cmp	r3, #0
 800399a:	d04a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80039a4:	d031      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80039a6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80039aa:	d82b      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80039ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b0:	d02d      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80039b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b6:	d825      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80039b8:	2bc0      	cmp	r3, #192	; 0xc0
 80039ba:	d02a      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80039bc:	2bc0      	cmp	r3, #192	; 0xc0
 80039be:	d821      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80039c0:	2b80      	cmp	r3, #128	; 0x80
 80039c2:	d016      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80039c4:	2b80      	cmp	r3, #128	; 0x80
 80039c6:	d81d      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80039cc:	2b40      	cmp	r3, #64	; 0x40
 80039ce:	d007      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80039d0:	e018      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d2:	4b57      	ldr	r3, [pc, #348]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	4a56      	ldr	r2, [pc, #344]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80039de:	e019      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3304      	adds	r3, #4
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f001 f90a 	bl	8004c00 <RCCEx_PLL2_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80039f0:	e010      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3324      	adds	r3, #36	; 0x24
 80039f6:	2100      	movs	r1, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f001 f9b3 	bl	8004d64 <RCCEx_PLL3_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003a02:	e007      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	75fb      	strb	r3, [r7, #23]
      break;
 8003a08:	e004      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003a0a:	bf00      	nop
 8003a0c:	e002      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003a0e:	bf00      	nop
 8003a10:	e000      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003a12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003a1a:	4b45      	ldr	r3, [pc, #276]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	4942      	ldr	r1, [pc, #264]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	650b      	str	r3, [r1, #80]	; 0x50
 8003a2c:	e001      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
 8003a30:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d04f      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a42:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003a46:	d036      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003a48:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003a4c:	d830      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a52:	d032      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a58:	d82a      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a5a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a5e:	d02e      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003a60:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a64:	d824      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6a:	d018      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a70:	d81e      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a7a:	d007      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003a7c:	e018      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a7e:	4b2c      	ldr	r3, [pc, #176]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	4a2b      	ldr	r2, [pc, #172]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003a8a:	e019      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 f8b4 	bl	8004c00 <RCCEx_PLL2_Config>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003a9c:	e010      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3324      	adds	r3, #36	; 0x24
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f001 f95d 	bl	8004d64 <RCCEx_PLL3_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003aae:	e007      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab4:	e004      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003ab6:	bf00      	nop
 8003ab8:	e002      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003aba:	bf00      	nop
 8003abc:	e000      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003abe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003ac6:	4b1a      	ldr	r3, [pc, #104]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aca:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad2:	4917      	ldr	r1, [pc, #92]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	650b      	str	r3, [r1, #80]	; 0x50
 8003ad8:	e001      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ada:	7dfb      	ldrb	r3, [r7, #23]
 8003adc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d034      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aee:	2b30      	cmp	r3, #48	; 0x30
 8003af0:	d01c      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003af2:	2b30      	cmp	r3, #48	; 0x30
 8003af4:	d817      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	d00c      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d813      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d018      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8003b02:	2b10      	cmp	r3, #16
 8003b04:	d10f      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b06:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	4a09      	ldr	r2, [pc, #36]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003b12:	e010      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3304      	adds	r3, #4
 8003b18:	2102      	movs	r1, #2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 f870 	bl	8004c00 <RCCEx_PLL2_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003b24:	e007      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	75fb      	strb	r3, [r7, #23]
      break;
 8003b2a:	e004      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8003b2c:	bf00      	nop
 8003b2e:	e002      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b30:	58024400 	.word	0x58024400
      break;
 8003b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b36:	7dfb      	ldrb	r3, [r7, #23]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d109      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003b3c:	4b9b      	ldr	r3, [pc, #620]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b48:	4998      	ldr	r1, [pc, #608]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b4e:	e001      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b50:	7dfb      	ldrb	r3, [r7, #23]
 8003b52:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d047      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b68:	d030      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003b6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b6e:	d82a      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003b70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b74:	d02c      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003b76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b7a:	d824      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b80:	d018      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b86:	d81e      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b90:	d007      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003b92:	e018      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b94:	4b85      	ldr	r3, [pc, #532]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	4a84      	ldr	r2, [pc, #528]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ba0:	e017      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f001 f829 	bl	8004c00 <RCCEx_PLL2_Config>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bb2:	e00e      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3324      	adds	r3, #36	; 0x24
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f001 f8d2 	bl	8004d64 <RCCEx_PLL3_Config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bc4:	e005      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8003bca:	e002      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003bcc:	bf00      	nop
 8003bce:	e000      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003bd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bd2:	7dfb      	ldrb	r3, [r7, #23]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d109      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003bd8:	4b74      	ldr	r3, [pc, #464]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bdc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be4:	4971      	ldr	r1, [pc, #452]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	650b      	str	r3, [r1, #80]	; 0x50
 8003bea:	e001      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d049      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c04:	d02e      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003c06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c0a:	d828      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003c0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c10:	d02a      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003c12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c16:	d822      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003c18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c1c:	d026      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003c1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c22:	d81c      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003c24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c28:	d010      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003c2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c2e:	d816      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01d      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c38:	d111      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	2101      	movs	r1, #1
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 ffdd 	bl	8004c00 <RCCEx_PLL2_Config>
 8003c46:	4603      	mov	r3, r0
 8003c48:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c4a:	e012      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3324      	adds	r3, #36	; 0x24
 8003c50:	2101      	movs	r1, #1
 8003c52:	4618      	mov	r0, r3
 8003c54:	f001 f886 	bl	8004d64 <RCCEx_PLL3_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c5c:	e009      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	75fb      	strb	r3, [r7, #23]
      break;
 8003c62:	e006      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003c64:	bf00      	nop
 8003c66:	e004      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003c68:	bf00      	nop
 8003c6a:	e002      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003c6c:	bf00      	nop
 8003c6e:	e000      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d109      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c78:	4b4c      	ldr	r3, [pc, #304]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c84:	4949      	ldr	r1, [pc, #292]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	650b      	str	r3, [r1, #80]	; 0x50
 8003c8a:	e001      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
 8003c8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d053      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ca2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003ca6:	d034      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003ca8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003cac:	d82e      	bhi.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cb2:	d030      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cb8:	d828      	bhi.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cbe:	d02c      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc4:	d822      	bhi.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003cc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cca:	d028      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003ccc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cd0:	d81c      	bhi.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cd6:	d010      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8003cd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cdc:	d816      	bhi.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d01f      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003ce2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ce6:	d111      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3304      	adds	r3, #4
 8003cec:	2101      	movs	r1, #1
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 ff86 	bl	8004c00 <RCCEx_PLL2_Config>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003cf8:	e014      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3324      	adds	r3, #36	; 0x24
 8003cfe:	2101      	movs	r1, #1
 8003d00:	4618      	mov	r0, r3
 8003d02:	f001 f82f 	bl	8004d64 <RCCEx_PLL3_Config>
 8003d06:	4603      	mov	r3, r0
 8003d08:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d0a:	e00b      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d10:	e008      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003d12:	bf00      	nop
 8003d14:	e006      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003d16:	bf00      	nop
 8003d18:	e004      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003d1a:	bf00      	nop
 8003d1c:	e002      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003d1e:	bf00      	nop
 8003d20:	e000      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003d22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10a      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d2a:	4b20      	ldr	r3, [pc, #128]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d38:	491c      	ldr	r1, [pc, #112]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	658b      	str	r3, [r1, #88]	; 0x58
 8003d3e:	e001      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
 8003d42:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d031      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d58:	d00e      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d5e:	d814      	bhi.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d015      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d68:	d10f      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d6a:	4b10      	ldr	r3, [pc, #64]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	4a0f      	ldr	r2, [pc, #60]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d76:	e00c      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 ff3e 	bl	8004c00 <RCCEx_PLL2_Config>
 8003d84:	4603      	mov	r3, r0
 8003d86:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d88:	e003      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d8e:	e000      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10b      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da4:	4901      	ldr	r1, [pc, #4]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	650b      	str	r3, [r1, #80]	; 0x50
 8003daa:	e003      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8003dac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db0:	7dfb      	ldrb	r3, [r7, #23]
 8003db2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d032      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d81b      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003dc8:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dce:	bf00      	nop
 8003dd0:	08003e07 	.word	0x08003e07
 8003dd4:	08003de1 	.word	0x08003de1
 8003dd8:	08003def 	.word	0x08003def
 8003ddc:	08003e07 	.word	0x08003e07
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de0:	4bb2      	ldr	r3, [pc, #712]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	4ab1      	ldr	r2, [pc, #708]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003dec:	e00c      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3304      	adds	r3, #4
 8003df2:	2102      	movs	r1, #2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 ff03 	bl	8004c00 <RCCEx_PLL2_Config>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003dfe:	e003      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	75fb      	strb	r3, [r7, #23]
      break;
 8003e04:	e000      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e0e:	4ba7      	ldr	r3, [pc, #668]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e12:	f023 0203 	bic.w	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	49a4      	ldr	r1, [pc, #656]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e20:	e001      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
 8003e24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 8086 	beq.w	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e34:	4b9e      	ldr	r3, [pc, #632]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a9d      	ldr	r2, [pc, #628]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e40:	f7fe fa70 	bl	8002324 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e46:	e009      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e48:	f7fe fa6c 	bl	8002324 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b64      	cmp	r3, #100	; 0x64
 8003e54:	d902      	bls.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	75fb      	strb	r3, [r7, #23]
        break;
 8003e5a:	e005      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e5c:	4b94      	ldr	r3, [pc, #592]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0ef      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d166      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e6e:	4b8f      	ldr	r3, [pc, #572]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003e70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e78:	4053      	eors	r3, r2
 8003e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d013      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e82:	4b8a      	ldr	r3, [pc, #552]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e8c:	4b87      	ldr	r3, [pc, #540]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	4a86      	ldr	r2, [pc, #536]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e96:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e98:	4b84      	ldr	r3, [pc, #528]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	4a83      	ldr	r2, [pc, #524]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ea4:	4a81      	ldr	r2, [pc, #516]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb4:	d115      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb6:	f7fe fa35 	bl	8002324 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ebc:	e00b      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ebe:	f7fe fa31 	bl	8002324 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d902      	bls.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	75fb      	strb	r3, [r7, #23]
            break;
 8003ed4:	e005      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ed6:	4b75      	ldr	r3, [pc, #468]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0ed      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8003ee2:	7dfb      	ldrb	r3, [r7, #23]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d126      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef6:	d10d      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8003ef8:	4b6c      	ldr	r3, [pc, #432]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f06:	0919      	lsrs	r1, r3, #4
 8003f08:	4b6a      	ldr	r3, [pc, #424]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f0a:	400b      	ands	r3, r1
 8003f0c:	4967      	ldr	r1, [pc, #412]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	610b      	str	r3, [r1, #16]
 8003f12:	e005      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8003f14:	4b65      	ldr	r3, [pc, #404]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	4a64      	ldr	r2, [pc, #400]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003f1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f1e:	6113      	str	r3, [r2, #16]
 8003f20:	4b62      	ldr	r3, [pc, #392]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003f22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2e:	495f      	ldr	r1, [pc, #380]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	670b      	str	r3, [r1, #112]	; 0x70
 8003f34:	e004      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f36:	7dfb      	ldrb	r3, [r7, #23]
 8003f38:	75bb      	strb	r3, [r7, #22]
 8003f3a:	e001      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
 8003f3e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d07f      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f52:	2b28      	cmp	r3, #40	; 0x28
 8003f54:	d866      	bhi.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8003f56:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	0800402b 	.word	0x0800402b
 8003f60:	08004025 	.word	0x08004025
 8003f64:	08004025 	.word	0x08004025
 8003f68:	08004025 	.word	0x08004025
 8003f6c:	08004025 	.word	0x08004025
 8003f70:	08004025 	.word	0x08004025
 8003f74:	08004025 	.word	0x08004025
 8003f78:	08004025 	.word	0x08004025
 8003f7c:	08004001 	.word	0x08004001
 8003f80:	08004025 	.word	0x08004025
 8003f84:	08004025 	.word	0x08004025
 8003f88:	08004025 	.word	0x08004025
 8003f8c:	08004025 	.word	0x08004025
 8003f90:	08004025 	.word	0x08004025
 8003f94:	08004025 	.word	0x08004025
 8003f98:	08004025 	.word	0x08004025
 8003f9c:	08004013 	.word	0x08004013
 8003fa0:	08004025 	.word	0x08004025
 8003fa4:	08004025 	.word	0x08004025
 8003fa8:	08004025 	.word	0x08004025
 8003fac:	08004025 	.word	0x08004025
 8003fb0:	08004025 	.word	0x08004025
 8003fb4:	08004025 	.word	0x08004025
 8003fb8:	08004025 	.word	0x08004025
 8003fbc:	0800402b 	.word	0x0800402b
 8003fc0:	08004025 	.word	0x08004025
 8003fc4:	08004025 	.word	0x08004025
 8003fc8:	08004025 	.word	0x08004025
 8003fcc:	08004025 	.word	0x08004025
 8003fd0:	08004025 	.word	0x08004025
 8003fd4:	08004025 	.word	0x08004025
 8003fd8:	08004025 	.word	0x08004025
 8003fdc:	0800402b 	.word	0x0800402b
 8003fe0:	08004025 	.word	0x08004025
 8003fe4:	08004025 	.word	0x08004025
 8003fe8:	08004025 	.word	0x08004025
 8003fec:	08004025 	.word	0x08004025
 8003ff0:	08004025 	.word	0x08004025
 8003ff4:	08004025 	.word	0x08004025
 8003ff8:	08004025 	.word	0x08004025
 8003ffc:	0800402b 	.word	0x0800402b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	2101      	movs	r1, #1
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fdfa 	bl	8004c00 <RCCEx_PLL2_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004010:	e00c      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3324      	adds	r3, #36	; 0x24
 8004016:	2101      	movs	r1, #1
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fea3 	bl	8004d64 <RCCEx_PLL3_Config>
 800401e:	4603      	mov	r3, r0
 8004020:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004022:	e003      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	75fb      	strb	r3, [r7, #23]
      break;
 8004028:	e000      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 800402a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800402c:	7dfb      	ldrb	r3, [r7, #23]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10a      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004032:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004036:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004040:	491a      	ldr	r1, [pc, #104]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004042:	4313      	orrs	r3, r2
 8004044:	654b      	str	r3, [r1, #84]	; 0x54
 8004046:	e001      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004048:	7dfb      	ldrb	r3, [r7, #23]
 800404a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d03f      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800405c:	2b05      	cmp	r3, #5
 800405e:	d821      	bhi.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8004060:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8004062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004066:	bf00      	nop
 8004068:	080040b9 	.word	0x080040b9
 800406c:	08004081 	.word	0x08004081
 8004070:	08004093 	.word	0x08004093
 8004074:	080040b9 	.word	0x080040b9
 8004078:	080040b9 	.word	0x080040b9
 800407c:	080040b9 	.word	0x080040b9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	2101      	movs	r1, #1
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fdba 	bl	8004c00 <RCCEx_PLL2_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004090:	e013      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3324      	adds	r3, #36	; 0x24
 8004096:	2101      	movs	r1, #1
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fe63 	bl	8004d64 <RCCEx_PLL3_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040a2:	e00a      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	75fb      	strb	r3, [r7, #23]
      break;
 80040a8:	e007      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80040aa:	bf00      	nop
 80040ac:	58024400 	.word	0x58024400
 80040b0:	58024800 	.word	0x58024800
 80040b4:	00ffffcf 	.word	0x00ffffcf
      break;
 80040b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ba:	7dfb      	ldrb	r3, [r7, #23]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d109      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040c0:	4b9f      	ldr	r3, [pc, #636]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80040c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c4:	f023 0207 	bic.w	r2, r3, #7
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040cc:	499c      	ldr	r1, [pc, #624]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	654b      	str	r3, [r1, #84]	; 0x54
 80040d2:	e001      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d4:	7dfb      	ldrb	r3, [r7, #23]
 80040d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d039      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040ea:	2b05      	cmp	r3, #5
 80040ec:	d820      	bhi.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80040ee:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80040f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f4:	08004137 	.word	0x08004137
 80040f8:	0800410d 	.word	0x0800410d
 80040fc:	0800411f 	.word	0x0800411f
 8004100:	08004137 	.word	0x08004137
 8004104:	08004137 	.word	0x08004137
 8004108:	08004137 	.word	0x08004137
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3304      	adds	r3, #4
 8004110:	2101      	movs	r1, #1
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fd74 	bl	8004c00 <RCCEx_PLL2_Config>
 8004118:	4603      	mov	r3, r0
 800411a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800411c:	e00c      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3324      	adds	r3, #36	; 0x24
 8004122:	2101      	movs	r1, #1
 8004124:	4618      	mov	r0, r3
 8004126:	f000 fe1d 	bl	8004d64 <RCCEx_PLL3_Config>
 800412a:	4603      	mov	r3, r0
 800412c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800412e:	e003      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	75fb      	strb	r3, [r7, #23]
      break;
 8004134:	e000      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8004136:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004138:	7dfb      	ldrb	r3, [r7, #23]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800413e:	4b80      	ldr	r3, [pc, #512]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004142:	f023 0207 	bic.w	r2, r3, #7
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800414c:	497c      	ldr	r1, [pc, #496]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800414e:	4313      	orrs	r3, r2
 8004150:	658b      	str	r3, [r1, #88]	; 0x58
 8004152:	e001      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b00      	cmp	r3, #0
 8004162:	d04b      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800416a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800416e:	d02e      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004174:	d828      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417a:	d02a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800417c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004180:	d822      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004182:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004186:	d026      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004188:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800418c:	d81c      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800418e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004192:	d010      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8004194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004198:	d816      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d01d      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800419e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041a2:	d111      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	2100      	movs	r1, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fd28 	bl	8004c00 <RCCEx_PLL2_Config>
 80041b0:	4603      	mov	r3, r0
 80041b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041b4:	e012      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3324      	adds	r3, #36	; 0x24
 80041ba:	2102      	movs	r1, #2
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fdd1 	bl	8004d64 <RCCEx_PLL3_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041c6:	e009      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	75fb      	strb	r3, [r7, #23]
      break;
 80041cc:	e006      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80041ce:	bf00      	nop
 80041d0:	e004      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80041d2:	bf00      	nop
 80041d4:	e002      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80041d6:	bf00      	nop
 80041d8:	e000      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80041da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041e2:	4b57      	ldr	r3, [pc, #348]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80041e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f0:	4953      	ldr	r1, [pc, #332]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	654b      	str	r3, [r1, #84]	; 0x54
 80041f6:	e001      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f8:	7dfb      	ldrb	r3, [r7, #23]
 80041fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d04b      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800420e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004212:	d02e      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8004214:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004218:	d828      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800421a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421e:	d02a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004224:	d822      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004226:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800422a:	d026      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800422c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004230:	d81c      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004236:	d010      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8004238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800423c:	d816      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01d      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004246:	d111      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3304      	adds	r3, #4
 800424c:	2100      	movs	r1, #0
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fcd6 	bl	8004c00 <RCCEx_PLL2_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004258:	e012      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3324      	adds	r3, #36	; 0x24
 800425e:	2102      	movs	r1, #2
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fd7f 	bl	8004d64 <RCCEx_PLL3_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800426a:	e009      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	75fb      	strb	r3, [r7, #23]
      break;
 8004270:	e006      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004272:	bf00      	nop
 8004274:	e004      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004276:	bf00      	nop
 8004278:	e002      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800427a:	bf00      	nop
 800427c:	e000      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800427e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004280:	7dfb      	ldrb	r3, [r7, #23]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10a      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004286:	4b2e      	ldr	r3, [pc, #184]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004294:	492a      	ldr	r1, [pc, #168]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004296:	4313      	orrs	r3, r2
 8004298:	658b      	str	r3, [r1, #88]	; 0x58
 800429a:	e001      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429c:	7dfb      	ldrb	r3, [r7, #23]
 800429e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d04d      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042b6:	d02e      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80042b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042bc:	d828      	bhi.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80042be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c2:	d02a      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80042c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c8:	d822      	bhi.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80042ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042ce:	d026      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80042d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042d4:	d81c      	bhi.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80042d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042da:	d010      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80042dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042e0:	d816      	bhi.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d01d      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80042e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ea:	d111      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3304      	adds	r3, #4
 80042f0:	2100      	movs	r1, #0
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fc84 	bl	8004c00 <RCCEx_PLL2_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042fc:	e012      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3324      	adds	r3, #36	; 0x24
 8004302:	2102      	movs	r1, #2
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fd2d 	bl	8004d64 <RCCEx_PLL3_Config>
 800430a:	4603      	mov	r3, r0
 800430c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800430e:	e009      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	75fb      	strb	r3, [r7, #23]
      break;
 8004314:	e006      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004316:	bf00      	nop
 8004318:	e004      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800431a:	bf00      	nop
 800431c:	e002      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800431e:	bf00      	nop
 8004320:	e000      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004322:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004324:	7dfb      	ldrb	r3, [r7, #23]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10c      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800432c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004338:	4901      	ldr	r1, [pc, #4]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800433a:	4313      	orrs	r3, r2
 800433c:	658b      	str	r3, [r1, #88]	; 0x58
 800433e:	e003      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004340:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004344:	7dfb      	ldrb	r3, [r7, #23]
 8004346:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01a      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435e:	d10a      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3324      	adds	r3, #36	; 0x24
 8004364:	2102      	movs	r1, #2
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fcfc 	bl	8004d64 <RCCEx_PLL3_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004376:	4b8c      	ldr	r3, [pc, #560]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004384:	4988      	ldr	r1, [pc, #544]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004386:	4313      	orrs	r3, r2
 8004388:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01a      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800439c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a0:	d10a      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3324      	adds	r3, #36	; 0x24
 80043a6:	2102      	movs	r1, #2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fcdb 	bl	8004d64 <RCCEx_PLL3_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043b8:	4b7b      	ldr	r3, [pc, #492]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043c6:	4978      	ldr	r1, [pc, #480]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d034      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043e2:	d01d      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80043e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043e8:	d817      	bhi.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80043ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f2:	d009      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80043f4:	e011      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3304      	adds	r3, #4
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fbff 	bl	8004c00 <RCCEx_PLL2_Config>
 8004402:	4603      	mov	r3, r0
 8004404:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004406:	e00c      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3324      	adds	r3, #36	; 0x24
 800440c:	2102      	movs	r1, #2
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fca8 	bl	8004d64 <RCCEx_PLL3_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004418:	e003      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	75fb      	strb	r3, [r7, #23]
      break;
 800441e:	e000      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8004420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004422:	7dfb      	ldrb	r3, [r7, #23]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10a      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004428:	4b5f      	ldr	r3, [pc, #380]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800442a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004436:	495c      	ldr	r1, [pc, #368]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004438:	4313      	orrs	r3, r2
 800443a:	658b      	str	r3, [r1, #88]	; 0x58
 800443c:	e001      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443e:	7dfb      	ldrb	r3, [r7, #23]
 8004440:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d033      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004454:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004458:	d01c      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800445a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800445e:	d816      	bhi.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004460:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004464:	d003      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004466:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800446a:	d007      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800446c:	e00f      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446e:	4b4e      	ldr	r3, [pc, #312]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	4a4d      	ldr	r2, [pc, #308]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004478:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800447a:	e00c      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3324      	adds	r3, #36	; 0x24
 8004480:	2101      	movs	r1, #1
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fc6e 	bl	8004d64 <RCCEx_PLL3_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800448c:	e003      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	75fb      	strb	r3, [r7, #23]
      break;
 8004492:	e000      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004494:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004496:	7dfb      	ldrb	r3, [r7, #23]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10a      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800449c:	4b42      	ldr	r3, [pc, #264]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800449e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044aa:	493f      	ldr	r1, [pc, #252]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	654b      	str	r3, [r1, #84]	; 0x54
 80044b0:	e001      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
 80044b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d029      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80044ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ce:	d007      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80044d0:	e00f      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d2:	4b35      	ldr	r3, [pc, #212]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	4a34      	ldr	r2, [pc, #208]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80044d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044de:	e00b      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3304      	adds	r3, #4
 80044e4:	2102      	movs	r1, #2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fb8a 	bl	8004c00 <RCCEx_PLL2_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044f0:	e002      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	75fb      	strb	r3, [r7, #23]
      break;
 80044f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044f8:	7dfb      	ldrb	r3, [r7, #23]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044fe:	4b2a      	ldr	r3, [pc, #168]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004502:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450a:	4927      	ldr	r1, [pc, #156]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800450c:	4313      	orrs	r3, r2
 800450e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004510:	e001      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004512:	7dfb      	ldrb	r3, [r7, #23]
 8004514:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3324      	adds	r3, #36	; 0x24
 8004526:	2102      	movs	r1, #2
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fc1b 	bl	8004d64 <RCCEx_PLL3_Config>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d035      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800454a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800454e:	d017      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004554:	d811      	bhi.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800455a:	d013      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800455c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004560:	d80b      	bhi.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004562:	2b00      	cmp	r3, #0
 8004564:	d010      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456a:	d106      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800456c:	4b0e      	ldr	r3, [pc, #56]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	4a0d      	ldr	r2, [pc, #52]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004576:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004578:	e007      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	75fb      	strb	r3, [r7, #23]
      break;
 800457e:	e004      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004580:	bf00      	nop
 8004582:	e002      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004584:	bf00      	nop
 8004586:	e000      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004588:	bf00      	nop
    }

    if(ret == HAL_OK)
 800458a:	7dfb      	ldrb	r3, [r7, #23]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10d      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004590:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004594:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800459e:	4902      	ldr	r1, [pc, #8]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	654b      	str	r3, [r1, #84]	; 0x54
 80045a4:	e004      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80045a6:	bf00      	nop
 80045a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045bc:	4b30      	ldr	r3, [pc, #192]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045c8:	492d      	ldr	r1, [pc, #180]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d008      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045da:	4b29      	ldr	r3, [pc, #164]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e6:	4926      	ldr	r1, [pc, #152]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d008      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80045f8:	4b21      	ldr	r3, [pc, #132]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	491e      	ldr	r1, [pc, #120]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004606:	4313      	orrs	r3, r2
 8004608:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00d      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004616:	4b1a      	ldr	r3, [pc, #104]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	4a19      	ldr	r2, [pc, #100]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800461c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004620:	6113      	str	r3, [r2, #16]
 8004622:	4b17      	ldr	r3, [pc, #92]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800462c:	4914      	ldr	r1, [pc, #80]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800462e:	4313      	orrs	r3, r2
 8004630:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	da08      	bge.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800463a:	4b11      	ldr	r3, [pc, #68]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800463c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004646:	490e      	ldr	r1, [pc, #56]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004648:	4313      	orrs	r3, r2
 800464a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d009      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004658:	4b09      	ldr	r3, [pc, #36]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800465a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004666:	4906      	ldr	r1, [pc, #24]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004668:	4313      	orrs	r3, r2
 800466a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800466c:	7dbb      	ldrb	r3, [r7, #22]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	e000      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	58024400 	.word	0x58024400

08004684 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004688:	f7ff f894 	bl	80037b4 <HAL_RCC_GetHCLKFreq>
 800468c:	4602      	mov	r2, r0
 800468e:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	091b      	lsrs	r3, r3, #4
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	4904      	ldr	r1, [pc, #16]	; (80046ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800469a:	5ccb      	ldrb	r3, [r1, r3]
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	58024400 	.word	0x58024400
 80046ac:	080093d4 	.word	0x080093d4

080046b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b089      	sub	sp, #36	; 0x24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046b8:	4ba1      	ldr	r3, [pc, #644]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	f003 0303 	and.w	r3, r3, #3
 80046c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80046c2:	4b9f      	ldr	r3, [pc, #636]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c6:	0b1b      	lsrs	r3, r3, #12
 80046c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80046ce:	4b9c      	ldr	r3, [pc, #624]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d2:	091b      	lsrs	r3, r3, #4
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80046da:	4b99      	ldr	r3, [pc, #612]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046de:	08db      	lsrs	r3, r3, #3
 80046e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	fb02 f303 	mul.w	r3, r2, r3
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 8111 	beq.w	8004920 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	2b02      	cmp	r3, #2
 8004702:	f000 8083 	beq.w	800480c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b02      	cmp	r3, #2
 800470a:	f200 80a1 	bhi.w	8004850 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d056      	beq.n	80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800471a:	e099      	b.n	8004850 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800471c:	4b88      	ldr	r3, [pc, #544]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d02d      	beq.n	8004784 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004728:	4b85      	ldr	r3, [pc, #532]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	08db      	lsrs	r3, r3, #3
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	4a84      	ldr	r2, [pc, #528]	; (8004944 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
 8004738:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	ee07 3a90 	vmov	s15, r3
 8004740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004752:	4b7b      	ldr	r3, [pc, #492]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004762:	ed97 6a03 	vldr	s12, [r7, #12]
 8004766:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800476a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800476e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800477a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004782:	e087      	b.n	8004894 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800494c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004796:	4b6a      	ldr	r3, [pc, #424]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479e:	ee07 3a90 	vmov	s15, r3
 80047a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047c6:	e065      	b.n	8004894 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047da:	4b59      	ldr	r3, [pc, #356]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004806:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800480a:	e043      	b.n	8004894 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004816:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004954 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800481a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481e:	4b48      	ldr	r3, [pc, #288]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004832:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800483a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800483e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800484a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800484e:	e021      	b.n	8004894 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800485e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004862:	4b37      	ldr	r3, [pc, #220]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004872:	ed97 6a03 	vldr	s12, [r7, #12]
 8004876:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800487a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800488a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004892:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004894:	4b2a      	ldr	r3, [pc, #168]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	0a5b      	lsrs	r3, r3, #9
 800489a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80048b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ba:	ee17 2a90 	vmov	r2, s15
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80048c2:	4b1f      	ldr	r3, [pc, #124]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c6:	0c1b      	lsrs	r3, r3, #16
 80048c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048cc:	ee07 3a90 	vmov	s15, r3
 80048d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80048e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048e8:	ee17 2a90 	vmov	r2, s15
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80048f0:	4b13      	ldr	r3, [pc, #76]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	0e1b      	lsrs	r3, r3, #24
 80048f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004906:	ee37 7a87 	vadd.f32	s14, s15, s14
 800490a:	edd7 6a07 	vldr	s13, [r7, #28]
 800490e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004916:	ee17 2a90 	vmov	r2, s15
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800491e:	e008      	b.n	8004932 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	609a      	str	r2, [r3, #8]
}
 8004932:	bf00      	nop
 8004934:	3724      	adds	r7, #36	; 0x24
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	58024400 	.word	0x58024400
 8004944:	03d09000 	.word	0x03d09000
 8004948:	46000000 	.word	0x46000000
 800494c:	4c742400 	.word	0x4c742400
 8004950:	4a742400 	.word	0x4a742400
 8004954:	4af42400 	.word	0x4af42400

08004958 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004958:	b480      	push	{r7}
 800495a:	b089      	sub	sp, #36	; 0x24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004960:	4ba1      	ldr	r3, [pc, #644]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800496a:	4b9f      	ldr	r3, [pc, #636]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	0d1b      	lsrs	r3, r3, #20
 8004970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004974:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004976:	4b9c      	ldr	r3, [pc, #624]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	0a1b      	lsrs	r3, r3, #8
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004982:	4b99      	ldr	r3, [pc, #612]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004986:	08db      	lsrs	r3, r3, #3
 8004988:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	fb02 f303 	mul.w	r3, r2, r3
 8004992:	ee07 3a90 	vmov	s15, r3
 8004996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 8111 	beq.w	8004bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	f000 8083 	beq.w	8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	f200 80a1 	bhi.w	8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d056      	beq.n	8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80049c2:	e099      	b.n	8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049c4:	4b88      	ldr	r3, [pc, #544]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0320 	and.w	r3, r3, #32
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d02d      	beq.n	8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049d0:	4b85      	ldr	r3, [pc, #532]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	08db      	lsrs	r3, r3, #3
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	4a84      	ldr	r2, [pc, #528]	; (8004bec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
 80049e0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	ee07 3a90 	vmov	s15, r3
 80049e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	ee07 3a90 	vmov	s15, r3
 80049f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049fa:	4b7b      	ldr	r3, [pc, #492]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a02:	ee07 3a90 	vmov	s15, r3
 8004a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004a2a:	e087      	b.n	8004b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a3e:	4b6a      	ldr	r3, [pc, #424]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a46:	ee07 3a90 	vmov	s15, r3
 8004a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a6e:	e065      	b.n	8004b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a82:	4b59      	ldr	r3, [pc, #356]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ab2:	e043      	b.n	8004b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004abe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac6:	4b48      	ldr	r3, [pc, #288]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ada:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004af2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004af6:	e021      	b.n	8004b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b0a:	4b37      	ldr	r3, [pc, #220]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b3a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004b3c:	4b2a      	ldr	r3, [pc, #168]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	0a5b      	lsrs	r3, r3, #9
 8004b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b56:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b62:	ee17 2a90 	vmov	r2, s15
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004b6a:	4b1f      	ldr	r3, [pc, #124]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	0c1b      	lsrs	r3, r3, #16
 8004b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b74:	ee07 3a90 	vmov	s15, r3
 8004b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b84:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b90:	ee17 2a90 	vmov	r2, s15
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004b98:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	0e1b      	lsrs	r3, r3, #24
 8004b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004baa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bbe:	ee17 2a90 	vmov	r2, s15
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004bc6:	e008      	b.n	8004bda <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	609a      	str	r2, [r3, #8]
}
 8004bda:	bf00      	nop
 8004bdc:	3724      	adds	r7, #36	; 0x24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	58024400 	.word	0x58024400
 8004bec:	03d09000 	.word	0x03d09000
 8004bf0:	46000000 	.word	0x46000000
 8004bf4:	4c742400 	.word	0x4c742400
 8004bf8:	4a742400 	.word	0x4a742400
 8004bfc:	4af42400 	.word	0x4af42400

08004c00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c0e:	4b53      	ldr	r3, [pc, #332]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d101      	bne.n	8004c1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e099      	b.n	8004d52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c1e:	4b4f      	ldr	r3, [pc, #316]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a4e      	ldr	r2, [pc, #312]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c2a:	f7fd fb7b 	bl	8002324 <HAL_GetTick>
 8004c2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c30:	e008      	b.n	8004c44 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004c32:	f7fd fb77 	bl	8002324 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e086      	b.n	8004d52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c44:	4b45      	ldr	r3, [pc, #276]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f0      	bne.n	8004c32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c50:	4b42      	ldr	r3, [pc, #264]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	031b      	lsls	r3, r3, #12
 8004c5e:	493f      	ldr	r1, [pc, #252]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	628b      	str	r3, [r1, #40]	; 0x28
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	025b      	lsls	r3, r3, #9
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	041b      	lsls	r3, r3, #16
 8004c82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	061b      	lsls	r3, r3, #24
 8004c90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c94:	4931      	ldr	r1, [pc, #196]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c9a:	4b30      	ldr	r3, [pc, #192]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	492d      	ldr	r1, [pc, #180]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004cac:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	f023 0220 	bic.w	r2, r3, #32
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	4928      	ldr	r1, [pc, #160]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004cbe:	4b27      	ldr	r3, [pc, #156]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc2:	4a26      	ldr	r2, [pc, #152]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cc4:	f023 0310 	bic.w	r3, r3, #16
 8004cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004cca:	4b24      	ldr	r3, [pc, #144]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cce:	4b24      	ldr	r3, [pc, #144]	; (8004d60 <RCCEx_PLL2_Config+0x160>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	69d2      	ldr	r2, [r2, #28]
 8004cd6:	00d2      	lsls	r2, r2, #3
 8004cd8:	4920      	ldr	r1, [pc, #128]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004cde:	4b1f      	ldr	r3, [pc, #124]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	4a1e      	ldr	r2, [pc, #120]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004ce4:	f043 0310 	orr.w	r3, r3, #16
 8004ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d106      	bne.n	8004cfe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004cf0:	4b1a      	ldr	r3, [pc, #104]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cfc:	e00f      	b.n	8004d1e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d106      	bne.n	8004d12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d04:	4b15      	ldr	r3, [pc, #84]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	4a14      	ldr	r2, [pc, #80]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d10:	e005      	b.n	8004d1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d12:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	4a11      	ldr	r2, [pc, #68]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d1e:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a0e      	ldr	r2, [pc, #56]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d2a:	f7fd fafb 	bl	8002324 <HAL_GetTick>
 8004d2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d30:	e008      	b.n	8004d44 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004d32:	f7fd faf7 	bl	8002324 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e006      	b.n	8004d52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d44:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0f0      	beq.n	8004d32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	58024400 	.word	0x58024400
 8004d60:	ffff0007 	.word	0xffff0007

08004d64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d72:	4b53      	ldr	r3, [pc, #332]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d101      	bne.n	8004d82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e099      	b.n	8004eb6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d82:	4b4f      	ldr	r3, [pc, #316]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a4e      	ldr	r2, [pc, #312]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d8e:	f7fd fac9 	bl	8002324 <HAL_GetTick>
 8004d92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d94:	e008      	b.n	8004da8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d96:	f7fd fac5 	bl	8002324 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e086      	b.n	8004eb6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004da8:	4b45      	ldr	r3, [pc, #276]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1f0      	bne.n	8004d96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004db4:	4b42      	ldr	r3, [pc, #264]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	051b      	lsls	r3, r3, #20
 8004dc2:	493f      	ldr	r1, [pc, #252]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	628b      	str	r3, [r1, #40]	; 0x28
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	025b      	lsls	r3, r3, #9
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	041b      	lsls	r3, r3, #16
 8004de6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	061b      	lsls	r3, r3, #24
 8004df4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004df8:	4931      	ldr	r1, [pc, #196]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004dfe:	4b30      	ldr	r3, [pc, #192]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	492d      	ldr	r1, [pc, #180]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e10:	4b2b      	ldr	r3, [pc, #172]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	4928      	ldr	r1, [pc, #160]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e22:	4b27      	ldr	r3, [pc, #156]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	4a26      	ldr	r2, [pc, #152]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e2e:	4b24      	ldr	r3, [pc, #144]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e32:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <RCCEx_PLL3_Config+0x160>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	69d2      	ldr	r2, [r2, #28]
 8004e3a:	00d2      	lsls	r2, r2, #3
 8004e3c:	4920      	ldr	r1, [pc, #128]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e42:	4b1f      	ldr	r3, [pc, #124]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d106      	bne.n	8004e62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e54:	4b1a      	ldr	r3, [pc, #104]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	4a19      	ldr	r2, [pc, #100]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e60:	e00f      	b.n	8004e82 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d106      	bne.n	8004e76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e68:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	4a14      	ldr	r2, [pc, #80]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e74:	e005      	b.n	8004e82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e76:	4b12      	ldr	r3, [pc, #72]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7a:	4a11      	ldr	r2, [pc, #68]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e82:	4b0f      	ldr	r3, [pc, #60]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a0e      	ldr	r2, [pc, #56]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8e:	f7fd fa49 	bl	8002324 <HAL_GetTick>
 8004e92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e94:	e008      	b.n	8004ea8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004e96:	f7fd fa45 	bl	8002324 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e006      	b.n	8004eb6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ea8:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0f0      	beq.n	8004e96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	58024400 	.word	0x58024400
 8004ec4:	ffff0007 	.word	0xffff0007

08004ec8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e042      	b.n	8004f60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d106      	bne.n	8004ef2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7fc ff9b 	bl	8001e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2224      	movs	r2, #36	; 0x24
 8004ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0201 	bic.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f8c2 	bl	8005094 <UART_SetConfig>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e022      	b.n	8004f60 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 ff22 	bl	8005d6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 ffa9 	bl	8005eb0 <UART_CheckIdleState>
 8004f5e:	4603      	mov	r3, r0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08a      	sub	sp, #40	; 0x28
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	4613      	mov	r3, r2
 8004f76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f7e:	2b20      	cmp	r3, #32
 8004f80:	f040 8083 	bne.w	800508a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <HAL_UART_Transmit+0x28>
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e07b      	b.n	800508c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d101      	bne.n	8004fa2 <HAL_UART_Transmit+0x3a>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	e074      	b.n	800508c <HAL_UART_Transmit+0x124>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2221      	movs	r2, #33	; 0x21
 8004fb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fba:	f7fd f9b3 	bl	8002324 <HAL_GetTick>
 8004fbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	88fa      	ldrh	r2, [r7, #6]
 8004fc4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	88fa      	ldrh	r2, [r7, #6]
 8004fcc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd8:	d108      	bne.n	8004fec <HAL_UART_Transmit+0x84>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d104      	bne.n	8004fec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	61bb      	str	r3, [r7, #24]
 8004fea:	e003      	b.n	8004ff4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004ffc:	e02c      	b.n	8005058 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2200      	movs	r2, #0
 8005006:	2180      	movs	r1, #128	; 0x80
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 ff9c 	bl	8005f46 <UART_WaitOnFlagUntilTimeout>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e039      	b.n	800508c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10b      	bne.n	8005036 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	461a      	mov	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800502c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	3302      	adds	r3, #2
 8005032:	61bb      	str	r3, [r7, #24]
 8005034:	e007      	b.n	8005046 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	781a      	ldrb	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	3301      	adds	r3, #1
 8005044:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1cc      	bne.n	8004ffe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2200      	movs	r2, #0
 800506c:	2140      	movs	r1, #64	; 0x40
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 ff69 	bl	8005f46 <UART_WaitOnFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e006      	b.n	800508c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2220      	movs	r2, #32
 8005082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	e000      	b.n	800508c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800508a:	2302      	movs	r3, #2
  }
}
 800508c:	4618      	mov	r0, r3
 800508e:	3720      	adds	r7, #32
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005098:	b092      	sub	sp, #72	; 0x48
 800509a:	af00      	add	r7, sp, #0
 800509c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800509e:	2300      	movs	r3, #0
 80050a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	431a      	orrs	r2, r3
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	4bbe      	ldr	r3, [pc, #760]	; (80053bc <UART_SetConfig+0x328>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	6812      	ldr	r2, [r2, #0]
 80050ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050cc:	430b      	orrs	r3, r1
 80050ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4ab3      	ldr	r2, [pc, #716]	; (80053c0 <UART_SetConfig+0x32c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d004      	beq.n	8005100 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050fc:	4313      	orrs	r3, r2
 80050fe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	4baf      	ldr	r3, [pc, #700]	; (80053c4 <UART_SetConfig+0x330>)
 8005108:	4013      	ands	r3, r2
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	6812      	ldr	r2, [r2, #0]
 800510e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005110:	430b      	orrs	r3, r1
 8005112:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511a:	f023 010f 	bic.w	r1, r3, #15
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4aa6      	ldr	r2, [pc, #664]	; (80053c8 <UART_SetConfig+0x334>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d177      	bne.n	8005224 <UART_SetConfig+0x190>
 8005134:	4ba5      	ldr	r3, [pc, #660]	; (80053cc <UART_SetConfig+0x338>)
 8005136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005138:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800513c:	2b28      	cmp	r3, #40	; 0x28
 800513e:	d86d      	bhi.n	800521c <UART_SetConfig+0x188>
 8005140:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <UART_SetConfig+0xb4>)
 8005142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005146:	bf00      	nop
 8005148:	080051ed 	.word	0x080051ed
 800514c:	0800521d 	.word	0x0800521d
 8005150:	0800521d 	.word	0x0800521d
 8005154:	0800521d 	.word	0x0800521d
 8005158:	0800521d 	.word	0x0800521d
 800515c:	0800521d 	.word	0x0800521d
 8005160:	0800521d 	.word	0x0800521d
 8005164:	0800521d 	.word	0x0800521d
 8005168:	080051f5 	.word	0x080051f5
 800516c:	0800521d 	.word	0x0800521d
 8005170:	0800521d 	.word	0x0800521d
 8005174:	0800521d 	.word	0x0800521d
 8005178:	0800521d 	.word	0x0800521d
 800517c:	0800521d 	.word	0x0800521d
 8005180:	0800521d 	.word	0x0800521d
 8005184:	0800521d 	.word	0x0800521d
 8005188:	080051fd 	.word	0x080051fd
 800518c:	0800521d 	.word	0x0800521d
 8005190:	0800521d 	.word	0x0800521d
 8005194:	0800521d 	.word	0x0800521d
 8005198:	0800521d 	.word	0x0800521d
 800519c:	0800521d 	.word	0x0800521d
 80051a0:	0800521d 	.word	0x0800521d
 80051a4:	0800521d 	.word	0x0800521d
 80051a8:	08005205 	.word	0x08005205
 80051ac:	0800521d 	.word	0x0800521d
 80051b0:	0800521d 	.word	0x0800521d
 80051b4:	0800521d 	.word	0x0800521d
 80051b8:	0800521d 	.word	0x0800521d
 80051bc:	0800521d 	.word	0x0800521d
 80051c0:	0800521d 	.word	0x0800521d
 80051c4:	0800521d 	.word	0x0800521d
 80051c8:	0800520d 	.word	0x0800520d
 80051cc:	0800521d 	.word	0x0800521d
 80051d0:	0800521d 	.word	0x0800521d
 80051d4:	0800521d 	.word	0x0800521d
 80051d8:	0800521d 	.word	0x0800521d
 80051dc:	0800521d 	.word	0x0800521d
 80051e0:	0800521d 	.word	0x0800521d
 80051e4:	0800521d 	.word	0x0800521d
 80051e8:	08005215 	.word	0x08005215
 80051ec:	2301      	movs	r3, #1
 80051ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051f2:	e326      	b.n	8005842 <UART_SetConfig+0x7ae>
 80051f4:	2304      	movs	r3, #4
 80051f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051fa:	e322      	b.n	8005842 <UART_SetConfig+0x7ae>
 80051fc:	2308      	movs	r3, #8
 80051fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005202:	e31e      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005204:	2310      	movs	r3, #16
 8005206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800520a:	e31a      	b.n	8005842 <UART_SetConfig+0x7ae>
 800520c:	2320      	movs	r3, #32
 800520e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005212:	e316      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005214:	2340      	movs	r3, #64	; 0x40
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800521a:	e312      	b.n	8005842 <UART_SetConfig+0x7ae>
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005222:	e30e      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a69      	ldr	r2, [pc, #420]	; (80053d0 <UART_SetConfig+0x33c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d130      	bne.n	8005290 <UART_SetConfig+0x1fc>
 800522e:	4b67      	ldr	r3, [pc, #412]	; (80053cc <UART_SetConfig+0x338>)
 8005230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	2b05      	cmp	r3, #5
 8005238:	d826      	bhi.n	8005288 <UART_SetConfig+0x1f4>
 800523a:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <UART_SetConfig+0x1ac>)
 800523c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005240:	08005259 	.word	0x08005259
 8005244:	08005261 	.word	0x08005261
 8005248:	08005269 	.word	0x08005269
 800524c:	08005271 	.word	0x08005271
 8005250:	08005279 	.word	0x08005279
 8005254:	08005281 	.word	0x08005281
 8005258:	2300      	movs	r3, #0
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525e:	e2f0      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005260:	2304      	movs	r3, #4
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005266:	e2ec      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005268:	2308      	movs	r3, #8
 800526a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800526e:	e2e8      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005270:	2310      	movs	r3, #16
 8005272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005276:	e2e4      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005278:	2320      	movs	r3, #32
 800527a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800527e:	e2e0      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005280:	2340      	movs	r3, #64	; 0x40
 8005282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005286:	e2dc      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005288:	2380      	movs	r3, #128	; 0x80
 800528a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800528e:	e2d8      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a4f      	ldr	r2, [pc, #316]	; (80053d4 <UART_SetConfig+0x340>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d130      	bne.n	80052fc <UART_SetConfig+0x268>
 800529a:	4b4c      	ldr	r3, [pc, #304]	; (80053cc <UART_SetConfig+0x338>)
 800529c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	2b05      	cmp	r3, #5
 80052a4:	d826      	bhi.n	80052f4 <UART_SetConfig+0x260>
 80052a6:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <UART_SetConfig+0x218>)
 80052a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ac:	080052c5 	.word	0x080052c5
 80052b0:	080052cd 	.word	0x080052cd
 80052b4:	080052d5 	.word	0x080052d5
 80052b8:	080052dd 	.word	0x080052dd
 80052bc:	080052e5 	.word	0x080052e5
 80052c0:	080052ed 	.word	0x080052ed
 80052c4:	2300      	movs	r3, #0
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ca:	e2ba      	b.n	8005842 <UART_SetConfig+0x7ae>
 80052cc:	2304      	movs	r3, #4
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052d2:	e2b6      	b.n	8005842 <UART_SetConfig+0x7ae>
 80052d4:	2308      	movs	r3, #8
 80052d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052da:	e2b2      	b.n	8005842 <UART_SetConfig+0x7ae>
 80052dc:	2310      	movs	r3, #16
 80052de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052e2:	e2ae      	b.n	8005842 <UART_SetConfig+0x7ae>
 80052e4:	2320      	movs	r3, #32
 80052e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ea:	e2aa      	b.n	8005842 <UART_SetConfig+0x7ae>
 80052ec:	2340      	movs	r3, #64	; 0x40
 80052ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f2:	e2a6      	b.n	8005842 <UART_SetConfig+0x7ae>
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fa:	e2a2      	b.n	8005842 <UART_SetConfig+0x7ae>
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a35      	ldr	r2, [pc, #212]	; (80053d8 <UART_SetConfig+0x344>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d130      	bne.n	8005368 <UART_SetConfig+0x2d4>
 8005306:	4b31      	ldr	r3, [pc, #196]	; (80053cc <UART_SetConfig+0x338>)
 8005308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	2b05      	cmp	r3, #5
 8005310:	d826      	bhi.n	8005360 <UART_SetConfig+0x2cc>
 8005312:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <UART_SetConfig+0x284>)
 8005314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005318:	08005331 	.word	0x08005331
 800531c:	08005339 	.word	0x08005339
 8005320:	08005341 	.word	0x08005341
 8005324:	08005349 	.word	0x08005349
 8005328:	08005351 	.word	0x08005351
 800532c:	08005359 	.word	0x08005359
 8005330:	2300      	movs	r3, #0
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005336:	e284      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005338:	2304      	movs	r3, #4
 800533a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800533e:	e280      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005340:	2308      	movs	r3, #8
 8005342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005346:	e27c      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005348:	2310      	movs	r3, #16
 800534a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800534e:	e278      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005350:	2320      	movs	r3, #32
 8005352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005356:	e274      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005358:	2340      	movs	r3, #64	; 0x40
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800535e:	e270      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005360:	2380      	movs	r3, #128	; 0x80
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005366:	e26c      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a1b      	ldr	r2, [pc, #108]	; (80053dc <UART_SetConfig+0x348>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d142      	bne.n	80053f8 <UART_SetConfig+0x364>
 8005372:	4b16      	ldr	r3, [pc, #88]	; (80053cc <UART_SetConfig+0x338>)
 8005374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	2b05      	cmp	r3, #5
 800537c:	d838      	bhi.n	80053f0 <UART_SetConfig+0x35c>
 800537e:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <UART_SetConfig+0x2f0>)
 8005380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005384:	0800539d 	.word	0x0800539d
 8005388:	080053a5 	.word	0x080053a5
 800538c:	080053ad 	.word	0x080053ad
 8005390:	080053b5 	.word	0x080053b5
 8005394:	080053e1 	.word	0x080053e1
 8005398:	080053e9 	.word	0x080053e9
 800539c:	2300      	movs	r3, #0
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053a2:	e24e      	b.n	8005842 <UART_SetConfig+0x7ae>
 80053a4:	2304      	movs	r3, #4
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053aa:	e24a      	b.n	8005842 <UART_SetConfig+0x7ae>
 80053ac:	2308      	movs	r3, #8
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053b2:	e246      	b.n	8005842 <UART_SetConfig+0x7ae>
 80053b4:	2310      	movs	r3, #16
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ba:	e242      	b.n	8005842 <UART_SetConfig+0x7ae>
 80053bc:	cfff69f3 	.word	0xcfff69f3
 80053c0:	58000c00 	.word	0x58000c00
 80053c4:	11fff4ff 	.word	0x11fff4ff
 80053c8:	40011000 	.word	0x40011000
 80053cc:	58024400 	.word	0x58024400
 80053d0:	40004400 	.word	0x40004400
 80053d4:	40004800 	.word	0x40004800
 80053d8:	40004c00 	.word	0x40004c00
 80053dc:	40005000 	.word	0x40005000
 80053e0:	2320      	movs	r3, #32
 80053e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e6:	e22c      	b.n	8005842 <UART_SetConfig+0x7ae>
 80053e8:	2340      	movs	r3, #64	; 0x40
 80053ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ee:	e228      	b.n	8005842 <UART_SetConfig+0x7ae>
 80053f0:	2380      	movs	r3, #128	; 0x80
 80053f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053f6:	e224      	b.n	8005842 <UART_SetConfig+0x7ae>
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4ab1      	ldr	r2, [pc, #708]	; (80056c4 <UART_SetConfig+0x630>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d176      	bne.n	80054f0 <UART_SetConfig+0x45c>
 8005402:	4bb1      	ldr	r3, [pc, #708]	; (80056c8 <UART_SetConfig+0x634>)
 8005404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005406:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800540a:	2b28      	cmp	r3, #40	; 0x28
 800540c:	d86c      	bhi.n	80054e8 <UART_SetConfig+0x454>
 800540e:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <UART_SetConfig+0x380>)
 8005410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005414:	080054b9 	.word	0x080054b9
 8005418:	080054e9 	.word	0x080054e9
 800541c:	080054e9 	.word	0x080054e9
 8005420:	080054e9 	.word	0x080054e9
 8005424:	080054e9 	.word	0x080054e9
 8005428:	080054e9 	.word	0x080054e9
 800542c:	080054e9 	.word	0x080054e9
 8005430:	080054e9 	.word	0x080054e9
 8005434:	080054c1 	.word	0x080054c1
 8005438:	080054e9 	.word	0x080054e9
 800543c:	080054e9 	.word	0x080054e9
 8005440:	080054e9 	.word	0x080054e9
 8005444:	080054e9 	.word	0x080054e9
 8005448:	080054e9 	.word	0x080054e9
 800544c:	080054e9 	.word	0x080054e9
 8005450:	080054e9 	.word	0x080054e9
 8005454:	080054c9 	.word	0x080054c9
 8005458:	080054e9 	.word	0x080054e9
 800545c:	080054e9 	.word	0x080054e9
 8005460:	080054e9 	.word	0x080054e9
 8005464:	080054e9 	.word	0x080054e9
 8005468:	080054e9 	.word	0x080054e9
 800546c:	080054e9 	.word	0x080054e9
 8005470:	080054e9 	.word	0x080054e9
 8005474:	080054d1 	.word	0x080054d1
 8005478:	080054e9 	.word	0x080054e9
 800547c:	080054e9 	.word	0x080054e9
 8005480:	080054e9 	.word	0x080054e9
 8005484:	080054e9 	.word	0x080054e9
 8005488:	080054e9 	.word	0x080054e9
 800548c:	080054e9 	.word	0x080054e9
 8005490:	080054e9 	.word	0x080054e9
 8005494:	080054d9 	.word	0x080054d9
 8005498:	080054e9 	.word	0x080054e9
 800549c:	080054e9 	.word	0x080054e9
 80054a0:	080054e9 	.word	0x080054e9
 80054a4:	080054e9 	.word	0x080054e9
 80054a8:	080054e9 	.word	0x080054e9
 80054ac:	080054e9 	.word	0x080054e9
 80054b0:	080054e9 	.word	0x080054e9
 80054b4:	080054e1 	.word	0x080054e1
 80054b8:	2301      	movs	r3, #1
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054be:	e1c0      	b.n	8005842 <UART_SetConfig+0x7ae>
 80054c0:	2304      	movs	r3, #4
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c6:	e1bc      	b.n	8005842 <UART_SetConfig+0x7ae>
 80054c8:	2308      	movs	r3, #8
 80054ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ce:	e1b8      	b.n	8005842 <UART_SetConfig+0x7ae>
 80054d0:	2310      	movs	r3, #16
 80054d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054d6:	e1b4      	b.n	8005842 <UART_SetConfig+0x7ae>
 80054d8:	2320      	movs	r3, #32
 80054da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054de:	e1b0      	b.n	8005842 <UART_SetConfig+0x7ae>
 80054e0:	2340      	movs	r3, #64	; 0x40
 80054e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054e6:	e1ac      	b.n	8005842 <UART_SetConfig+0x7ae>
 80054e8:	2380      	movs	r3, #128	; 0x80
 80054ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ee:	e1a8      	b.n	8005842 <UART_SetConfig+0x7ae>
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a75      	ldr	r2, [pc, #468]	; (80056cc <UART_SetConfig+0x638>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d130      	bne.n	800555c <UART_SetConfig+0x4c8>
 80054fa:	4b73      	ldr	r3, [pc, #460]	; (80056c8 <UART_SetConfig+0x634>)
 80054fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	2b05      	cmp	r3, #5
 8005504:	d826      	bhi.n	8005554 <UART_SetConfig+0x4c0>
 8005506:	a201      	add	r2, pc, #4	; (adr r2, 800550c <UART_SetConfig+0x478>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005525 	.word	0x08005525
 8005510:	0800552d 	.word	0x0800552d
 8005514:	08005535 	.word	0x08005535
 8005518:	0800553d 	.word	0x0800553d
 800551c:	08005545 	.word	0x08005545
 8005520:	0800554d 	.word	0x0800554d
 8005524:	2300      	movs	r3, #0
 8005526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800552a:	e18a      	b.n	8005842 <UART_SetConfig+0x7ae>
 800552c:	2304      	movs	r3, #4
 800552e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005532:	e186      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005534:	2308      	movs	r3, #8
 8005536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800553a:	e182      	b.n	8005842 <UART_SetConfig+0x7ae>
 800553c:	2310      	movs	r3, #16
 800553e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005542:	e17e      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005544:	2320      	movs	r3, #32
 8005546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800554a:	e17a      	b.n	8005842 <UART_SetConfig+0x7ae>
 800554c:	2340      	movs	r3, #64	; 0x40
 800554e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005552:	e176      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005554:	2380      	movs	r3, #128	; 0x80
 8005556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800555a:	e172      	b.n	8005842 <UART_SetConfig+0x7ae>
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a5b      	ldr	r2, [pc, #364]	; (80056d0 <UART_SetConfig+0x63c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d130      	bne.n	80055c8 <UART_SetConfig+0x534>
 8005566:	4b58      	ldr	r3, [pc, #352]	; (80056c8 <UART_SetConfig+0x634>)
 8005568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	2b05      	cmp	r3, #5
 8005570:	d826      	bhi.n	80055c0 <UART_SetConfig+0x52c>
 8005572:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <UART_SetConfig+0x4e4>)
 8005574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005578:	08005591 	.word	0x08005591
 800557c:	08005599 	.word	0x08005599
 8005580:	080055a1 	.word	0x080055a1
 8005584:	080055a9 	.word	0x080055a9
 8005588:	080055b1 	.word	0x080055b1
 800558c:	080055b9 	.word	0x080055b9
 8005590:	2300      	movs	r3, #0
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005596:	e154      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005598:	2304      	movs	r3, #4
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559e:	e150      	b.n	8005842 <UART_SetConfig+0x7ae>
 80055a0:	2308      	movs	r3, #8
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a6:	e14c      	b.n	8005842 <UART_SetConfig+0x7ae>
 80055a8:	2310      	movs	r3, #16
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ae:	e148      	b.n	8005842 <UART_SetConfig+0x7ae>
 80055b0:	2320      	movs	r3, #32
 80055b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b6:	e144      	b.n	8005842 <UART_SetConfig+0x7ae>
 80055b8:	2340      	movs	r3, #64	; 0x40
 80055ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055be:	e140      	b.n	8005842 <UART_SetConfig+0x7ae>
 80055c0:	2380      	movs	r3, #128	; 0x80
 80055c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055c6:	e13c      	b.n	8005842 <UART_SetConfig+0x7ae>
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a41      	ldr	r2, [pc, #260]	; (80056d4 <UART_SetConfig+0x640>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	f040 8082 	bne.w	80056d8 <UART_SetConfig+0x644>
 80055d4:	4b3c      	ldr	r3, [pc, #240]	; (80056c8 <UART_SetConfig+0x634>)
 80055d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055dc:	2b28      	cmp	r3, #40	; 0x28
 80055de:	d86d      	bhi.n	80056bc <UART_SetConfig+0x628>
 80055e0:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <UART_SetConfig+0x554>)
 80055e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e6:	bf00      	nop
 80055e8:	0800568d 	.word	0x0800568d
 80055ec:	080056bd 	.word	0x080056bd
 80055f0:	080056bd 	.word	0x080056bd
 80055f4:	080056bd 	.word	0x080056bd
 80055f8:	080056bd 	.word	0x080056bd
 80055fc:	080056bd 	.word	0x080056bd
 8005600:	080056bd 	.word	0x080056bd
 8005604:	080056bd 	.word	0x080056bd
 8005608:	08005695 	.word	0x08005695
 800560c:	080056bd 	.word	0x080056bd
 8005610:	080056bd 	.word	0x080056bd
 8005614:	080056bd 	.word	0x080056bd
 8005618:	080056bd 	.word	0x080056bd
 800561c:	080056bd 	.word	0x080056bd
 8005620:	080056bd 	.word	0x080056bd
 8005624:	080056bd 	.word	0x080056bd
 8005628:	0800569d 	.word	0x0800569d
 800562c:	080056bd 	.word	0x080056bd
 8005630:	080056bd 	.word	0x080056bd
 8005634:	080056bd 	.word	0x080056bd
 8005638:	080056bd 	.word	0x080056bd
 800563c:	080056bd 	.word	0x080056bd
 8005640:	080056bd 	.word	0x080056bd
 8005644:	080056bd 	.word	0x080056bd
 8005648:	080056a5 	.word	0x080056a5
 800564c:	080056bd 	.word	0x080056bd
 8005650:	080056bd 	.word	0x080056bd
 8005654:	080056bd 	.word	0x080056bd
 8005658:	080056bd 	.word	0x080056bd
 800565c:	080056bd 	.word	0x080056bd
 8005660:	080056bd 	.word	0x080056bd
 8005664:	080056bd 	.word	0x080056bd
 8005668:	080056ad 	.word	0x080056ad
 800566c:	080056bd 	.word	0x080056bd
 8005670:	080056bd 	.word	0x080056bd
 8005674:	080056bd 	.word	0x080056bd
 8005678:	080056bd 	.word	0x080056bd
 800567c:	080056bd 	.word	0x080056bd
 8005680:	080056bd 	.word	0x080056bd
 8005684:	080056bd 	.word	0x080056bd
 8005688:	080056b5 	.word	0x080056b5
 800568c:	2301      	movs	r3, #1
 800568e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005692:	e0d6      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005694:	2304      	movs	r3, #4
 8005696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800569a:	e0d2      	b.n	8005842 <UART_SetConfig+0x7ae>
 800569c:	2308      	movs	r3, #8
 800569e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056a2:	e0ce      	b.n	8005842 <UART_SetConfig+0x7ae>
 80056a4:	2310      	movs	r3, #16
 80056a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056aa:	e0ca      	b.n	8005842 <UART_SetConfig+0x7ae>
 80056ac:	2320      	movs	r3, #32
 80056ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056b2:	e0c6      	b.n	8005842 <UART_SetConfig+0x7ae>
 80056b4:	2340      	movs	r3, #64	; 0x40
 80056b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ba:	e0c2      	b.n	8005842 <UART_SetConfig+0x7ae>
 80056bc:	2380      	movs	r3, #128	; 0x80
 80056be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056c2:	e0be      	b.n	8005842 <UART_SetConfig+0x7ae>
 80056c4:	40011400 	.word	0x40011400
 80056c8:	58024400 	.word	0x58024400
 80056cc:	40007800 	.word	0x40007800
 80056d0:	40007c00 	.word	0x40007c00
 80056d4:	40011800 	.word	0x40011800
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4aad      	ldr	r2, [pc, #692]	; (8005994 <UART_SetConfig+0x900>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d176      	bne.n	80057d0 <UART_SetConfig+0x73c>
 80056e2:	4bad      	ldr	r3, [pc, #692]	; (8005998 <UART_SetConfig+0x904>)
 80056e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056ea:	2b28      	cmp	r3, #40	; 0x28
 80056ec:	d86c      	bhi.n	80057c8 <UART_SetConfig+0x734>
 80056ee:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <UART_SetConfig+0x660>)
 80056f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f4:	08005799 	.word	0x08005799
 80056f8:	080057c9 	.word	0x080057c9
 80056fc:	080057c9 	.word	0x080057c9
 8005700:	080057c9 	.word	0x080057c9
 8005704:	080057c9 	.word	0x080057c9
 8005708:	080057c9 	.word	0x080057c9
 800570c:	080057c9 	.word	0x080057c9
 8005710:	080057c9 	.word	0x080057c9
 8005714:	080057a1 	.word	0x080057a1
 8005718:	080057c9 	.word	0x080057c9
 800571c:	080057c9 	.word	0x080057c9
 8005720:	080057c9 	.word	0x080057c9
 8005724:	080057c9 	.word	0x080057c9
 8005728:	080057c9 	.word	0x080057c9
 800572c:	080057c9 	.word	0x080057c9
 8005730:	080057c9 	.word	0x080057c9
 8005734:	080057a9 	.word	0x080057a9
 8005738:	080057c9 	.word	0x080057c9
 800573c:	080057c9 	.word	0x080057c9
 8005740:	080057c9 	.word	0x080057c9
 8005744:	080057c9 	.word	0x080057c9
 8005748:	080057c9 	.word	0x080057c9
 800574c:	080057c9 	.word	0x080057c9
 8005750:	080057c9 	.word	0x080057c9
 8005754:	080057b1 	.word	0x080057b1
 8005758:	080057c9 	.word	0x080057c9
 800575c:	080057c9 	.word	0x080057c9
 8005760:	080057c9 	.word	0x080057c9
 8005764:	080057c9 	.word	0x080057c9
 8005768:	080057c9 	.word	0x080057c9
 800576c:	080057c9 	.word	0x080057c9
 8005770:	080057c9 	.word	0x080057c9
 8005774:	080057b9 	.word	0x080057b9
 8005778:	080057c9 	.word	0x080057c9
 800577c:	080057c9 	.word	0x080057c9
 8005780:	080057c9 	.word	0x080057c9
 8005784:	080057c9 	.word	0x080057c9
 8005788:	080057c9 	.word	0x080057c9
 800578c:	080057c9 	.word	0x080057c9
 8005790:	080057c9 	.word	0x080057c9
 8005794:	080057c1 	.word	0x080057c1
 8005798:	2301      	movs	r3, #1
 800579a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579e:	e050      	b.n	8005842 <UART_SetConfig+0x7ae>
 80057a0:	2304      	movs	r3, #4
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a6:	e04c      	b.n	8005842 <UART_SetConfig+0x7ae>
 80057a8:	2308      	movs	r3, #8
 80057aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ae:	e048      	b.n	8005842 <UART_SetConfig+0x7ae>
 80057b0:	2310      	movs	r3, #16
 80057b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057b6:	e044      	b.n	8005842 <UART_SetConfig+0x7ae>
 80057b8:	2320      	movs	r3, #32
 80057ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057be:	e040      	b.n	8005842 <UART_SetConfig+0x7ae>
 80057c0:	2340      	movs	r3, #64	; 0x40
 80057c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057c6:	e03c      	b.n	8005842 <UART_SetConfig+0x7ae>
 80057c8:	2380      	movs	r3, #128	; 0x80
 80057ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ce:	e038      	b.n	8005842 <UART_SetConfig+0x7ae>
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a71      	ldr	r2, [pc, #452]	; (800599c <UART_SetConfig+0x908>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d130      	bne.n	800583c <UART_SetConfig+0x7a8>
 80057da:	4b6f      	ldr	r3, [pc, #444]	; (8005998 <UART_SetConfig+0x904>)
 80057dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	2b05      	cmp	r3, #5
 80057e4:	d826      	bhi.n	8005834 <UART_SetConfig+0x7a0>
 80057e6:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <UART_SetConfig+0x758>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	08005805 	.word	0x08005805
 80057f0:	0800580d 	.word	0x0800580d
 80057f4:	08005815 	.word	0x08005815
 80057f8:	0800581d 	.word	0x0800581d
 80057fc:	08005825 	.word	0x08005825
 8005800:	0800582d 	.word	0x0800582d
 8005804:	2302      	movs	r3, #2
 8005806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800580a:	e01a      	b.n	8005842 <UART_SetConfig+0x7ae>
 800580c:	2304      	movs	r3, #4
 800580e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005812:	e016      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005814:	2308      	movs	r3, #8
 8005816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800581a:	e012      	b.n	8005842 <UART_SetConfig+0x7ae>
 800581c:	2310      	movs	r3, #16
 800581e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005822:	e00e      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005824:	2320      	movs	r3, #32
 8005826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800582a:	e00a      	b.n	8005842 <UART_SetConfig+0x7ae>
 800582c:	2340      	movs	r3, #64	; 0x40
 800582e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005832:	e006      	b.n	8005842 <UART_SetConfig+0x7ae>
 8005834:	2380      	movs	r3, #128	; 0x80
 8005836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800583a:	e002      	b.n	8005842 <UART_SetConfig+0x7ae>
 800583c:	2380      	movs	r3, #128	; 0x80
 800583e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a55      	ldr	r2, [pc, #340]	; (800599c <UART_SetConfig+0x908>)
 8005848:	4293      	cmp	r3, r2
 800584a:	f040 80f8 	bne.w	8005a3e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800584e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005852:	2b20      	cmp	r3, #32
 8005854:	dc46      	bgt.n	80058e4 <UART_SetConfig+0x850>
 8005856:	2b02      	cmp	r3, #2
 8005858:	db75      	blt.n	8005946 <UART_SetConfig+0x8b2>
 800585a:	3b02      	subs	r3, #2
 800585c:	2b1e      	cmp	r3, #30
 800585e:	d872      	bhi.n	8005946 <UART_SetConfig+0x8b2>
 8005860:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <UART_SetConfig+0x7d4>)
 8005862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005866:	bf00      	nop
 8005868:	080058eb 	.word	0x080058eb
 800586c:	08005947 	.word	0x08005947
 8005870:	080058f3 	.word	0x080058f3
 8005874:	08005947 	.word	0x08005947
 8005878:	08005947 	.word	0x08005947
 800587c:	08005947 	.word	0x08005947
 8005880:	08005903 	.word	0x08005903
 8005884:	08005947 	.word	0x08005947
 8005888:	08005947 	.word	0x08005947
 800588c:	08005947 	.word	0x08005947
 8005890:	08005947 	.word	0x08005947
 8005894:	08005947 	.word	0x08005947
 8005898:	08005947 	.word	0x08005947
 800589c:	08005947 	.word	0x08005947
 80058a0:	08005913 	.word	0x08005913
 80058a4:	08005947 	.word	0x08005947
 80058a8:	08005947 	.word	0x08005947
 80058ac:	08005947 	.word	0x08005947
 80058b0:	08005947 	.word	0x08005947
 80058b4:	08005947 	.word	0x08005947
 80058b8:	08005947 	.word	0x08005947
 80058bc:	08005947 	.word	0x08005947
 80058c0:	08005947 	.word	0x08005947
 80058c4:	08005947 	.word	0x08005947
 80058c8:	08005947 	.word	0x08005947
 80058cc:	08005947 	.word	0x08005947
 80058d0:	08005947 	.word	0x08005947
 80058d4:	08005947 	.word	0x08005947
 80058d8:	08005947 	.word	0x08005947
 80058dc:	08005947 	.word	0x08005947
 80058e0:	08005939 	.word	0x08005939
 80058e4:	2b40      	cmp	r3, #64	; 0x40
 80058e6:	d02a      	beq.n	800593e <UART_SetConfig+0x8aa>
 80058e8:	e02d      	b.n	8005946 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80058ea:	f7fe fecb 	bl	8004684 <HAL_RCCEx_GetD3PCLK1Freq>
 80058ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058f0:	e02f      	b.n	8005952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fe feda 	bl	80046b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005900:	e027      	b.n	8005952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005902:	f107 0318 	add.w	r3, r7, #24
 8005906:	4618      	mov	r0, r3
 8005908:	f7ff f826 	bl	8004958 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005910:	e01f      	b.n	8005952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005912:	4b21      	ldr	r3, [pc, #132]	; (8005998 <UART_SetConfig+0x904>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0320 	and.w	r3, r3, #32
 800591a:	2b00      	cmp	r3, #0
 800591c:	d009      	beq.n	8005932 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800591e:	4b1e      	ldr	r3, [pc, #120]	; (8005998 <UART_SetConfig+0x904>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	08db      	lsrs	r3, r3, #3
 8005924:	f003 0303 	and.w	r3, r3, #3
 8005928:	4a1d      	ldr	r2, [pc, #116]	; (80059a0 <UART_SetConfig+0x90c>)
 800592a:	fa22 f303 	lsr.w	r3, r2, r3
 800592e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005930:	e00f      	b.n	8005952 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005932:	4b1b      	ldr	r3, [pc, #108]	; (80059a0 <UART_SetConfig+0x90c>)
 8005934:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005936:	e00c      	b.n	8005952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005938:	4b1a      	ldr	r3, [pc, #104]	; (80059a4 <UART_SetConfig+0x910>)
 800593a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800593c:	e009      	b.n	8005952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800593e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005944:	e005      	b.n	8005952 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005950:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 81ee 	beq.w	8005d36 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	4a12      	ldr	r2, [pc, #72]	; (80059a8 <UART_SetConfig+0x914>)
 8005960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005964:	461a      	mov	r2, r3
 8005966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005968:	fbb3 f3f2 	udiv	r3, r3, r2
 800596c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	4613      	mov	r3, r2
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	4413      	add	r3, r2
 8005978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800597a:	429a      	cmp	r2, r3
 800597c:	d305      	bcc.n	800598a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005986:	429a      	cmp	r2, r3
 8005988:	d910      	bls.n	80059ac <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005990:	e1d1      	b.n	8005d36 <UART_SetConfig+0xca2>
 8005992:	bf00      	nop
 8005994:	40011c00 	.word	0x40011c00
 8005998:	58024400 	.word	0x58024400
 800599c:	58000c00 	.word	0x58000c00
 80059a0:	03d09000 	.word	0x03d09000
 80059a4:	003d0900 	.word	0x003d0900
 80059a8:	080093e4 	.word	0x080093e4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ae:	2200      	movs	r2, #0
 80059b0:	60bb      	str	r3, [r7, #8]
 80059b2:	60fa      	str	r2, [r7, #12]
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	4ac0      	ldr	r2, [pc, #768]	; (8005cbc <UART_SetConfig+0xc28>)
 80059ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2200      	movs	r2, #0
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	607a      	str	r2, [r7, #4]
 80059c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059ce:	f7fa fce7 	bl	80003a0 <__aeabi_uldivmod>
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4610      	mov	r0, r2
 80059d8:	4619      	mov	r1, r3
 80059da:	f04f 0200 	mov.w	r2, #0
 80059de:	f04f 0300 	mov.w	r3, #0
 80059e2:	020b      	lsls	r3, r1, #8
 80059e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059e8:	0202      	lsls	r2, r0, #8
 80059ea:	6979      	ldr	r1, [r7, #20]
 80059ec:	6849      	ldr	r1, [r1, #4]
 80059ee:	0849      	lsrs	r1, r1, #1
 80059f0:	2000      	movs	r0, #0
 80059f2:	460c      	mov	r4, r1
 80059f4:	4605      	mov	r5, r0
 80059f6:	eb12 0804 	adds.w	r8, r2, r4
 80059fa:	eb43 0905 	adc.w	r9, r3, r5
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	469a      	mov	sl, r3
 8005a06:	4693      	mov	fp, r2
 8005a08:	4652      	mov	r2, sl
 8005a0a:	465b      	mov	r3, fp
 8005a0c:	4640      	mov	r0, r8
 8005a0e:	4649      	mov	r1, r9
 8005a10:	f7fa fcc6 	bl	80003a0 <__aeabi_uldivmod>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4613      	mov	r3, r2
 8005a1a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a22:	d308      	bcc.n	8005a36 <UART_SetConfig+0x9a2>
 8005a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a2a:	d204      	bcs.n	8005a36 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a32:	60da      	str	r2, [r3, #12]
 8005a34:	e17f      	b.n	8005d36 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005a3c:	e17b      	b.n	8005d36 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a46:	f040 80bd 	bne.w	8005bc4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005a4a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	dc48      	bgt.n	8005ae4 <UART_SetConfig+0xa50>
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	db7b      	blt.n	8005b4e <UART_SetConfig+0xaba>
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	d879      	bhi.n	8005b4e <UART_SetConfig+0xaba>
 8005a5a:	a201      	add	r2, pc, #4	; (adr r2, 8005a60 <UART_SetConfig+0x9cc>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005aeb 	.word	0x08005aeb
 8005a64:	08005af3 	.word	0x08005af3
 8005a68:	08005b4f 	.word	0x08005b4f
 8005a6c:	08005b4f 	.word	0x08005b4f
 8005a70:	08005afb 	.word	0x08005afb
 8005a74:	08005b4f 	.word	0x08005b4f
 8005a78:	08005b4f 	.word	0x08005b4f
 8005a7c:	08005b4f 	.word	0x08005b4f
 8005a80:	08005b0b 	.word	0x08005b0b
 8005a84:	08005b4f 	.word	0x08005b4f
 8005a88:	08005b4f 	.word	0x08005b4f
 8005a8c:	08005b4f 	.word	0x08005b4f
 8005a90:	08005b4f 	.word	0x08005b4f
 8005a94:	08005b4f 	.word	0x08005b4f
 8005a98:	08005b4f 	.word	0x08005b4f
 8005a9c:	08005b4f 	.word	0x08005b4f
 8005aa0:	08005b1b 	.word	0x08005b1b
 8005aa4:	08005b4f 	.word	0x08005b4f
 8005aa8:	08005b4f 	.word	0x08005b4f
 8005aac:	08005b4f 	.word	0x08005b4f
 8005ab0:	08005b4f 	.word	0x08005b4f
 8005ab4:	08005b4f 	.word	0x08005b4f
 8005ab8:	08005b4f 	.word	0x08005b4f
 8005abc:	08005b4f 	.word	0x08005b4f
 8005ac0:	08005b4f 	.word	0x08005b4f
 8005ac4:	08005b4f 	.word	0x08005b4f
 8005ac8:	08005b4f 	.word	0x08005b4f
 8005acc:	08005b4f 	.word	0x08005b4f
 8005ad0:	08005b4f 	.word	0x08005b4f
 8005ad4:	08005b4f 	.word	0x08005b4f
 8005ad8:	08005b4f 	.word	0x08005b4f
 8005adc:	08005b4f 	.word	0x08005b4f
 8005ae0:	08005b41 	.word	0x08005b41
 8005ae4:	2b40      	cmp	r3, #64	; 0x40
 8005ae6:	d02e      	beq.n	8005b46 <UART_SetConfig+0xab2>
 8005ae8:	e031      	b.n	8005b4e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aea:	f7fd fe93 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 8005aee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005af0:	e033      	b.n	8005b5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005af2:	f7fd fea5 	bl	8003840 <HAL_RCC_GetPCLK2Freq>
 8005af6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005af8:	e02f      	b.n	8005b5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fe fdd6 	bl	80046b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b08:	e027      	b.n	8005b5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b0a:	f107 0318 	add.w	r3, r7, #24
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fe ff22 	bl	8004958 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b18:	e01f      	b.n	8005b5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b1a:	4b69      	ldr	r3, [pc, #420]	; (8005cc0 <UART_SetConfig+0xc2c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d009      	beq.n	8005b3a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b26:	4b66      	ldr	r3, [pc, #408]	; (8005cc0 <UART_SetConfig+0xc2c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	08db      	lsrs	r3, r3, #3
 8005b2c:	f003 0303 	and.w	r3, r3, #3
 8005b30:	4a64      	ldr	r2, [pc, #400]	; (8005cc4 <UART_SetConfig+0xc30>)
 8005b32:	fa22 f303 	lsr.w	r3, r2, r3
 8005b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b38:	e00f      	b.n	8005b5a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005b3a:	4b62      	ldr	r3, [pc, #392]	; (8005cc4 <UART_SetConfig+0xc30>)
 8005b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b3e:	e00c      	b.n	8005b5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b40:	4b61      	ldr	r3, [pc, #388]	; (8005cc8 <UART_SetConfig+0xc34>)
 8005b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b44:	e009      	b.n	8005b5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b4c:	e005      	b.n	8005b5a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005b58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 80ea 	beq.w	8005d36 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	4a55      	ldr	r2, [pc, #340]	; (8005cbc <UART_SetConfig+0xc28>)
 8005b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b74:	005a      	lsls	r2, r3, #1
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	085b      	lsrs	r3, r3, #1
 8005b7c:	441a      	add	r2, r3
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b86:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8a:	2b0f      	cmp	r3, #15
 8005b8c:	d916      	bls.n	8005bbc <UART_SetConfig+0xb28>
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b94:	d212      	bcs.n	8005bbc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	f023 030f 	bic.w	r3, r3, #15
 8005b9e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005bb8:	60da      	str	r2, [r3, #12]
 8005bba:	e0bc      	b.n	8005d36 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005bc2:	e0b8      	b.n	8005d36 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bc4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005bc8:	2b20      	cmp	r3, #32
 8005bca:	dc4b      	bgt.n	8005c64 <UART_SetConfig+0xbd0>
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f2c0 8087 	blt.w	8005ce0 <UART_SetConfig+0xc4c>
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	f200 8084 	bhi.w	8005ce0 <UART_SetConfig+0xc4c>
 8005bd8:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <UART_SetConfig+0xb4c>)
 8005bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bde:	bf00      	nop
 8005be0:	08005c6b 	.word	0x08005c6b
 8005be4:	08005c73 	.word	0x08005c73
 8005be8:	08005ce1 	.word	0x08005ce1
 8005bec:	08005ce1 	.word	0x08005ce1
 8005bf0:	08005c7b 	.word	0x08005c7b
 8005bf4:	08005ce1 	.word	0x08005ce1
 8005bf8:	08005ce1 	.word	0x08005ce1
 8005bfc:	08005ce1 	.word	0x08005ce1
 8005c00:	08005c8b 	.word	0x08005c8b
 8005c04:	08005ce1 	.word	0x08005ce1
 8005c08:	08005ce1 	.word	0x08005ce1
 8005c0c:	08005ce1 	.word	0x08005ce1
 8005c10:	08005ce1 	.word	0x08005ce1
 8005c14:	08005ce1 	.word	0x08005ce1
 8005c18:	08005ce1 	.word	0x08005ce1
 8005c1c:	08005ce1 	.word	0x08005ce1
 8005c20:	08005c9b 	.word	0x08005c9b
 8005c24:	08005ce1 	.word	0x08005ce1
 8005c28:	08005ce1 	.word	0x08005ce1
 8005c2c:	08005ce1 	.word	0x08005ce1
 8005c30:	08005ce1 	.word	0x08005ce1
 8005c34:	08005ce1 	.word	0x08005ce1
 8005c38:	08005ce1 	.word	0x08005ce1
 8005c3c:	08005ce1 	.word	0x08005ce1
 8005c40:	08005ce1 	.word	0x08005ce1
 8005c44:	08005ce1 	.word	0x08005ce1
 8005c48:	08005ce1 	.word	0x08005ce1
 8005c4c:	08005ce1 	.word	0x08005ce1
 8005c50:	08005ce1 	.word	0x08005ce1
 8005c54:	08005ce1 	.word	0x08005ce1
 8005c58:	08005ce1 	.word	0x08005ce1
 8005c5c:	08005ce1 	.word	0x08005ce1
 8005c60:	08005cd3 	.word	0x08005cd3
 8005c64:	2b40      	cmp	r3, #64	; 0x40
 8005c66:	d037      	beq.n	8005cd8 <UART_SetConfig+0xc44>
 8005c68:	e03a      	b.n	8005ce0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c6a:	f7fd fdd3 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 8005c6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c70:	e03c      	b.n	8005cec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c72:	f7fd fde5 	bl	8003840 <HAL_RCC_GetPCLK2Freq>
 8005c76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c78:	e038      	b.n	8005cec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fe fd16 	bl	80046b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c88:	e030      	b.n	8005cec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c8a:	f107 0318 	add.w	r3, r7, #24
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fe fe62 	bl	8004958 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c98:	e028      	b.n	8005cec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c9a:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <UART_SetConfig+0xc2c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0320 	and.w	r3, r3, #32
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d012      	beq.n	8005ccc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ca6:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <UART_SetConfig+0xc2c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	08db      	lsrs	r3, r3, #3
 8005cac:	f003 0303 	and.w	r3, r3, #3
 8005cb0:	4a04      	ldr	r2, [pc, #16]	; (8005cc4 <UART_SetConfig+0xc30>)
 8005cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cb8:	e018      	b.n	8005cec <UART_SetConfig+0xc58>
 8005cba:	bf00      	nop
 8005cbc:	080093e4 	.word	0x080093e4
 8005cc0:	58024400 	.word	0x58024400
 8005cc4:	03d09000 	.word	0x03d09000
 8005cc8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005ccc:	4b24      	ldr	r3, [pc, #144]	; (8005d60 <UART_SetConfig+0xccc>)
 8005cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cd0:	e00c      	b.n	8005cec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cd2:	4b24      	ldr	r3, [pc, #144]	; (8005d64 <UART_SetConfig+0xcd0>)
 8005cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cd6:	e009      	b.n	8005cec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cde:	e005      	b.n	8005cec <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005cea:	bf00      	nop
    }

    if (pclk != 0U)
 8005cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d021      	beq.n	8005d36 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	4a1c      	ldr	r2, [pc, #112]	; (8005d68 <UART_SetConfig+0xcd4>)
 8005cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d00:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	085b      	lsrs	r3, r3, #1
 8005d0a:	441a      	add	r2, r3
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d14:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	2b0f      	cmp	r3, #15
 8005d1a:	d909      	bls.n	8005d30 <UART_SetConfig+0xc9c>
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d22:	d205      	bcs.n	8005d30 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	60da      	str	r2, [r3, #12]
 8005d2e:	e002      	b.n	8005d36 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005d52:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3748      	adds	r7, #72	; 0x48
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d60:	03d09000 	.word	0x03d09000
 8005d64:	003d0900 	.word	0x003d0900
 8005d68:	080093e4 	.word	0x080093e4

08005d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00a      	beq.n	8005d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e00:	f003 0310 	and.w	r3, r3, #16
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d01a      	beq.n	8005e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e6a:	d10a      	bne.n	8005e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	605a      	str	r2, [r3, #4]
  }
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af02      	add	r7, sp, #8
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ec0:	f7fc fa30 	bl	8002324 <HAL_GetTick>
 8005ec4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b08      	cmp	r3, #8
 8005ed2:	d10e      	bne.n	8005ef2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ed4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f82f 	bl	8005f46 <UART_WaitOnFlagUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e025      	b.n	8005f3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0304 	and.w	r3, r3, #4
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	d10e      	bne.n	8005f1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f819 	bl	8005f46 <UART_WaitOnFlagUntilTimeout>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e00f      	b.n	8005f3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b09c      	sub	sp, #112	; 0x70
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	603b      	str	r3, [r7, #0]
 8005f52:	4613      	mov	r3, r2
 8005f54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f56:	e0a9      	b.n	80060ac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5e:	f000 80a5 	beq.w	80060ac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f62:	f7fc f9df 	bl	8002324 <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d302      	bcc.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d140      	bne.n	8005ffa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f8c:	667b      	str	r3, [r7, #100]	; 0x64
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f98:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e6      	bne.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3308      	adds	r3, #8
 8005fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbc:	f023 0301 	bic.w	r3, r3, #1
 8005fc0:	663b      	str	r3, [r7, #96]	; 0x60
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3308      	adds	r3, #8
 8005fc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fca:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fcc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fd2:	e841 2300 	strex	r3, r2, [r1]
 8005fd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1e5      	bne.n	8005faa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e069      	b.n	80060ce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d051      	beq.n	80060ac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006016:	d149      	bne.n	80060ac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006020:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602a:	e853 3f00 	ldrex	r3, [r3]
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006036:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	461a      	mov	r2, r3
 800603e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006040:	637b      	str	r3, [r7, #52]	; 0x34
 8006042:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006044:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006048:	e841 2300 	strex	r3, r2, [r1]
 800604c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800604e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1e6      	bne.n	8006022 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3308      	adds	r3, #8
 800605a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	e853 3f00 	ldrex	r3, [r3]
 8006062:	613b      	str	r3, [r7, #16]
   return(result);
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f023 0301 	bic.w	r3, r3, #1
 800606a:	66bb      	str	r3, [r7, #104]	; 0x68
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3308      	adds	r3, #8
 8006072:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006074:	623a      	str	r2, [r7, #32]
 8006076:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006078:	69f9      	ldr	r1, [r7, #28]
 800607a:	6a3a      	ldr	r2, [r7, #32]
 800607c:	e841 2300 	strex	r3, r2, [r1]
 8006080:	61bb      	str	r3, [r7, #24]
   return(result);
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1e5      	bne.n	8006054 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2220      	movs	r2, #32
 800608c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2220      	movs	r2, #32
 8006094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2220      	movs	r2, #32
 800609c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e010      	b.n	80060ce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	69da      	ldr	r2, [r3, #28]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	4013      	ands	r3, r2
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	bf0c      	ite	eq
 80060bc:	2301      	moveq	r3, #1
 80060be:	2300      	movne	r3, #0
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	461a      	mov	r2, r3
 80060c4:	79fb      	ldrb	r3, [r7, #7]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	f43f af46 	beq.w	8005f58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3770      	adds	r7, #112	; 0x70
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b085      	sub	sp, #20
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_UARTEx_DisableFifoMode+0x16>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e027      	b.n	800613c <HAL_UARTEx_DisableFifoMode+0x66>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2224      	movs	r2, #36	; 0x24
 80060f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0201 	bic.w	r2, r2, #1
 8006112:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800611a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2220      	movs	r2, #32
 800612e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800615c:	2302      	movs	r3, #2
 800615e:	e02d      	b.n	80061bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2224      	movs	r2, #36	; 0x24
 800616c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0201 	bic.w	r2, r2, #1
 8006186:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f84f 	bl	8006240 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2220      	movs	r2, #32
 80061ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80061d8:	2302      	movs	r3, #2
 80061da:	e02d      	b.n	8006238 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2224      	movs	r2, #36	; 0x24
 80061e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0201 	bic.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f811 	bl	8006240 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2220      	movs	r2, #32
 800622a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800624c:	2b00      	cmp	r3, #0
 800624e:	d108      	bne.n	8006262 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006260:	e031      	b.n	80062c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006262:	2310      	movs	r3, #16
 8006264:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006266:	2310      	movs	r3, #16
 8006268:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	0e5b      	lsrs	r3, r3, #25
 8006272:	b2db      	uxtb	r3, r3
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	0f5b      	lsrs	r3, r3, #29
 8006282:	b2db      	uxtb	r3, r3
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800628a:	7bbb      	ldrb	r3, [r7, #14]
 800628c:	7b3a      	ldrb	r2, [r7, #12]
 800628e:	4911      	ldr	r1, [pc, #68]	; (80062d4 <UARTEx_SetNbDataToProcess+0x94>)
 8006290:	5c8a      	ldrb	r2, [r1, r2]
 8006292:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006296:	7b3a      	ldrb	r2, [r7, #12]
 8006298:	490f      	ldr	r1, [pc, #60]	; (80062d8 <UARTEx_SetNbDataToProcess+0x98>)
 800629a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800629c:	fb93 f3f2 	sdiv	r3, r3, r2
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	7b7a      	ldrb	r2, [r7, #13]
 80062ac:	4909      	ldr	r1, [pc, #36]	; (80062d4 <UARTEx_SetNbDataToProcess+0x94>)
 80062ae:	5c8a      	ldrb	r2, [r1, r2]
 80062b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80062b4:	7b7a      	ldrb	r2, [r7, #13]
 80062b6:	4908      	ldr	r1, [pc, #32]	; (80062d8 <UARTEx_SetNbDataToProcess+0x98>)
 80062b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80062be:	b29a      	uxth	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80062c6:	bf00      	nop
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	080093fc 	.word	0x080093fc
 80062d8:	08009404 	.word	0x08009404

080062dc <__errno>:
 80062dc:	4b01      	ldr	r3, [pc, #4]	; (80062e4 <__errno+0x8>)
 80062de:	6818      	ldr	r0, [r3, #0]
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	24000020 	.word	0x24000020

080062e8 <__libc_init_array>:
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	4d0d      	ldr	r5, [pc, #52]	; (8006320 <__libc_init_array+0x38>)
 80062ec:	4c0d      	ldr	r4, [pc, #52]	; (8006324 <__libc_init_array+0x3c>)
 80062ee:	1b64      	subs	r4, r4, r5
 80062f0:	10a4      	asrs	r4, r4, #2
 80062f2:	2600      	movs	r6, #0
 80062f4:	42a6      	cmp	r6, r4
 80062f6:	d109      	bne.n	800630c <__libc_init_array+0x24>
 80062f8:	4d0b      	ldr	r5, [pc, #44]	; (8006328 <__libc_init_array+0x40>)
 80062fa:	4c0c      	ldr	r4, [pc, #48]	; (800632c <__libc_init_array+0x44>)
 80062fc:	f002 fe5c 	bl	8008fb8 <_init>
 8006300:	1b64      	subs	r4, r4, r5
 8006302:	10a4      	asrs	r4, r4, #2
 8006304:	2600      	movs	r6, #0
 8006306:	42a6      	cmp	r6, r4
 8006308:	d105      	bne.n	8006316 <__libc_init_array+0x2e>
 800630a:	bd70      	pop	{r4, r5, r6, pc}
 800630c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006310:	4798      	blx	r3
 8006312:	3601      	adds	r6, #1
 8006314:	e7ee      	b.n	80062f4 <__libc_init_array+0xc>
 8006316:	f855 3b04 	ldr.w	r3, [r5], #4
 800631a:	4798      	blx	r3
 800631c:	3601      	adds	r6, #1
 800631e:	e7f2      	b.n	8006306 <__libc_init_array+0x1e>
 8006320:	080097ec 	.word	0x080097ec
 8006324:	080097ec 	.word	0x080097ec
 8006328:	080097ec 	.word	0x080097ec
 800632c:	080097f0 	.word	0x080097f0

08006330 <malloc>:
 8006330:	4b02      	ldr	r3, [pc, #8]	; (800633c <malloc+0xc>)
 8006332:	4601      	mov	r1, r0
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	f000 b877 	b.w	8006428 <_malloc_r>
 800633a:	bf00      	nop
 800633c:	24000020 	.word	0x24000020

08006340 <memset>:
 8006340:	4402      	add	r2, r0
 8006342:	4603      	mov	r3, r0
 8006344:	4293      	cmp	r3, r2
 8006346:	d100      	bne.n	800634a <memset+0xa>
 8006348:	4770      	bx	lr
 800634a:	f803 1b01 	strb.w	r1, [r3], #1
 800634e:	e7f9      	b.n	8006344 <memset+0x4>

08006350 <_free_r>:
 8006350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006352:	2900      	cmp	r1, #0
 8006354:	d044      	beq.n	80063e0 <_free_r+0x90>
 8006356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800635a:	9001      	str	r0, [sp, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	f1a1 0404 	sub.w	r4, r1, #4
 8006362:	bfb8      	it	lt
 8006364:	18e4      	addlt	r4, r4, r3
 8006366:	f001 fb53 	bl	8007a10 <__malloc_lock>
 800636a:	4a1e      	ldr	r2, [pc, #120]	; (80063e4 <_free_r+0x94>)
 800636c:	9801      	ldr	r0, [sp, #4]
 800636e:	6813      	ldr	r3, [r2, #0]
 8006370:	b933      	cbnz	r3, 8006380 <_free_r+0x30>
 8006372:	6063      	str	r3, [r4, #4]
 8006374:	6014      	str	r4, [r2, #0]
 8006376:	b003      	add	sp, #12
 8006378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800637c:	f001 bb4e 	b.w	8007a1c <__malloc_unlock>
 8006380:	42a3      	cmp	r3, r4
 8006382:	d908      	bls.n	8006396 <_free_r+0x46>
 8006384:	6825      	ldr	r5, [r4, #0]
 8006386:	1961      	adds	r1, r4, r5
 8006388:	428b      	cmp	r3, r1
 800638a:	bf01      	itttt	eq
 800638c:	6819      	ldreq	r1, [r3, #0]
 800638e:	685b      	ldreq	r3, [r3, #4]
 8006390:	1949      	addeq	r1, r1, r5
 8006392:	6021      	streq	r1, [r4, #0]
 8006394:	e7ed      	b.n	8006372 <_free_r+0x22>
 8006396:	461a      	mov	r2, r3
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	b10b      	cbz	r3, 80063a0 <_free_r+0x50>
 800639c:	42a3      	cmp	r3, r4
 800639e:	d9fa      	bls.n	8006396 <_free_r+0x46>
 80063a0:	6811      	ldr	r1, [r2, #0]
 80063a2:	1855      	adds	r5, r2, r1
 80063a4:	42a5      	cmp	r5, r4
 80063a6:	d10b      	bne.n	80063c0 <_free_r+0x70>
 80063a8:	6824      	ldr	r4, [r4, #0]
 80063aa:	4421      	add	r1, r4
 80063ac:	1854      	adds	r4, r2, r1
 80063ae:	42a3      	cmp	r3, r4
 80063b0:	6011      	str	r1, [r2, #0]
 80063b2:	d1e0      	bne.n	8006376 <_free_r+0x26>
 80063b4:	681c      	ldr	r4, [r3, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	6053      	str	r3, [r2, #4]
 80063ba:	4421      	add	r1, r4
 80063bc:	6011      	str	r1, [r2, #0]
 80063be:	e7da      	b.n	8006376 <_free_r+0x26>
 80063c0:	d902      	bls.n	80063c8 <_free_r+0x78>
 80063c2:	230c      	movs	r3, #12
 80063c4:	6003      	str	r3, [r0, #0]
 80063c6:	e7d6      	b.n	8006376 <_free_r+0x26>
 80063c8:	6825      	ldr	r5, [r4, #0]
 80063ca:	1961      	adds	r1, r4, r5
 80063cc:	428b      	cmp	r3, r1
 80063ce:	bf04      	itt	eq
 80063d0:	6819      	ldreq	r1, [r3, #0]
 80063d2:	685b      	ldreq	r3, [r3, #4]
 80063d4:	6063      	str	r3, [r4, #4]
 80063d6:	bf04      	itt	eq
 80063d8:	1949      	addeq	r1, r1, r5
 80063da:	6021      	streq	r1, [r4, #0]
 80063dc:	6054      	str	r4, [r2, #4]
 80063de:	e7ca      	b.n	8006376 <_free_r+0x26>
 80063e0:	b003      	add	sp, #12
 80063e2:	bd30      	pop	{r4, r5, pc}
 80063e4:	240003b8 	.word	0x240003b8

080063e8 <sbrk_aligned>:
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	4e0e      	ldr	r6, [pc, #56]	; (8006424 <sbrk_aligned+0x3c>)
 80063ec:	460c      	mov	r4, r1
 80063ee:	6831      	ldr	r1, [r6, #0]
 80063f0:	4605      	mov	r5, r0
 80063f2:	b911      	cbnz	r1, 80063fa <sbrk_aligned+0x12>
 80063f4:	f000 fcce 	bl	8006d94 <_sbrk_r>
 80063f8:	6030      	str	r0, [r6, #0]
 80063fa:	4621      	mov	r1, r4
 80063fc:	4628      	mov	r0, r5
 80063fe:	f000 fcc9 	bl	8006d94 <_sbrk_r>
 8006402:	1c43      	adds	r3, r0, #1
 8006404:	d00a      	beq.n	800641c <sbrk_aligned+0x34>
 8006406:	1cc4      	adds	r4, r0, #3
 8006408:	f024 0403 	bic.w	r4, r4, #3
 800640c:	42a0      	cmp	r0, r4
 800640e:	d007      	beq.n	8006420 <sbrk_aligned+0x38>
 8006410:	1a21      	subs	r1, r4, r0
 8006412:	4628      	mov	r0, r5
 8006414:	f000 fcbe 	bl	8006d94 <_sbrk_r>
 8006418:	3001      	adds	r0, #1
 800641a:	d101      	bne.n	8006420 <sbrk_aligned+0x38>
 800641c:	f04f 34ff 	mov.w	r4, #4294967295
 8006420:	4620      	mov	r0, r4
 8006422:	bd70      	pop	{r4, r5, r6, pc}
 8006424:	240003bc 	.word	0x240003bc

08006428 <_malloc_r>:
 8006428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800642c:	1ccd      	adds	r5, r1, #3
 800642e:	f025 0503 	bic.w	r5, r5, #3
 8006432:	3508      	adds	r5, #8
 8006434:	2d0c      	cmp	r5, #12
 8006436:	bf38      	it	cc
 8006438:	250c      	movcc	r5, #12
 800643a:	2d00      	cmp	r5, #0
 800643c:	4607      	mov	r7, r0
 800643e:	db01      	blt.n	8006444 <_malloc_r+0x1c>
 8006440:	42a9      	cmp	r1, r5
 8006442:	d905      	bls.n	8006450 <_malloc_r+0x28>
 8006444:	230c      	movs	r3, #12
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	2600      	movs	r6, #0
 800644a:	4630      	mov	r0, r6
 800644c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006450:	4e2e      	ldr	r6, [pc, #184]	; (800650c <_malloc_r+0xe4>)
 8006452:	f001 fadd 	bl	8007a10 <__malloc_lock>
 8006456:	6833      	ldr	r3, [r6, #0]
 8006458:	461c      	mov	r4, r3
 800645a:	bb34      	cbnz	r4, 80064aa <_malloc_r+0x82>
 800645c:	4629      	mov	r1, r5
 800645e:	4638      	mov	r0, r7
 8006460:	f7ff ffc2 	bl	80063e8 <sbrk_aligned>
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	4604      	mov	r4, r0
 8006468:	d14d      	bne.n	8006506 <_malloc_r+0xde>
 800646a:	6834      	ldr	r4, [r6, #0]
 800646c:	4626      	mov	r6, r4
 800646e:	2e00      	cmp	r6, #0
 8006470:	d140      	bne.n	80064f4 <_malloc_r+0xcc>
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	4631      	mov	r1, r6
 8006476:	4638      	mov	r0, r7
 8006478:	eb04 0803 	add.w	r8, r4, r3
 800647c:	f000 fc8a 	bl	8006d94 <_sbrk_r>
 8006480:	4580      	cmp	r8, r0
 8006482:	d13a      	bne.n	80064fa <_malloc_r+0xd2>
 8006484:	6821      	ldr	r1, [r4, #0]
 8006486:	3503      	adds	r5, #3
 8006488:	1a6d      	subs	r5, r5, r1
 800648a:	f025 0503 	bic.w	r5, r5, #3
 800648e:	3508      	adds	r5, #8
 8006490:	2d0c      	cmp	r5, #12
 8006492:	bf38      	it	cc
 8006494:	250c      	movcc	r5, #12
 8006496:	4629      	mov	r1, r5
 8006498:	4638      	mov	r0, r7
 800649a:	f7ff ffa5 	bl	80063e8 <sbrk_aligned>
 800649e:	3001      	adds	r0, #1
 80064a0:	d02b      	beq.n	80064fa <_malloc_r+0xd2>
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	442b      	add	r3, r5
 80064a6:	6023      	str	r3, [r4, #0]
 80064a8:	e00e      	b.n	80064c8 <_malloc_r+0xa0>
 80064aa:	6822      	ldr	r2, [r4, #0]
 80064ac:	1b52      	subs	r2, r2, r5
 80064ae:	d41e      	bmi.n	80064ee <_malloc_r+0xc6>
 80064b0:	2a0b      	cmp	r2, #11
 80064b2:	d916      	bls.n	80064e2 <_malloc_r+0xba>
 80064b4:	1961      	adds	r1, r4, r5
 80064b6:	42a3      	cmp	r3, r4
 80064b8:	6025      	str	r5, [r4, #0]
 80064ba:	bf18      	it	ne
 80064bc:	6059      	strne	r1, [r3, #4]
 80064be:	6863      	ldr	r3, [r4, #4]
 80064c0:	bf08      	it	eq
 80064c2:	6031      	streq	r1, [r6, #0]
 80064c4:	5162      	str	r2, [r4, r5]
 80064c6:	604b      	str	r3, [r1, #4]
 80064c8:	4638      	mov	r0, r7
 80064ca:	f104 060b 	add.w	r6, r4, #11
 80064ce:	f001 faa5 	bl	8007a1c <__malloc_unlock>
 80064d2:	f026 0607 	bic.w	r6, r6, #7
 80064d6:	1d23      	adds	r3, r4, #4
 80064d8:	1af2      	subs	r2, r6, r3
 80064da:	d0b6      	beq.n	800644a <_malloc_r+0x22>
 80064dc:	1b9b      	subs	r3, r3, r6
 80064de:	50a3      	str	r3, [r4, r2]
 80064e0:	e7b3      	b.n	800644a <_malloc_r+0x22>
 80064e2:	6862      	ldr	r2, [r4, #4]
 80064e4:	42a3      	cmp	r3, r4
 80064e6:	bf0c      	ite	eq
 80064e8:	6032      	streq	r2, [r6, #0]
 80064ea:	605a      	strne	r2, [r3, #4]
 80064ec:	e7ec      	b.n	80064c8 <_malloc_r+0xa0>
 80064ee:	4623      	mov	r3, r4
 80064f0:	6864      	ldr	r4, [r4, #4]
 80064f2:	e7b2      	b.n	800645a <_malloc_r+0x32>
 80064f4:	4634      	mov	r4, r6
 80064f6:	6876      	ldr	r6, [r6, #4]
 80064f8:	e7b9      	b.n	800646e <_malloc_r+0x46>
 80064fa:	230c      	movs	r3, #12
 80064fc:	603b      	str	r3, [r7, #0]
 80064fe:	4638      	mov	r0, r7
 8006500:	f001 fa8c 	bl	8007a1c <__malloc_unlock>
 8006504:	e7a1      	b.n	800644a <_malloc_r+0x22>
 8006506:	6025      	str	r5, [r4, #0]
 8006508:	e7de      	b.n	80064c8 <_malloc_r+0xa0>
 800650a:	bf00      	nop
 800650c:	240003b8 	.word	0x240003b8

08006510 <__cvt>:
 8006510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006512:	ed2d 8b02 	vpush	{d8}
 8006516:	eeb0 8b40 	vmov.f64	d8, d0
 800651a:	b085      	sub	sp, #20
 800651c:	4617      	mov	r7, r2
 800651e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006520:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006522:	ee18 2a90 	vmov	r2, s17
 8006526:	f025 0520 	bic.w	r5, r5, #32
 800652a:	2a00      	cmp	r2, #0
 800652c:	bfb6      	itet	lt
 800652e:	222d      	movlt	r2, #45	; 0x2d
 8006530:	2200      	movge	r2, #0
 8006532:	eeb1 8b40 	vneglt.f64	d8, d0
 8006536:	2d46      	cmp	r5, #70	; 0x46
 8006538:	460c      	mov	r4, r1
 800653a:	701a      	strb	r2, [r3, #0]
 800653c:	d004      	beq.n	8006548 <__cvt+0x38>
 800653e:	2d45      	cmp	r5, #69	; 0x45
 8006540:	d100      	bne.n	8006544 <__cvt+0x34>
 8006542:	3401      	adds	r4, #1
 8006544:	2102      	movs	r1, #2
 8006546:	e000      	b.n	800654a <__cvt+0x3a>
 8006548:	2103      	movs	r1, #3
 800654a:	ab03      	add	r3, sp, #12
 800654c:	9301      	str	r3, [sp, #4]
 800654e:	ab02      	add	r3, sp, #8
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	4622      	mov	r2, r4
 8006554:	4633      	mov	r3, r6
 8006556:	eeb0 0b48 	vmov.f64	d0, d8
 800655a:	f000 fcd9 	bl	8006f10 <_dtoa_r>
 800655e:	2d47      	cmp	r5, #71	; 0x47
 8006560:	d101      	bne.n	8006566 <__cvt+0x56>
 8006562:	07fb      	lsls	r3, r7, #31
 8006564:	d51a      	bpl.n	800659c <__cvt+0x8c>
 8006566:	2d46      	cmp	r5, #70	; 0x46
 8006568:	eb00 0204 	add.w	r2, r0, r4
 800656c:	d10c      	bne.n	8006588 <__cvt+0x78>
 800656e:	7803      	ldrb	r3, [r0, #0]
 8006570:	2b30      	cmp	r3, #48	; 0x30
 8006572:	d107      	bne.n	8006584 <__cvt+0x74>
 8006574:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800657c:	bf1c      	itt	ne
 800657e:	f1c4 0401 	rsbne	r4, r4, #1
 8006582:	6034      	strne	r4, [r6, #0]
 8006584:	6833      	ldr	r3, [r6, #0]
 8006586:	441a      	add	r2, r3
 8006588:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800658c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006590:	bf08      	it	eq
 8006592:	9203      	streq	r2, [sp, #12]
 8006594:	2130      	movs	r1, #48	; 0x30
 8006596:	9b03      	ldr	r3, [sp, #12]
 8006598:	4293      	cmp	r3, r2
 800659a:	d307      	bcc.n	80065ac <__cvt+0x9c>
 800659c:	9b03      	ldr	r3, [sp, #12]
 800659e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065a0:	1a1b      	subs	r3, r3, r0
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	b005      	add	sp, #20
 80065a6:	ecbd 8b02 	vpop	{d8}
 80065aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ac:	1c5c      	adds	r4, r3, #1
 80065ae:	9403      	str	r4, [sp, #12]
 80065b0:	7019      	strb	r1, [r3, #0]
 80065b2:	e7f0      	b.n	8006596 <__cvt+0x86>

080065b4 <__exponent>:
 80065b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065b6:	4603      	mov	r3, r0
 80065b8:	2900      	cmp	r1, #0
 80065ba:	bfb8      	it	lt
 80065bc:	4249      	neglt	r1, r1
 80065be:	f803 2b02 	strb.w	r2, [r3], #2
 80065c2:	bfb4      	ite	lt
 80065c4:	222d      	movlt	r2, #45	; 0x2d
 80065c6:	222b      	movge	r2, #43	; 0x2b
 80065c8:	2909      	cmp	r1, #9
 80065ca:	7042      	strb	r2, [r0, #1]
 80065cc:	dd2a      	ble.n	8006624 <__exponent+0x70>
 80065ce:	f10d 0407 	add.w	r4, sp, #7
 80065d2:	46a4      	mov	ip, r4
 80065d4:	270a      	movs	r7, #10
 80065d6:	46a6      	mov	lr, r4
 80065d8:	460a      	mov	r2, r1
 80065da:	fb91 f6f7 	sdiv	r6, r1, r7
 80065de:	fb07 1516 	mls	r5, r7, r6, r1
 80065e2:	3530      	adds	r5, #48	; 0x30
 80065e4:	2a63      	cmp	r2, #99	; 0x63
 80065e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80065ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80065ee:	4631      	mov	r1, r6
 80065f0:	dcf1      	bgt.n	80065d6 <__exponent+0x22>
 80065f2:	3130      	adds	r1, #48	; 0x30
 80065f4:	f1ae 0502 	sub.w	r5, lr, #2
 80065f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80065fc:	1c44      	adds	r4, r0, #1
 80065fe:	4629      	mov	r1, r5
 8006600:	4561      	cmp	r1, ip
 8006602:	d30a      	bcc.n	800661a <__exponent+0x66>
 8006604:	f10d 0209 	add.w	r2, sp, #9
 8006608:	eba2 020e 	sub.w	r2, r2, lr
 800660c:	4565      	cmp	r5, ip
 800660e:	bf88      	it	hi
 8006610:	2200      	movhi	r2, #0
 8006612:	4413      	add	r3, r2
 8006614:	1a18      	subs	r0, r3, r0
 8006616:	b003      	add	sp, #12
 8006618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800661a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800661e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006622:	e7ed      	b.n	8006600 <__exponent+0x4c>
 8006624:	2330      	movs	r3, #48	; 0x30
 8006626:	3130      	adds	r1, #48	; 0x30
 8006628:	7083      	strb	r3, [r0, #2]
 800662a:	70c1      	strb	r1, [r0, #3]
 800662c:	1d03      	adds	r3, r0, #4
 800662e:	e7f1      	b.n	8006614 <__exponent+0x60>

08006630 <_printf_float>:
 8006630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	b08b      	sub	sp, #44	; 0x2c
 8006636:	460c      	mov	r4, r1
 8006638:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800663c:	4616      	mov	r6, r2
 800663e:	461f      	mov	r7, r3
 8006640:	4605      	mov	r5, r0
 8006642:	f001 f9d3 	bl	80079ec <_localeconv_r>
 8006646:	f8d0 b000 	ldr.w	fp, [r0]
 800664a:	4658      	mov	r0, fp
 800664c:	f7f9 fe50 	bl	80002f0 <strlen>
 8006650:	2300      	movs	r3, #0
 8006652:	9308      	str	r3, [sp, #32]
 8006654:	f8d8 3000 	ldr.w	r3, [r8]
 8006658:	f894 9018 	ldrb.w	r9, [r4, #24]
 800665c:	6822      	ldr	r2, [r4, #0]
 800665e:	3307      	adds	r3, #7
 8006660:	f023 0307 	bic.w	r3, r3, #7
 8006664:	f103 0108 	add.w	r1, r3, #8
 8006668:	f8c8 1000 	str.w	r1, [r8]
 800666c:	4682      	mov	sl, r0
 800666e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006672:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006676:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80068d8 <_printf_float+0x2a8>
 800667a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800667e:	eeb0 6bc0 	vabs.f64	d6, d0
 8006682:	eeb4 6b47 	vcmp.f64	d6, d7
 8006686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800668a:	dd24      	ble.n	80066d6 <_printf_float+0xa6>
 800668c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006694:	d502      	bpl.n	800669c <_printf_float+0x6c>
 8006696:	232d      	movs	r3, #45	; 0x2d
 8006698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800669c:	4b90      	ldr	r3, [pc, #576]	; (80068e0 <_printf_float+0x2b0>)
 800669e:	4891      	ldr	r0, [pc, #580]	; (80068e4 <_printf_float+0x2b4>)
 80066a0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80066a4:	bf94      	ite	ls
 80066a6:	4698      	movls	r8, r3
 80066a8:	4680      	movhi	r8, r0
 80066aa:	2303      	movs	r3, #3
 80066ac:	6123      	str	r3, [r4, #16]
 80066ae:	f022 0204 	bic.w	r2, r2, #4
 80066b2:	2300      	movs	r3, #0
 80066b4:	6022      	str	r2, [r4, #0]
 80066b6:	9304      	str	r3, [sp, #16]
 80066b8:	9700      	str	r7, [sp, #0]
 80066ba:	4633      	mov	r3, r6
 80066bc:	aa09      	add	r2, sp, #36	; 0x24
 80066be:	4621      	mov	r1, r4
 80066c0:	4628      	mov	r0, r5
 80066c2:	f000 f9d3 	bl	8006a6c <_printf_common>
 80066c6:	3001      	adds	r0, #1
 80066c8:	f040 808a 	bne.w	80067e0 <_printf_float+0x1b0>
 80066cc:	f04f 30ff 	mov.w	r0, #4294967295
 80066d0:	b00b      	add	sp, #44	; 0x2c
 80066d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d6:	eeb4 0b40 	vcmp.f64	d0, d0
 80066da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066de:	d709      	bvc.n	80066f4 <_printf_float+0xc4>
 80066e0:	ee10 3a90 	vmov	r3, s1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	bfbc      	itt	lt
 80066e8:	232d      	movlt	r3, #45	; 0x2d
 80066ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80066ee:	487e      	ldr	r0, [pc, #504]	; (80068e8 <_printf_float+0x2b8>)
 80066f0:	4b7e      	ldr	r3, [pc, #504]	; (80068ec <_printf_float+0x2bc>)
 80066f2:	e7d5      	b.n	80066a0 <_printf_float+0x70>
 80066f4:	6863      	ldr	r3, [r4, #4]
 80066f6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80066fa:	9104      	str	r1, [sp, #16]
 80066fc:	1c59      	adds	r1, r3, #1
 80066fe:	d13c      	bne.n	800677a <_printf_float+0x14a>
 8006700:	2306      	movs	r3, #6
 8006702:	6063      	str	r3, [r4, #4]
 8006704:	2300      	movs	r3, #0
 8006706:	9303      	str	r3, [sp, #12]
 8006708:	ab08      	add	r3, sp, #32
 800670a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800670e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006712:	ab07      	add	r3, sp, #28
 8006714:	6861      	ldr	r1, [r4, #4]
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	6022      	str	r2, [r4, #0]
 800671a:	f10d 031b 	add.w	r3, sp, #27
 800671e:	4628      	mov	r0, r5
 8006720:	f7ff fef6 	bl	8006510 <__cvt>
 8006724:	9b04      	ldr	r3, [sp, #16]
 8006726:	9907      	ldr	r1, [sp, #28]
 8006728:	2b47      	cmp	r3, #71	; 0x47
 800672a:	4680      	mov	r8, r0
 800672c:	d108      	bne.n	8006740 <_printf_float+0x110>
 800672e:	1cc8      	adds	r0, r1, #3
 8006730:	db02      	blt.n	8006738 <_printf_float+0x108>
 8006732:	6863      	ldr	r3, [r4, #4]
 8006734:	4299      	cmp	r1, r3
 8006736:	dd41      	ble.n	80067bc <_printf_float+0x18c>
 8006738:	f1a9 0902 	sub.w	r9, r9, #2
 800673c:	fa5f f989 	uxtb.w	r9, r9
 8006740:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006744:	d820      	bhi.n	8006788 <_printf_float+0x158>
 8006746:	3901      	subs	r1, #1
 8006748:	464a      	mov	r2, r9
 800674a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800674e:	9107      	str	r1, [sp, #28]
 8006750:	f7ff ff30 	bl	80065b4 <__exponent>
 8006754:	9a08      	ldr	r2, [sp, #32]
 8006756:	9004      	str	r0, [sp, #16]
 8006758:	1813      	adds	r3, r2, r0
 800675a:	2a01      	cmp	r2, #1
 800675c:	6123      	str	r3, [r4, #16]
 800675e:	dc02      	bgt.n	8006766 <_printf_float+0x136>
 8006760:	6822      	ldr	r2, [r4, #0]
 8006762:	07d2      	lsls	r2, r2, #31
 8006764:	d501      	bpl.n	800676a <_printf_float+0x13a>
 8006766:	3301      	adds	r3, #1
 8006768:	6123      	str	r3, [r4, #16]
 800676a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0a2      	beq.n	80066b8 <_printf_float+0x88>
 8006772:	232d      	movs	r3, #45	; 0x2d
 8006774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006778:	e79e      	b.n	80066b8 <_printf_float+0x88>
 800677a:	9904      	ldr	r1, [sp, #16]
 800677c:	2947      	cmp	r1, #71	; 0x47
 800677e:	d1c1      	bne.n	8006704 <_printf_float+0xd4>
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1bf      	bne.n	8006704 <_printf_float+0xd4>
 8006784:	2301      	movs	r3, #1
 8006786:	e7bc      	b.n	8006702 <_printf_float+0xd2>
 8006788:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800678c:	d118      	bne.n	80067c0 <_printf_float+0x190>
 800678e:	2900      	cmp	r1, #0
 8006790:	6863      	ldr	r3, [r4, #4]
 8006792:	dd0b      	ble.n	80067ac <_printf_float+0x17c>
 8006794:	6121      	str	r1, [r4, #16]
 8006796:	b913      	cbnz	r3, 800679e <_printf_float+0x16e>
 8006798:	6822      	ldr	r2, [r4, #0]
 800679a:	07d0      	lsls	r0, r2, #31
 800679c:	d502      	bpl.n	80067a4 <_printf_float+0x174>
 800679e:	3301      	adds	r3, #1
 80067a0:	440b      	add	r3, r1
 80067a2:	6123      	str	r3, [r4, #16]
 80067a4:	2300      	movs	r3, #0
 80067a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80067a8:	9304      	str	r3, [sp, #16]
 80067aa:	e7de      	b.n	800676a <_printf_float+0x13a>
 80067ac:	b913      	cbnz	r3, 80067b4 <_printf_float+0x184>
 80067ae:	6822      	ldr	r2, [r4, #0]
 80067b0:	07d2      	lsls	r2, r2, #31
 80067b2:	d501      	bpl.n	80067b8 <_printf_float+0x188>
 80067b4:	3302      	adds	r3, #2
 80067b6:	e7f4      	b.n	80067a2 <_printf_float+0x172>
 80067b8:	2301      	movs	r3, #1
 80067ba:	e7f2      	b.n	80067a2 <_printf_float+0x172>
 80067bc:	f04f 0967 	mov.w	r9, #103	; 0x67
 80067c0:	9b08      	ldr	r3, [sp, #32]
 80067c2:	4299      	cmp	r1, r3
 80067c4:	db05      	blt.n	80067d2 <_printf_float+0x1a2>
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	6121      	str	r1, [r4, #16]
 80067ca:	07d8      	lsls	r0, r3, #31
 80067cc:	d5ea      	bpl.n	80067a4 <_printf_float+0x174>
 80067ce:	1c4b      	adds	r3, r1, #1
 80067d0:	e7e7      	b.n	80067a2 <_printf_float+0x172>
 80067d2:	2900      	cmp	r1, #0
 80067d4:	bfd4      	ite	le
 80067d6:	f1c1 0202 	rsble	r2, r1, #2
 80067da:	2201      	movgt	r2, #1
 80067dc:	4413      	add	r3, r2
 80067de:	e7e0      	b.n	80067a2 <_printf_float+0x172>
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	055a      	lsls	r2, r3, #21
 80067e4:	d407      	bmi.n	80067f6 <_printf_float+0x1c6>
 80067e6:	6923      	ldr	r3, [r4, #16]
 80067e8:	4642      	mov	r2, r8
 80067ea:	4631      	mov	r1, r6
 80067ec:	4628      	mov	r0, r5
 80067ee:	47b8      	blx	r7
 80067f0:	3001      	adds	r0, #1
 80067f2:	d12a      	bne.n	800684a <_printf_float+0x21a>
 80067f4:	e76a      	b.n	80066cc <_printf_float+0x9c>
 80067f6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80067fa:	f240 80e2 	bls.w	80069c2 <_printf_float+0x392>
 80067fe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006802:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800680a:	d133      	bne.n	8006874 <_printf_float+0x244>
 800680c:	4a38      	ldr	r2, [pc, #224]	; (80068f0 <_printf_float+0x2c0>)
 800680e:	2301      	movs	r3, #1
 8006810:	4631      	mov	r1, r6
 8006812:	4628      	mov	r0, r5
 8006814:	47b8      	blx	r7
 8006816:	3001      	adds	r0, #1
 8006818:	f43f af58 	beq.w	80066cc <_printf_float+0x9c>
 800681c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006820:	429a      	cmp	r2, r3
 8006822:	db02      	blt.n	800682a <_printf_float+0x1fa>
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	07d8      	lsls	r0, r3, #31
 8006828:	d50f      	bpl.n	800684a <_printf_float+0x21a>
 800682a:	4653      	mov	r3, sl
 800682c:	465a      	mov	r2, fp
 800682e:	4631      	mov	r1, r6
 8006830:	4628      	mov	r0, r5
 8006832:	47b8      	blx	r7
 8006834:	3001      	adds	r0, #1
 8006836:	f43f af49 	beq.w	80066cc <_printf_float+0x9c>
 800683a:	f04f 0800 	mov.w	r8, #0
 800683e:	f104 091a 	add.w	r9, r4, #26
 8006842:	9b08      	ldr	r3, [sp, #32]
 8006844:	3b01      	subs	r3, #1
 8006846:	4543      	cmp	r3, r8
 8006848:	dc09      	bgt.n	800685e <_printf_float+0x22e>
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	079b      	lsls	r3, r3, #30
 800684e:	f100 8108 	bmi.w	8006a62 <_printf_float+0x432>
 8006852:	68e0      	ldr	r0, [r4, #12]
 8006854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006856:	4298      	cmp	r0, r3
 8006858:	bfb8      	it	lt
 800685a:	4618      	movlt	r0, r3
 800685c:	e738      	b.n	80066d0 <_printf_float+0xa0>
 800685e:	2301      	movs	r3, #1
 8006860:	464a      	mov	r2, r9
 8006862:	4631      	mov	r1, r6
 8006864:	4628      	mov	r0, r5
 8006866:	47b8      	blx	r7
 8006868:	3001      	adds	r0, #1
 800686a:	f43f af2f 	beq.w	80066cc <_printf_float+0x9c>
 800686e:	f108 0801 	add.w	r8, r8, #1
 8006872:	e7e6      	b.n	8006842 <_printf_float+0x212>
 8006874:	9b07      	ldr	r3, [sp, #28]
 8006876:	2b00      	cmp	r3, #0
 8006878:	dc3c      	bgt.n	80068f4 <_printf_float+0x2c4>
 800687a:	4a1d      	ldr	r2, [pc, #116]	; (80068f0 <_printf_float+0x2c0>)
 800687c:	2301      	movs	r3, #1
 800687e:	4631      	mov	r1, r6
 8006880:	4628      	mov	r0, r5
 8006882:	47b8      	blx	r7
 8006884:	3001      	adds	r0, #1
 8006886:	f43f af21 	beq.w	80066cc <_printf_float+0x9c>
 800688a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800688e:	4313      	orrs	r3, r2
 8006890:	d102      	bne.n	8006898 <_printf_float+0x268>
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	07d9      	lsls	r1, r3, #31
 8006896:	d5d8      	bpl.n	800684a <_printf_float+0x21a>
 8006898:	4653      	mov	r3, sl
 800689a:	465a      	mov	r2, fp
 800689c:	4631      	mov	r1, r6
 800689e:	4628      	mov	r0, r5
 80068a0:	47b8      	blx	r7
 80068a2:	3001      	adds	r0, #1
 80068a4:	f43f af12 	beq.w	80066cc <_printf_float+0x9c>
 80068a8:	f04f 0900 	mov.w	r9, #0
 80068ac:	f104 0a1a 	add.w	sl, r4, #26
 80068b0:	9b07      	ldr	r3, [sp, #28]
 80068b2:	425b      	negs	r3, r3
 80068b4:	454b      	cmp	r3, r9
 80068b6:	dc01      	bgt.n	80068bc <_printf_float+0x28c>
 80068b8:	9b08      	ldr	r3, [sp, #32]
 80068ba:	e795      	b.n	80067e8 <_printf_float+0x1b8>
 80068bc:	2301      	movs	r3, #1
 80068be:	4652      	mov	r2, sl
 80068c0:	4631      	mov	r1, r6
 80068c2:	4628      	mov	r0, r5
 80068c4:	47b8      	blx	r7
 80068c6:	3001      	adds	r0, #1
 80068c8:	f43f af00 	beq.w	80066cc <_printf_float+0x9c>
 80068cc:	f109 0901 	add.w	r9, r9, #1
 80068d0:	e7ee      	b.n	80068b0 <_printf_float+0x280>
 80068d2:	bf00      	nop
 80068d4:	f3af 8000 	nop.w
 80068d8:	ffffffff 	.word	0xffffffff
 80068dc:	7fefffff 	.word	0x7fefffff
 80068e0:	08009410 	.word	0x08009410
 80068e4:	08009414 	.word	0x08009414
 80068e8:	0800941c 	.word	0x0800941c
 80068ec:	08009418 	.word	0x08009418
 80068f0:	08009420 	.word	0x08009420
 80068f4:	9a08      	ldr	r2, [sp, #32]
 80068f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068f8:	429a      	cmp	r2, r3
 80068fa:	bfa8      	it	ge
 80068fc:	461a      	movge	r2, r3
 80068fe:	2a00      	cmp	r2, #0
 8006900:	4691      	mov	r9, r2
 8006902:	dc38      	bgt.n	8006976 <_printf_float+0x346>
 8006904:	2300      	movs	r3, #0
 8006906:	9305      	str	r3, [sp, #20]
 8006908:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800690c:	f104 021a 	add.w	r2, r4, #26
 8006910:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006912:	9905      	ldr	r1, [sp, #20]
 8006914:	9304      	str	r3, [sp, #16]
 8006916:	eba3 0309 	sub.w	r3, r3, r9
 800691a:	428b      	cmp	r3, r1
 800691c:	dc33      	bgt.n	8006986 <_printf_float+0x356>
 800691e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006922:	429a      	cmp	r2, r3
 8006924:	db3c      	blt.n	80069a0 <_printf_float+0x370>
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	07da      	lsls	r2, r3, #31
 800692a:	d439      	bmi.n	80069a0 <_printf_float+0x370>
 800692c:	9b08      	ldr	r3, [sp, #32]
 800692e:	9a04      	ldr	r2, [sp, #16]
 8006930:	9907      	ldr	r1, [sp, #28]
 8006932:	1a9a      	subs	r2, r3, r2
 8006934:	eba3 0901 	sub.w	r9, r3, r1
 8006938:	4591      	cmp	r9, r2
 800693a:	bfa8      	it	ge
 800693c:	4691      	movge	r9, r2
 800693e:	f1b9 0f00 	cmp.w	r9, #0
 8006942:	dc35      	bgt.n	80069b0 <_printf_float+0x380>
 8006944:	f04f 0800 	mov.w	r8, #0
 8006948:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800694c:	f104 0a1a 	add.w	sl, r4, #26
 8006950:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006954:	1a9b      	subs	r3, r3, r2
 8006956:	eba3 0309 	sub.w	r3, r3, r9
 800695a:	4543      	cmp	r3, r8
 800695c:	f77f af75 	ble.w	800684a <_printf_float+0x21a>
 8006960:	2301      	movs	r3, #1
 8006962:	4652      	mov	r2, sl
 8006964:	4631      	mov	r1, r6
 8006966:	4628      	mov	r0, r5
 8006968:	47b8      	blx	r7
 800696a:	3001      	adds	r0, #1
 800696c:	f43f aeae 	beq.w	80066cc <_printf_float+0x9c>
 8006970:	f108 0801 	add.w	r8, r8, #1
 8006974:	e7ec      	b.n	8006950 <_printf_float+0x320>
 8006976:	4613      	mov	r3, r2
 8006978:	4631      	mov	r1, r6
 800697a:	4642      	mov	r2, r8
 800697c:	4628      	mov	r0, r5
 800697e:	47b8      	blx	r7
 8006980:	3001      	adds	r0, #1
 8006982:	d1bf      	bne.n	8006904 <_printf_float+0x2d4>
 8006984:	e6a2      	b.n	80066cc <_printf_float+0x9c>
 8006986:	2301      	movs	r3, #1
 8006988:	4631      	mov	r1, r6
 800698a:	4628      	mov	r0, r5
 800698c:	9204      	str	r2, [sp, #16]
 800698e:	47b8      	blx	r7
 8006990:	3001      	adds	r0, #1
 8006992:	f43f ae9b 	beq.w	80066cc <_printf_float+0x9c>
 8006996:	9b05      	ldr	r3, [sp, #20]
 8006998:	9a04      	ldr	r2, [sp, #16]
 800699a:	3301      	adds	r3, #1
 800699c:	9305      	str	r3, [sp, #20]
 800699e:	e7b7      	b.n	8006910 <_printf_float+0x2e0>
 80069a0:	4653      	mov	r3, sl
 80069a2:	465a      	mov	r2, fp
 80069a4:	4631      	mov	r1, r6
 80069a6:	4628      	mov	r0, r5
 80069a8:	47b8      	blx	r7
 80069aa:	3001      	adds	r0, #1
 80069ac:	d1be      	bne.n	800692c <_printf_float+0x2fc>
 80069ae:	e68d      	b.n	80066cc <_printf_float+0x9c>
 80069b0:	9a04      	ldr	r2, [sp, #16]
 80069b2:	464b      	mov	r3, r9
 80069b4:	4442      	add	r2, r8
 80069b6:	4631      	mov	r1, r6
 80069b8:	4628      	mov	r0, r5
 80069ba:	47b8      	blx	r7
 80069bc:	3001      	adds	r0, #1
 80069be:	d1c1      	bne.n	8006944 <_printf_float+0x314>
 80069c0:	e684      	b.n	80066cc <_printf_float+0x9c>
 80069c2:	9a08      	ldr	r2, [sp, #32]
 80069c4:	2a01      	cmp	r2, #1
 80069c6:	dc01      	bgt.n	80069cc <_printf_float+0x39c>
 80069c8:	07db      	lsls	r3, r3, #31
 80069ca:	d537      	bpl.n	8006a3c <_printf_float+0x40c>
 80069cc:	2301      	movs	r3, #1
 80069ce:	4642      	mov	r2, r8
 80069d0:	4631      	mov	r1, r6
 80069d2:	4628      	mov	r0, r5
 80069d4:	47b8      	blx	r7
 80069d6:	3001      	adds	r0, #1
 80069d8:	f43f ae78 	beq.w	80066cc <_printf_float+0x9c>
 80069dc:	4653      	mov	r3, sl
 80069de:	465a      	mov	r2, fp
 80069e0:	4631      	mov	r1, r6
 80069e2:	4628      	mov	r0, r5
 80069e4:	47b8      	blx	r7
 80069e6:	3001      	adds	r0, #1
 80069e8:	f43f ae70 	beq.w	80066cc <_printf_float+0x9c>
 80069ec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80069f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80069f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069f8:	d01b      	beq.n	8006a32 <_printf_float+0x402>
 80069fa:	9b08      	ldr	r3, [sp, #32]
 80069fc:	f108 0201 	add.w	r2, r8, #1
 8006a00:	3b01      	subs	r3, #1
 8006a02:	4631      	mov	r1, r6
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d10e      	bne.n	8006a2a <_printf_float+0x3fa>
 8006a0c:	e65e      	b.n	80066cc <_printf_float+0x9c>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	464a      	mov	r2, r9
 8006a12:	4631      	mov	r1, r6
 8006a14:	4628      	mov	r0, r5
 8006a16:	47b8      	blx	r7
 8006a18:	3001      	adds	r0, #1
 8006a1a:	f43f ae57 	beq.w	80066cc <_printf_float+0x9c>
 8006a1e:	f108 0801 	add.w	r8, r8, #1
 8006a22:	9b08      	ldr	r3, [sp, #32]
 8006a24:	3b01      	subs	r3, #1
 8006a26:	4543      	cmp	r3, r8
 8006a28:	dcf1      	bgt.n	8006a0e <_printf_float+0x3de>
 8006a2a:	9b04      	ldr	r3, [sp, #16]
 8006a2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a30:	e6db      	b.n	80067ea <_printf_float+0x1ba>
 8006a32:	f04f 0800 	mov.w	r8, #0
 8006a36:	f104 091a 	add.w	r9, r4, #26
 8006a3a:	e7f2      	b.n	8006a22 <_printf_float+0x3f2>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	4642      	mov	r2, r8
 8006a40:	e7df      	b.n	8006a02 <_printf_float+0x3d2>
 8006a42:	2301      	movs	r3, #1
 8006a44:	464a      	mov	r2, r9
 8006a46:	4631      	mov	r1, r6
 8006a48:	4628      	mov	r0, r5
 8006a4a:	47b8      	blx	r7
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	f43f ae3d 	beq.w	80066cc <_printf_float+0x9c>
 8006a52:	f108 0801 	add.w	r8, r8, #1
 8006a56:	68e3      	ldr	r3, [r4, #12]
 8006a58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a5a:	1a5b      	subs	r3, r3, r1
 8006a5c:	4543      	cmp	r3, r8
 8006a5e:	dcf0      	bgt.n	8006a42 <_printf_float+0x412>
 8006a60:	e6f7      	b.n	8006852 <_printf_float+0x222>
 8006a62:	f04f 0800 	mov.w	r8, #0
 8006a66:	f104 0919 	add.w	r9, r4, #25
 8006a6a:	e7f4      	b.n	8006a56 <_printf_float+0x426>

08006a6c <_printf_common>:
 8006a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a70:	4616      	mov	r6, r2
 8006a72:	4699      	mov	r9, r3
 8006a74:	688a      	ldr	r2, [r1, #8]
 8006a76:	690b      	ldr	r3, [r1, #16]
 8006a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	bfb8      	it	lt
 8006a80:	4613      	movlt	r3, r2
 8006a82:	6033      	str	r3, [r6, #0]
 8006a84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a88:	4607      	mov	r7, r0
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	b10a      	cbz	r2, 8006a92 <_printf_common+0x26>
 8006a8e:	3301      	adds	r3, #1
 8006a90:	6033      	str	r3, [r6, #0]
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	0699      	lsls	r1, r3, #26
 8006a96:	bf42      	ittt	mi
 8006a98:	6833      	ldrmi	r3, [r6, #0]
 8006a9a:	3302      	addmi	r3, #2
 8006a9c:	6033      	strmi	r3, [r6, #0]
 8006a9e:	6825      	ldr	r5, [r4, #0]
 8006aa0:	f015 0506 	ands.w	r5, r5, #6
 8006aa4:	d106      	bne.n	8006ab4 <_printf_common+0x48>
 8006aa6:	f104 0a19 	add.w	sl, r4, #25
 8006aaa:	68e3      	ldr	r3, [r4, #12]
 8006aac:	6832      	ldr	r2, [r6, #0]
 8006aae:	1a9b      	subs	r3, r3, r2
 8006ab0:	42ab      	cmp	r3, r5
 8006ab2:	dc26      	bgt.n	8006b02 <_printf_common+0x96>
 8006ab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ab8:	1e13      	subs	r3, r2, #0
 8006aba:	6822      	ldr	r2, [r4, #0]
 8006abc:	bf18      	it	ne
 8006abe:	2301      	movne	r3, #1
 8006ac0:	0692      	lsls	r2, r2, #26
 8006ac2:	d42b      	bmi.n	8006b1c <_printf_common+0xb0>
 8006ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ac8:	4649      	mov	r1, r9
 8006aca:	4638      	mov	r0, r7
 8006acc:	47c0      	blx	r8
 8006ace:	3001      	adds	r0, #1
 8006ad0:	d01e      	beq.n	8006b10 <_printf_common+0xa4>
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	68e5      	ldr	r5, [r4, #12]
 8006ad6:	6832      	ldr	r2, [r6, #0]
 8006ad8:	f003 0306 	and.w	r3, r3, #6
 8006adc:	2b04      	cmp	r3, #4
 8006ade:	bf08      	it	eq
 8006ae0:	1aad      	subeq	r5, r5, r2
 8006ae2:	68a3      	ldr	r3, [r4, #8]
 8006ae4:	6922      	ldr	r2, [r4, #16]
 8006ae6:	bf0c      	ite	eq
 8006ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006aec:	2500      	movne	r5, #0
 8006aee:	4293      	cmp	r3, r2
 8006af0:	bfc4      	itt	gt
 8006af2:	1a9b      	subgt	r3, r3, r2
 8006af4:	18ed      	addgt	r5, r5, r3
 8006af6:	2600      	movs	r6, #0
 8006af8:	341a      	adds	r4, #26
 8006afa:	42b5      	cmp	r5, r6
 8006afc:	d11a      	bne.n	8006b34 <_printf_common+0xc8>
 8006afe:	2000      	movs	r0, #0
 8006b00:	e008      	b.n	8006b14 <_printf_common+0xa8>
 8006b02:	2301      	movs	r3, #1
 8006b04:	4652      	mov	r2, sl
 8006b06:	4649      	mov	r1, r9
 8006b08:	4638      	mov	r0, r7
 8006b0a:	47c0      	blx	r8
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	d103      	bne.n	8006b18 <_printf_common+0xac>
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295
 8006b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b18:	3501      	adds	r5, #1
 8006b1a:	e7c6      	b.n	8006aaa <_printf_common+0x3e>
 8006b1c:	18e1      	adds	r1, r4, r3
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	2030      	movs	r0, #48	; 0x30
 8006b22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b26:	4422      	add	r2, r4
 8006b28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b30:	3302      	adds	r3, #2
 8006b32:	e7c7      	b.n	8006ac4 <_printf_common+0x58>
 8006b34:	2301      	movs	r3, #1
 8006b36:	4622      	mov	r2, r4
 8006b38:	4649      	mov	r1, r9
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	47c0      	blx	r8
 8006b3e:	3001      	adds	r0, #1
 8006b40:	d0e6      	beq.n	8006b10 <_printf_common+0xa4>
 8006b42:	3601      	adds	r6, #1
 8006b44:	e7d9      	b.n	8006afa <_printf_common+0x8e>
	...

08006b48 <_printf_i>:
 8006b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b4c:	7e0f      	ldrb	r7, [r1, #24]
 8006b4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b50:	2f78      	cmp	r7, #120	; 0x78
 8006b52:	4691      	mov	r9, r2
 8006b54:	4680      	mov	r8, r0
 8006b56:	460c      	mov	r4, r1
 8006b58:	469a      	mov	sl, r3
 8006b5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b5e:	d807      	bhi.n	8006b70 <_printf_i+0x28>
 8006b60:	2f62      	cmp	r7, #98	; 0x62
 8006b62:	d80a      	bhi.n	8006b7a <_printf_i+0x32>
 8006b64:	2f00      	cmp	r7, #0
 8006b66:	f000 80d8 	beq.w	8006d1a <_printf_i+0x1d2>
 8006b6a:	2f58      	cmp	r7, #88	; 0x58
 8006b6c:	f000 80a3 	beq.w	8006cb6 <_printf_i+0x16e>
 8006b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b78:	e03a      	b.n	8006bf0 <_printf_i+0xa8>
 8006b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b7e:	2b15      	cmp	r3, #21
 8006b80:	d8f6      	bhi.n	8006b70 <_printf_i+0x28>
 8006b82:	a101      	add	r1, pc, #4	; (adr r1, 8006b88 <_printf_i+0x40>)
 8006b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b88:	08006be1 	.word	0x08006be1
 8006b8c:	08006bf5 	.word	0x08006bf5
 8006b90:	08006b71 	.word	0x08006b71
 8006b94:	08006b71 	.word	0x08006b71
 8006b98:	08006b71 	.word	0x08006b71
 8006b9c:	08006b71 	.word	0x08006b71
 8006ba0:	08006bf5 	.word	0x08006bf5
 8006ba4:	08006b71 	.word	0x08006b71
 8006ba8:	08006b71 	.word	0x08006b71
 8006bac:	08006b71 	.word	0x08006b71
 8006bb0:	08006b71 	.word	0x08006b71
 8006bb4:	08006d01 	.word	0x08006d01
 8006bb8:	08006c25 	.word	0x08006c25
 8006bbc:	08006ce3 	.word	0x08006ce3
 8006bc0:	08006b71 	.word	0x08006b71
 8006bc4:	08006b71 	.word	0x08006b71
 8006bc8:	08006d23 	.word	0x08006d23
 8006bcc:	08006b71 	.word	0x08006b71
 8006bd0:	08006c25 	.word	0x08006c25
 8006bd4:	08006b71 	.word	0x08006b71
 8006bd8:	08006b71 	.word	0x08006b71
 8006bdc:	08006ceb 	.word	0x08006ceb
 8006be0:	682b      	ldr	r3, [r5, #0]
 8006be2:	1d1a      	adds	r2, r3, #4
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	602a      	str	r2, [r5, #0]
 8006be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e0a3      	b.n	8006d3c <_printf_i+0x1f4>
 8006bf4:	6820      	ldr	r0, [r4, #0]
 8006bf6:	6829      	ldr	r1, [r5, #0]
 8006bf8:	0606      	lsls	r6, r0, #24
 8006bfa:	f101 0304 	add.w	r3, r1, #4
 8006bfe:	d50a      	bpl.n	8006c16 <_printf_i+0xce>
 8006c00:	680e      	ldr	r6, [r1, #0]
 8006c02:	602b      	str	r3, [r5, #0]
 8006c04:	2e00      	cmp	r6, #0
 8006c06:	da03      	bge.n	8006c10 <_printf_i+0xc8>
 8006c08:	232d      	movs	r3, #45	; 0x2d
 8006c0a:	4276      	negs	r6, r6
 8006c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c10:	485e      	ldr	r0, [pc, #376]	; (8006d8c <_printf_i+0x244>)
 8006c12:	230a      	movs	r3, #10
 8006c14:	e019      	b.n	8006c4a <_printf_i+0x102>
 8006c16:	680e      	ldr	r6, [r1, #0]
 8006c18:	602b      	str	r3, [r5, #0]
 8006c1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c1e:	bf18      	it	ne
 8006c20:	b236      	sxthne	r6, r6
 8006c22:	e7ef      	b.n	8006c04 <_printf_i+0xbc>
 8006c24:	682b      	ldr	r3, [r5, #0]
 8006c26:	6820      	ldr	r0, [r4, #0]
 8006c28:	1d19      	adds	r1, r3, #4
 8006c2a:	6029      	str	r1, [r5, #0]
 8006c2c:	0601      	lsls	r1, r0, #24
 8006c2e:	d501      	bpl.n	8006c34 <_printf_i+0xec>
 8006c30:	681e      	ldr	r6, [r3, #0]
 8006c32:	e002      	b.n	8006c3a <_printf_i+0xf2>
 8006c34:	0646      	lsls	r6, r0, #25
 8006c36:	d5fb      	bpl.n	8006c30 <_printf_i+0xe8>
 8006c38:	881e      	ldrh	r6, [r3, #0]
 8006c3a:	4854      	ldr	r0, [pc, #336]	; (8006d8c <_printf_i+0x244>)
 8006c3c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c3e:	bf0c      	ite	eq
 8006c40:	2308      	moveq	r3, #8
 8006c42:	230a      	movne	r3, #10
 8006c44:	2100      	movs	r1, #0
 8006c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c4a:	6865      	ldr	r5, [r4, #4]
 8006c4c:	60a5      	str	r5, [r4, #8]
 8006c4e:	2d00      	cmp	r5, #0
 8006c50:	bfa2      	ittt	ge
 8006c52:	6821      	ldrge	r1, [r4, #0]
 8006c54:	f021 0104 	bicge.w	r1, r1, #4
 8006c58:	6021      	strge	r1, [r4, #0]
 8006c5a:	b90e      	cbnz	r6, 8006c60 <_printf_i+0x118>
 8006c5c:	2d00      	cmp	r5, #0
 8006c5e:	d04d      	beq.n	8006cfc <_printf_i+0x1b4>
 8006c60:	4615      	mov	r5, r2
 8006c62:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c66:	fb03 6711 	mls	r7, r3, r1, r6
 8006c6a:	5dc7      	ldrb	r7, [r0, r7]
 8006c6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c70:	4637      	mov	r7, r6
 8006c72:	42bb      	cmp	r3, r7
 8006c74:	460e      	mov	r6, r1
 8006c76:	d9f4      	bls.n	8006c62 <_printf_i+0x11a>
 8006c78:	2b08      	cmp	r3, #8
 8006c7a:	d10b      	bne.n	8006c94 <_printf_i+0x14c>
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	07de      	lsls	r6, r3, #31
 8006c80:	d508      	bpl.n	8006c94 <_printf_i+0x14c>
 8006c82:	6923      	ldr	r3, [r4, #16]
 8006c84:	6861      	ldr	r1, [r4, #4]
 8006c86:	4299      	cmp	r1, r3
 8006c88:	bfde      	ittt	le
 8006c8a:	2330      	movle	r3, #48	; 0x30
 8006c8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c94:	1b52      	subs	r2, r2, r5
 8006c96:	6122      	str	r2, [r4, #16]
 8006c98:	f8cd a000 	str.w	sl, [sp]
 8006c9c:	464b      	mov	r3, r9
 8006c9e:	aa03      	add	r2, sp, #12
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	f7ff fee2 	bl	8006a6c <_printf_common>
 8006ca8:	3001      	adds	r0, #1
 8006caa:	d14c      	bne.n	8006d46 <_printf_i+0x1fe>
 8006cac:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb0:	b004      	add	sp, #16
 8006cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb6:	4835      	ldr	r0, [pc, #212]	; (8006d8c <_printf_i+0x244>)
 8006cb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006cbc:	6829      	ldr	r1, [r5, #0]
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cc4:	6029      	str	r1, [r5, #0]
 8006cc6:	061d      	lsls	r5, r3, #24
 8006cc8:	d514      	bpl.n	8006cf4 <_printf_i+0x1ac>
 8006cca:	07df      	lsls	r7, r3, #31
 8006ccc:	bf44      	itt	mi
 8006cce:	f043 0320 	orrmi.w	r3, r3, #32
 8006cd2:	6023      	strmi	r3, [r4, #0]
 8006cd4:	b91e      	cbnz	r6, 8006cde <_printf_i+0x196>
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	f023 0320 	bic.w	r3, r3, #32
 8006cdc:	6023      	str	r3, [r4, #0]
 8006cde:	2310      	movs	r3, #16
 8006ce0:	e7b0      	b.n	8006c44 <_printf_i+0xfc>
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	f043 0320 	orr.w	r3, r3, #32
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	2378      	movs	r3, #120	; 0x78
 8006cec:	4828      	ldr	r0, [pc, #160]	; (8006d90 <_printf_i+0x248>)
 8006cee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cf2:	e7e3      	b.n	8006cbc <_printf_i+0x174>
 8006cf4:	0659      	lsls	r1, r3, #25
 8006cf6:	bf48      	it	mi
 8006cf8:	b2b6      	uxthmi	r6, r6
 8006cfa:	e7e6      	b.n	8006cca <_printf_i+0x182>
 8006cfc:	4615      	mov	r5, r2
 8006cfe:	e7bb      	b.n	8006c78 <_printf_i+0x130>
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	6826      	ldr	r6, [r4, #0]
 8006d04:	6961      	ldr	r1, [r4, #20]
 8006d06:	1d18      	adds	r0, r3, #4
 8006d08:	6028      	str	r0, [r5, #0]
 8006d0a:	0635      	lsls	r5, r6, #24
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	d501      	bpl.n	8006d14 <_printf_i+0x1cc>
 8006d10:	6019      	str	r1, [r3, #0]
 8006d12:	e002      	b.n	8006d1a <_printf_i+0x1d2>
 8006d14:	0670      	lsls	r0, r6, #25
 8006d16:	d5fb      	bpl.n	8006d10 <_printf_i+0x1c8>
 8006d18:	8019      	strh	r1, [r3, #0]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	6123      	str	r3, [r4, #16]
 8006d1e:	4615      	mov	r5, r2
 8006d20:	e7ba      	b.n	8006c98 <_printf_i+0x150>
 8006d22:	682b      	ldr	r3, [r5, #0]
 8006d24:	1d1a      	adds	r2, r3, #4
 8006d26:	602a      	str	r2, [r5, #0]
 8006d28:	681d      	ldr	r5, [r3, #0]
 8006d2a:	6862      	ldr	r2, [r4, #4]
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f7f9 fae6 	bl	8000300 <memchr>
 8006d34:	b108      	cbz	r0, 8006d3a <_printf_i+0x1f2>
 8006d36:	1b40      	subs	r0, r0, r5
 8006d38:	6060      	str	r0, [r4, #4]
 8006d3a:	6863      	ldr	r3, [r4, #4]
 8006d3c:	6123      	str	r3, [r4, #16]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d44:	e7a8      	b.n	8006c98 <_printf_i+0x150>
 8006d46:	6923      	ldr	r3, [r4, #16]
 8006d48:	462a      	mov	r2, r5
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	4640      	mov	r0, r8
 8006d4e:	47d0      	blx	sl
 8006d50:	3001      	adds	r0, #1
 8006d52:	d0ab      	beq.n	8006cac <_printf_i+0x164>
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	079b      	lsls	r3, r3, #30
 8006d58:	d413      	bmi.n	8006d82 <_printf_i+0x23a>
 8006d5a:	68e0      	ldr	r0, [r4, #12]
 8006d5c:	9b03      	ldr	r3, [sp, #12]
 8006d5e:	4298      	cmp	r0, r3
 8006d60:	bfb8      	it	lt
 8006d62:	4618      	movlt	r0, r3
 8006d64:	e7a4      	b.n	8006cb0 <_printf_i+0x168>
 8006d66:	2301      	movs	r3, #1
 8006d68:	4632      	mov	r2, r6
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	4640      	mov	r0, r8
 8006d6e:	47d0      	blx	sl
 8006d70:	3001      	adds	r0, #1
 8006d72:	d09b      	beq.n	8006cac <_printf_i+0x164>
 8006d74:	3501      	adds	r5, #1
 8006d76:	68e3      	ldr	r3, [r4, #12]
 8006d78:	9903      	ldr	r1, [sp, #12]
 8006d7a:	1a5b      	subs	r3, r3, r1
 8006d7c:	42ab      	cmp	r3, r5
 8006d7e:	dcf2      	bgt.n	8006d66 <_printf_i+0x21e>
 8006d80:	e7eb      	b.n	8006d5a <_printf_i+0x212>
 8006d82:	2500      	movs	r5, #0
 8006d84:	f104 0619 	add.w	r6, r4, #25
 8006d88:	e7f5      	b.n	8006d76 <_printf_i+0x22e>
 8006d8a:	bf00      	nop
 8006d8c:	08009422 	.word	0x08009422
 8006d90:	08009433 	.word	0x08009433

08006d94 <_sbrk_r>:
 8006d94:	b538      	push	{r3, r4, r5, lr}
 8006d96:	4d06      	ldr	r5, [pc, #24]	; (8006db0 <_sbrk_r+0x1c>)
 8006d98:	2300      	movs	r3, #0
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	4608      	mov	r0, r1
 8006d9e:	602b      	str	r3, [r5, #0]
 8006da0:	f7fb f962 	bl	8002068 <_sbrk>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d102      	bne.n	8006dae <_sbrk_r+0x1a>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	b103      	cbz	r3, 8006dae <_sbrk_r+0x1a>
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
 8006db0:	240003c0 	.word	0x240003c0

08006db4 <siprintf>:
 8006db4:	b40e      	push	{r1, r2, r3}
 8006db6:	b500      	push	{lr}
 8006db8:	b09c      	sub	sp, #112	; 0x70
 8006dba:	ab1d      	add	r3, sp, #116	; 0x74
 8006dbc:	9002      	str	r0, [sp, #8]
 8006dbe:	9006      	str	r0, [sp, #24]
 8006dc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006dc4:	4809      	ldr	r0, [pc, #36]	; (8006dec <siprintf+0x38>)
 8006dc6:	9107      	str	r1, [sp, #28]
 8006dc8:	9104      	str	r1, [sp, #16]
 8006dca:	4909      	ldr	r1, [pc, #36]	; (8006df0 <siprintf+0x3c>)
 8006dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dd0:	9105      	str	r1, [sp, #20]
 8006dd2:	6800      	ldr	r0, [r0, #0]
 8006dd4:	9301      	str	r3, [sp, #4]
 8006dd6:	a902      	add	r1, sp, #8
 8006dd8:	f001 fa1c 	bl	8008214 <_svfiprintf_r>
 8006ddc:	9b02      	ldr	r3, [sp, #8]
 8006dde:	2200      	movs	r2, #0
 8006de0:	701a      	strb	r2, [r3, #0]
 8006de2:	b01c      	add	sp, #112	; 0x70
 8006de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006de8:	b003      	add	sp, #12
 8006dea:	4770      	bx	lr
 8006dec:	24000020 	.word	0x24000020
 8006df0:	ffff0208 	.word	0xffff0208

08006df4 <quorem>:
 8006df4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df8:	6903      	ldr	r3, [r0, #16]
 8006dfa:	690c      	ldr	r4, [r1, #16]
 8006dfc:	42a3      	cmp	r3, r4
 8006dfe:	4607      	mov	r7, r0
 8006e00:	f2c0 8081 	blt.w	8006f06 <quorem+0x112>
 8006e04:	3c01      	subs	r4, #1
 8006e06:	f101 0814 	add.w	r8, r1, #20
 8006e0a:	f100 0514 	add.w	r5, r0, #20
 8006e0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e12:	9301      	str	r3, [sp, #4]
 8006e14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006e24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e28:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e2c:	d331      	bcc.n	8006e92 <quorem+0x9e>
 8006e2e:	f04f 0e00 	mov.w	lr, #0
 8006e32:	4640      	mov	r0, r8
 8006e34:	46ac      	mov	ip, r5
 8006e36:	46f2      	mov	sl, lr
 8006e38:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e3c:	b293      	uxth	r3, r2
 8006e3e:	fb06 e303 	mla	r3, r6, r3, lr
 8006e42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	ebaa 0303 	sub.w	r3, sl, r3
 8006e4c:	f8dc a000 	ldr.w	sl, [ip]
 8006e50:	0c12      	lsrs	r2, r2, #16
 8006e52:	fa13 f38a 	uxtah	r3, r3, sl
 8006e56:	fb06 e202 	mla	r2, r6, r2, lr
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	9b00      	ldr	r3, [sp, #0]
 8006e5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006e62:	b292      	uxth	r2, r2
 8006e64:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006e68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e6c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006e70:	4581      	cmp	r9, r0
 8006e72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e76:	f84c 3b04 	str.w	r3, [ip], #4
 8006e7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006e7e:	d2db      	bcs.n	8006e38 <quorem+0x44>
 8006e80:	f855 300b 	ldr.w	r3, [r5, fp]
 8006e84:	b92b      	cbnz	r3, 8006e92 <quorem+0x9e>
 8006e86:	9b01      	ldr	r3, [sp, #4]
 8006e88:	3b04      	subs	r3, #4
 8006e8a:	429d      	cmp	r5, r3
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	d32e      	bcc.n	8006eee <quorem+0xfa>
 8006e90:	613c      	str	r4, [r7, #16]
 8006e92:	4638      	mov	r0, r7
 8006e94:	f001 f84a 	bl	8007f2c <__mcmp>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	db24      	blt.n	8006ee6 <quorem+0xf2>
 8006e9c:	3601      	adds	r6, #1
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	f04f 0c00 	mov.w	ip, #0
 8006ea4:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ea8:	f8d0 e000 	ldr.w	lr, [r0]
 8006eac:	b293      	uxth	r3, r2
 8006eae:	ebac 0303 	sub.w	r3, ip, r3
 8006eb2:	0c12      	lsrs	r2, r2, #16
 8006eb4:	fa13 f38e 	uxtah	r3, r3, lr
 8006eb8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ebc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ec6:	45c1      	cmp	r9, r8
 8006ec8:	f840 3b04 	str.w	r3, [r0], #4
 8006ecc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006ed0:	d2e8      	bcs.n	8006ea4 <quorem+0xb0>
 8006ed2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ed6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006eda:	b922      	cbnz	r2, 8006ee6 <quorem+0xf2>
 8006edc:	3b04      	subs	r3, #4
 8006ede:	429d      	cmp	r5, r3
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	d30a      	bcc.n	8006efa <quorem+0x106>
 8006ee4:	613c      	str	r4, [r7, #16]
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	b003      	add	sp, #12
 8006eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eee:	6812      	ldr	r2, [r2, #0]
 8006ef0:	3b04      	subs	r3, #4
 8006ef2:	2a00      	cmp	r2, #0
 8006ef4:	d1cc      	bne.n	8006e90 <quorem+0x9c>
 8006ef6:	3c01      	subs	r4, #1
 8006ef8:	e7c7      	b.n	8006e8a <quorem+0x96>
 8006efa:	6812      	ldr	r2, [r2, #0]
 8006efc:	3b04      	subs	r3, #4
 8006efe:	2a00      	cmp	r2, #0
 8006f00:	d1f0      	bne.n	8006ee4 <quorem+0xf0>
 8006f02:	3c01      	subs	r4, #1
 8006f04:	e7eb      	b.n	8006ede <quorem+0xea>
 8006f06:	2000      	movs	r0, #0
 8006f08:	e7ee      	b.n	8006ee8 <quorem+0xf4>
 8006f0a:	0000      	movs	r0, r0
 8006f0c:	0000      	movs	r0, r0
	...

08006f10 <_dtoa_r>:
 8006f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	ed2d 8b02 	vpush	{d8}
 8006f18:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f1a:	b091      	sub	sp, #68	; 0x44
 8006f1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006f20:	ec59 8b10 	vmov	r8, r9, d0
 8006f24:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8006f26:	9106      	str	r1, [sp, #24]
 8006f28:	4606      	mov	r6, r0
 8006f2a:	9208      	str	r2, [sp, #32]
 8006f2c:	930c      	str	r3, [sp, #48]	; 0x30
 8006f2e:	b975      	cbnz	r5, 8006f4e <_dtoa_r+0x3e>
 8006f30:	2010      	movs	r0, #16
 8006f32:	f7ff f9fd 	bl	8006330 <malloc>
 8006f36:	4602      	mov	r2, r0
 8006f38:	6270      	str	r0, [r6, #36]	; 0x24
 8006f3a:	b920      	cbnz	r0, 8006f46 <_dtoa_r+0x36>
 8006f3c:	4baa      	ldr	r3, [pc, #680]	; (80071e8 <_dtoa_r+0x2d8>)
 8006f3e:	21ea      	movs	r1, #234	; 0xea
 8006f40:	48aa      	ldr	r0, [pc, #680]	; (80071ec <_dtoa_r+0x2dc>)
 8006f42:	f001 fa67 	bl	8008414 <__assert_func>
 8006f46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f4a:	6005      	str	r5, [r0, #0]
 8006f4c:	60c5      	str	r5, [r0, #12]
 8006f4e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006f50:	6819      	ldr	r1, [r3, #0]
 8006f52:	b151      	cbz	r1, 8006f6a <_dtoa_r+0x5a>
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	604a      	str	r2, [r1, #4]
 8006f58:	2301      	movs	r3, #1
 8006f5a:	4093      	lsls	r3, r2
 8006f5c:	608b      	str	r3, [r1, #8]
 8006f5e:	4630      	mov	r0, r6
 8006f60:	f000 fda2 	bl	8007aa8 <_Bfree>
 8006f64:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006f66:	2200      	movs	r2, #0
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	f1b9 0300 	subs.w	r3, r9, #0
 8006f6e:	bfbb      	ittet	lt
 8006f70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006f74:	9303      	strlt	r3, [sp, #12]
 8006f76:	2300      	movge	r3, #0
 8006f78:	2201      	movlt	r2, #1
 8006f7a:	bfac      	ite	ge
 8006f7c:	6023      	strge	r3, [r4, #0]
 8006f7e:	6022      	strlt	r2, [r4, #0]
 8006f80:	4b9b      	ldr	r3, [pc, #620]	; (80071f0 <_dtoa_r+0x2e0>)
 8006f82:	9c03      	ldr	r4, [sp, #12]
 8006f84:	43a3      	bics	r3, r4
 8006f86:	d11c      	bne.n	8006fc2 <_dtoa_r+0xb2>
 8006f88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f8e:	6013      	str	r3, [r2, #0]
 8006f90:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006f94:	ea53 0308 	orrs.w	r3, r3, r8
 8006f98:	f000 84fd 	beq.w	8007996 <_dtoa_r+0xa86>
 8006f9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f9e:	b963      	cbnz	r3, 8006fba <_dtoa_r+0xaa>
 8006fa0:	4b94      	ldr	r3, [pc, #592]	; (80071f4 <_dtoa_r+0x2e4>)
 8006fa2:	e01f      	b.n	8006fe4 <_dtoa_r+0xd4>
 8006fa4:	4b94      	ldr	r3, [pc, #592]	; (80071f8 <_dtoa_r+0x2e8>)
 8006fa6:	9301      	str	r3, [sp, #4]
 8006fa8:	3308      	adds	r3, #8
 8006faa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	9801      	ldr	r0, [sp, #4]
 8006fb0:	b011      	add	sp, #68	; 0x44
 8006fb2:	ecbd 8b02 	vpop	{d8}
 8006fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fba:	4b8e      	ldr	r3, [pc, #568]	; (80071f4 <_dtoa_r+0x2e4>)
 8006fbc:	9301      	str	r3, [sp, #4]
 8006fbe:	3303      	adds	r3, #3
 8006fc0:	e7f3      	b.n	8006faa <_dtoa_r+0x9a>
 8006fc2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006fc6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fce:	d10b      	bne.n	8006fe8 <_dtoa_r+0xd8>
 8006fd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	6013      	str	r3, [r2, #0]
 8006fd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 84d9 	beq.w	8007990 <_dtoa_r+0xa80>
 8006fde:	4887      	ldr	r0, [pc, #540]	; (80071fc <_dtoa_r+0x2ec>)
 8006fe0:	6018      	str	r0, [r3, #0]
 8006fe2:	1e43      	subs	r3, r0, #1
 8006fe4:	9301      	str	r3, [sp, #4]
 8006fe6:	e7e2      	b.n	8006fae <_dtoa_r+0x9e>
 8006fe8:	a90f      	add	r1, sp, #60	; 0x3c
 8006fea:	aa0e      	add	r2, sp, #56	; 0x38
 8006fec:	4630      	mov	r0, r6
 8006fee:	eeb0 0b48 	vmov.f64	d0, d8
 8006ff2:	f001 f841 	bl	8008078 <__d2b>
 8006ff6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006ffe:	2900      	cmp	r1, #0
 8007000:	d046      	beq.n	8007090 <_dtoa_r+0x180>
 8007002:	ee18 4a90 	vmov	r4, s17
 8007006:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800700a:	ec53 2b18 	vmov	r2, r3, d8
 800700e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007012:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007016:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800701a:	2400      	movs	r4, #0
 800701c:	ec43 2b16 	vmov	d6, r2, r3
 8007020:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007024:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80071d0 <_dtoa_r+0x2c0>
 8007028:	ee36 7b47 	vsub.f64	d7, d6, d7
 800702c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80071d8 <_dtoa_r+0x2c8>
 8007030:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007034:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80071e0 <_dtoa_r+0x2d0>
 8007038:	ee07 1a90 	vmov	s15, r1
 800703c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007040:	eeb0 7b46 	vmov.f64	d7, d6
 8007044:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007048:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800704c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007054:	ee16 ba90 	vmov	fp, s13
 8007058:	940a      	str	r4, [sp, #40]	; 0x28
 800705a:	d508      	bpl.n	800706e <_dtoa_r+0x15e>
 800705c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007060:	eeb4 6b47 	vcmp.f64	d6, d7
 8007064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007068:	bf18      	it	ne
 800706a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800706e:	f1bb 0f16 	cmp.w	fp, #22
 8007072:	d82f      	bhi.n	80070d4 <_dtoa_r+0x1c4>
 8007074:	4b62      	ldr	r3, [pc, #392]	; (8007200 <_dtoa_r+0x2f0>)
 8007076:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800707a:	ed93 7b00 	vldr	d7, [r3]
 800707e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007086:	d501      	bpl.n	800708c <_dtoa_r+0x17c>
 8007088:	f10b 3bff 	add.w	fp, fp, #4294967295
 800708c:	2300      	movs	r3, #0
 800708e:	e022      	b.n	80070d6 <_dtoa_r+0x1c6>
 8007090:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007092:	4401      	add	r1, r0
 8007094:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007098:	2b20      	cmp	r3, #32
 800709a:	bfc1      	itttt	gt
 800709c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80070a0:	fa04 f303 	lslgt.w	r3, r4, r3
 80070a4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80070a8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80070ac:	bfd6      	itet	le
 80070ae:	f1c3 0320 	rsble	r3, r3, #32
 80070b2:	ea43 0808 	orrgt.w	r8, r3, r8
 80070b6:	fa08 f803 	lslle.w	r8, r8, r3
 80070ba:	ee07 8a90 	vmov	s15, r8
 80070be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80070c2:	3901      	subs	r1, #1
 80070c4:	ee17 4a90 	vmov	r4, s15
 80070c8:	ec53 2b17 	vmov	r2, r3, d7
 80070cc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80070d0:	2401      	movs	r4, #1
 80070d2:	e7a3      	b.n	800701c <_dtoa_r+0x10c>
 80070d4:	2301      	movs	r3, #1
 80070d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80070d8:	1a43      	subs	r3, r0, r1
 80070da:	1e5a      	subs	r2, r3, #1
 80070dc:	bf45      	ittet	mi
 80070de:	f1c3 0301 	rsbmi	r3, r3, #1
 80070e2:	9304      	strmi	r3, [sp, #16]
 80070e4:	2300      	movpl	r3, #0
 80070e6:	2300      	movmi	r3, #0
 80070e8:	9205      	str	r2, [sp, #20]
 80070ea:	bf54      	ite	pl
 80070ec:	9304      	strpl	r3, [sp, #16]
 80070ee:	9305      	strmi	r3, [sp, #20]
 80070f0:	f1bb 0f00 	cmp.w	fp, #0
 80070f4:	db18      	blt.n	8007128 <_dtoa_r+0x218>
 80070f6:	9b05      	ldr	r3, [sp, #20]
 80070f8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80070fc:	445b      	add	r3, fp
 80070fe:	9305      	str	r3, [sp, #20]
 8007100:	2300      	movs	r3, #0
 8007102:	9a06      	ldr	r2, [sp, #24]
 8007104:	2a09      	cmp	r2, #9
 8007106:	d849      	bhi.n	800719c <_dtoa_r+0x28c>
 8007108:	2a05      	cmp	r2, #5
 800710a:	bfc4      	itt	gt
 800710c:	3a04      	subgt	r2, #4
 800710e:	9206      	strgt	r2, [sp, #24]
 8007110:	9a06      	ldr	r2, [sp, #24]
 8007112:	f1a2 0202 	sub.w	r2, r2, #2
 8007116:	bfcc      	ite	gt
 8007118:	2400      	movgt	r4, #0
 800711a:	2401      	movle	r4, #1
 800711c:	2a03      	cmp	r2, #3
 800711e:	d848      	bhi.n	80071b2 <_dtoa_r+0x2a2>
 8007120:	e8df f002 	tbb	[pc, r2]
 8007124:	3a2c2e0b 	.word	0x3a2c2e0b
 8007128:	9b04      	ldr	r3, [sp, #16]
 800712a:	2200      	movs	r2, #0
 800712c:	eba3 030b 	sub.w	r3, r3, fp
 8007130:	9304      	str	r3, [sp, #16]
 8007132:	9209      	str	r2, [sp, #36]	; 0x24
 8007134:	f1cb 0300 	rsb	r3, fp, #0
 8007138:	e7e3      	b.n	8007102 <_dtoa_r+0x1f2>
 800713a:	2200      	movs	r2, #0
 800713c:	9207      	str	r2, [sp, #28]
 800713e:	9a08      	ldr	r2, [sp, #32]
 8007140:	2a00      	cmp	r2, #0
 8007142:	dc39      	bgt.n	80071b8 <_dtoa_r+0x2a8>
 8007144:	f04f 0a01 	mov.w	sl, #1
 8007148:	46d1      	mov	r9, sl
 800714a:	4652      	mov	r2, sl
 800714c:	f8cd a020 	str.w	sl, [sp, #32]
 8007150:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007152:	2100      	movs	r1, #0
 8007154:	6079      	str	r1, [r7, #4]
 8007156:	2004      	movs	r0, #4
 8007158:	f100 0c14 	add.w	ip, r0, #20
 800715c:	4594      	cmp	ip, r2
 800715e:	6879      	ldr	r1, [r7, #4]
 8007160:	d92f      	bls.n	80071c2 <_dtoa_r+0x2b2>
 8007162:	4630      	mov	r0, r6
 8007164:	930d      	str	r3, [sp, #52]	; 0x34
 8007166:	f000 fc5f 	bl	8007a28 <_Balloc>
 800716a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800716c:	9001      	str	r0, [sp, #4]
 800716e:	4602      	mov	r2, r0
 8007170:	2800      	cmp	r0, #0
 8007172:	d149      	bne.n	8007208 <_dtoa_r+0x2f8>
 8007174:	4b23      	ldr	r3, [pc, #140]	; (8007204 <_dtoa_r+0x2f4>)
 8007176:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800717a:	e6e1      	b.n	8006f40 <_dtoa_r+0x30>
 800717c:	2201      	movs	r2, #1
 800717e:	e7dd      	b.n	800713c <_dtoa_r+0x22c>
 8007180:	2200      	movs	r2, #0
 8007182:	9207      	str	r2, [sp, #28]
 8007184:	9a08      	ldr	r2, [sp, #32]
 8007186:	eb0b 0a02 	add.w	sl, fp, r2
 800718a:	f10a 0901 	add.w	r9, sl, #1
 800718e:	464a      	mov	r2, r9
 8007190:	2a01      	cmp	r2, #1
 8007192:	bfb8      	it	lt
 8007194:	2201      	movlt	r2, #1
 8007196:	e7db      	b.n	8007150 <_dtoa_r+0x240>
 8007198:	2201      	movs	r2, #1
 800719a:	e7f2      	b.n	8007182 <_dtoa_r+0x272>
 800719c:	2401      	movs	r4, #1
 800719e:	2200      	movs	r2, #0
 80071a0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80071a4:	f04f 3aff 	mov.w	sl, #4294967295
 80071a8:	2100      	movs	r1, #0
 80071aa:	46d1      	mov	r9, sl
 80071ac:	2212      	movs	r2, #18
 80071ae:	9108      	str	r1, [sp, #32]
 80071b0:	e7ce      	b.n	8007150 <_dtoa_r+0x240>
 80071b2:	2201      	movs	r2, #1
 80071b4:	9207      	str	r2, [sp, #28]
 80071b6:	e7f5      	b.n	80071a4 <_dtoa_r+0x294>
 80071b8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80071bc:	46d1      	mov	r9, sl
 80071be:	4652      	mov	r2, sl
 80071c0:	e7c6      	b.n	8007150 <_dtoa_r+0x240>
 80071c2:	3101      	adds	r1, #1
 80071c4:	6079      	str	r1, [r7, #4]
 80071c6:	0040      	lsls	r0, r0, #1
 80071c8:	e7c6      	b.n	8007158 <_dtoa_r+0x248>
 80071ca:	bf00      	nop
 80071cc:	f3af 8000 	nop.w
 80071d0:	636f4361 	.word	0x636f4361
 80071d4:	3fd287a7 	.word	0x3fd287a7
 80071d8:	8b60c8b3 	.word	0x8b60c8b3
 80071dc:	3fc68a28 	.word	0x3fc68a28
 80071e0:	509f79fb 	.word	0x509f79fb
 80071e4:	3fd34413 	.word	0x3fd34413
 80071e8:	08009451 	.word	0x08009451
 80071ec:	08009468 	.word	0x08009468
 80071f0:	7ff00000 	.word	0x7ff00000
 80071f4:	0800944d 	.word	0x0800944d
 80071f8:	08009444 	.word	0x08009444
 80071fc:	08009421 	.word	0x08009421
 8007200:	08009558 	.word	0x08009558
 8007204:	080094c3 	.word	0x080094c3
 8007208:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800720a:	9901      	ldr	r1, [sp, #4]
 800720c:	6011      	str	r1, [r2, #0]
 800720e:	f1b9 0f0e 	cmp.w	r9, #14
 8007212:	d86c      	bhi.n	80072ee <_dtoa_r+0x3de>
 8007214:	2c00      	cmp	r4, #0
 8007216:	d06a      	beq.n	80072ee <_dtoa_r+0x3de>
 8007218:	f1bb 0f00 	cmp.w	fp, #0
 800721c:	f340 80a0 	ble.w	8007360 <_dtoa_r+0x450>
 8007220:	49c1      	ldr	r1, [pc, #772]	; (8007528 <_dtoa_r+0x618>)
 8007222:	f00b 020f 	and.w	r2, fp, #15
 8007226:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800722a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800722e:	ed92 7b00 	vldr	d7, [r2]
 8007232:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007236:	f000 8087 	beq.w	8007348 <_dtoa_r+0x438>
 800723a:	4abc      	ldr	r2, [pc, #752]	; (800752c <_dtoa_r+0x61c>)
 800723c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007240:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007244:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007248:	f001 010f 	and.w	r1, r1, #15
 800724c:	2203      	movs	r2, #3
 800724e:	48b7      	ldr	r0, [pc, #732]	; (800752c <_dtoa_r+0x61c>)
 8007250:	2900      	cmp	r1, #0
 8007252:	d17b      	bne.n	800734c <_dtoa_r+0x43c>
 8007254:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007258:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800725c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007260:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007262:	2900      	cmp	r1, #0
 8007264:	f000 80a2 	beq.w	80073ac <_dtoa_r+0x49c>
 8007268:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800726c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007270:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007278:	f140 8098 	bpl.w	80073ac <_dtoa_r+0x49c>
 800727c:	f1b9 0f00 	cmp.w	r9, #0
 8007280:	f000 8094 	beq.w	80073ac <_dtoa_r+0x49c>
 8007284:	f1ba 0f00 	cmp.w	sl, #0
 8007288:	dd2f      	ble.n	80072ea <_dtoa_r+0x3da>
 800728a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800728e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007292:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007296:	f10b 37ff 	add.w	r7, fp, #4294967295
 800729a:	3201      	adds	r2, #1
 800729c:	4650      	mov	r0, sl
 800729e:	ed9d 6b02 	vldr	d6, [sp, #8]
 80072a2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80072a6:	ee07 2a90 	vmov	s15, r2
 80072aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80072ae:	eea7 5b06 	vfma.f64	d5, d7, d6
 80072b2:	ee15 4a90 	vmov	r4, s11
 80072b6:	ec52 1b15 	vmov	r1, r2, d5
 80072ba:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80072be:	2800      	cmp	r0, #0
 80072c0:	d177      	bne.n	80073b2 <_dtoa_r+0x4a2>
 80072c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80072c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80072ca:	ec42 1b17 	vmov	d7, r1, r2
 80072ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80072d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d6:	f300 8263 	bgt.w	80077a0 <_dtoa_r+0x890>
 80072da:	eeb1 7b47 	vneg.f64	d7, d7
 80072de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80072e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e6:	f100 8258 	bmi.w	800779a <_dtoa_r+0x88a>
 80072ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80072ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072f0:	2a00      	cmp	r2, #0
 80072f2:	f2c0 811d 	blt.w	8007530 <_dtoa_r+0x620>
 80072f6:	f1bb 0f0e 	cmp.w	fp, #14
 80072fa:	f300 8119 	bgt.w	8007530 <_dtoa_r+0x620>
 80072fe:	4b8a      	ldr	r3, [pc, #552]	; (8007528 <_dtoa_r+0x618>)
 8007300:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007304:	ed93 6b00 	vldr	d6, [r3]
 8007308:	9b08      	ldr	r3, [sp, #32]
 800730a:	2b00      	cmp	r3, #0
 800730c:	f280 80b7 	bge.w	800747e <_dtoa_r+0x56e>
 8007310:	f1b9 0f00 	cmp.w	r9, #0
 8007314:	f300 80b3 	bgt.w	800747e <_dtoa_r+0x56e>
 8007318:	f040 823f 	bne.w	800779a <_dtoa_r+0x88a>
 800731c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007320:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007324:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007328:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800732c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007330:	464c      	mov	r4, r9
 8007332:	464f      	mov	r7, r9
 8007334:	f280 8215 	bge.w	8007762 <_dtoa_r+0x852>
 8007338:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800733c:	2331      	movs	r3, #49	; 0x31
 800733e:	f808 3b01 	strb.w	r3, [r8], #1
 8007342:	f10b 0b01 	add.w	fp, fp, #1
 8007346:	e211      	b.n	800776c <_dtoa_r+0x85c>
 8007348:	2202      	movs	r2, #2
 800734a:	e780      	b.n	800724e <_dtoa_r+0x33e>
 800734c:	07cc      	lsls	r4, r1, #31
 800734e:	d504      	bpl.n	800735a <_dtoa_r+0x44a>
 8007350:	ed90 6b00 	vldr	d6, [r0]
 8007354:	3201      	adds	r2, #1
 8007356:	ee27 7b06 	vmul.f64	d7, d7, d6
 800735a:	1049      	asrs	r1, r1, #1
 800735c:	3008      	adds	r0, #8
 800735e:	e777      	b.n	8007250 <_dtoa_r+0x340>
 8007360:	d022      	beq.n	80073a8 <_dtoa_r+0x498>
 8007362:	f1cb 0100 	rsb	r1, fp, #0
 8007366:	4a70      	ldr	r2, [pc, #448]	; (8007528 <_dtoa_r+0x618>)
 8007368:	f001 000f 	and.w	r0, r1, #15
 800736c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007370:	ed92 7b00 	vldr	d7, [r2]
 8007374:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007378:	ed8d 7b02 	vstr	d7, [sp, #8]
 800737c:	486b      	ldr	r0, [pc, #428]	; (800752c <_dtoa_r+0x61c>)
 800737e:	1109      	asrs	r1, r1, #4
 8007380:	2400      	movs	r4, #0
 8007382:	2202      	movs	r2, #2
 8007384:	b929      	cbnz	r1, 8007392 <_dtoa_r+0x482>
 8007386:	2c00      	cmp	r4, #0
 8007388:	f43f af6a 	beq.w	8007260 <_dtoa_r+0x350>
 800738c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007390:	e766      	b.n	8007260 <_dtoa_r+0x350>
 8007392:	07cf      	lsls	r7, r1, #31
 8007394:	d505      	bpl.n	80073a2 <_dtoa_r+0x492>
 8007396:	ed90 6b00 	vldr	d6, [r0]
 800739a:	3201      	adds	r2, #1
 800739c:	2401      	movs	r4, #1
 800739e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80073a2:	1049      	asrs	r1, r1, #1
 80073a4:	3008      	adds	r0, #8
 80073a6:	e7ed      	b.n	8007384 <_dtoa_r+0x474>
 80073a8:	2202      	movs	r2, #2
 80073aa:	e759      	b.n	8007260 <_dtoa_r+0x350>
 80073ac:	465f      	mov	r7, fp
 80073ae:	4648      	mov	r0, r9
 80073b0:	e775      	b.n	800729e <_dtoa_r+0x38e>
 80073b2:	ec42 1b17 	vmov	d7, r1, r2
 80073b6:	4a5c      	ldr	r2, [pc, #368]	; (8007528 <_dtoa_r+0x618>)
 80073b8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80073bc:	ed12 4b02 	vldr	d4, [r2, #-8]
 80073c0:	9a01      	ldr	r2, [sp, #4]
 80073c2:	1814      	adds	r4, r2, r0
 80073c4:	9a07      	ldr	r2, [sp, #28]
 80073c6:	b352      	cbz	r2, 800741e <_dtoa_r+0x50e>
 80073c8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80073cc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80073d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80073d4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80073d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80073dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80073e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80073e4:	ee14 2a90 	vmov	r2, s9
 80073e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80073ec:	3230      	adds	r2, #48	; 0x30
 80073ee:	ee36 6b45 	vsub.f64	d6, d6, d5
 80073f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80073f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073fa:	f808 2b01 	strb.w	r2, [r8], #1
 80073fe:	d439      	bmi.n	8007474 <_dtoa_r+0x564>
 8007400:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007404:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800740c:	d472      	bmi.n	80074f4 <_dtoa_r+0x5e4>
 800740e:	45a0      	cmp	r8, r4
 8007410:	f43f af6b 	beq.w	80072ea <_dtoa_r+0x3da>
 8007414:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007418:	ee26 6b03 	vmul.f64	d6, d6, d3
 800741c:	e7e0      	b.n	80073e0 <_dtoa_r+0x4d0>
 800741e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007422:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007426:	4621      	mov	r1, r4
 8007428:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800742c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007430:	ee14 2a90 	vmov	r2, s9
 8007434:	3230      	adds	r2, #48	; 0x30
 8007436:	f808 2b01 	strb.w	r2, [r8], #1
 800743a:	45a0      	cmp	r8, r4
 800743c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007440:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007444:	d118      	bne.n	8007478 <_dtoa_r+0x568>
 8007446:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800744a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800744e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007456:	dc4d      	bgt.n	80074f4 <_dtoa_r+0x5e4>
 8007458:	ee35 7b47 	vsub.f64	d7, d5, d7
 800745c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007464:	f57f af41 	bpl.w	80072ea <_dtoa_r+0x3da>
 8007468:	4688      	mov	r8, r1
 800746a:	3901      	subs	r1, #1
 800746c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007470:	2b30      	cmp	r3, #48	; 0x30
 8007472:	d0f9      	beq.n	8007468 <_dtoa_r+0x558>
 8007474:	46bb      	mov	fp, r7
 8007476:	e02a      	b.n	80074ce <_dtoa_r+0x5be>
 8007478:	ee26 6b03 	vmul.f64	d6, d6, d3
 800747c:	e7d6      	b.n	800742c <_dtoa_r+0x51c>
 800747e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007482:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007486:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800748a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800748e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007492:	ee15 3a10 	vmov	r3, s10
 8007496:	3330      	adds	r3, #48	; 0x30
 8007498:	f808 3b01 	strb.w	r3, [r8], #1
 800749c:	9b01      	ldr	r3, [sp, #4]
 800749e:	eba8 0303 	sub.w	r3, r8, r3
 80074a2:	4599      	cmp	r9, r3
 80074a4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80074a8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80074ac:	d133      	bne.n	8007516 <_dtoa_r+0x606>
 80074ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 80074b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80074b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ba:	dc1a      	bgt.n	80074f2 <_dtoa_r+0x5e2>
 80074bc:	eeb4 7b46 	vcmp.f64	d7, d6
 80074c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c4:	d103      	bne.n	80074ce <_dtoa_r+0x5be>
 80074c6:	ee15 3a10 	vmov	r3, s10
 80074ca:	07d9      	lsls	r1, r3, #31
 80074cc:	d411      	bmi.n	80074f2 <_dtoa_r+0x5e2>
 80074ce:	4629      	mov	r1, r5
 80074d0:	4630      	mov	r0, r6
 80074d2:	f000 fae9 	bl	8007aa8 <_Bfree>
 80074d6:	2300      	movs	r3, #0
 80074d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074da:	f888 3000 	strb.w	r3, [r8]
 80074de:	f10b 0301 	add.w	r3, fp, #1
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f43f ad61 	beq.w	8006fae <_dtoa_r+0x9e>
 80074ec:	f8c3 8000 	str.w	r8, [r3]
 80074f0:	e55d      	b.n	8006fae <_dtoa_r+0x9e>
 80074f2:	465f      	mov	r7, fp
 80074f4:	4643      	mov	r3, r8
 80074f6:	4698      	mov	r8, r3
 80074f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074fc:	2a39      	cmp	r2, #57	; 0x39
 80074fe:	d106      	bne.n	800750e <_dtoa_r+0x5fe>
 8007500:	9a01      	ldr	r2, [sp, #4]
 8007502:	429a      	cmp	r2, r3
 8007504:	d1f7      	bne.n	80074f6 <_dtoa_r+0x5e6>
 8007506:	9901      	ldr	r1, [sp, #4]
 8007508:	2230      	movs	r2, #48	; 0x30
 800750a:	3701      	adds	r7, #1
 800750c:	700a      	strb	r2, [r1, #0]
 800750e:	781a      	ldrb	r2, [r3, #0]
 8007510:	3201      	adds	r2, #1
 8007512:	701a      	strb	r2, [r3, #0]
 8007514:	e7ae      	b.n	8007474 <_dtoa_r+0x564>
 8007516:	ee27 7b04 	vmul.f64	d7, d7, d4
 800751a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800751e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007522:	d1b2      	bne.n	800748a <_dtoa_r+0x57a>
 8007524:	e7d3      	b.n	80074ce <_dtoa_r+0x5be>
 8007526:	bf00      	nop
 8007528:	08009558 	.word	0x08009558
 800752c:	08009530 	.word	0x08009530
 8007530:	9907      	ldr	r1, [sp, #28]
 8007532:	2900      	cmp	r1, #0
 8007534:	f000 80d0 	beq.w	80076d8 <_dtoa_r+0x7c8>
 8007538:	9906      	ldr	r1, [sp, #24]
 800753a:	2901      	cmp	r1, #1
 800753c:	f300 80b4 	bgt.w	80076a8 <_dtoa_r+0x798>
 8007540:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007542:	2900      	cmp	r1, #0
 8007544:	f000 80ac 	beq.w	80076a0 <_dtoa_r+0x790>
 8007548:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800754c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007550:	461c      	mov	r4, r3
 8007552:	930a      	str	r3, [sp, #40]	; 0x28
 8007554:	9b04      	ldr	r3, [sp, #16]
 8007556:	4413      	add	r3, r2
 8007558:	9304      	str	r3, [sp, #16]
 800755a:	9b05      	ldr	r3, [sp, #20]
 800755c:	2101      	movs	r1, #1
 800755e:	4413      	add	r3, r2
 8007560:	4630      	mov	r0, r6
 8007562:	9305      	str	r3, [sp, #20]
 8007564:	f000 fb58 	bl	8007c18 <__i2b>
 8007568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800756a:	4607      	mov	r7, r0
 800756c:	f1b8 0f00 	cmp.w	r8, #0
 8007570:	dd0d      	ble.n	800758e <_dtoa_r+0x67e>
 8007572:	9a05      	ldr	r2, [sp, #20]
 8007574:	2a00      	cmp	r2, #0
 8007576:	dd0a      	ble.n	800758e <_dtoa_r+0x67e>
 8007578:	4542      	cmp	r2, r8
 800757a:	9904      	ldr	r1, [sp, #16]
 800757c:	bfa8      	it	ge
 800757e:	4642      	movge	r2, r8
 8007580:	1a89      	subs	r1, r1, r2
 8007582:	9104      	str	r1, [sp, #16]
 8007584:	9905      	ldr	r1, [sp, #20]
 8007586:	eba8 0802 	sub.w	r8, r8, r2
 800758a:	1a8a      	subs	r2, r1, r2
 800758c:	9205      	str	r2, [sp, #20]
 800758e:	b303      	cbz	r3, 80075d2 <_dtoa_r+0x6c2>
 8007590:	9a07      	ldr	r2, [sp, #28]
 8007592:	2a00      	cmp	r2, #0
 8007594:	f000 80a5 	beq.w	80076e2 <_dtoa_r+0x7d2>
 8007598:	2c00      	cmp	r4, #0
 800759a:	dd13      	ble.n	80075c4 <_dtoa_r+0x6b4>
 800759c:	4639      	mov	r1, r7
 800759e:	4622      	mov	r2, r4
 80075a0:	4630      	mov	r0, r6
 80075a2:	930d      	str	r3, [sp, #52]	; 0x34
 80075a4:	f000 fbf8 	bl	8007d98 <__pow5mult>
 80075a8:	462a      	mov	r2, r5
 80075aa:	4601      	mov	r1, r0
 80075ac:	4607      	mov	r7, r0
 80075ae:	4630      	mov	r0, r6
 80075b0:	f000 fb48 	bl	8007c44 <__multiply>
 80075b4:	4629      	mov	r1, r5
 80075b6:	900a      	str	r0, [sp, #40]	; 0x28
 80075b8:	4630      	mov	r0, r6
 80075ba:	f000 fa75 	bl	8007aa8 <_Bfree>
 80075be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075c2:	4615      	mov	r5, r2
 80075c4:	1b1a      	subs	r2, r3, r4
 80075c6:	d004      	beq.n	80075d2 <_dtoa_r+0x6c2>
 80075c8:	4629      	mov	r1, r5
 80075ca:	4630      	mov	r0, r6
 80075cc:	f000 fbe4 	bl	8007d98 <__pow5mult>
 80075d0:	4605      	mov	r5, r0
 80075d2:	2101      	movs	r1, #1
 80075d4:	4630      	mov	r0, r6
 80075d6:	f000 fb1f 	bl	8007c18 <__i2b>
 80075da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075dc:	2b00      	cmp	r3, #0
 80075de:	4604      	mov	r4, r0
 80075e0:	f340 8081 	ble.w	80076e6 <_dtoa_r+0x7d6>
 80075e4:	461a      	mov	r2, r3
 80075e6:	4601      	mov	r1, r0
 80075e8:	4630      	mov	r0, r6
 80075ea:	f000 fbd5 	bl	8007d98 <__pow5mult>
 80075ee:	9b06      	ldr	r3, [sp, #24]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	4604      	mov	r4, r0
 80075f4:	dd7a      	ble.n	80076ec <_dtoa_r+0x7dc>
 80075f6:	2300      	movs	r3, #0
 80075f8:	930a      	str	r3, [sp, #40]	; 0x28
 80075fa:	6922      	ldr	r2, [r4, #16]
 80075fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007600:	6910      	ldr	r0, [r2, #16]
 8007602:	f000 fab9 	bl	8007b78 <__hi0bits>
 8007606:	f1c0 0020 	rsb	r0, r0, #32
 800760a:	9b05      	ldr	r3, [sp, #20]
 800760c:	4418      	add	r0, r3
 800760e:	f010 001f 	ands.w	r0, r0, #31
 8007612:	f000 808c 	beq.w	800772e <_dtoa_r+0x81e>
 8007616:	f1c0 0220 	rsb	r2, r0, #32
 800761a:	2a04      	cmp	r2, #4
 800761c:	f340 8085 	ble.w	800772a <_dtoa_r+0x81a>
 8007620:	f1c0 001c 	rsb	r0, r0, #28
 8007624:	9b04      	ldr	r3, [sp, #16]
 8007626:	4403      	add	r3, r0
 8007628:	9304      	str	r3, [sp, #16]
 800762a:	9b05      	ldr	r3, [sp, #20]
 800762c:	4403      	add	r3, r0
 800762e:	4480      	add	r8, r0
 8007630:	9305      	str	r3, [sp, #20]
 8007632:	9b04      	ldr	r3, [sp, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	dd05      	ble.n	8007644 <_dtoa_r+0x734>
 8007638:	4629      	mov	r1, r5
 800763a:	461a      	mov	r2, r3
 800763c:	4630      	mov	r0, r6
 800763e:	f000 fc05 	bl	8007e4c <__lshift>
 8007642:	4605      	mov	r5, r0
 8007644:	9b05      	ldr	r3, [sp, #20]
 8007646:	2b00      	cmp	r3, #0
 8007648:	dd05      	ble.n	8007656 <_dtoa_r+0x746>
 800764a:	4621      	mov	r1, r4
 800764c:	461a      	mov	r2, r3
 800764e:	4630      	mov	r0, r6
 8007650:	f000 fbfc 	bl	8007e4c <__lshift>
 8007654:	4604      	mov	r4, r0
 8007656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007658:	2b00      	cmp	r3, #0
 800765a:	d06a      	beq.n	8007732 <_dtoa_r+0x822>
 800765c:	4621      	mov	r1, r4
 800765e:	4628      	mov	r0, r5
 8007660:	f000 fc64 	bl	8007f2c <__mcmp>
 8007664:	2800      	cmp	r0, #0
 8007666:	da64      	bge.n	8007732 <_dtoa_r+0x822>
 8007668:	2300      	movs	r3, #0
 800766a:	4629      	mov	r1, r5
 800766c:	220a      	movs	r2, #10
 800766e:	4630      	mov	r0, r6
 8007670:	f000 fa3c 	bl	8007aec <__multadd>
 8007674:	9b07      	ldr	r3, [sp, #28]
 8007676:	f10b 3bff 	add.w	fp, fp, #4294967295
 800767a:	4605      	mov	r5, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 8191 	beq.w	80079a4 <_dtoa_r+0xa94>
 8007682:	4639      	mov	r1, r7
 8007684:	2300      	movs	r3, #0
 8007686:	220a      	movs	r2, #10
 8007688:	4630      	mov	r0, r6
 800768a:	f000 fa2f 	bl	8007aec <__multadd>
 800768e:	f1ba 0f00 	cmp.w	sl, #0
 8007692:	4607      	mov	r7, r0
 8007694:	f300 808d 	bgt.w	80077b2 <_dtoa_r+0x8a2>
 8007698:	9b06      	ldr	r3, [sp, #24]
 800769a:	2b02      	cmp	r3, #2
 800769c:	dc50      	bgt.n	8007740 <_dtoa_r+0x830>
 800769e:	e088      	b.n	80077b2 <_dtoa_r+0x8a2>
 80076a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80076a6:	e751      	b.n	800754c <_dtoa_r+0x63c>
 80076a8:	f109 34ff 	add.w	r4, r9, #4294967295
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	bfbf      	itttt	lt
 80076b0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80076b2:	1ae3      	sublt	r3, r4, r3
 80076b4:	18d2      	addlt	r2, r2, r3
 80076b6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80076b8:	bfb6      	itet	lt
 80076ba:	4623      	movlt	r3, r4
 80076bc:	1b1c      	subge	r4, r3, r4
 80076be:	2400      	movlt	r4, #0
 80076c0:	f1b9 0f00 	cmp.w	r9, #0
 80076c4:	bfb5      	itete	lt
 80076c6:	9a04      	ldrlt	r2, [sp, #16]
 80076c8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80076cc:	eba2 0809 	sublt.w	r8, r2, r9
 80076d0:	464a      	movge	r2, r9
 80076d2:	bfb8      	it	lt
 80076d4:	2200      	movlt	r2, #0
 80076d6:	e73c      	b.n	8007552 <_dtoa_r+0x642>
 80076d8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80076dc:	9f07      	ldr	r7, [sp, #28]
 80076de:	461c      	mov	r4, r3
 80076e0:	e744      	b.n	800756c <_dtoa_r+0x65c>
 80076e2:	461a      	mov	r2, r3
 80076e4:	e770      	b.n	80075c8 <_dtoa_r+0x6b8>
 80076e6:	9b06      	ldr	r3, [sp, #24]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	dc18      	bgt.n	800771e <_dtoa_r+0x80e>
 80076ec:	9b02      	ldr	r3, [sp, #8]
 80076ee:	b9b3      	cbnz	r3, 800771e <_dtoa_r+0x80e>
 80076f0:	9b03      	ldr	r3, [sp, #12]
 80076f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80076f6:	b9a2      	cbnz	r2, 8007722 <_dtoa_r+0x812>
 80076f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80076fc:	0d12      	lsrs	r2, r2, #20
 80076fe:	0512      	lsls	r2, r2, #20
 8007700:	b18a      	cbz	r2, 8007726 <_dtoa_r+0x816>
 8007702:	9b04      	ldr	r3, [sp, #16]
 8007704:	3301      	adds	r3, #1
 8007706:	9304      	str	r3, [sp, #16]
 8007708:	9b05      	ldr	r3, [sp, #20]
 800770a:	3301      	adds	r3, #1
 800770c:	9305      	str	r3, [sp, #20]
 800770e:	2301      	movs	r3, #1
 8007710:	930a      	str	r3, [sp, #40]	; 0x28
 8007712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007714:	2b00      	cmp	r3, #0
 8007716:	f47f af70 	bne.w	80075fa <_dtoa_r+0x6ea>
 800771a:	2001      	movs	r0, #1
 800771c:	e775      	b.n	800760a <_dtoa_r+0x6fa>
 800771e:	2300      	movs	r3, #0
 8007720:	e7f6      	b.n	8007710 <_dtoa_r+0x800>
 8007722:	9b02      	ldr	r3, [sp, #8]
 8007724:	e7f4      	b.n	8007710 <_dtoa_r+0x800>
 8007726:	920a      	str	r2, [sp, #40]	; 0x28
 8007728:	e7f3      	b.n	8007712 <_dtoa_r+0x802>
 800772a:	d082      	beq.n	8007632 <_dtoa_r+0x722>
 800772c:	4610      	mov	r0, r2
 800772e:	301c      	adds	r0, #28
 8007730:	e778      	b.n	8007624 <_dtoa_r+0x714>
 8007732:	f1b9 0f00 	cmp.w	r9, #0
 8007736:	dc37      	bgt.n	80077a8 <_dtoa_r+0x898>
 8007738:	9b06      	ldr	r3, [sp, #24]
 800773a:	2b02      	cmp	r3, #2
 800773c:	dd34      	ble.n	80077a8 <_dtoa_r+0x898>
 800773e:	46ca      	mov	sl, r9
 8007740:	f1ba 0f00 	cmp.w	sl, #0
 8007744:	d10d      	bne.n	8007762 <_dtoa_r+0x852>
 8007746:	4621      	mov	r1, r4
 8007748:	4653      	mov	r3, sl
 800774a:	2205      	movs	r2, #5
 800774c:	4630      	mov	r0, r6
 800774e:	f000 f9cd 	bl	8007aec <__multadd>
 8007752:	4601      	mov	r1, r0
 8007754:	4604      	mov	r4, r0
 8007756:	4628      	mov	r0, r5
 8007758:	f000 fbe8 	bl	8007f2c <__mcmp>
 800775c:	2800      	cmp	r0, #0
 800775e:	f73f adeb 	bgt.w	8007338 <_dtoa_r+0x428>
 8007762:	9b08      	ldr	r3, [sp, #32]
 8007764:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007768:	ea6f 0b03 	mvn.w	fp, r3
 800776c:	f04f 0900 	mov.w	r9, #0
 8007770:	4621      	mov	r1, r4
 8007772:	4630      	mov	r0, r6
 8007774:	f000 f998 	bl	8007aa8 <_Bfree>
 8007778:	2f00      	cmp	r7, #0
 800777a:	f43f aea8 	beq.w	80074ce <_dtoa_r+0x5be>
 800777e:	f1b9 0f00 	cmp.w	r9, #0
 8007782:	d005      	beq.n	8007790 <_dtoa_r+0x880>
 8007784:	45b9      	cmp	r9, r7
 8007786:	d003      	beq.n	8007790 <_dtoa_r+0x880>
 8007788:	4649      	mov	r1, r9
 800778a:	4630      	mov	r0, r6
 800778c:	f000 f98c 	bl	8007aa8 <_Bfree>
 8007790:	4639      	mov	r1, r7
 8007792:	4630      	mov	r0, r6
 8007794:	f000 f988 	bl	8007aa8 <_Bfree>
 8007798:	e699      	b.n	80074ce <_dtoa_r+0x5be>
 800779a:	2400      	movs	r4, #0
 800779c:	4627      	mov	r7, r4
 800779e:	e7e0      	b.n	8007762 <_dtoa_r+0x852>
 80077a0:	46bb      	mov	fp, r7
 80077a2:	4604      	mov	r4, r0
 80077a4:	4607      	mov	r7, r0
 80077a6:	e5c7      	b.n	8007338 <_dtoa_r+0x428>
 80077a8:	9b07      	ldr	r3, [sp, #28]
 80077aa:	46ca      	mov	sl, r9
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 8100 	beq.w	80079b2 <_dtoa_r+0xaa2>
 80077b2:	f1b8 0f00 	cmp.w	r8, #0
 80077b6:	dd05      	ble.n	80077c4 <_dtoa_r+0x8b4>
 80077b8:	4639      	mov	r1, r7
 80077ba:	4642      	mov	r2, r8
 80077bc:	4630      	mov	r0, r6
 80077be:	f000 fb45 	bl	8007e4c <__lshift>
 80077c2:	4607      	mov	r7, r0
 80077c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d05d      	beq.n	8007886 <_dtoa_r+0x976>
 80077ca:	6879      	ldr	r1, [r7, #4]
 80077cc:	4630      	mov	r0, r6
 80077ce:	f000 f92b 	bl	8007a28 <_Balloc>
 80077d2:	4680      	mov	r8, r0
 80077d4:	b928      	cbnz	r0, 80077e2 <_dtoa_r+0x8d2>
 80077d6:	4b82      	ldr	r3, [pc, #520]	; (80079e0 <_dtoa_r+0xad0>)
 80077d8:	4602      	mov	r2, r0
 80077da:	f240 21ea 	movw	r1, #746	; 0x2ea
 80077de:	f7ff bbaf 	b.w	8006f40 <_dtoa_r+0x30>
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	3202      	adds	r2, #2
 80077e6:	0092      	lsls	r2, r2, #2
 80077e8:	f107 010c 	add.w	r1, r7, #12
 80077ec:	300c      	adds	r0, #12
 80077ee:	f000 f901 	bl	80079f4 <memcpy>
 80077f2:	2201      	movs	r2, #1
 80077f4:	4641      	mov	r1, r8
 80077f6:	4630      	mov	r0, r6
 80077f8:	f000 fb28 	bl	8007e4c <__lshift>
 80077fc:	9b01      	ldr	r3, [sp, #4]
 80077fe:	3301      	adds	r3, #1
 8007800:	9304      	str	r3, [sp, #16]
 8007802:	9b01      	ldr	r3, [sp, #4]
 8007804:	4453      	add	r3, sl
 8007806:	9308      	str	r3, [sp, #32]
 8007808:	9b02      	ldr	r3, [sp, #8]
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	46b9      	mov	r9, r7
 8007810:	9307      	str	r3, [sp, #28]
 8007812:	4607      	mov	r7, r0
 8007814:	9b04      	ldr	r3, [sp, #16]
 8007816:	4621      	mov	r1, r4
 8007818:	3b01      	subs	r3, #1
 800781a:	4628      	mov	r0, r5
 800781c:	9302      	str	r3, [sp, #8]
 800781e:	f7ff fae9 	bl	8006df4 <quorem>
 8007822:	4603      	mov	r3, r0
 8007824:	3330      	adds	r3, #48	; 0x30
 8007826:	9005      	str	r0, [sp, #20]
 8007828:	4649      	mov	r1, r9
 800782a:	4628      	mov	r0, r5
 800782c:	9309      	str	r3, [sp, #36]	; 0x24
 800782e:	f000 fb7d 	bl	8007f2c <__mcmp>
 8007832:	463a      	mov	r2, r7
 8007834:	4682      	mov	sl, r0
 8007836:	4621      	mov	r1, r4
 8007838:	4630      	mov	r0, r6
 800783a:	f000 fb93 	bl	8007f64 <__mdiff>
 800783e:	68c2      	ldr	r2, [r0, #12]
 8007840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007842:	4680      	mov	r8, r0
 8007844:	bb0a      	cbnz	r2, 800788a <_dtoa_r+0x97a>
 8007846:	4601      	mov	r1, r0
 8007848:	4628      	mov	r0, r5
 800784a:	f000 fb6f 	bl	8007f2c <__mcmp>
 800784e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007850:	4602      	mov	r2, r0
 8007852:	4641      	mov	r1, r8
 8007854:	4630      	mov	r0, r6
 8007856:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800785a:	f000 f925 	bl	8007aa8 <_Bfree>
 800785e:	9b06      	ldr	r3, [sp, #24]
 8007860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007862:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007866:	ea43 0102 	orr.w	r1, r3, r2
 800786a:	9b07      	ldr	r3, [sp, #28]
 800786c:	430b      	orrs	r3, r1
 800786e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007870:	d10d      	bne.n	800788e <_dtoa_r+0x97e>
 8007872:	2b39      	cmp	r3, #57	; 0x39
 8007874:	d029      	beq.n	80078ca <_dtoa_r+0x9ba>
 8007876:	f1ba 0f00 	cmp.w	sl, #0
 800787a:	dd01      	ble.n	8007880 <_dtoa_r+0x970>
 800787c:	9b05      	ldr	r3, [sp, #20]
 800787e:	3331      	adds	r3, #49	; 0x31
 8007880:	9a02      	ldr	r2, [sp, #8]
 8007882:	7013      	strb	r3, [r2, #0]
 8007884:	e774      	b.n	8007770 <_dtoa_r+0x860>
 8007886:	4638      	mov	r0, r7
 8007888:	e7b8      	b.n	80077fc <_dtoa_r+0x8ec>
 800788a:	2201      	movs	r2, #1
 800788c:	e7e1      	b.n	8007852 <_dtoa_r+0x942>
 800788e:	f1ba 0f00 	cmp.w	sl, #0
 8007892:	db06      	blt.n	80078a2 <_dtoa_r+0x992>
 8007894:	9906      	ldr	r1, [sp, #24]
 8007896:	ea41 0a0a 	orr.w	sl, r1, sl
 800789a:	9907      	ldr	r1, [sp, #28]
 800789c:	ea5a 0101 	orrs.w	r1, sl, r1
 80078a0:	d120      	bne.n	80078e4 <_dtoa_r+0x9d4>
 80078a2:	2a00      	cmp	r2, #0
 80078a4:	ddec      	ble.n	8007880 <_dtoa_r+0x970>
 80078a6:	4629      	mov	r1, r5
 80078a8:	2201      	movs	r2, #1
 80078aa:	4630      	mov	r0, r6
 80078ac:	9304      	str	r3, [sp, #16]
 80078ae:	f000 facd 	bl	8007e4c <__lshift>
 80078b2:	4621      	mov	r1, r4
 80078b4:	4605      	mov	r5, r0
 80078b6:	f000 fb39 	bl	8007f2c <__mcmp>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	9b04      	ldr	r3, [sp, #16]
 80078be:	dc02      	bgt.n	80078c6 <_dtoa_r+0x9b6>
 80078c0:	d1de      	bne.n	8007880 <_dtoa_r+0x970>
 80078c2:	07da      	lsls	r2, r3, #31
 80078c4:	d5dc      	bpl.n	8007880 <_dtoa_r+0x970>
 80078c6:	2b39      	cmp	r3, #57	; 0x39
 80078c8:	d1d8      	bne.n	800787c <_dtoa_r+0x96c>
 80078ca:	9a02      	ldr	r2, [sp, #8]
 80078cc:	2339      	movs	r3, #57	; 0x39
 80078ce:	7013      	strb	r3, [r2, #0]
 80078d0:	4643      	mov	r3, r8
 80078d2:	4698      	mov	r8, r3
 80078d4:	3b01      	subs	r3, #1
 80078d6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80078da:	2a39      	cmp	r2, #57	; 0x39
 80078dc:	d051      	beq.n	8007982 <_dtoa_r+0xa72>
 80078de:	3201      	adds	r2, #1
 80078e0:	701a      	strb	r2, [r3, #0]
 80078e2:	e745      	b.n	8007770 <_dtoa_r+0x860>
 80078e4:	2a00      	cmp	r2, #0
 80078e6:	dd03      	ble.n	80078f0 <_dtoa_r+0x9e0>
 80078e8:	2b39      	cmp	r3, #57	; 0x39
 80078ea:	d0ee      	beq.n	80078ca <_dtoa_r+0x9ba>
 80078ec:	3301      	adds	r3, #1
 80078ee:	e7c7      	b.n	8007880 <_dtoa_r+0x970>
 80078f0:	9a04      	ldr	r2, [sp, #16]
 80078f2:	9908      	ldr	r1, [sp, #32]
 80078f4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80078f8:	428a      	cmp	r2, r1
 80078fa:	d02b      	beq.n	8007954 <_dtoa_r+0xa44>
 80078fc:	4629      	mov	r1, r5
 80078fe:	2300      	movs	r3, #0
 8007900:	220a      	movs	r2, #10
 8007902:	4630      	mov	r0, r6
 8007904:	f000 f8f2 	bl	8007aec <__multadd>
 8007908:	45b9      	cmp	r9, r7
 800790a:	4605      	mov	r5, r0
 800790c:	f04f 0300 	mov.w	r3, #0
 8007910:	f04f 020a 	mov.w	r2, #10
 8007914:	4649      	mov	r1, r9
 8007916:	4630      	mov	r0, r6
 8007918:	d107      	bne.n	800792a <_dtoa_r+0xa1a>
 800791a:	f000 f8e7 	bl	8007aec <__multadd>
 800791e:	4681      	mov	r9, r0
 8007920:	4607      	mov	r7, r0
 8007922:	9b04      	ldr	r3, [sp, #16]
 8007924:	3301      	adds	r3, #1
 8007926:	9304      	str	r3, [sp, #16]
 8007928:	e774      	b.n	8007814 <_dtoa_r+0x904>
 800792a:	f000 f8df 	bl	8007aec <__multadd>
 800792e:	4639      	mov	r1, r7
 8007930:	4681      	mov	r9, r0
 8007932:	2300      	movs	r3, #0
 8007934:	220a      	movs	r2, #10
 8007936:	4630      	mov	r0, r6
 8007938:	f000 f8d8 	bl	8007aec <__multadd>
 800793c:	4607      	mov	r7, r0
 800793e:	e7f0      	b.n	8007922 <_dtoa_r+0xa12>
 8007940:	f1ba 0f00 	cmp.w	sl, #0
 8007944:	9a01      	ldr	r2, [sp, #4]
 8007946:	bfcc      	ite	gt
 8007948:	46d0      	movgt	r8, sl
 800794a:	f04f 0801 	movle.w	r8, #1
 800794e:	4490      	add	r8, r2
 8007950:	f04f 0900 	mov.w	r9, #0
 8007954:	4629      	mov	r1, r5
 8007956:	2201      	movs	r2, #1
 8007958:	4630      	mov	r0, r6
 800795a:	9302      	str	r3, [sp, #8]
 800795c:	f000 fa76 	bl	8007e4c <__lshift>
 8007960:	4621      	mov	r1, r4
 8007962:	4605      	mov	r5, r0
 8007964:	f000 fae2 	bl	8007f2c <__mcmp>
 8007968:	2800      	cmp	r0, #0
 800796a:	dcb1      	bgt.n	80078d0 <_dtoa_r+0x9c0>
 800796c:	d102      	bne.n	8007974 <_dtoa_r+0xa64>
 800796e:	9b02      	ldr	r3, [sp, #8]
 8007970:	07db      	lsls	r3, r3, #31
 8007972:	d4ad      	bmi.n	80078d0 <_dtoa_r+0x9c0>
 8007974:	4643      	mov	r3, r8
 8007976:	4698      	mov	r8, r3
 8007978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800797c:	2a30      	cmp	r2, #48	; 0x30
 800797e:	d0fa      	beq.n	8007976 <_dtoa_r+0xa66>
 8007980:	e6f6      	b.n	8007770 <_dtoa_r+0x860>
 8007982:	9a01      	ldr	r2, [sp, #4]
 8007984:	429a      	cmp	r2, r3
 8007986:	d1a4      	bne.n	80078d2 <_dtoa_r+0x9c2>
 8007988:	f10b 0b01 	add.w	fp, fp, #1
 800798c:	2331      	movs	r3, #49	; 0x31
 800798e:	e778      	b.n	8007882 <_dtoa_r+0x972>
 8007990:	4b14      	ldr	r3, [pc, #80]	; (80079e4 <_dtoa_r+0xad4>)
 8007992:	f7ff bb27 	b.w	8006fe4 <_dtoa_r+0xd4>
 8007996:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007998:	2b00      	cmp	r3, #0
 800799a:	f47f ab03 	bne.w	8006fa4 <_dtoa_r+0x94>
 800799e:	4b12      	ldr	r3, [pc, #72]	; (80079e8 <_dtoa_r+0xad8>)
 80079a0:	f7ff bb20 	b.w	8006fe4 <_dtoa_r+0xd4>
 80079a4:	f1ba 0f00 	cmp.w	sl, #0
 80079a8:	dc03      	bgt.n	80079b2 <_dtoa_r+0xaa2>
 80079aa:	9b06      	ldr	r3, [sp, #24]
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	f73f aec7 	bgt.w	8007740 <_dtoa_r+0x830>
 80079b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80079b6:	4621      	mov	r1, r4
 80079b8:	4628      	mov	r0, r5
 80079ba:	f7ff fa1b 	bl	8006df4 <quorem>
 80079be:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80079c2:	f808 3b01 	strb.w	r3, [r8], #1
 80079c6:	9a01      	ldr	r2, [sp, #4]
 80079c8:	eba8 0202 	sub.w	r2, r8, r2
 80079cc:	4592      	cmp	sl, r2
 80079ce:	ddb7      	ble.n	8007940 <_dtoa_r+0xa30>
 80079d0:	4629      	mov	r1, r5
 80079d2:	2300      	movs	r3, #0
 80079d4:	220a      	movs	r2, #10
 80079d6:	4630      	mov	r0, r6
 80079d8:	f000 f888 	bl	8007aec <__multadd>
 80079dc:	4605      	mov	r5, r0
 80079de:	e7ea      	b.n	80079b6 <_dtoa_r+0xaa6>
 80079e0:	080094c3 	.word	0x080094c3
 80079e4:	08009420 	.word	0x08009420
 80079e8:	08009444 	.word	0x08009444

080079ec <_localeconv_r>:
 80079ec:	4800      	ldr	r0, [pc, #0]	; (80079f0 <_localeconv_r+0x4>)
 80079ee:	4770      	bx	lr
 80079f0:	24000174 	.word	0x24000174

080079f4 <memcpy>:
 80079f4:	440a      	add	r2, r1
 80079f6:	4291      	cmp	r1, r2
 80079f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80079fc:	d100      	bne.n	8007a00 <memcpy+0xc>
 80079fe:	4770      	bx	lr
 8007a00:	b510      	push	{r4, lr}
 8007a02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a0a:	4291      	cmp	r1, r2
 8007a0c:	d1f9      	bne.n	8007a02 <memcpy+0xe>
 8007a0e:	bd10      	pop	{r4, pc}

08007a10 <__malloc_lock>:
 8007a10:	4801      	ldr	r0, [pc, #4]	; (8007a18 <__malloc_lock+0x8>)
 8007a12:	f000 bd30 	b.w	8008476 <__retarget_lock_acquire_recursive>
 8007a16:	bf00      	nop
 8007a18:	240003c4 	.word	0x240003c4

08007a1c <__malloc_unlock>:
 8007a1c:	4801      	ldr	r0, [pc, #4]	; (8007a24 <__malloc_unlock+0x8>)
 8007a1e:	f000 bd2b 	b.w	8008478 <__retarget_lock_release_recursive>
 8007a22:	bf00      	nop
 8007a24:	240003c4 	.word	0x240003c4

08007a28 <_Balloc>:
 8007a28:	b570      	push	{r4, r5, r6, lr}
 8007a2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	460d      	mov	r5, r1
 8007a30:	b976      	cbnz	r6, 8007a50 <_Balloc+0x28>
 8007a32:	2010      	movs	r0, #16
 8007a34:	f7fe fc7c 	bl	8006330 <malloc>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	6260      	str	r0, [r4, #36]	; 0x24
 8007a3c:	b920      	cbnz	r0, 8007a48 <_Balloc+0x20>
 8007a3e:	4b18      	ldr	r3, [pc, #96]	; (8007aa0 <_Balloc+0x78>)
 8007a40:	4818      	ldr	r0, [pc, #96]	; (8007aa4 <_Balloc+0x7c>)
 8007a42:	2166      	movs	r1, #102	; 0x66
 8007a44:	f000 fce6 	bl	8008414 <__assert_func>
 8007a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a4c:	6006      	str	r6, [r0, #0]
 8007a4e:	60c6      	str	r6, [r0, #12]
 8007a50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a52:	68f3      	ldr	r3, [r6, #12]
 8007a54:	b183      	cbz	r3, 8007a78 <_Balloc+0x50>
 8007a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a5e:	b9b8      	cbnz	r0, 8007a90 <_Balloc+0x68>
 8007a60:	2101      	movs	r1, #1
 8007a62:	fa01 f605 	lsl.w	r6, r1, r5
 8007a66:	1d72      	adds	r2, r6, #5
 8007a68:	0092      	lsls	r2, r2, #2
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f000 fb60 	bl	8008130 <_calloc_r>
 8007a70:	b160      	cbz	r0, 8007a8c <_Balloc+0x64>
 8007a72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a76:	e00e      	b.n	8007a96 <_Balloc+0x6e>
 8007a78:	2221      	movs	r2, #33	; 0x21
 8007a7a:	2104      	movs	r1, #4
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f000 fb57 	bl	8008130 <_calloc_r>
 8007a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a84:	60f0      	str	r0, [r6, #12]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1e4      	bne.n	8007a56 <_Balloc+0x2e>
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}
 8007a90:	6802      	ldr	r2, [r0, #0]
 8007a92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a96:	2300      	movs	r3, #0
 8007a98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a9c:	e7f7      	b.n	8007a8e <_Balloc+0x66>
 8007a9e:	bf00      	nop
 8007aa0:	08009451 	.word	0x08009451
 8007aa4:	080094d4 	.word	0x080094d4

08007aa8 <_Bfree>:
 8007aa8:	b570      	push	{r4, r5, r6, lr}
 8007aaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007aac:	4605      	mov	r5, r0
 8007aae:	460c      	mov	r4, r1
 8007ab0:	b976      	cbnz	r6, 8007ad0 <_Bfree+0x28>
 8007ab2:	2010      	movs	r0, #16
 8007ab4:	f7fe fc3c 	bl	8006330 <malloc>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	6268      	str	r0, [r5, #36]	; 0x24
 8007abc:	b920      	cbnz	r0, 8007ac8 <_Bfree+0x20>
 8007abe:	4b09      	ldr	r3, [pc, #36]	; (8007ae4 <_Bfree+0x3c>)
 8007ac0:	4809      	ldr	r0, [pc, #36]	; (8007ae8 <_Bfree+0x40>)
 8007ac2:	218a      	movs	r1, #138	; 0x8a
 8007ac4:	f000 fca6 	bl	8008414 <__assert_func>
 8007ac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007acc:	6006      	str	r6, [r0, #0]
 8007ace:	60c6      	str	r6, [r0, #12]
 8007ad0:	b13c      	cbz	r4, 8007ae2 <_Bfree+0x3a>
 8007ad2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ad4:	6862      	ldr	r2, [r4, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007adc:	6021      	str	r1, [r4, #0]
 8007ade:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ae2:	bd70      	pop	{r4, r5, r6, pc}
 8007ae4:	08009451 	.word	0x08009451
 8007ae8:	080094d4 	.word	0x080094d4

08007aec <__multadd>:
 8007aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af0:	690d      	ldr	r5, [r1, #16]
 8007af2:	4607      	mov	r7, r0
 8007af4:	460c      	mov	r4, r1
 8007af6:	461e      	mov	r6, r3
 8007af8:	f101 0c14 	add.w	ip, r1, #20
 8007afc:	2000      	movs	r0, #0
 8007afe:	f8dc 3000 	ldr.w	r3, [ip]
 8007b02:	b299      	uxth	r1, r3
 8007b04:	fb02 6101 	mla	r1, r2, r1, r6
 8007b08:	0c1e      	lsrs	r6, r3, #16
 8007b0a:	0c0b      	lsrs	r3, r1, #16
 8007b0c:	fb02 3306 	mla	r3, r2, r6, r3
 8007b10:	b289      	uxth	r1, r1
 8007b12:	3001      	adds	r0, #1
 8007b14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b18:	4285      	cmp	r5, r0
 8007b1a:	f84c 1b04 	str.w	r1, [ip], #4
 8007b1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b22:	dcec      	bgt.n	8007afe <__multadd+0x12>
 8007b24:	b30e      	cbz	r6, 8007b6a <__multadd+0x7e>
 8007b26:	68a3      	ldr	r3, [r4, #8]
 8007b28:	42ab      	cmp	r3, r5
 8007b2a:	dc19      	bgt.n	8007b60 <__multadd+0x74>
 8007b2c:	6861      	ldr	r1, [r4, #4]
 8007b2e:	4638      	mov	r0, r7
 8007b30:	3101      	adds	r1, #1
 8007b32:	f7ff ff79 	bl	8007a28 <_Balloc>
 8007b36:	4680      	mov	r8, r0
 8007b38:	b928      	cbnz	r0, 8007b46 <__multadd+0x5a>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	4b0c      	ldr	r3, [pc, #48]	; (8007b70 <__multadd+0x84>)
 8007b3e:	480d      	ldr	r0, [pc, #52]	; (8007b74 <__multadd+0x88>)
 8007b40:	21b5      	movs	r1, #181	; 0xb5
 8007b42:	f000 fc67 	bl	8008414 <__assert_func>
 8007b46:	6922      	ldr	r2, [r4, #16]
 8007b48:	3202      	adds	r2, #2
 8007b4a:	f104 010c 	add.w	r1, r4, #12
 8007b4e:	0092      	lsls	r2, r2, #2
 8007b50:	300c      	adds	r0, #12
 8007b52:	f7ff ff4f 	bl	80079f4 <memcpy>
 8007b56:	4621      	mov	r1, r4
 8007b58:	4638      	mov	r0, r7
 8007b5a:	f7ff ffa5 	bl	8007aa8 <_Bfree>
 8007b5e:	4644      	mov	r4, r8
 8007b60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b64:	3501      	adds	r5, #1
 8007b66:	615e      	str	r6, [r3, #20]
 8007b68:	6125      	str	r5, [r4, #16]
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b70:	080094c3 	.word	0x080094c3
 8007b74:	080094d4 	.word	0x080094d4

08007b78 <__hi0bits>:
 8007b78:	0c03      	lsrs	r3, r0, #16
 8007b7a:	041b      	lsls	r3, r3, #16
 8007b7c:	b9d3      	cbnz	r3, 8007bb4 <__hi0bits+0x3c>
 8007b7e:	0400      	lsls	r0, r0, #16
 8007b80:	2310      	movs	r3, #16
 8007b82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b86:	bf04      	itt	eq
 8007b88:	0200      	lsleq	r0, r0, #8
 8007b8a:	3308      	addeq	r3, #8
 8007b8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b90:	bf04      	itt	eq
 8007b92:	0100      	lsleq	r0, r0, #4
 8007b94:	3304      	addeq	r3, #4
 8007b96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007b9a:	bf04      	itt	eq
 8007b9c:	0080      	lsleq	r0, r0, #2
 8007b9e:	3302      	addeq	r3, #2
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	db05      	blt.n	8007bb0 <__hi0bits+0x38>
 8007ba4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ba8:	f103 0301 	add.w	r3, r3, #1
 8007bac:	bf08      	it	eq
 8007bae:	2320      	moveq	r3, #32
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	4770      	bx	lr
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	e7e4      	b.n	8007b82 <__hi0bits+0xa>

08007bb8 <__lo0bits>:
 8007bb8:	6803      	ldr	r3, [r0, #0]
 8007bba:	f013 0207 	ands.w	r2, r3, #7
 8007bbe:	4601      	mov	r1, r0
 8007bc0:	d00b      	beq.n	8007bda <__lo0bits+0x22>
 8007bc2:	07da      	lsls	r2, r3, #31
 8007bc4:	d423      	bmi.n	8007c0e <__lo0bits+0x56>
 8007bc6:	0798      	lsls	r0, r3, #30
 8007bc8:	bf49      	itett	mi
 8007bca:	085b      	lsrmi	r3, r3, #1
 8007bcc:	089b      	lsrpl	r3, r3, #2
 8007bce:	2001      	movmi	r0, #1
 8007bd0:	600b      	strmi	r3, [r1, #0]
 8007bd2:	bf5c      	itt	pl
 8007bd4:	600b      	strpl	r3, [r1, #0]
 8007bd6:	2002      	movpl	r0, #2
 8007bd8:	4770      	bx	lr
 8007bda:	b298      	uxth	r0, r3
 8007bdc:	b9a8      	cbnz	r0, 8007c0a <__lo0bits+0x52>
 8007bde:	0c1b      	lsrs	r3, r3, #16
 8007be0:	2010      	movs	r0, #16
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	b90a      	cbnz	r2, 8007bea <__lo0bits+0x32>
 8007be6:	3008      	adds	r0, #8
 8007be8:	0a1b      	lsrs	r3, r3, #8
 8007bea:	071a      	lsls	r2, r3, #28
 8007bec:	bf04      	itt	eq
 8007bee:	091b      	lsreq	r3, r3, #4
 8007bf0:	3004      	addeq	r0, #4
 8007bf2:	079a      	lsls	r2, r3, #30
 8007bf4:	bf04      	itt	eq
 8007bf6:	089b      	lsreq	r3, r3, #2
 8007bf8:	3002      	addeq	r0, #2
 8007bfa:	07da      	lsls	r2, r3, #31
 8007bfc:	d403      	bmi.n	8007c06 <__lo0bits+0x4e>
 8007bfe:	085b      	lsrs	r3, r3, #1
 8007c00:	f100 0001 	add.w	r0, r0, #1
 8007c04:	d005      	beq.n	8007c12 <__lo0bits+0x5a>
 8007c06:	600b      	str	r3, [r1, #0]
 8007c08:	4770      	bx	lr
 8007c0a:	4610      	mov	r0, r2
 8007c0c:	e7e9      	b.n	8007be2 <__lo0bits+0x2a>
 8007c0e:	2000      	movs	r0, #0
 8007c10:	4770      	bx	lr
 8007c12:	2020      	movs	r0, #32
 8007c14:	4770      	bx	lr
	...

08007c18 <__i2b>:
 8007c18:	b510      	push	{r4, lr}
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	f7ff ff03 	bl	8007a28 <_Balloc>
 8007c22:	4602      	mov	r2, r0
 8007c24:	b928      	cbnz	r0, 8007c32 <__i2b+0x1a>
 8007c26:	4b05      	ldr	r3, [pc, #20]	; (8007c3c <__i2b+0x24>)
 8007c28:	4805      	ldr	r0, [pc, #20]	; (8007c40 <__i2b+0x28>)
 8007c2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c2e:	f000 fbf1 	bl	8008414 <__assert_func>
 8007c32:	2301      	movs	r3, #1
 8007c34:	6144      	str	r4, [r0, #20]
 8007c36:	6103      	str	r3, [r0, #16]
 8007c38:	bd10      	pop	{r4, pc}
 8007c3a:	bf00      	nop
 8007c3c:	080094c3 	.word	0x080094c3
 8007c40:	080094d4 	.word	0x080094d4

08007c44 <__multiply>:
 8007c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c48:	4691      	mov	r9, r2
 8007c4a:	690a      	ldr	r2, [r1, #16]
 8007c4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	bfb8      	it	lt
 8007c54:	460b      	movlt	r3, r1
 8007c56:	460c      	mov	r4, r1
 8007c58:	bfbc      	itt	lt
 8007c5a:	464c      	movlt	r4, r9
 8007c5c:	4699      	movlt	r9, r3
 8007c5e:	6927      	ldr	r7, [r4, #16]
 8007c60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c64:	68a3      	ldr	r3, [r4, #8]
 8007c66:	6861      	ldr	r1, [r4, #4]
 8007c68:	eb07 060a 	add.w	r6, r7, sl
 8007c6c:	42b3      	cmp	r3, r6
 8007c6e:	b085      	sub	sp, #20
 8007c70:	bfb8      	it	lt
 8007c72:	3101      	addlt	r1, #1
 8007c74:	f7ff fed8 	bl	8007a28 <_Balloc>
 8007c78:	b930      	cbnz	r0, 8007c88 <__multiply+0x44>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	4b44      	ldr	r3, [pc, #272]	; (8007d90 <__multiply+0x14c>)
 8007c7e:	4845      	ldr	r0, [pc, #276]	; (8007d94 <__multiply+0x150>)
 8007c80:	f240 115d 	movw	r1, #349	; 0x15d
 8007c84:	f000 fbc6 	bl	8008414 <__assert_func>
 8007c88:	f100 0514 	add.w	r5, r0, #20
 8007c8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c90:	462b      	mov	r3, r5
 8007c92:	2200      	movs	r2, #0
 8007c94:	4543      	cmp	r3, r8
 8007c96:	d321      	bcc.n	8007cdc <__multiply+0x98>
 8007c98:	f104 0314 	add.w	r3, r4, #20
 8007c9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ca0:	f109 0314 	add.w	r3, r9, #20
 8007ca4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ca8:	9202      	str	r2, [sp, #8]
 8007caa:	1b3a      	subs	r2, r7, r4
 8007cac:	3a15      	subs	r2, #21
 8007cae:	f022 0203 	bic.w	r2, r2, #3
 8007cb2:	3204      	adds	r2, #4
 8007cb4:	f104 0115 	add.w	r1, r4, #21
 8007cb8:	428f      	cmp	r7, r1
 8007cba:	bf38      	it	cc
 8007cbc:	2204      	movcc	r2, #4
 8007cbe:	9201      	str	r2, [sp, #4]
 8007cc0:	9a02      	ldr	r2, [sp, #8]
 8007cc2:	9303      	str	r3, [sp, #12]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d80c      	bhi.n	8007ce2 <__multiply+0x9e>
 8007cc8:	2e00      	cmp	r6, #0
 8007cca:	dd03      	ble.n	8007cd4 <__multiply+0x90>
 8007ccc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d05a      	beq.n	8007d8a <__multiply+0x146>
 8007cd4:	6106      	str	r6, [r0, #16]
 8007cd6:	b005      	add	sp, #20
 8007cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cdc:	f843 2b04 	str.w	r2, [r3], #4
 8007ce0:	e7d8      	b.n	8007c94 <__multiply+0x50>
 8007ce2:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ce6:	f1ba 0f00 	cmp.w	sl, #0
 8007cea:	d024      	beq.n	8007d36 <__multiply+0xf2>
 8007cec:	f104 0e14 	add.w	lr, r4, #20
 8007cf0:	46a9      	mov	r9, r5
 8007cf2:	f04f 0c00 	mov.w	ip, #0
 8007cf6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007cfa:	f8d9 1000 	ldr.w	r1, [r9]
 8007cfe:	fa1f fb82 	uxth.w	fp, r2
 8007d02:	b289      	uxth	r1, r1
 8007d04:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007d0c:	f8d9 2000 	ldr.w	r2, [r9]
 8007d10:	4461      	add	r1, ip
 8007d12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d16:	fb0a c20b 	mla	r2, sl, fp, ip
 8007d1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d1e:	b289      	uxth	r1, r1
 8007d20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d24:	4577      	cmp	r7, lr
 8007d26:	f849 1b04 	str.w	r1, [r9], #4
 8007d2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d2e:	d8e2      	bhi.n	8007cf6 <__multiply+0xb2>
 8007d30:	9a01      	ldr	r2, [sp, #4]
 8007d32:	f845 c002 	str.w	ip, [r5, r2]
 8007d36:	9a03      	ldr	r2, [sp, #12]
 8007d38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	f1b9 0f00 	cmp.w	r9, #0
 8007d42:	d020      	beq.n	8007d86 <__multiply+0x142>
 8007d44:	6829      	ldr	r1, [r5, #0]
 8007d46:	f104 0c14 	add.w	ip, r4, #20
 8007d4a:	46ae      	mov	lr, r5
 8007d4c:	f04f 0a00 	mov.w	sl, #0
 8007d50:	f8bc b000 	ldrh.w	fp, [ip]
 8007d54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d58:	fb09 220b 	mla	r2, r9, fp, r2
 8007d5c:	4492      	add	sl, r2
 8007d5e:	b289      	uxth	r1, r1
 8007d60:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007d64:	f84e 1b04 	str.w	r1, [lr], #4
 8007d68:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007d6c:	f8be 1000 	ldrh.w	r1, [lr]
 8007d70:	0c12      	lsrs	r2, r2, #16
 8007d72:	fb09 1102 	mla	r1, r9, r2, r1
 8007d76:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007d7a:	4567      	cmp	r7, ip
 8007d7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d80:	d8e6      	bhi.n	8007d50 <__multiply+0x10c>
 8007d82:	9a01      	ldr	r2, [sp, #4]
 8007d84:	50a9      	str	r1, [r5, r2]
 8007d86:	3504      	adds	r5, #4
 8007d88:	e79a      	b.n	8007cc0 <__multiply+0x7c>
 8007d8a:	3e01      	subs	r6, #1
 8007d8c:	e79c      	b.n	8007cc8 <__multiply+0x84>
 8007d8e:	bf00      	nop
 8007d90:	080094c3 	.word	0x080094c3
 8007d94:	080094d4 	.word	0x080094d4

08007d98 <__pow5mult>:
 8007d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d9c:	4615      	mov	r5, r2
 8007d9e:	f012 0203 	ands.w	r2, r2, #3
 8007da2:	4606      	mov	r6, r0
 8007da4:	460f      	mov	r7, r1
 8007da6:	d007      	beq.n	8007db8 <__pow5mult+0x20>
 8007da8:	4c25      	ldr	r4, [pc, #148]	; (8007e40 <__pow5mult+0xa8>)
 8007daa:	3a01      	subs	r2, #1
 8007dac:	2300      	movs	r3, #0
 8007dae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007db2:	f7ff fe9b 	bl	8007aec <__multadd>
 8007db6:	4607      	mov	r7, r0
 8007db8:	10ad      	asrs	r5, r5, #2
 8007dba:	d03d      	beq.n	8007e38 <__pow5mult+0xa0>
 8007dbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007dbe:	b97c      	cbnz	r4, 8007de0 <__pow5mult+0x48>
 8007dc0:	2010      	movs	r0, #16
 8007dc2:	f7fe fab5 	bl	8006330 <malloc>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	6270      	str	r0, [r6, #36]	; 0x24
 8007dca:	b928      	cbnz	r0, 8007dd8 <__pow5mult+0x40>
 8007dcc:	4b1d      	ldr	r3, [pc, #116]	; (8007e44 <__pow5mult+0xac>)
 8007dce:	481e      	ldr	r0, [pc, #120]	; (8007e48 <__pow5mult+0xb0>)
 8007dd0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007dd4:	f000 fb1e 	bl	8008414 <__assert_func>
 8007dd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ddc:	6004      	str	r4, [r0, #0]
 8007dde:	60c4      	str	r4, [r0, #12]
 8007de0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007de4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007de8:	b94c      	cbnz	r4, 8007dfe <__pow5mult+0x66>
 8007dea:	f240 2171 	movw	r1, #625	; 0x271
 8007dee:	4630      	mov	r0, r6
 8007df0:	f7ff ff12 	bl	8007c18 <__i2b>
 8007df4:	2300      	movs	r3, #0
 8007df6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	6003      	str	r3, [r0, #0]
 8007dfe:	f04f 0900 	mov.w	r9, #0
 8007e02:	07eb      	lsls	r3, r5, #31
 8007e04:	d50a      	bpl.n	8007e1c <__pow5mult+0x84>
 8007e06:	4639      	mov	r1, r7
 8007e08:	4622      	mov	r2, r4
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	f7ff ff1a 	bl	8007c44 <__multiply>
 8007e10:	4639      	mov	r1, r7
 8007e12:	4680      	mov	r8, r0
 8007e14:	4630      	mov	r0, r6
 8007e16:	f7ff fe47 	bl	8007aa8 <_Bfree>
 8007e1a:	4647      	mov	r7, r8
 8007e1c:	106d      	asrs	r5, r5, #1
 8007e1e:	d00b      	beq.n	8007e38 <__pow5mult+0xa0>
 8007e20:	6820      	ldr	r0, [r4, #0]
 8007e22:	b938      	cbnz	r0, 8007e34 <__pow5mult+0x9c>
 8007e24:	4622      	mov	r2, r4
 8007e26:	4621      	mov	r1, r4
 8007e28:	4630      	mov	r0, r6
 8007e2a:	f7ff ff0b 	bl	8007c44 <__multiply>
 8007e2e:	6020      	str	r0, [r4, #0]
 8007e30:	f8c0 9000 	str.w	r9, [r0]
 8007e34:	4604      	mov	r4, r0
 8007e36:	e7e4      	b.n	8007e02 <__pow5mult+0x6a>
 8007e38:	4638      	mov	r0, r7
 8007e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e3e:	bf00      	nop
 8007e40:	08009620 	.word	0x08009620
 8007e44:	08009451 	.word	0x08009451
 8007e48:	080094d4 	.word	0x080094d4

08007e4c <__lshift>:
 8007e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e50:	460c      	mov	r4, r1
 8007e52:	6849      	ldr	r1, [r1, #4]
 8007e54:	6923      	ldr	r3, [r4, #16]
 8007e56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e5a:	68a3      	ldr	r3, [r4, #8]
 8007e5c:	4607      	mov	r7, r0
 8007e5e:	4691      	mov	r9, r2
 8007e60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e64:	f108 0601 	add.w	r6, r8, #1
 8007e68:	42b3      	cmp	r3, r6
 8007e6a:	db0b      	blt.n	8007e84 <__lshift+0x38>
 8007e6c:	4638      	mov	r0, r7
 8007e6e:	f7ff fddb 	bl	8007a28 <_Balloc>
 8007e72:	4605      	mov	r5, r0
 8007e74:	b948      	cbnz	r0, 8007e8a <__lshift+0x3e>
 8007e76:	4602      	mov	r2, r0
 8007e78:	4b2a      	ldr	r3, [pc, #168]	; (8007f24 <__lshift+0xd8>)
 8007e7a:	482b      	ldr	r0, [pc, #172]	; (8007f28 <__lshift+0xdc>)
 8007e7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007e80:	f000 fac8 	bl	8008414 <__assert_func>
 8007e84:	3101      	adds	r1, #1
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	e7ee      	b.n	8007e68 <__lshift+0x1c>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	f100 0114 	add.w	r1, r0, #20
 8007e90:	f100 0210 	add.w	r2, r0, #16
 8007e94:	4618      	mov	r0, r3
 8007e96:	4553      	cmp	r3, sl
 8007e98:	db37      	blt.n	8007f0a <__lshift+0xbe>
 8007e9a:	6920      	ldr	r0, [r4, #16]
 8007e9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ea0:	f104 0314 	add.w	r3, r4, #20
 8007ea4:	f019 091f 	ands.w	r9, r9, #31
 8007ea8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007eac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007eb0:	d02f      	beq.n	8007f12 <__lshift+0xc6>
 8007eb2:	f1c9 0e20 	rsb	lr, r9, #32
 8007eb6:	468a      	mov	sl, r1
 8007eb8:	f04f 0c00 	mov.w	ip, #0
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	fa02 f209 	lsl.w	r2, r2, r9
 8007ec2:	ea42 020c 	orr.w	r2, r2, ip
 8007ec6:	f84a 2b04 	str.w	r2, [sl], #4
 8007eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ece:	4298      	cmp	r0, r3
 8007ed0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007ed4:	d8f2      	bhi.n	8007ebc <__lshift+0x70>
 8007ed6:	1b03      	subs	r3, r0, r4
 8007ed8:	3b15      	subs	r3, #21
 8007eda:	f023 0303 	bic.w	r3, r3, #3
 8007ede:	3304      	adds	r3, #4
 8007ee0:	f104 0215 	add.w	r2, r4, #21
 8007ee4:	4290      	cmp	r0, r2
 8007ee6:	bf38      	it	cc
 8007ee8:	2304      	movcc	r3, #4
 8007eea:	f841 c003 	str.w	ip, [r1, r3]
 8007eee:	f1bc 0f00 	cmp.w	ip, #0
 8007ef2:	d001      	beq.n	8007ef8 <__lshift+0xac>
 8007ef4:	f108 0602 	add.w	r6, r8, #2
 8007ef8:	3e01      	subs	r6, #1
 8007efa:	4638      	mov	r0, r7
 8007efc:	612e      	str	r6, [r5, #16]
 8007efe:	4621      	mov	r1, r4
 8007f00:	f7ff fdd2 	bl	8007aa8 <_Bfree>
 8007f04:	4628      	mov	r0, r5
 8007f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f0e:	3301      	adds	r3, #1
 8007f10:	e7c1      	b.n	8007e96 <__lshift+0x4a>
 8007f12:	3904      	subs	r1, #4
 8007f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f18:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f1c:	4298      	cmp	r0, r3
 8007f1e:	d8f9      	bhi.n	8007f14 <__lshift+0xc8>
 8007f20:	e7ea      	b.n	8007ef8 <__lshift+0xac>
 8007f22:	bf00      	nop
 8007f24:	080094c3 	.word	0x080094c3
 8007f28:	080094d4 	.word	0x080094d4

08007f2c <__mcmp>:
 8007f2c:	b530      	push	{r4, r5, lr}
 8007f2e:	6902      	ldr	r2, [r0, #16]
 8007f30:	690c      	ldr	r4, [r1, #16]
 8007f32:	1b12      	subs	r2, r2, r4
 8007f34:	d10e      	bne.n	8007f54 <__mcmp+0x28>
 8007f36:	f100 0314 	add.w	r3, r0, #20
 8007f3a:	3114      	adds	r1, #20
 8007f3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f4c:	42a5      	cmp	r5, r4
 8007f4e:	d003      	beq.n	8007f58 <__mcmp+0x2c>
 8007f50:	d305      	bcc.n	8007f5e <__mcmp+0x32>
 8007f52:	2201      	movs	r2, #1
 8007f54:	4610      	mov	r0, r2
 8007f56:	bd30      	pop	{r4, r5, pc}
 8007f58:	4283      	cmp	r3, r0
 8007f5a:	d3f3      	bcc.n	8007f44 <__mcmp+0x18>
 8007f5c:	e7fa      	b.n	8007f54 <__mcmp+0x28>
 8007f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f62:	e7f7      	b.n	8007f54 <__mcmp+0x28>

08007f64 <__mdiff>:
 8007f64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f68:	460c      	mov	r4, r1
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	4620      	mov	r0, r4
 8007f70:	4690      	mov	r8, r2
 8007f72:	f7ff ffdb 	bl	8007f2c <__mcmp>
 8007f76:	1e05      	subs	r5, r0, #0
 8007f78:	d110      	bne.n	8007f9c <__mdiff+0x38>
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	f7ff fd53 	bl	8007a28 <_Balloc>
 8007f82:	b930      	cbnz	r0, 8007f92 <__mdiff+0x2e>
 8007f84:	4b3a      	ldr	r3, [pc, #232]	; (8008070 <__mdiff+0x10c>)
 8007f86:	4602      	mov	r2, r0
 8007f88:	f240 2132 	movw	r1, #562	; 0x232
 8007f8c:	4839      	ldr	r0, [pc, #228]	; (8008074 <__mdiff+0x110>)
 8007f8e:	f000 fa41 	bl	8008414 <__assert_func>
 8007f92:	2301      	movs	r3, #1
 8007f94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9c:	bfa4      	itt	ge
 8007f9e:	4643      	movge	r3, r8
 8007fa0:	46a0      	movge	r8, r4
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007fa8:	bfa6      	itte	ge
 8007faa:	461c      	movge	r4, r3
 8007fac:	2500      	movge	r5, #0
 8007fae:	2501      	movlt	r5, #1
 8007fb0:	f7ff fd3a 	bl	8007a28 <_Balloc>
 8007fb4:	b920      	cbnz	r0, 8007fc0 <__mdiff+0x5c>
 8007fb6:	4b2e      	ldr	r3, [pc, #184]	; (8008070 <__mdiff+0x10c>)
 8007fb8:	4602      	mov	r2, r0
 8007fba:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007fbe:	e7e5      	b.n	8007f8c <__mdiff+0x28>
 8007fc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007fc4:	6926      	ldr	r6, [r4, #16]
 8007fc6:	60c5      	str	r5, [r0, #12]
 8007fc8:	f104 0914 	add.w	r9, r4, #20
 8007fcc:	f108 0514 	add.w	r5, r8, #20
 8007fd0:	f100 0e14 	add.w	lr, r0, #20
 8007fd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007fd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007fdc:	f108 0210 	add.w	r2, r8, #16
 8007fe0:	46f2      	mov	sl, lr
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007fe8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007fec:	fa1f f883 	uxth.w	r8, r3
 8007ff0:	fa11 f18b 	uxtah	r1, r1, fp
 8007ff4:	0c1b      	lsrs	r3, r3, #16
 8007ff6:	eba1 0808 	sub.w	r8, r1, r8
 8007ffa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ffe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008002:	fa1f f888 	uxth.w	r8, r8
 8008006:	1419      	asrs	r1, r3, #16
 8008008:	454e      	cmp	r6, r9
 800800a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800800e:	f84a 3b04 	str.w	r3, [sl], #4
 8008012:	d8e7      	bhi.n	8007fe4 <__mdiff+0x80>
 8008014:	1b33      	subs	r3, r6, r4
 8008016:	3b15      	subs	r3, #21
 8008018:	f023 0303 	bic.w	r3, r3, #3
 800801c:	3304      	adds	r3, #4
 800801e:	3415      	adds	r4, #21
 8008020:	42a6      	cmp	r6, r4
 8008022:	bf38      	it	cc
 8008024:	2304      	movcc	r3, #4
 8008026:	441d      	add	r5, r3
 8008028:	4473      	add	r3, lr
 800802a:	469e      	mov	lr, r3
 800802c:	462e      	mov	r6, r5
 800802e:	4566      	cmp	r6, ip
 8008030:	d30e      	bcc.n	8008050 <__mdiff+0xec>
 8008032:	f10c 0203 	add.w	r2, ip, #3
 8008036:	1b52      	subs	r2, r2, r5
 8008038:	f022 0203 	bic.w	r2, r2, #3
 800803c:	3d03      	subs	r5, #3
 800803e:	45ac      	cmp	ip, r5
 8008040:	bf38      	it	cc
 8008042:	2200      	movcc	r2, #0
 8008044:	441a      	add	r2, r3
 8008046:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800804a:	b17b      	cbz	r3, 800806c <__mdiff+0x108>
 800804c:	6107      	str	r7, [r0, #16]
 800804e:	e7a3      	b.n	8007f98 <__mdiff+0x34>
 8008050:	f856 8b04 	ldr.w	r8, [r6], #4
 8008054:	fa11 f288 	uxtah	r2, r1, r8
 8008058:	1414      	asrs	r4, r2, #16
 800805a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800805e:	b292      	uxth	r2, r2
 8008060:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008064:	f84e 2b04 	str.w	r2, [lr], #4
 8008068:	1421      	asrs	r1, r4, #16
 800806a:	e7e0      	b.n	800802e <__mdiff+0xca>
 800806c:	3f01      	subs	r7, #1
 800806e:	e7ea      	b.n	8008046 <__mdiff+0xe2>
 8008070:	080094c3 	.word	0x080094c3
 8008074:	080094d4 	.word	0x080094d4

08008078 <__d2b>:
 8008078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800807c:	4689      	mov	r9, r1
 800807e:	2101      	movs	r1, #1
 8008080:	ec57 6b10 	vmov	r6, r7, d0
 8008084:	4690      	mov	r8, r2
 8008086:	f7ff fccf 	bl	8007a28 <_Balloc>
 800808a:	4604      	mov	r4, r0
 800808c:	b930      	cbnz	r0, 800809c <__d2b+0x24>
 800808e:	4602      	mov	r2, r0
 8008090:	4b25      	ldr	r3, [pc, #148]	; (8008128 <__d2b+0xb0>)
 8008092:	4826      	ldr	r0, [pc, #152]	; (800812c <__d2b+0xb4>)
 8008094:	f240 310a 	movw	r1, #778	; 0x30a
 8008098:	f000 f9bc 	bl	8008414 <__assert_func>
 800809c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80080a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080a4:	bb35      	cbnz	r5, 80080f4 <__d2b+0x7c>
 80080a6:	2e00      	cmp	r6, #0
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	d028      	beq.n	80080fe <__d2b+0x86>
 80080ac:	4668      	mov	r0, sp
 80080ae:	9600      	str	r6, [sp, #0]
 80080b0:	f7ff fd82 	bl	8007bb8 <__lo0bits>
 80080b4:	9900      	ldr	r1, [sp, #0]
 80080b6:	b300      	cbz	r0, 80080fa <__d2b+0x82>
 80080b8:	9a01      	ldr	r2, [sp, #4]
 80080ba:	f1c0 0320 	rsb	r3, r0, #32
 80080be:	fa02 f303 	lsl.w	r3, r2, r3
 80080c2:	430b      	orrs	r3, r1
 80080c4:	40c2      	lsrs	r2, r0
 80080c6:	6163      	str	r3, [r4, #20]
 80080c8:	9201      	str	r2, [sp, #4]
 80080ca:	9b01      	ldr	r3, [sp, #4]
 80080cc:	61a3      	str	r3, [r4, #24]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	bf14      	ite	ne
 80080d2:	2202      	movne	r2, #2
 80080d4:	2201      	moveq	r2, #1
 80080d6:	6122      	str	r2, [r4, #16]
 80080d8:	b1d5      	cbz	r5, 8008110 <__d2b+0x98>
 80080da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80080de:	4405      	add	r5, r0
 80080e0:	f8c9 5000 	str.w	r5, [r9]
 80080e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080e8:	f8c8 0000 	str.w	r0, [r8]
 80080ec:	4620      	mov	r0, r4
 80080ee:	b003      	add	sp, #12
 80080f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080f8:	e7d5      	b.n	80080a6 <__d2b+0x2e>
 80080fa:	6161      	str	r1, [r4, #20]
 80080fc:	e7e5      	b.n	80080ca <__d2b+0x52>
 80080fe:	a801      	add	r0, sp, #4
 8008100:	f7ff fd5a 	bl	8007bb8 <__lo0bits>
 8008104:	9b01      	ldr	r3, [sp, #4]
 8008106:	6163      	str	r3, [r4, #20]
 8008108:	2201      	movs	r2, #1
 800810a:	6122      	str	r2, [r4, #16]
 800810c:	3020      	adds	r0, #32
 800810e:	e7e3      	b.n	80080d8 <__d2b+0x60>
 8008110:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008114:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008118:	f8c9 0000 	str.w	r0, [r9]
 800811c:	6918      	ldr	r0, [r3, #16]
 800811e:	f7ff fd2b 	bl	8007b78 <__hi0bits>
 8008122:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008126:	e7df      	b.n	80080e8 <__d2b+0x70>
 8008128:	080094c3 	.word	0x080094c3
 800812c:	080094d4 	.word	0x080094d4

08008130 <_calloc_r>:
 8008130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008132:	fba1 2402 	umull	r2, r4, r1, r2
 8008136:	b94c      	cbnz	r4, 800814c <_calloc_r+0x1c>
 8008138:	4611      	mov	r1, r2
 800813a:	9201      	str	r2, [sp, #4]
 800813c:	f7fe f974 	bl	8006428 <_malloc_r>
 8008140:	9a01      	ldr	r2, [sp, #4]
 8008142:	4605      	mov	r5, r0
 8008144:	b930      	cbnz	r0, 8008154 <_calloc_r+0x24>
 8008146:	4628      	mov	r0, r5
 8008148:	b003      	add	sp, #12
 800814a:	bd30      	pop	{r4, r5, pc}
 800814c:	220c      	movs	r2, #12
 800814e:	6002      	str	r2, [r0, #0]
 8008150:	2500      	movs	r5, #0
 8008152:	e7f8      	b.n	8008146 <_calloc_r+0x16>
 8008154:	4621      	mov	r1, r4
 8008156:	f7fe f8f3 	bl	8006340 <memset>
 800815a:	e7f4      	b.n	8008146 <_calloc_r+0x16>

0800815c <__ssputs_r>:
 800815c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008160:	688e      	ldr	r6, [r1, #8]
 8008162:	429e      	cmp	r6, r3
 8008164:	4682      	mov	sl, r0
 8008166:	460c      	mov	r4, r1
 8008168:	4690      	mov	r8, r2
 800816a:	461f      	mov	r7, r3
 800816c:	d838      	bhi.n	80081e0 <__ssputs_r+0x84>
 800816e:	898a      	ldrh	r2, [r1, #12]
 8008170:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008174:	d032      	beq.n	80081dc <__ssputs_r+0x80>
 8008176:	6825      	ldr	r5, [r4, #0]
 8008178:	6909      	ldr	r1, [r1, #16]
 800817a:	eba5 0901 	sub.w	r9, r5, r1
 800817e:	6965      	ldr	r5, [r4, #20]
 8008180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008188:	3301      	adds	r3, #1
 800818a:	444b      	add	r3, r9
 800818c:	106d      	asrs	r5, r5, #1
 800818e:	429d      	cmp	r5, r3
 8008190:	bf38      	it	cc
 8008192:	461d      	movcc	r5, r3
 8008194:	0553      	lsls	r3, r2, #21
 8008196:	d531      	bpl.n	80081fc <__ssputs_r+0xa0>
 8008198:	4629      	mov	r1, r5
 800819a:	f7fe f945 	bl	8006428 <_malloc_r>
 800819e:	4606      	mov	r6, r0
 80081a0:	b950      	cbnz	r0, 80081b8 <__ssputs_r+0x5c>
 80081a2:	230c      	movs	r3, #12
 80081a4:	f8ca 3000 	str.w	r3, [sl]
 80081a8:	89a3      	ldrh	r3, [r4, #12]
 80081aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ae:	81a3      	strh	r3, [r4, #12]
 80081b0:	f04f 30ff 	mov.w	r0, #4294967295
 80081b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b8:	6921      	ldr	r1, [r4, #16]
 80081ba:	464a      	mov	r2, r9
 80081bc:	f7ff fc1a 	bl	80079f4 <memcpy>
 80081c0:	89a3      	ldrh	r3, [r4, #12]
 80081c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ca:	81a3      	strh	r3, [r4, #12]
 80081cc:	6126      	str	r6, [r4, #16]
 80081ce:	6165      	str	r5, [r4, #20]
 80081d0:	444e      	add	r6, r9
 80081d2:	eba5 0509 	sub.w	r5, r5, r9
 80081d6:	6026      	str	r6, [r4, #0]
 80081d8:	60a5      	str	r5, [r4, #8]
 80081da:	463e      	mov	r6, r7
 80081dc:	42be      	cmp	r6, r7
 80081de:	d900      	bls.n	80081e2 <__ssputs_r+0x86>
 80081e0:	463e      	mov	r6, r7
 80081e2:	6820      	ldr	r0, [r4, #0]
 80081e4:	4632      	mov	r2, r6
 80081e6:	4641      	mov	r1, r8
 80081e8:	f000 f959 	bl	800849e <memmove>
 80081ec:	68a3      	ldr	r3, [r4, #8]
 80081ee:	1b9b      	subs	r3, r3, r6
 80081f0:	60a3      	str	r3, [r4, #8]
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	4433      	add	r3, r6
 80081f6:	6023      	str	r3, [r4, #0]
 80081f8:	2000      	movs	r0, #0
 80081fa:	e7db      	b.n	80081b4 <__ssputs_r+0x58>
 80081fc:	462a      	mov	r2, r5
 80081fe:	f000 f968 	bl	80084d2 <_realloc_r>
 8008202:	4606      	mov	r6, r0
 8008204:	2800      	cmp	r0, #0
 8008206:	d1e1      	bne.n	80081cc <__ssputs_r+0x70>
 8008208:	6921      	ldr	r1, [r4, #16]
 800820a:	4650      	mov	r0, sl
 800820c:	f7fe f8a0 	bl	8006350 <_free_r>
 8008210:	e7c7      	b.n	80081a2 <__ssputs_r+0x46>
	...

08008214 <_svfiprintf_r>:
 8008214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008218:	4698      	mov	r8, r3
 800821a:	898b      	ldrh	r3, [r1, #12]
 800821c:	061b      	lsls	r3, r3, #24
 800821e:	b09d      	sub	sp, #116	; 0x74
 8008220:	4607      	mov	r7, r0
 8008222:	460d      	mov	r5, r1
 8008224:	4614      	mov	r4, r2
 8008226:	d50e      	bpl.n	8008246 <_svfiprintf_r+0x32>
 8008228:	690b      	ldr	r3, [r1, #16]
 800822a:	b963      	cbnz	r3, 8008246 <_svfiprintf_r+0x32>
 800822c:	2140      	movs	r1, #64	; 0x40
 800822e:	f7fe f8fb 	bl	8006428 <_malloc_r>
 8008232:	6028      	str	r0, [r5, #0]
 8008234:	6128      	str	r0, [r5, #16]
 8008236:	b920      	cbnz	r0, 8008242 <_svfiprintf_r+0x2e>
 8008238:	230c      	movs	r3, #12
 800823a:	603b      	str	r3, [r7, #0]
 800823c:	f04f 30ff 	mov.w	r0, #4294967295
 8008240:	e0d1      	b.n	80083e6 <_svfiprintf_r+0x1d2>
 8008242:	2340      	movs	r3, #64	; 0x40
 8008244:	616b      	str	r3, [r5, #20]
 8008246:	2300      	movs	r3, #0
 8008248:	9309      	str	r3, [sp, #36]	; 0x24
 800824a:	2320      	movs	r3, #32
 800824c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008250:	f8cd 800c 	str.w	r8, [sp, #12]
 8008254:	2330      	movs	r3, #48	; 0x30
 8008256:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008400 <_svfiprintf_r+0x1ec>
 800825a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800825e:	f04f 0901 	mov.w	r9, #1
 8008262:	4623      	mov	r3, r4
 8008264:	469a      	mov	sl, r3
 8008266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800826a:	b10a      	cbz	r2, 8008270 <_svfiprintf_r+0x5c>
 800826c:	2a25      	cmp	r2, #37	; 0x25
 800826e:	d1f9      	bne.n	8008264 <_svfiprintf_r+0x50>
 8008270:	ebba 0b04 	subs.w	fp, sl, r4
 8008274:	d00b      	beq.n	800828e <_svfiprintf_r+0x7a>
 8008276:	465b      	mov	r3, fp
 8008278:	4622      	mov	r2, r4
 800827a:	4629      	mov	r1, r5
 800827c:	4638      	mov	r0, r7
 800827e:	f7ff ff6d 	bl	800815c <__ssputs_r>
 8008282:	3001      	adds	r0, #1
 8008284:	f000 80aa 	beq.w	80083dc <_svfiprintf_r+0x1c8>
 8008288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800828a:	445a      	add	r2, fp
 800828c:	9209      	str	r2, [sp, #36]	; 0x24
 800828e:	f89a 3000 	ldrb.w	r3, [sl]
 8008292:	2b00      	cmp	r3, #0
 8008294:	f000 80a2 	beq.w	80083dc <_svfiprintf_r+0x1c8>
 8008298:	2300      	movs	r3, #0
 800829a:	f04f 32ff 	mov.w	r2, #4294967295
 800829e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082a2:	f10a 0a01 	add.w	sl, sl, #1
 80082a6:	9304      	str	r3, [sp, #16]
 80082a8:	9307      	str	r3, [sp, #28]
 80082aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082ae:	931a      	str	r3, [sp, #104]	; 0x68
 80082b0:	4654      	mov	r4, sl
 80082b2:	2205      	movs	r2, #5
 80082b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b8:	4851      	ldr	r0, [pc, #324]	; (8008400 <_svfiprintf_r+0x1ec>)
 80082ba:	f7f8 f821 	bl	8000300 <memchr>
 80082be:	9a04      	ldr	r2, [sp, #16]
 80082c0:	b9d8      	cbnz	r0, 80082fa <_svfiprintf_r+0xe6>
 80082c2:	06d0      	lsls	r0, r2, #27
 80082c4:	bf44      	itt	mi
 80082c6:	2320      	movmi	r3, #32
 80082c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082cc:	0711      	lsls	r1, r2, #28
 80082ce:	bf44      	itt	mi
 80082d0:	232b      	movmi	r3, #43	; 0x2b
 80082d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082d6:	f89a 3000 	ldrb.w	r3, [sl]
 80082da:	2b2a      	cmp	r3, #42	; 0x2a
 80082dc:	d015      	beq.n	800830a <_svfiprintf_r+0xf6>
 80082de:	9a07      	ldr	r2, [sp, #28]
 80082e0:	4654      	mov	r4, sl
 80082e2:	2000      	movs	r0, #0
 80082e4:	f04f 0c0a 	mov.w	ip, #10
 80082e8:	4621      	mov	r1, r4
 80082ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082ee:	3b30      	subs	r3, #48	; 0x30
 80082f0:	2b09      	cmp	r3, #9
 80082f2:	d94e      	bls.n	8008392 <_svfiprintf_r+0x17e>
 80082f4:	b1b0      	cbz	r0, 8008324 <_svfiprintf_r+0x110>
 80082f6:	9207      	str	r2, [sp, #28]
 80082f8:	e014      	b.n	8008324 <_svfiprintf_r+0x110>
 80082fa:	eba0 0308 	sub.w	r3, r0, r8
 80082fe:	fa09 f303 	lsl.w	r3, r9, r3
 8008302:	4313      	orrs	r3, r2
 8008304:	9304      	str	r3, [sp, #16]
 8008306:	46a2      	mov	sl, r4
 8008308:	e7d2      	b.n	80082b0 <_svfiprintf_r+0x9c>
 800830a:	9b03      	ldr	r3, [sp, #12]
 800830c:	1d19      	adds	r1, r3, #4
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	9103      	str	r1, [sp, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	bfbb      	ittet	lt
 8008316:	425b      	neglt	r3, r3
 8008318:	f042 0202 	orrlt.w	r2, r2, #2
 800831c:	9307      	strge	r3, [sp, #28]
 800831e:	9307      	strlt	r3, [sp, #28]
 8008320:	bfb8      	it	lt
 8008322:	9204      	strlt	r2, [sp, #16]
 8008324:	7823      	ldrb	r3, [r4, #0]
 8008326:	2b2e      	cmp	r3, #46	; 0x2e
 8008328:	d10c      	bne.n	8008344 <_svfiprintf_r+0x130>
 800832a:	7863      	ldrb	r3, [r4, #1]
 800832c:	2b2a      	cmp	r3, #42	; 0x2a
 800832e:	d135      	bne.n	800839c <_svfiprintf_r+0x188>
 8008330:	9b03      	ldr	r3, [sp, #12]
 8008332:	1d1a      	adds	r2, r3, #4
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	9203      	str	r2, [sp, #12]
 8008338:	2b00      	cmp	r3, #0
 800833a:	bfb8      	it	lt
 800833c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008340:	3402      	adds	r4, #2
 8008342:	9305      	str	r3, [sp, #20]
 8008344:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008410 <_svfiprintf_r+0x1fc>
 8008348:	7821      	ldrb	r1, [r4, #0]
 800834a:	2203      	movs	r2, #3
 800834c:	4650      	mov	r0, sl
 800834e:	f7f7 ffd7 	bl	8000300 <memchr>
 8008352:	b140      	cbz	r0, 8008366 <_svfiprintf_r+0x152>
 8008354:	2340      	movs	r3, #64	; 0x40
 8008356:	eba0 000a 	sub.w	r0, r0, sl
 800835a:	fa03 f000 	lsl.w	r0, r3, r0
 800835e:	9b04      	ldr	r3, [sp, #16]
 8008360:	4303      	orrs	r3, r0
 8008362:	3401      	adds	r4, #1
 8008364:	9304      	str	r3, [sp, #16]
 8008366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800836a:	4826      	ldr	r0, [pc, #152]	; (8008404 <_svfiprintf_r+0x1f0>)
 800836c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008370:	2206      	movs	r2, #6
 8008372:	f7f7 ffc5 	bl	8000300 <memchr>
 8008376:	2800      	cmp	r0, #0
 8008378:	d038      	beq.n	80083ec <_svfiprintf_r+0x1d8>
 800837a:	4b23      	ldr	r3, [pc, #140]	; (8008408 <_svfiprintf_r+0x1f4>)
 800837c:	bb1b      	cbnz	r3, 80083c6 <_svfiprintf_r+0x1b2>
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	3307      	adds	r3, #7
 8008382:	f023 0307 	bic.w	r3, r3, #7
 8008386:	3308      	adds	r3, #8
 8008388:	9303      	str	r3, [sp, #12]
 800838a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800838c:	4433      	add	r3, r6
 800838e:	9309      	str	r3, [sp, #36]	; 0x24
 8008390:	e767      	b.n	8008262 <_svfiprintf_r+0x4e>
 8008392:	fb0c 3202 	mla	r2, ip, r2, r3
 8008396:	460c      	mov	r4, r1
 8008398:	2001      	movs	r0, #1
 800839a:	e7a5      	b.n	80082e8 <_svfiprintf_r+0xd4>
 800839c:	2300      	movs	r3, #0
 800839e:	3401      	adds	r4, #1
 80083a0:	9305      	str	r3, [sp, #20]
 80083a2:	4619      	mov	r1, r3
 80083a4:	f04f 0c0a 	mov.w	ip, #10
 80083a8:	4620      	mov	r0, r4
 80083aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083ae:	3a30      	subs	r2, #48	; 0x30
 80083b0:	2a09      	cmp	r2, #9
 80083b2:	d903      	bls.n	80083bc <_svfiprintf_r+0x1a8>
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d0c5      	beq.n	8008344 <_svfiprintf_r+0x130>
 80083b8:	9105      	str	r1, [sp, #20]
 80083ba:	e7c3      	b.n	8008344 <_svfiprintf_r+0x130>
 80083bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80083c0:	4604      	mov	r4, r0
 80083c2:	2301      	movs	r3, #1
 80083c4:	e7f0      	b.n	80083a8 <_svfiprintf_r+0x194>
 80083c6:	ab03      	add	r3, sp, #12
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	462a      	mov	r2, r5
 80083cc:	4b0f      	ldr	r3, [pc, #60]	; (800840c <_svfiprintf_r+0x1f8>)
 80083ce:	a904      	add	r1, sp, #16
 80083d0:	4638      	mov	r0, r7
 80083d2:	f7fe f92d 	bl	8006630 <_printf_float>
 80083d6:	1c42      	adds	r2, r0, #1
 80083d8:	4606      	mov	r6, r0
 80083da:	d1d6      	bne.n	800838a <_svfiprintf_r+0x176>
 80083dc:	89ab      	ldrh	r3, [r5, #12]
 80083de:	065b      	lsls	r3, r3, #25
 80083e0:	f53f af2c 	bmi.w	800823c <_svfiprintf_r+0x28>
 80083e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083e6:	b01d      	add	sp, #116	; 0x74
 80083e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ec:	ab03      	add	r3, sp, #12
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	462a      	mov	r2, r5
 80083f2:	4b06      	ldr	r3, [pc, #24]	; (800840c <_svfiprintf_r+0x1f8>)
 80083f4:	a904      	add	r1, sp, #16
 80083f6:	4638      	mov	r0, r7
 80083f8:	f7fe fba6 	bl	8006b48 <_printf_i>
 80083fc:	e7eb      	b.n	80083d6 <_svfiprintf_r+0x1c2>
 80083fe:	bf00      	nop
 8008400:	0800962c 	.word	0x0800962c
 8008404:	08009636 	.word	0x08009636
 8008408:	08006631 	.word	0x08006631
 800840c:	0800815d 	.word	0x0800815d
 8008410:	08009632 	.word	0x08009632

08008414 <__assert_func>:
 8008414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008416:	4614      	mov	r4, r2
 8008418:	461a      	mov	r2, r3
 800841a:	4b09      	ldr	r3, [pc, #36]	; (8008440 <__assert_func+0x2c>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4605      	mov	r5, r0
 8008420:	68d8      	ldr	r0, [r3, #12]
 8008422:	b14c      	cbz	r4, 8008438 <__assert_func+0x24>
 8008424:	4b07      	ldr	r3, [pc, #28]	; (8008444 <__assert_func+0x30>)
 8008426:	9100      	str	r1, [sp, #0]
 8008428:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800842c:	4906      	ldr	r1, [pc, #24]	; (8008448 <__assert_func+0x34>)
 800842e:	462b      	mov	r3, r5
 8008430:	f000 f80e 	bl	8008450 <fiprintf>
 8008434:	f000 faa4 	bl	8008980 <abort>
 8008438:	4b04      	ldr	r3, [pc, #16]	; (800844c <__assert_func+0x38>)
 800843a:	461c      	mov	r4, r3
 800843c:	e7f3      	b.n	8008426 <__assert_func+0x12>
 800843e:	bf00      	nop
 8008440:	24000020 	.word	0x24000020
 8008444:	0800963d 	.word	0x0800963d
 8008448:	0800964a 	.word	0x0800964a
 800844c:	08009678 	.word	0x08009678

08008450 <fiprintf>:
 8008450:	b40e      	push	{r1, r2, r3}
 8008452:	b503      	push	{r0, r1, lr}
 8008454:	4601      	mov	r1, r0
 8008456:	ab03      	add	r3, sp, #12
 8008458:	4805      	ldr	r0, [pc, #20]	; (8008470 <fiprintf+0x20>)
 800845a:	f853 2b04 	ldr.w	r2, [r3], #4
 800845e:	6800      	ldr	r0, [r0, #0]
 8008460:	9301      	str	r3, [sp, #4]
 8008462:	f000 f88f 	bl	8008584 <_vfiprintf_r>
 8008466:	b002      	add	sp, #8
 8008468:	f85d eb04 	ldr.w	lr, [sp], #4
 800846c:	b003      	add	sp, #12
 800846e:	4770      	bx	lr
 8008470:	24000020 	.word	0x24000020

08008474 <__retarget_lock_init_recursive>:
 8008474:	4770      	bx	lr

08008476 <__retarget_lock_acquire_recursive>:
 8008476:	4770      	bx	lr

08008478 <__retarget_lock_release_recursive>:
 8008478:	4770      	bx	lr

0800847a <__ascii_mbtowc>:
 800847a:	b082      	sub	sp, #8
 800847c:	b901      	cbnz	r1, 8008480 <__ascii_mbtowc+0x6>
 800847e:	a901      	add	r1, sp, #4
 8008480:	b142      	cbz	r2, 8008494 <__ascii_mbtowc+0x1a>
 8008482:	b14b      	cbz	r3, 8008498 <__ascii_mbtowc+0x1e>
 8008484:	7813      	ldrb	r3, [r2, #0]
 8008486:	600b      	str	r3, [r1, #0]
 8008488:	7812      	ldrb	r2, [r2, #0]
 800848a:	1e10      	subs	r0, r2, #0
 800848c:	bf18      	it	ne
 800848e:	2001      	movne	r0, #1
 8008490:	b002      	add	sp, #8
 8008492:	4770      	bx	lr
 8008494:	4610      	mov	r0, r2
 8008496:	e7fb      	b.n	8008490 <__ascii_mbtowc+0x16>
 8008498:	f06f 0001 	mvn.w	r0, #1
 800849c:	e7f8      	b.n	8008490 <__ascii_mbtowc+0x16>

0800849e <memmove>:
 800849e:	4288      	cmp	r0, r1
 80084a0:	b510      	push	{r4, lr}
 80084a2:	eb01 0402 	add.w	r4, r1, r2
 80084a6:	d902      	bls.n	80084ae <memmove+0x10>
 80084a8:	4284      	cmp	r4, r0
 80084aa:	4623      	mov	r3, r4
 80084ac:	d807      	bhi.n	80084be <memmove+0x20>
 80084ae:	1e43      	subs	r3, r0, #1
 80084b0:	42a1      	cmp	r1, r4
 80084b2:	d008      	beq.n	80084c6 <memmove+0x28>
 80084b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084bc:	e7f8      	b.n	80084b0 <memmove+0x12>
 80084be:	4402      	add	r2, r0
 80084c0:	4601      	mov	r1, r0
 80084c2:	428a      	cmp	r2, r1
 80084c4:	d100      	bne.n	80084c8 <memmove+0x2a>
 80084c6:	bd10      	pop	{r4, pc}
 80084c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084d0:	e7f7      	b.n	80084c2 <memmove+0x24>

080084d2 <_realloc_r>:
 80084d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084d6:	4680      	mov	r8, r0
 80084d8:	4614      	mov	r4, r2
 80084da:	460e      	mov	r6, r1
 80084dc:	b921      	cbnz	r1, 80084e8 <_realloc_r+0x16>
 80084de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084e2:	4611      	mov	r1, r2
 80084e4:	f7fd bfa0 	b.w	8006428 <_malloc_r>
 80084e8:	b92a      	cbnz	r2, 80084f6 <_realloc_r+0x24>
 80084ea:	f7fd ff31 	bl	8006350 <_free_r>
 80084ee:	4625      	mov	r5, r4
 80084f0:	4628      	mov	r0, r5
 80084f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084f6:	f000 fc67 	bl	8008dc8 <_malloc_usable_size_r>
 80084fa:	4284      	cmp	r4, r0
 80084fc:	4607      	mov	r7, r0
 80084fe:	d802      	bhi.n	8008506 <_realloc_r+0x34>
 8008500:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008504:	d812      	bhi.n	800852c <_realloc_r+0x5a>
 8008506:	4621      	mov	r1, r4
 8008508:	4640      	mov	r0, r8
 800850a:	f7fd ff8d 	bl	8006428 <_malloc_r>
 800850e:	4605      	mov	r5, r0
 8008510:	2800      	cmp	r0, #0
 8008512:	d0ed      	beq.n	80084f0 <_realloc_r+0x1e>
 8008514:	42bc      	cmp	r4, r7
 8008516:	4622      	mov	r2, r4
 8008518:	4631      	mov	r1, r6
 800851a:	bf28      	it	cs
 800851c:	463a      	movcs	r2, r7
 800851e:	f7ff fa69 	bl	80079f4 <memcpy>
 8008522:	4631      	mov	r1, r6
 8008524:	4640      	mov	r0, r8
 8008526:	f7fd ff13 	bl	8006350 <_free_r>
 800852a:	e7e1      	b.n	80084f0 <_realloc_r+0x1e>
 800852c:	4635      	mov	r5, r6
 800852e:	e7df      	b.n	80084f0 <_realloc_r+0x1e>

08008530 <__sfputc_r>:
 8008530:	6893      	ldr	r3, [r2, #8]
 8008532:	3b01      	subs	r3, #1
 8008534:	2b00      	cmp	r3, #0
 8008536:	b410      	push	{r4}
 8008538:	6093      	str	r3, [r2, #8]
 800853a:	da08      	bge.n	800854e <__sfputc_r+0x1e>
 800853c:	6994      	ldr	r4, [r2, #24]
 800853e:	42a3      	cmp	r3, r4
 8008540:	db01      	blt.n	8008546 <__sfputc_r+0x16>
 8008542:	290a      	cmp	r1, #10
 8008544:	d103      	bne.n	800854e <__sfputc_r+0x1e>
 8008546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800854a:	f000 b94b 	b.w	80087e4 <__swbuf_r>
 800854e:	6813      	ldr	r3, [r2, #0]
 8008550:	1c58      	adds	r0, r3, #1
 8008552:	6010      	str	r0, [r2, #0]
 8008554:	7019      	strb	r1, [r3, #0]
 8008556:	4608      	mov	r0, r1
 8008558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800855c:	4770      	bx	lr

0800855e <__sfputs_r>:
 800855e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008560:	4606      	mov	r6, r0
 8008562:	460f      	mov	r7, r1
 8008564:	4614      	mov	r4, r2
 8008566:	18d5      	adds	r5, r2, r3
 8008568:	42ac      	cmp	r4, r5
 800856a:	d101      	bne.n	8008570 <__sfputs_r+0x12>
 800856c:	2000      	movs	r0, #0
 800856e:	e007      	b.n	8008580 <__sfputs_r+0x22>
 8008570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008574:	463a      	mov	r2, r7
 8008576:	4630      	mov	r0, r6
 8008578:	f7ff ffda 	bl	8008530 <__sfputc_r>
 800857c:	1c43      	adds	r3, r0, #1
 800857e:	d1f3      	bne.n	8008568 <__sfputs_r+0xa>
 8008580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008584 <_vfiprintf_r>:
 8008584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008588:	460d      	mov	r5, r1
 800858a:	b09d      	sub	sp, #116	; 0x74
 800858c:	4614      	mov	r4, r2
 800858e:	4698      	mov	r8, r3
 8008590:	4606      	mov	r6, r0
 8008592:	b118      	cbz	r0, 800859c <_vfiprintf_r+0x18>
 8008594:	6983      	ldr	r3, [r0, #24]
 8008596:	b90b      	cbnz	r3, 800859c <_vfiprintf_r+0x18>
 8008598:	f000 fb14 	bl	8008bc4 <__sinit>
 800859c:	4b89      	ldr	r3, [pc, #548]	; (80087c4 <_vfiprintf_r+0x240>)
 800859e:	429d      	cmp	r5, r3
 80085a0:	d11b      	bne.n	80085da <_vfiprintf_r+0x56>
 80085a2:	6875      	ldr	r5, [r6, #4]
 80085a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085a6:	07d9      	lsls	r1, r3, #31
 80085a8:	d405      	bmi.n	80085b6 <_vfiprintf_r+0x32>
 80085aa:	89ab      	ldrh	r3, [r5, #12]
 80085ac:	059a      	lsls	r2, r3, #22
 80085ae:	d402      	bmi.n	80085b6 <_vfiprintf_r+0x32>
 80085b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085b2:	f7ff ff60 	bl	8008476 <__retarget_lock_acquire_recursive>
 80085b6:	89ab      	ldrh	r3, [r5, #12]
 80085b8:	071b      	lsls	r3, r3, #28
 80085ba:	d501      	bpl.n	80085c0 <_vfiprintf_r+0x3c>
 80085bc:	692b      	ldr	r3, [r5, #16]
 80085be:	b9eb      	cbnz	r3, 80085fc <_vfiprintf_r+0x78>
 80085c0:	4629      	mov	r1, r5
 80085c2:	4630      	mov	r0, r6
 80085c4:	f000 f96e 	bl	80088a4 <__swsetup_r>
 80085c8:	b1c0      	cbz	r0, 80085fc <_vfiprintf_r+0x78>
 80085ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085cc:	07dc      	lsls	r4, r3, #31
 80085ce:	d50e      	bpl.n	80085ee <_vfiprintf_r+0x6a>
 80085d0:	f04f 30ff 	mov.w	r0, #4294967295
 80085d4:	b01d      	add	sp, #116	; 0x74
 80085d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085da:	4b7b      	ldr	r3, [pc, #492]	; (80087c8 <_vfiprintf_r+0x244>)
 80085dc:	429d      	cmp	r5, r3
 80085de:	d101      	bne.n	80085e4 <_vfiprintf_r+0x60>
 80085e0:	68b5      	ldr	r5, [r6, #8]
 80085e2:	e7df      	b.n	80085a4 <_vfiprintf_r+0x20>
 80085e4:	4b79      	ldr	r3, [pc, #484]	; (80087cc <_vfiprintf_r+0x248>)
 80085e6:	429d      	cmp	r5, r3
 80085e8:	bf08      	it	eq
 80085ea:	68f5      	ldreq	r5, [r6, #12]
 80085ec:	e7da      	b.n	80085a4 <_vfiprintf_r+0x20>
 80085ee:	89ab      	ldrh	r3, [r5, #12]
 80085f0:	0598      	lsls	r0, r3, #22
 80085f2:	d4ed      	bmi.n	80085d0 <_vfiprintf_r+0x4c>
 80085f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085f6:	f7ff ff3f 	bl	8008478 <__retarget_lock_release_recursive>
 80085fa:	e7e9      	b.n	80085d0 <_vfiprintf_r+0x4c>
 80085fc:	2300      	movs	r3, #0
 80085fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008600:	2320      	movs	r3, #32
 8008602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008606:	f8cd 800c 	str.w	r8, [sp, #12]
 800860a:	2330      	movs	r3, #48	; 0x30
 800860c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80087d0 <_vfiprintf_r+0x24c>
 8008610:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008614:	f04f 0901 	mov.w	r9, #1
 8008618:	4623      	mov	r3, r4
 800861a:	469a      	mov	sl, r3
 800861c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008620:	b10a      	cbz	r2, 8008626 <_vfiprintf_r+0xa2>
 8008622:	2a25      	cmp	r2, #37	; 0x25
 8008624:	d1f9      	bne.n	800861a <_vfiprintf_r+0x96>
 8008626:	ebba 0b04 	subs.w	fp, sl, r4
 800862a:	d00b      	beq.n	8008644 <_vfiprintf_r+0xc0>
 800862c:	465b      	mov	r3, fp
 800862e:	4622      	mov	r2, r4
 8008630:	4629      	mov	r1, r5
 8008632:	4630      	mov	r0, r6
 8008634:	f7ff ff93 	bl	800855e <__sfputs_r>
 8008638:	3001      	adds	r0, #1
 800863a:	f000 80aa 	beq.w	8008792 <_vfiprintf_r+0x20e>
 800863e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008640:	445a      	add	r2, fp
 8008642:	9209      	str	r2, [sp, #36]	; 0x24
 8008644:	f89a 3000 	ldrb.w	r3, [sl]
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 80a2 	beq.w	8008792 <_vfiprintf_r+0x20e>
 800864e:	2300      	movs	r3, #0
 8008650:	f04f 32ff 	mov.w	r2, #4294967295
 8008654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008658:	f10a 0a01 	add.w	sl, sl, #1
 800865c:	9304      	str	r3, [sp, #16]
 800865e:	9307      	str	r3, [sp, #28]
 8008660:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008664:	931a      	str	r3, [sp, #104]	; 0x68
 8008666:	4654      	mov	r4, sl
 8008668:	2205      	movs	r2, #5
 800866a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800866e:	4858      	ldr	r0, [pc, #352]	; (80087d0 <_vfiprintf_r+0x24c>)
 8008670:	f7f7 fe46 	bl	8000300 <memchr>
 8008674:	9a04      	ldr	r2, [sp, #16]
 8008676:	b9d8      	cbnz	r0, 80086b0 <_vfiprintf_r+0x12c>
 8008678:	06d1      	lsls	r1, r2, #27
 800867a:	bf44      	itt	mi
 800867c:	2320      	movmi	r3, #32
 800867e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008682:	0713      	lsls	r3, r2, #28
 8008684:	bf44      	itt	mi
 8008686:	232b      	movmi	r3, #43	; 0x2b
 8008688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800868c:	f89a 3000 	ldrb.w	r3, [sl]
 8008690:	2b2a      	cmp	r3, #42	; 0x2a
 8008692:	d015      	beq.n	80086c0 <_vfiprintf_r+0x13c>
 8008694:	9a07      	ldr	r2, [sp, #28]
 8008696:	4654      	mov	r4, sl
 8008698:	2000      	movs	r0, #0
 800869a:	f04f 0c0a 	mov.w	ip, #10
 800869e:	4621      	mov	r1, r4
 80086a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086a4:	3b30      	subs	r3, #48	; 0x30
 80086a6:	2b09      	cmp	r3, #9
 80086a8:	d94e      	bls.n	8008748 <_vfiprintf_r+0x1c4>
 80086aa:	b1b0      	cbz	r0, 80086da <_vfiprintf_r+0x156>
 80086ac:	9207      	str	r2, [sp, #28]
 80086ae:	e014      	b.n	80086da <_vfiprintf_r+0x156>
 80086b0:	eba0 0308 	sub.w	r3, r0, r8
 80086b4:	fa09 f303 	lsl.w	r3, r9, r3
 80086b8:	4313      	orrs	r3, r2
 80086ba:	9304      	str	r3, [sp, #16]
 80086bc:	46a2      	mov	sl, r4
 80086be:	e7d2      	b.n	8008666 <_vfiprintf_r+0xe2>
 80086c0:	9b03      	ldr	r3, [sp, #12]
 80086c2:	1d19      	adds	r1, r3, #4
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	9103      	str	r1, [sp, #12]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	bfbb      	ittet	lt
 80086cc:	425b      	neglt	r3, r3
 80086ce:	f042 0202 	orrlt.w	r2, r2, #2
 80086d2:	9307      	strge	r3, [sp, #28]
 80086d4:	9307      	strlt	r3, [sp, #28]
 80086d6:	bfb8      	it	lt
 80086d8:	9204      	strlt	r2, [sp, #16]
 80086da:	7823      	ldrb	r3, [r4, #0]
 80086dc:	2b2e      	cmp	r3, #46	; 0x2e
 80086de:	d10c      	bne.n	80086fa <_vfiprintf_r+0x176>
 80086e0:	7863      	ldrb	r3, [r4, #1]
 80086e2:	2b2a      	cmp	r3, #42	; 0x2a
 80086e4:	d135      	bne.n	8008752 <_vfiprintf_r+0x1ce>
 80086e6:	9b03      	ldr	r3, [sp, #12]
 80086e8:	1d1a      	adds	r2, r3, #4
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	9203      	str	r2, [sp, #12]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	bfb8      	it	lt
 80086f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80086f6:	3402      	adds	r4, #2
 80086f8:	9305      	str	r3, [sp, #20]
 80086fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80087e0 <_vfiprintf_r+0x25c>
 80086fe:	7821      	ldrb	r1, [r4, #0]
 8008700:	2203      	movs	r2, #3
 8008702:	4650      	mov	r0, sl
 8008704:	f7f7 fdfc 	bl	8000300 <memchr>
 8008708:	b140      	cbz	r0, 800871c <_vfiprintf_r+0x198>
 800870a:	2340      	movs	r3, #64	; 0x40
 800870c:	eba0 000a 	sub.w	r0, r0, sl
 8008710:	fa03 f000 	lsl.w	r0, r3, r0
 8008714:	9b04      	ldr	r3, [sp, #16]
 8008716:	4303      	orrs	r3, r0
 8008718:	3401      	adds	r4, #1
 800871a:	9304      	str	r3, [sp, #16]
 800871c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008720:	482c      	ldr	r0, [pc, #176]	; (80087d4 <_vfiprintf_r+0x250>)
 8008722:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008726:	2206      	movs	r2, #6
 8008728:	f7f7 fdea 	bl	8000300 <memchr>
 800872c:	2800      	cmp	r0, #0
 800872e:	d03f      	beq.n	80087b0 <_vfiprintf_r+0x22c>
 8008730:	4b29      	ldr	r3, [pc, #164]	; (80087d8 <_vfiprintf_r+0x254>)
 8008732:	bb1b      	cbnz	r3, 800877c <_vfiprintf_r+0x1f8>
 8008734:	9b03      	ldr	r3, [sp, #12]
 8008736:	3307      	adds	r3, #7
 8008738:	f023 0307 	bic.w	r3, r3, #7
 800873c:	3308      	adds	r3, #8
 800873e:	9303      	str	r3, [sp, #12]
 8008740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008742:	443b      	add	r3, r7
 8008744:	9309      	str	r3, [sp, #36]	; 0x24
 8008746:	e767      	b.n	8008618 <_vfiprintf_r+0x94>
 8008748:	fb0c 3202 	mla	r2, ip, r2, r3
 800874c:	460c      	mov	r4, r1
 800874e:	2001      	movs	r0, #1
 8008750:	e7a5      	b.n	800869e <_vfiprintf_r+0x11a>
 8008752:	2300      	movs	r3, #0
 8008754:	3401      	adds	r4, #1
 8008756:	9305      	str	r3, [sp, #20]
 8008758:	4619      	mov	r1, r3
 800875a:	f04f 0c0a 	mov.w	ip, #10
 800875e:	4620      	mov	r0, r4
 8008760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008764:	3a30      	subs	r2, #48	; 0x30
 8008766:	2a09      	cmp	r2, #9
 8008768:	d903      	bls.n	8008772 <_vfiprintf_r+0x1ee>
 800876a:	2b00      	cmp	r3, #0
 800876c:	d0c5      	beq.n	80086fa <_vfiprintf_r+0x176>
 800876e:	9105      	str	r1, [sp, #20]
 8008770:	e7c3      	b.n	80086fa <_vfiprintf_r+0x176>
 8008772:	fb0c 2101 	mla	r1, ip, r1, r2
 8008776:	4604      	mov	r4, r0
 8008778:	2301      	movs	r3, #1
 800877a:	e7f0      	b.n	800875e <_vfiprintf_r+0x1da>
 800877c:	ab03      	add	r3, sp, #12
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	462a      	mov	r2, r5
 8008782:	4b16      	ldr	r3, [pc, #88]	; (80087dc <_vfiprintf_r+0x258>)
 8008784:	a904      	add	r1, sp, #16
 8008786:	4630      	mov	r0, r6
 8008788:	f7fd ff52 	bl	8006630 <_printf_float>
 800878c:	4607      	mov	r7, r0
 800878e:	1c78      	adds	r0, r7, #1
 8008790:	d1d6      	bne.n	8008740 <_vfiprintf_r+0x1bc>
 8008792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008794:	07d9      	lsls	r1, r3, #31
 8008796:	d405      	bmi.n	80087a4 <_vfiprintf_r+0x220>
 8008798:	89ab      	ldrh	r3, [r5, #12]
 800879a:	059a      	lsls	r2, r3, #22
 800879c:	d402      	bmi.n	80087a4 <_vfiprintf_r+0x220>
 800879e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087a0:	f7ff fe6a 	bl	8008478 <__retarget_lock_release_recursive>
 80087a4:	89ab      	ldrh	r3, [r5, #12]
 80087a6:	065b      	lsls	r3, r3, #25
 80087a8:	f53f af12 	bmi.w	80085d0 <_vfiprintf_r+0x4c>
 80087ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087ae:	e711      	b.n	80085d4 <_vfiprintf_r+0x50>
 80087b0:	ab03      	add	r3, sp, #12
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	462a      	mov	r2, r5
 80087b6:	4b09      	ldr	r3, [pc, #36]	; (80087dc <_vfiprintf_r+0x258>)
 80087b8:	a904      	add	r1, sp, #16
 80087ba:	4630      	mov	r0, r6
 80087bc:	f7fe f9c4 	bl	8006b48 <_printf_i>
 80087c0:	e7e4      	b.n	800878c <_vfiprintf_r+0x208>
 80087c2:	bf00      	nop
 80087c4:	080097a4 	.word	0x080097a4
 80087c8:	080097c4 	.word	0x080097c4
 80087cc:	08009784 	.word	0x08009784
 80087d0:	0800962c 	.word	0x0800962c
 80087d4:	08009636 	.word	0x08009636
 80087d8:	08006631 	.word	0x08006631
 80087dc:	0800855f 	.word	0x0800855f
 80087e0:	08009632 	.word	0x08009632

080087e4 <__swbuf_r>:
 80087e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e6:	460e      	mov	r6, r1
 80087e8:	4614      	mov	r4, r2
 80087ea:	4605      	mov	r5, r0
 80087ec:	b118      	cbz	r0, 80087f6 <__swbuf_r+0x12>
 80087ee:	6983      	ldr	r3, [r0, #24]
 80087f0:	b90b      	cbnz	r3, 80087f6 <__swbuf_r+0x12>
 80087f2:	f000 f9e7 	bl	8008bc4 <__sinit>
 80087f6:	4b21      	ldr	r3, [pc, #132]	; (800887c <__swbuf_r+0x98>)
 80087f8:	429c      	cmp	r4, r3
 80087fa:	d12b      	bne.n	8008854 <__swbuf_r+0x70>
 80087fc:	686c      	ldr	r4, [r5, #4]
 80087fe:	69a3      	ldr	r3, [r4, #24]
 8008800:	60a3      	str	r3, [r4, #8]
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	071a      	lsls	r2, r3, #28
 8008806:	d52f      	bpl.n	8008868 <__swbuf_r+0x84>
 8008808:	6923      	ldr	r3, [r4, #16]
 800880a:	b36b      	cbz	r3, 8008868 <__swbuf_r+0x84>
 800880c:	6923      	ldr	r3, [r4, #16]
 800880e:	6820      	ldr	r0, [r4, #0]
 8008810:	1ac0      	subs	r0, r0, r3
 8008812:	6963      	ldr	r3, [r4, #20]
 8008814:	b2f6      	uxtb	r6, r6
 8008816:	4283      	cmp	r3, r0
 8008818:	4637      	mov	r7, r6
 800881a:	dc04      	bgt.n	8008826 <__swbuf_r+0x42>
 800881c:	4621      	mov	r1, r4
 800881e:	4628      	mov	r0, r5
 8008820:	f000 f93c 	bl	8008a9c <_fflush_r>
 8008824:	bb30      	cbnz	r0, 8008874 <__swbuf_r+0x90>
 8008826:	68a3      	ldr	r3, [r4, #8]
 8008828:	3b01      	subs	r3, #1
 800882a:	60a3      	str	r3, [r4, #8]
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	1c5a      	adds	r2, r3, #1
 8008830:	6022      	str	r2, [r4, #0]
 8008832:	701e      	strb	r6, [r3, #0]
 8008834:	6963      	ldr	r3, [r4, #20]
 8008836:	3001      	adds	r0, #1
 8008838:	4283      	cmp	r3, r0
 800883a:	d004      	beq.n	8008846 <__swbuf_r+0x62>
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	07db      	lsls	r3, r3, #31
 8008840:	d506      	bpl.n	8008850 <__swbuf_r+0x6c>
 8008842:	2e0a      	cmp	r6, #10
 8008844:	d104      	bne.n	8008850 <__swbuf_r+0x6c>
 8008846:	4621      	mov	r1, r4
 8008848:	4628      	mov	r0, r5
 800884a:	f000 f927 	bl	8008a9c <_fflush_r>
 800884e:	b988      	cbnz	r0, 8008874 <__swbuf_r+0x90>
 8008850:	4638      	mov	r0, r7
 8008852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008854:	4b0a      	ldr	r3, [pc, #40]	; (8008880 <__swbuf_r+0x9c>)
 8008856:	429c      	cmp	r4, r3
 8008858:	d101      	bne.n	800885e <__swbuf_r+0x7a>
 800885a:	68ac      	ldr	r4, [r5, #8]
 800885c:	e7cf      	b.n	80087fe <__swbuf_r+0x1a>
 800885e:	4b09      	ldr	r3, [pc, #36]	; (8008884 <__swbuf_r+0xa0>)
 8008860:	429c      	cmp	r4, r3
 8008862:	bf08      	it	eq
 8008864:	68ec      	ldreq	r4, [r5, #12]
 8008866:	e7ca      	b.n	80087fe <__swbuf_r+0x1a>
 8008868:	4621      	mov	r1, r4
 800886a:	4628      	mov	r0, r5
 800886c:	f000 f81a 	bl	80088a4 <__swsetup_r>
 8008870:	2800      	cmp	r0, #0
 8008872:	d0cb      	beq.n	800880c <__swbuf_r+0x28>
 8008874:	f04f 37ff 	mov.w	r7, #4294967295
 8008878:	e7ea      	b.n	8008850 <__swbuf_r+0x6c>
 800887a:	bf00      	nop
 800887c:	080097a4 	.word	0x080097a4
 8008880:	080097c4 	.word	0x080097c4
 8008884:	08009784 	.word	0x08009784

08008888 <__ascii_wctomb>:
 8008888:	b149      	cbz	r1, 800889e <__ascii_wctomb+0x16>
 800888a:	2aff      	cmp	r2, #255	; 0xff
 800888c:	bf85      	ittet	hi
 800888e:	238a      	movhi	r3, #138	; 0x8a
 8008890:	6003      	strhi	r3, [r0, #0]
 8008892:	700a      	strbls	r2, [r1, #0]
 8008894:	f04f 30ff 	movhi.w	r0, #4294967295
 8008898:	bf98      	it	ls
 800889a:	2001      	movls	r0, #1
 800889c:	4770      	bx	lr
 800889e:	4608      	mov	r0, r1
 80088a0:	4770      	bx	lr
	...

080088a4 <__swsetup_r>:
 80088a4:	4b32      	ldr	r3, [pc, #200]	; (8008970 <__swsetup_r+0xcc>)
 80088a6:	b570      	push	{r4, r5, r6, lr}
 80088a8:	681d      	ldr	r5, [r3, #0]
 80088aa:	4606      	mov	r6, r0
 80088ac:	460c      	mov	r4, r1
 80088ae:	b125      	cbz	r5, 80088ba <__swsetup_r+0x16>
 80088b0:	69ab      	ldr	r3, [r5, #24]
 80088b2:	b913      	cbnz	r3, 80088ba <__swsetup_r+0x16>
 80088b4:	4628      	mov	r0, r5
 80088b6:	f000 f985 	bl	8008bc4 <__sinit>
 80088ba:	4b2e      	ldr	r3, [pc, #184]	; (8008974 <__swsetup_r+0xd0>)
 80088bc:	429c      	cmp	r4, r3
 80088be:	d10f      	bne.n	80088e0 <__swsetup_r+0x3c>
 80088c0:	686c      	ldr	r4, [r5, #4]
 80088c2:	89a3      	ldrh	r3, [r4, #12]
 80088c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088c8:	0719      	lsls	r1, r3, #28
 80088ca:	d42c      	bmi.n	8008926 <__swsetup_r+0x82>
 80088cc:	06dd      	lsls	r5, r3, #27
 80088ce:	d411      	bmi.n	80088f4 <__swsetup_r+0x50>
 80088d0:	2309      	movs	r3, #9
 80088d2:	6033      	str	r3, [r6, #0]
 80088d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088d8:	81a3      	strh	r3, [r4, #12]
 80088da:	f04f 30ff 	mov.w	r0, #4294967295
 80088de:	e03e      	b.n	800895e <__swsetup_r+0xba>
 80088e0:	4b25      	ldr	r3, [pc, #148]	; (8008978 <__swsetup_r+0xd4>)
 80088e2:	429c      	cmp	r4, r3
 80088e4:	d101      	bne.n	80088ea <__swsetup_r+0x46>
 80088e6:	68ac      	ldr	r4, [r5, #8]
 80088e8:	e7eb      	b.n	80088c2 <__swsetup_r+0x1e>
 80088ea:	4b24      	ldr	r3, [pc, #144]	; (800897c <__swsetup_r+0xd8>)
 80088ec:	429c      	cmp	r4, r3
 80088ee:	bf08      	it	eq
 80088f0:	68ec      	ldreq	r4, [r5, #12]
 80088f2:	e7e6      	b.n	80088c2 <__swsetup_r+0x1e>
 80088f4:	0758      	lsls	r0, r3, #29
 80088f6:	d512      	bpl.n	800891e <__swsetup_r+0x7a>
 80088f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088fa:	b141      	cbz	r1, 800890e <__swsetup_r+0x6a>
 80088fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008900:	4299      	cmp	r1, r3
 8008902:	d002      	beq.n	800890a <__swsetup_r+0x66>
 8008904:	4630      	mov	r0, r6
 8008906:	f7fd fd23 	bl	8006350 <_free_r>
 800890a:	2300      	movs	r3, #0
 800890c:	6363      	str	r3, [r4, #52]	; 0x34
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008914:	81a3      	strh	r3, [r4, #12]
 8008916:	2300      	movs	r3, #0
 8008918:	6063      	str	r3, [r4, #4]
 800891a:	6923      	ldr	r3, [r4, #16]
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	89a3      	ldrh	r3, [r4, #12]
 8008920:	f043 0308 	orr.w	r3, r3, #8
 8008924:	81a3      	strh	r3, [r4, #12]
 8008926:	6923      	ldr	r3, [r4, #16]
 8008928:	b94b      	cbnz	r3, 800893e <__swsetup_r+0x9a>
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008934:	d003      	beq.n	800893e <__swsetup_r+0x9a>
 8008936:	4621      	mov	r1, r4
 8008938:	4630      	mov	r0, r6
 800893a:	f000 fa05 	bl	8008d48 <__smakebuf_r>
 800893e:	89a0      	ldrh	r0, [r4, #12]
 8008940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008944:	f010 0301 	ands.w	r3, r0, #1
 8008948:	d00a      	beq.n	8008960 <__swsetup_r+0xbc>
 800894a:	2300      	movs	r3, #0
 800894c:	60a3      	str	r3, [r4, #8]
 800894e:	6963      	ldr	r3, [r4, #20]
 8008950:	425b      	negs	r3, r3
 8008952:	61a3      	str	r3, [r4, #24]
 8008954:	6923      	ldr	r3, [r4, #16]
 8008956:	b943      	cbnz	r3, 800896a <__swsetup_r+0xc6>
 8008958:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800895c:	d1ba      	bne.n	80088d4 <__swsetup_r+0x30>
 800895e:	bd70      	pop	{r4, r5, r6, pc}
 8008960:	0781      	lsls	r1, r0, #30
 8008962:	bf58      	it	pl
 8008964:	6963      	ldrpl	r3, [r4, #20]
 8008966:	60a3      	str	r3, [r4, #8]
 8008968:	e7f4      	b.n	8008954 <__swsetup_r+0xb0>
 800896a:	2000      	movs	r0, #0
 800896c:	e7f7      	b.n	800895e <__swsetup_r+0xba>
 800896e:	bf00      	nop
 8008970:	24000020 	.word	0x24000020
 8008974:	080097a4 	.word	0x080097a4
 8008978:	080097c4 	.word	0x080097c4
 800897c:	08009784 	.word	0x08009784

08008980 <abort>:
 8008980:	b508      	push	{r3, lr}
 8008982:	2006      	movs	r0, #6
 8008984:	f000 fa50 	bl	8008e28 <raise>
 8008988:	2001      	movs	r0, #1
 800898a:	f7f9 faf5 	bl	8001f78 <_exit>
	...

08008990 <__sflush_r>:
 8008990:	898a      	ldrh	r2, [r1, #12]
 8008992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008996:	4605      	mov	r5, r0
 8008998:	0710      	lsls	r0, r2, #28
 800899a:	460c      	mov	r4, r1
 800899c:	d458      	bmi.n	8008a50 <__sflush_r+0xc0>
 800899e:	684b      	ldr	r3, [r1, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	dc05      	bgt.n	80089b0 <__sflush_r+0x20>
 80089a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	dc02      	bgt.n	80089b0 <__sflush_r+0x20>
 80089aa:	2000      	movs	r0, #0
 80089ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089b2:	2e00      	cmp	r6, #0
 80089b4:	d0f9      	beq.n	80089aa <__sflush_r+0x1a>
 80089b6:	2300      	movs	r3, #0
 80089b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089bc:	682f      	ldr	r7, [r5, #0]
 80089be:	602b      	str	r3, [r5, #0]
 80089c0:	d032      	beq.n	8008a28 <__sflush_r+0x98>
 80089c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089c4:	89a3      	ldrh	r3, [r4, #12]
 80089c6:	075a      	lsls	r2, r3, #29
 80089c8:	d505      	bpl.n	80089d6 <__sflush_r+0x46>
 80089ca:	6863      	ldr	r3, [r4, #4]
 80089cc:	1ac0      	subs	r0, r0, r3
 80089ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089d0:	b10b      	cbz	r3, 80089d6 <__sflush_r+0x46>
 80089d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089d4:	1ac0      	subs	r0, r0, r3
 80089d6:	2300      	movs	r3, #0
 80089d8:	4602      	mov	r2, r0
 80089da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089dc:	6a21      	ldr	r1, [r4, #32]
 80089de:	4628      	mov	r0, r5
 80089e0:	47b0      	blx	r6
 80089e2:	1c43      	adds	r3, r0, #1
 80089e4:	89a3      	ldrh	r3, [r4, #12]
 80089e6:	d106      	bne.n	80089f6 <__sflush_r+0x66>
 80089e8:	6829      	ldr	r1, [r5, #0]
 80089ea:	291d      	cmp	r1, #29
 80089ec:	d82c      	bhi.n	8008a48 <__sflush_r+0xb8>
 80089ee:	4a2a      	ldr	r2, [pc, #168]	; (8008a98 <__sflush_r+0x108>)
 80089f0:	40ca      	lsrs	r2, r1
 80089f2:	07d6      	lsls	r6, r2, #31
 80089f4:	d528      	bpl.n	8008a48 <__sflush_r+0xb8>
 80089f6:	2200      	movs	r2, #0
 80089f8:	6062      	str	r2, [r4, #4]
 80089fa:	04d9      	lsls	r1, r3, #19
 80089fc:	6922      	ldr	r2, [r4, #16]
 80089fe:	6022      	str	r2, [r4, #0]
 8008a00:	d504      	bpl.n	8008a0c <__sflush_r+0x7c>
 8008a02:	1c42      	adds	r2, r0, #1
 8008a04:	d101      	bne.n	8008a0a <__sflush_r+0x7a>
 8008a06:	682b      	ldr	r3, [r5, #0]
 8008a08:	b903      	cbnz	r3, 8008a0c <__sflush_r+0x7c>
 8008a0a:	6560      	str	r0, [r4, #84]	; 0x54
 8008a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a0e:	602f      	str	r7, [r5, #0]
 8008a10:	2900      	cmp	r1, #0
 8008a12:	d0ca      	beq.n	80089aa <__sflush_r+0x1a>
 8008a14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a18:	4299      	cmp	r1, r3
 8008a1a:	d002      	beq.n	8008a22 <__sflush_r+0x92>
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	f7fd fc97 	bl	8006350 <_free_r>
 8008a22:	2000      	movs	r0, #0
 8008a24:	6360      	str	r0, [r4, #52]	; 0x34
 8008a26:	e7c1      	b.n	80089ac <__sflush_r+0x1c>
 8008a28:	6a21      	ldr	r1, [r4, #32]
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	47b0      	blx	r6
 8008a30:	1c41      	adds	r1, r0, #1
 8008a32:	d1c7      	bne.n	80089c4 <__sflush_r+0x34>
 8008a34:	682b      	ldr	r3, [r5, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d0c4      	beq.n	80089c4 <__sflush_r+0x34>
 8008a3a:	2b1d      	cmp	r3, #29
 8008a3c:	d001      	beq.n	8008a42 <__sflush_r+0xb2>
 8008a3e:	2b16      	cmp	r3, #22
 8008a40:	d101      	bne.n	8008a46 <__sflush_r+0xb6>
 8008a42:	602f      	str	r7, [r5, #0]
 8008a44:	e7b1      	b.n	80089aa <__sflush_r+0x1a>
 8008a46:	89a3      	ldrh	r3, [r4, #12]
 8008a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a4c:	81a3      	strh	r3, [r4, #12]
 8008a4e:	e7ad      	b.n	80089ac <__sflush_r+0x1c>
 8008a50:	690f      	ldr	r7, [r1, #16]
 8008a52:	2f00      	cmp	r7, #0
 8008a54:	d0a9      	beq.n	80089aa <__sflush_r+0x1a>
 8008a56:	0793      	lsls	r3, r2, #30
 8008a58:	680e      	ldr	r6, [r1, #0]
 8008a5a:	bf08      	it	eq
 8008a5c:	694b      	ldreq	r3, [r1, #20]
 8008a5e:	600f      	str	r7, [r1, #0]
 8008a60:	bf18      	it	ne
 8008a62:	2300      	movne	r3, #0
 8008a64:	eba6 0807 	sub.w	r8, r6, r7
 8008a68:	608b      	str	r3, [r1, #8]
 8008a6a:	f1b8 0f00 	cmp.w	r8, #0
 8008a6e:	dd9c      	ble.n	80089aa <__sflush_r+0x1a>
 8008a70:	6a21      	ldr	r1, [r4, #32]
 8008a72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a74:	4643      	mov	r3, r8
 8008a76:	463a      	mov	r2, r7
 8008a78:	4628      	mov	r0, r5
 8008a7a:	47b0      	blx	r6
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	dc06      	bgt.n	8008a8e <__sflush_r+0xfe>
 8008a80:	89a3      	ldrh	r3, [r4, #12]
 8008a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a86:	81a3      	strh	r3, [r4, #12]
 8008a88:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8c:	e78e      	b.n	80089ac <__sflush_r+0x1c>
 8008a8e:	4407      	add	r7, r0
 8008a90:	eba8 0800 	sub.w	r8, r8, r0
 8008a94:	e7e9      	b.n	8008a6a <__sflush_r+0xda>
 8008a96:	bf00      	nop
 8008a98:	20400001 	.word	0x20400001

08008a9c <_fflush_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	690b      	ldr	r3, [r1, #16]
 8008aa0:	4605      	mov	r5, r0
 8008aa2:	460c      	mov	r4, r1
 8008aa4:	b913      	cbnz	r3, 8008aac <_fflush_r+0x10>
 8008aa6:	2500      	movs	r5, #0
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	bd38      	pop	{r3, r4, r5, pc}
 8008aac:	b118      	cbz	r0, 8008ab6 <_fflush_r+0x1a>
 8008aae:	6983      	ldr	r3, [r0, #24]
 8008ab0:	b90b      	cbnz	r3, 8008ab6 <_fflush_r+0x1a>
 8008ab2:	f000 f887 	bl	8008bc4 <__sinit>
 8008ab6:	4b14      	ldr	r3, [pc, #80]	; (8008b08 <_fflush_r+0x6c>)
 8008ab8:	429c      	cmp	r4, r3
 8008aba:	d11b      	bne.n	8008af4 <_fflush_r+0x58>
 8008abc:	686c      	ldr	r4, [r5, #4]
 8008abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d0ef      	beq.n	8008aa6 <_fflush_r+0xa>
 8008ac6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ac8:	07d0      	lsls	r0, r2, #31
 8008aca:	d404      	bmi.n	8008ad6 <_fflush_r+0x3a>
 8008acc:	0599      	lsls	r1, r3, #22
 8008ace:	d402      	bmi.n	8008ad6 <_fflush_r+0x3a>
 8008ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ad2:	f7ff fcd0 	bl	8008476 <__retarget_lock_acquire_recursive>
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	4621      	mov	r1, r4
 8008ada:	f7ff ff59 	bl	8008990 <__sflush_r>
 8008ade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ae0:	07da      	lsls	r2, r3, #31
 8008ae2:	4605      	mov	r5, r0
 8008ae4:	d4e0      	bmi.n	8008aa8 <_fflush_r+0xc>
 8008ae6:	89a3      	ldrh	r3, [r4, #12]
 8008ae8:	059b      	lsls	r3, r3, #22
 8008aea:	d4dd      	bmi.n	8008aa8 <_fflush_r+0xc>
 8008aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aee:	f7ff fcc3 	bl	8008478 <__retarget_lock_release_recursive>
 8008af2:	e7d9      	b.n	8008aa8 <_fflush_r+0xc>
 8008af4:	4b05      	ldr	r3, [pc, #20]	; (8008b0c <_fflush_r+0x70>)
 8008af6:	429c      	cmp	r4, r3
 8008af8:	d101      	bne.n	8008afe <_fflush_r+0x62>
 8008afa:	68ac      	ldr	r4, [r5, #8]
 8008afc:	e7df      	b.n	8008abe <_fflush_r+0x22>
 8008afe:	4b04      	ldr	r3, [pc, #16]	; (8008b10 <_fflush_r+0x74>)
 8008b00:	429c      	cmp	r4, r3
 8008b02:	bf08      	it	eq
 8008b04:	68ec      	ldreq	r4, [r5, #12]
 8008b06:	e7da      	b.n	8008abe <_fflush_r+0x22>
 8008b08:	080097a4 	.word	0x080097a4
 8008b0c:	080097c4 	.word	0x080097c4
 8008b10:	08009784 	.word	0x08009784

08008b14 <std>:
 8008b14:	2300      	movs	r3, #0
 8008b16:	b510      	push	{r4, lr}
 8008b18:	4604      	mov	r4, r0
 8008b1a:	e9c0 3300 	strd	r3, r3, [r0]
 8008b1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b22:	6083      	str	r3, [r0, #8]
 8008b24:	8181      	strh	r1, [r0, #12]
 8008b26:	6643      	str	r3, [r0, #100]	; 0x64
 8008b28:	81c2      	strh	r2, [r0, #14]
 8008b2a:	6183      	str	r3, [r0, #24]
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	2208      	movs	r2, #8
 8008b30:	305c      	adds	r0, #92	; 0x5c
 8008b32:	f7fd fc05 	bl	8006340 <memset>
 8008b36:	4b05      	ldr	r3, [pc, #20]	; (8008b4c <std+0x38>)
 8008b38:	6263      	str	r3, [r4, #36]	; 0x24
 8008b3a:	4b05      	ldr	r3, [pc, #20]	; (8008b50 <std+0x3c>)
 8008b3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b3e:	4b05      	ldr	r3, [pc, #20]	; (8008b54 <std+0x40>)
 8008b40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b42:	4b05      	ldr	r3, [pc, #20]	; (8008b58 <std+0x44>)
 8008b44:	6224      	str	r4, [r4, #32]
 8008b46:	6323      	str	r3, [r4, #48]	; 0x30
 8008b48:	bd10      	pop	{r4, pc}
 8008b4a:	bf00      	nop
 8008b4c:	08008e61 	.word	0x08008e61
 8008b50:	08008e83 	.word	0x08008e83
 8008b54:	08008ebb 	.word	0x08008ebb
 8008b58:	08008edf 	.word	0x08008edf

08008b5c <_cleanup_r>:
 8008b5c:	4901      	ldr	r1, [pc, #4]	; (8008b64 <_cleanup_r+0x8>)
 8008b5e:	f000 b8af 	b.w	8008cc0 <_fwalk_reent>
 8008b62:	bf00      	nop
 8008b64:	08008a9d 	.word	0x08008a9d

08008b68 <__sfmoreglue>:
 8008b68:	b570      	push	{r4, r5, r6, lr}
 8008b6a:	2268      	movs	r2, #104	; 0x68
 8008b6c:	1e4d      	subs	r5, r1, #1
 8008b6e:	4355      	muls	r5, r2
 8008b70:	460e      	mov	r6, r1
 8008b72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b76:	f7fd fc57 	bl	8006428 <_malloc_r>
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	b140      	cbz	r0, 8008b90 <__sfmoreglue+0x28>
 8008b7e:	2100      	movs	r1, #0
 8008b80:	e9c0 1600 	strd	r1, r6, [r0]
 8008b84:	300c      	adds	r0, #12
 8008b86:	60a0      	str	r0, [r4, #8]
 8008b88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b8c:	f7fd fbd8 	bl	8006340 <memset>
 8008b90:	4620      	mov	r0, r4
 8008b92:	bd70      	pop	{r4, r5, r6, pc}

08008b94 <__sfp_lock_acquire>:
 8008b94:	4801      	ldr	r0, [pc, #4]	; (8008b9c <__sfp_lock_acquire+0x8>)
 8008b96:	f7ff bc6e 	b.w	8008476 <__retarget_lock_acquire_recursive>
 8008b9a:	bf00      	nop
 8008b9c:	240003c5 	.word	0x240003c5

08008ba0 <__sfp_lock_release>:
 8008ba0:	4801      	ldr	r0, [pc, #4]	; (8008ba8 <__sfp_lock_release+0x8>)
 8008ba2:	f7ff bc69 	b.w	8008478 <__retarget_lock_release_recursive>
 8008ba6:	bf00      	nop
 8008ba8:	240003c5 	.word	0x240003c5

08008bac <__sinit_lock_acquire>:
 8008bac:	4801      	ldr	r0, [pc, #4]	; (8008bb4 <__sinit_lock_acquire+0x8>)
 8008bae:	f7ff bc62 	b.w	8008476 <__retarget_lock_acquire_recursive>
 8008bb2:	bf00      	nop
 8008bb4:	240003c6 	.word	0x240003c6

08008bb8 <__sinit_lock_release>:
 8008bb8:	4801      	ldr	r0, [pc, #4]	; (8008bc0 <__sinit_lock_release+0x8>)
 8008bba:	f7ff bc5d 	b.w	8008478 <__retarget_lock_release_recursive>
 8008bbe:	bf00      	nop
 8008bc0:	240003c6 	.word	0x240003c6

08008bc4 <__sinit>:
 8008bc4:	b510      	push	{r4, lr}
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	f7ff fff0 	bl	8008bac <__sinit_lock_acquire>
 8008bcc:	69a3      	ldr	r3, [r4, #24]
 8008bce:	b11b      	cbz	r3, 8008bd8 <__sinit+0x14>
 8008bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bd4:	f7ff bff0 	b.w	8008bb8 <__sinit_lock_release>
 8008bd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008bdc:	6523      	str	r3, [r4, #80]	; 0x50
 8008bde:	4b13      	ldr	r3, [pc, #76]	; (8008c2c <__sinit+0x68>)
 8008be0:	4a13      	ldr	r2, [pc, #76]	; (8008c30 <__sinit+0x6c>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008be6:	42a3      	cmp	r3, r4
 8008be8:	bf04      	itt	eq
 8008bea:	2301      	moveq	r3, #1
 8008bec:	61a3      	streq	r3, [r4, #24]
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f000 f820 	bl	8008c34 <__sfp>
 8008bf4:	6060      	str	r0, [r4, #4]
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f000 f81c 	bl	8008c34 <__sfp>
 8008bfc:	60a0      	str	r0, [r4, #8]
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f000 f818 	bl	8008c34 <__sfp>
 8008c04:	2200      	movs	r2, #0
 8008c06:	60e0      	str	r0, [r4, #12]
 8008c08:	2104      	movs	r1, #4
 8008c0a:	6860      	ldr	r0, [r4, #4]
 8008c0c:	f7ff ff82 	bl	8008b14 <std>
 8008c10:	68a0      	ldr	r0, [r4, #8]
 8008c12:	2201      	movs	r2, #1
 8008c14:	2109      	movs	r1, #9
 8008c16:	f7ff ff7d 	bl	8008b14 <std>
 8008c1a:	68e0      	ldr	r0, [r4, #12]
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	2112      	movs	r1, #18
 8008c20:	f7ff ff78 	bl	8008b14 <std>
 8008c24:	2301      	movs	r3, #1
 8008c26:	61a3      	str	r3, [r4, #24]
 8008c28:	e7d2      	b.n	8008bd0 <__sinit+0xc>
 8008c2a:	bf00      	nop
 8008c2c:	0800940c 	.word	0x0800940c
 8008c30:	08008b5d 	.word	0x08008b5d

08008c34 <__sfp>:
 8008c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c36:	4607      	mov	r7, r0
 8008c38:	f7ff ffac 	bl	8008b94 <__sfp_lock_acquire>
 8008c3c:	4b1e      	ldr	r3, [pc, #120]	; (8008cb8 <__sfp+0x84>)
 8008c3e:	681e      	ldr	r6, [r3, #0]
 8008c40:	69b3      	ldr	r3, [r6, #24]
 8008c42:	b913      	cbnz	r3, 8008c4a <__sfp+0x16>
 8008c44:	4630      	mov	r0, r6
 8008c46:	f7ff ffbd 	bl	8008bc4 <__sinit>
 8008c4a:	3648      	adds	r6, #72	; 0x48
 8008c4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c50:	3b01      	subs	r3, #1
 8008c52:	d503      	bpl.n	8008c5c <__sfp+0x28>
 8008c54:	6833      	ldr	r3, [r6, #0]
 8008c56:	b30b      	cbz	r3, 8008c9c <__sfp+0x68>
 8008c58:	6836      	ldr	r6, [r6, #0]
 8008c5a:	e7f7      	b.n	8008c4c <__sfp+0x18>
 8008c5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c60:	b9d5      	cbnz	r5, 8008c98 <__sfp+0x64>
 8008c62:	4b16      	ldr	r3, [pc, #88]	; (8008cbc <__sfp+0x88>)
 8008c64:	60e3      	str	r3, [r4, #12]
 8008c66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c6a:	6665      	str	r5, [r4, #100]	; 0x64
 8008c6c:	f7ff fc02 	bl	8008474 <__retarget_lock_init_recursive>
 8008c70:	f7ff ff96 	bl	8008ba0 <__sfp_lock_release>
 8008c74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c7c:	6025      	str	r5, [r4, #0]
 8008c7e:	61a5      	str	r5, [r4, #24]
 8008c80:	2208      	movs	r2, #8
 8008c82:	4629      	mov	r1, r5
 8008c84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c88:	f7fd fb5a 	bl	8006340 <memset>
 8008c8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c94:	4620      	mov	r0, r4
 8008c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c98:	3468      	adds	r4, #104	; 0x68
 8008c9a:	e7d9      	b.n	8008c50 <__sfp+0x1c>
 8008c9c:	2104      	movs	r1, #4
 8008c9e:	4638      	mov	r0, r7
 8008ca0:	f7ff ff62 	bl	8008b68 <__sfmoreglue>
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	6030      	str	r0, [r6, #0]
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	d1d5      	bne.n	8008c58 <__sfp+0x24>
 8008cac:	f7ff ff78 	bl	8008ba0 <__sfp_lock_release>
 8008cb0:	230c      	movs	r3, #12
 8008cb2:	603b      	str	r3, [r7, #0]
 8008cb4:	e7ee      	b.n	8008c94 <__sfp+0x60>
 8008cb6:	bf00      	nop
 8008cb8:	0800940c 	.word	0x0800940c
 8008cbc:	ffff0001 	.word	0xffff0001

08008cc0 <_fwalk_reent>:
 8008cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cc4:	4606      	mov	r6, r0
 8008cc6:	4688      	mov	r8, r1
 8008cc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ccc:	2700      	movs	r7, #0
 8008cce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cd2:	f1b9 0901 	subs.w	r9, r9, #1
 8008cd6:	d505      	bpl.n	8008ce4 <_fwalk_reent+0x24>
 8008cd8:	6824      	ldr	r4, [r4, #0]
 8008cda:	2c00      	cmp	r4, #0
 8008cdc:	d1f7      	bne.n	8008cce <_fwalk_reent+0xe>
 8008cde:	4638      	mov	r0, r7
 8008ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ce4:	89ab      	ldrh	r3, [r5, #12]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d907      	bls.n	8008cfa <_fwalk_reent+0x3a>
 8008cea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	d003      	beq.n	8008cfa <_fwalk_reent+0x3a>
 8008cf2:	4629      	mov	r1, r5
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	47c0      	blx	r8
 8008cf8:	4307      	orrs	r7, r0
 8008cfa:	3568      	adds	r5, #104	; 0x68
 8008cfc:	e7e9      	b.n	8008cd2 <_fwalk_reent+0x12>

08008cfe <__swhatbuf_r>:
 8008cfe:	b570      	push	{r4, r5, r6, lr}
 8008d00:	460e      	mov	r6, r1
 8008d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d06:	2900      	cmp	r1, #0
 8008d08:	b096      	sub	sp, #88	; 0x58
 8008d0a:	4614      	mov	r4, r2
 8008d0c:	461d      	mov	r5, r3
 8008d0e:	da08      	bge.n	8008d22 <__swhatbuf_r+0x24>
 8008d10:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008d14:	2200      	movs	r2, #0
 8008d16:	602a      	str	r2, [r5, #0]
 8008d18:	061a      	lsls	r2, r3, #24
 8008d1a:	d410      	bmi.n	8008d3e <__swhatbuf_r+0x40>
 8008d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d20:	e00e      	b.n	8008d40 <__swhatbuf_r+0x42>
 8008d22:	466a      	mov	r2, sp
 8008d24:	f000 f902 	bl	8008f2c <_fstat_r>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	dbf1      	blt.n	8008d10 <__swhatbuf_r+0x12>
 8008d2c:	9a01      	ldr	r2, [sp, #4]
 8008d2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d36:	425a      	negs	r2, r3
 8008d38:	415a      	adcs	r2, r3
 8008d3a:	602a      	str	r2, [r5, #0]
 8008d3c:	e7ee      	b.n	8008d1c <__swhatbuf_r+0x1e>
 8008d3e:	2340      	movs	r3, #64	; 0x40
 8008d40:	2000      	movs	r0, #0
 8008d42:	6023      	str	r3, [r4, #0]
 8008d44:	b016      	add	sp, #88	; 0x58
 8008d46:	bd70      	pop	{r4, r5, r6, pc}

08008d48 <__smakebuf_r>:
 8008d48:	898b      	ldrh	r3, [r1, #12]
 8008d4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d4c:	079d      	lsls	r5, r3, #30
 8008d4e:	4606      	mov	r6, r0
 8008d50:	460c      	mov	r4, r1
 8008d52:	d507      	bpl.n	8008d64 <__smakebuf_r+0x1c>
 8008d54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d58:	6023      	str	r3, [r4, #0]
 8008d5a:	6123      	str	r3, [r4, #16]
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	6163      	str	r3, [r4, #20]
 8008d60:	b002      	add	sp, #8
 8008d62:	bd70      	pop	{r4, r5, r6, pc}
 8008d64:	ab01      	add	r3, sp, #4
 8008d66:	466a      	mov	r2, sp
 8008d68:	f7ff ffc9 	bl	8008cfe <__swhatbuf_r>
 8008d6c:	9900      	ldr	r1, [sp, #0]
 8008d6e:	4605      	mov	r5, r0
 8008d70:	4630      	mov	r0, r6
 8008d72:	f7fd fb59 	bl	8006428 <_malloc_r>
 8008d76:	b948      	cbnz	r0, 8008d8c <__smakebuf_r+0x44>
 8008d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d7c:	059a      	lsls	r2, r3, #22
 8008d7e:	d4ef      	bmi.n	8008d60 <__smakebuf_r+0x18>
 8008d80:	f023 0303 	bic.w	r3, r3, #3
 8008d84:	f043 0302 	orr.w	r3, r3, #2
 8008d88:	81a3      	strh	r3, [r4, #12]
 8008d8a:	e7e3      	b.n	8008d54 <__smakebuf_r+0xc>
 8008d8c:	4b0d      	ldr	r3, [pc, #52]	; (8008dc4 <__smakebuf_r+0x7c>)
 8008d8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	6020      	str	r0, [r4, #0]
 8008d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d98:	81a3      	strh	r3, [r4, #12]
 8008d9a:	9b00      	ldr	r3, [sp, #0]
 8008d9c:	6163      	str	r3, [r4, #20]
 8008d9e:	9b01      	ldr	r3, [sp, #4]
 8008da0:	6120      	str	r0, [r4, #16]
 8008da2:	b15b      	cbz	r3, 8008dbc <__smakebuf_r+0x74>
 8008da4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008da8:	4630      	mov	r0, r6
 8008daa:	f000 f8d1 	bl	8008f50 <_isatty_r>
 8008dae:	b128      	cbz	r0, 8008dbc <__smakebuf_r+0x74>
 8008db0:	89a3      	ldrh	r3, [r4, #12]
 8008db2:	f023 0303 	bic.w	r3, r3, #3
 8008db6:	f043 0301 	orr.w	r3, r3, #1
 8008dba:	81a3      	strh	r3, [r4, #12]
 8008dbc:	89a0      	ldrh	r0, [r4, #12]
 8008dbe:	4305      	orrs	r5, r0
 8008dc0:	81a5      	strh	r5, [r4, #12]
 8008dc2:	e7cd      	b.n	8008d60 <__smakebuf_r+0x18>
 8008dc4:	08008b5d 	.word	0x08008b5d

08008dc8 <_malloc_usable_size_r>:
 8008dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dcc:	1f18      	subs	r0, r3, #4
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	bfbc      	itt	lt
 8008dd2:	580b      	ldrlt	r3, [r1, r0]
 8008dd4:	18c0      	addlt	r0, r0, r3
 8008dd6:	4770      	bx	lr

08008dd8 <_raise_r>:
 8008dd8:	291f      	cmp	r1, #31
 8008dda:	b538      	push	{r3, r4, r5, lr}
 8008ddc:	4604      	mov	r4, r0
 8008dde:	460d      	mov	r5, r1
 8008de0:	d904      	bls.n	8008dec <_raise_r+0x14>
 8008de2:	2316      	movs	r3, #22
 8008de4:	6003      	str	r3, [r0, #0]
 8008de6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dea:	bd38      	pop	{r3, r4, r5, pc}
 8008dec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008dee:	b112      	cbz	r2, 8008df6 <_raise_r+0x1e>
 8008df0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008df4:	b94b      	cbnz	r3, 8008e0a <_raise_r+0x32>
 8008df6:	4620      	mov	r0, r4
 8008df8:	f000 f830 	bl	8008e5c <_getpid_r>
 8008dfc:	462a      	mov	r2, r5
 8008dfe:	4601      	mov	r1, r0
 8008e00:	4620      	mov	r0, r4
 8008e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e06:	f000 b817 	b.w	8008e38 <_kill_r>
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d00a      	beq.n	8008e24 <_raise_r+0x4c>
 8008e0e:	1c59      	adds	r1, r3, #1
 8008e10:	d103      	bne.n	8008e1a <_raise_r+0x42>
 8008e12:	2316      	movs	r3, #22
 8008e14:	6003      	str	r3, [r0, #0]
 8008e16:	2001      	movs	r0, #1
 8008e18:	e7e7      	b.n	8008dea <_raise_r+0x12>
 8008e1a:	2400      	movs	r4, #0
 8008e1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e20:	4628      	mov	r0, r5
 8008e22:	4798      	blx	r3
 8008e24:	2000      	movs	r0, #0
 8008e26:	e7e0      	b.n	8008dea <_raise_r+0x12>

08008e28 <raise>:
 8008e28:	4b02      	ldr	r3, [pc, #8]	; (8008e34 <raise+0xc>)
 8008e2a:	4601      	mov	r1, r0
 8008e2c:	6818      	ldr	r0, [r3, #0]
 8008e2e:	f7ff bfd3 	b.w	8008dd8 <_raise_r>
 8008e32:	bf00      	nop
 8008e34:	24000020 	.word	0x24000020

08008e38 <_kill_r>:
 8008e38:	b538      	push	{r3, r4, r5, lr}
 8008e3a:	4d07      	ldr	r5, [pc, #28]	; (8008e58 <_kill_r+0x20>)
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	4604      	mov	r4, r0
 8008e40:	4608      	mov	r0, r1
 8008e42:	4611      	mov	r1, r2
 8008e44:	602b      	str	r3, [r5, #0]
 8008e46:	f7f9 f887 	bl	8001f58 <_kill>
 8008e4a:	1c43      	adds	r3, r0, #1
 8008e4c:	d102      	bne.n	8008e54 <_kill_r+0x1c>
 8008e4e:	682b      	ldr	r3, [r5, #0]
 8008e50:	b103      	cbz	r3, 8008e54 <_kill_r+0x1c>
 8008e52:	6023      	str	r3, [r4, #0]
 8008e54:	bd38      	pop	{r3, r4, r5, pc}
 8008e56:	bf00      	nop
 8008e58:	240003c0 	.word	0x240003c0

08008e5c <_getpid_r>:
 8008e5c:	f7f9 b874 	b.w	8001f48 <_getpid>

08008e60 <__sread>:
 8008e60:	b510      	push	{r4, lr}
 8008e62:	460c      	mov	r4, r1
 8008e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e68:	f000 f894 	bl	8008f94 <_read_r>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	bfab      	itete	ge
 8008e70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e72:	89a3      	ldrhlt	r3, [r4, #12]
 8008e74:	181b      	addge	r3, r3, r0
 8008e76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e7a:	bfac      	ite	ge
 8008e7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e7e:	81a3      	strhlt	r3, [r4, #12]
 8008e80:	bd10      	pop	{r4, pc}

08008e82 <__swrite>:
 8008e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e86:	461f      	mov	r7, r3
 8008e88:	898b      	ldrh	r3, [r1, #12]
 8008e8a:	05db      	lsls	r3, r3, #23
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	460c      	mov	r4, r1
 8008e90:	4616      	mov	r6, r2
 8008e92:	d505      	bpl.n	8008ea0 <__swrite+0x1e>
 8008e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e98:	2302      	movs	r3, #2
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f000 f868 	bl	8008f70 <_lseek_r>
 8008ea0:	89a3      	ldrh	r3, [r4, #12]
 8008ea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ea6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008eaa:	81a3      	strh	r3, [r4, #12]
 8008eac:	4632      	mov	r2, r6
 8008eae:	463b      	mov	r3, r7
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb6:	f000 b817 	b.w	8008ee8 <_write_r>

08008eba <__sseek>:
 8008eba:	b510      	push	{r4, lr}
 8008ebc:	460c      	mov	r4, r1
 8008ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec2:	f000 f855 	bl	8008f70 <_lseek_r>
 8008ec6:	1c43      	adds	r3, r0, #1
 8008ec8:	89a3      	ldrh	r3, [r4, #12]
 8008eca:	bf15      	itete	ne
 8008ecc:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ece:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ed2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ed6:	81a3      	strheq	r3, [r4, #12]
 8008ed8:	bf18      	it	ne
 8008eda:	81a3      	strhne	r3, [r4, #12]
 8008edc:	bd10      	pop	{r4, pc}

08008ede <__sclose>:
 8008ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee2:	f000 b813 	b.w	8008f0c <_close_r>
	...

08008ee8 <_write_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4d07      	ldr	r5, [pc, #28]	; (8008f08 <_write_r+0x20>)
 8008eec:	4604      	mov	r4, r0
 8008eee:	4608      	mov	r0, r1
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	602a      	str	r2, [r5, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	f7f9 f865 	bl	8001fc6 <_write>
 8008efc:	1c43      	adds	r3, r0, #1
 8008efe:	d102      	bne.n	8008f06 <_write_r+0x1e>
 8008f00:	682b      	ldr	r3, [r5, #0]
 8008f02:	b103      	cbz	r3, 8008f06 <_write_r+0x1e>
 8008f04:	6023      	str	r3, [r4, #0]
 8008f06:	bd38      	pop	{r3, r4, r5, pc}
 8008f08:	240003c0 	.word	0x240003c0

08008f0c <_close_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	4d06      	ldr	r5, [pc, #24]	; (8008f28 <_close_r+0x1c>)
 8008f10:	2300      	movs	r3, #0
 8008f12:	4604      	mov	r4, r0
 8008f14:	4608      	mov	r0, r1
 8008f16:	602b      	str	r3, [r5, #0]
 8008f18:	f7f9 f871 	bl	8001ffe <_close>
 8008f1c:	1c43      	adds	r3, r0, #1
 8008f1e:	d102      	bne.n	8008f26 <_close_r+0x1a>
 8008f20:	682b      	ldr	r3, [r5, #0]
 8008f22:	b103      	cbz	r3, 8008f26 <_close_r+0x1a>
 8008f24:	6023      	str	r3, [r4, #0]
 8008f26:	bd38      	pop	{r3, r4, r5, pc}
 8008f28:	240003c0 	.word	0x240003c0

08008f2c <_fstat_r>:
 8008f2c:	b538      	push	{r3, r4, r5, lr}
 8008f2e:	4d07      	ldr	r5, [pc, #28]	; (8008f4c <_fstat_r+0x20>)
 8008f30:	2300      	movs	r3, #0
 8008f32:	4604      	mov	r4, r0
 8008f34:	4608      	mov	r0, r1
 8008f36:	4611      	mov	r1, r2
 8008f38:	602b      	str	r3, [r5, #0]
 8008f3a:	f7f9 f86c 	bl	8002016 <_fstat>
 8008f3e:	1c43      	adds	r3, r0, #1
 8008f40:	d102      	bne.n	8008f48 <_fstat_r+0x1c>
 8008f42:	682b      	ldr	r3, [r5, #0]
 8008f44:	b103      	cbz	r3, 8008f48 <_fstat_r+0x1c>
 8008f46:	6023      	str	r3, [r4, #0]
 8008f48:	bd38      	pop	{r3, r4, r5, pc}
 8008f4a:	bf00      	nop
 8008f4c:	240003c0 	.word	0x240003c0

08008f50 <_isatty_r>:
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	4d06      	ldr	r5, [pc, #24]	; (8008f6c <_isatty_r+0x1c>)
 8008f54:	2300      	movs	r3, #0
 8008f56:	4604      	mov	r4, r0
 8008f58:	4608      	mov	r0, r1
 8008f5a:	602b      	str	r3, [r5, #0]
 8008f5c:	f7f9 f86b 	bl	8002036 <_isatty>
 8008f60:	1c43      	adds	r3, r0, #1
 8008f62:	d102      	bne.n	8008f6a <_isatty_r+0x1a>
 8008f64:	682b      	ldr	r3, [r5, #0]
 8008f66:	b103      	cbz	r3, 8008f6a <_isatty_r+0x1a>
 8008f68:	6023      	str	r3, [r4, #0]
 8008f6a:	bd38      	pop	{r3, r4, r5, pc}
 8008f6c:	240003c0 	.word	0x240003c0

08008f70 <_lseek_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	4d07      	ldr	r5, [pc, #28]	; (8008f90 <_lseek_r+0x20>)
 8008f74:	4604      	mov	r4, r0
 8008f76:	4608      	mov	r0, r1
 8008f78:	4611      	mov	r1, r2
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	602a      	str	r2, [r5, #0]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	f7f9 f864 	bl	800204c <_lseek>
 8008f84:	1c43      	adds	r3, r0, #1
 8008f86:	d102      	bne.n	8008f8e <_lseek_r+0x1e>
 8008f88:	682b      	ldr	r3, [r5, #0]
 8008f8a:	b103      	cbz	r3, 8008f8e <_lseek_r+0x1e>
 8008f8c:	6023      	str	r3, [r4, #0]
 8008f8e:	bd38      	pop	{r3, r4, r5, pc}
 8008f90:	240003c0 	.word	0x240003c0

08008f94 <_read_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	4d07      	ldr	r5, [pc, #28]	; (8008fb4 <_read_r+0x20>)
 8008f98:	4604      	mov	r4, r0
 8008f9a:	4608      	mov	r0, r1
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	602a      	str	r2, [r5, #0]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	f7f8 fff2 	bl	8001f8c <_read>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d102      	bne.n	8008fb2 <_read_r+0x1e>
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	b103      	cbz	r3, 8008fb2 <_read_r+0x1e>
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	bd38      	pop	{r3, r4, r5, pc}
 8008fb4:	240003c0 	.word	0x240003c0

08008fb8 <_init>:
 8008fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fba:	bf00      	nop
 8008fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fbe:	bc08      	pop	{r3}
 8008fc0:	469e      	mov	lr, r3
 8008fc2:	4770      	bx	lr

08008fc4 <_fini>:
 8008fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc6:	bf00      	nop
 8008fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fca:	bc08      	pop	{r3}
 8008fcc:	469e      	mov	lr, r3
 8008fce:	4770      	bx	lr
